
lab7_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007984  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007b88  08007b88  00008b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd4  08007fd4  000091e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fd4  08007fd4  00008fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fdc  08007fdc  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fdc  08007fdc  00008fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fe0  08007fe0  00008fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08007fe4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200001e0  080081c4  000091e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  080081c4  00009930  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014272  00000000  00000000  0000920e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc7  00000000  00000000  0001d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00020248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db7  00000000  00000000  00021408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fa5  00000000  00000000  000221bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157f2  00000000  00000000  0004c164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffc31  00000000  00000000  00061956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000594c  00000000  00000000  001615cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00166f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08007b6c 	.word	0x08007b6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08007b6c 	.word	0x08007b6c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	@ 0x30
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b68      	ldr	r3, [pc, #416]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a67      	ldr	r2, [pc, #412]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b65      	ldr	r3, [pc, #404]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b62      	ldr	r3, [pc, #392]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a61      	ldr	r2, [pc, #388]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b5f      	ldr	r3, [pc, #380]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b5c      	ldr	r3, [pc, #368]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a5b      	ldr	r2, [pc, #364]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b59      	ldr	r3, [pc, #356]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b56      	ldr	r3, [pc, #344]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a55      	ldr	r2, [pc, #340]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b53      	ldr	r3, [pc, #332]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b50      	ldr	r3, [pc, #320]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a4f      	ldr	r2, [pc, #316]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b4d      	ldr	r3, [pc, #308]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	4b4a      	ldr	r3, [pc, #296]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a49      	ldr	r2, [pc, #292]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b47      	ldr	r3, [pc, #284]	@ (80007d4 <MX_GPIO_Init+0x1b8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006c8:	4843      	ldr	r0, [pc, #268]	@ (80007d8 <MX_GPIO_Init+0x1bc>)
 80006ca:	f001 f959 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2140      	movs	r1, #64	@ 0x40
 80006d2:	4842      	ldr	r0, [pc, #264]	@ (80007dc <MX_GPIO_Init+0x1c0>)
 80006d4:	f001 f954 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	483c      	ldr	r0, [pc, #240]	@ (80007e0 <MX_GPIO_Init+0x1c4>)
 80006f0:	f000 ff9a 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006f4:	2332      	movs	r3, #50	@ 0x32
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000704:	230b      	movs	r3, #11
 8000706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4834      	ldr	r0, [pc, #208]	@ (80007e0 <MX_GPIO_Init+0x1c4>)
 8000710:	f000 ff8a 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000714:	2382      	movs	r3, #130	@ 0x82
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000724:	230b      	movs	r3, #11
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	482d      	ldr	r0, [pc, #180]	@ (80007e4 <MX_GPIO_Init+0x1c8>)
 8000730:	f000 ff7a 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000734:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4822      	ldr	r0, [pc, #136]	@ (80007d8 <MX_GPIO_Init+0x1bc>)
 800074e:	f000 ff6b 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000752:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000764:	230b      	movs	r3, #11
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	481a      	ldr	r0, [pc, #104]	@ (80007d8 <MX_GPIO_Init+0x1bc>)
 8000770:	f000 ff5a 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000774:	2340      	movs	r3, #64	@ 0x40
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4814      	ldr	r0, [pc, #80]	@ (80007dc <MX_GPIO_Init+0x1c0>)
 800078c:	f000 ff4c 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000790:	2380      	movs	r3, #128	@ 0x80
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	480e      	ldr	r0, [pc, #56]	@ (80007dc <MX_GPIO_Init+0x1c0>)
 80007a4:	f000 ff40 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007a8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ba:	230b      	movs	r3, #11
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_GPIO_Init+0x1c0>)
 80007c6:	f000 ff2f 	bl	8001628 <HAL_GPIO_Init>

}
 80007ca:	bf00      	nop
 80007cc:	3730      	adds	r7, #48	@ 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40021800 	.word	0x40021800
 80007e0:	40020800 	.word	0x40020800
 80007e4:	40020000 	.word	0x40020000

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80007ee:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f000 fdb3 	bl	800135a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f9ae 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f7ff ff10 	bl	800061c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007fc:	f000 fc4c 	bl	8001098 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000800:	f000 fcda 	bl	80011b8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000804:	f000 fb48 	bl	8000e98 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000808:	2108      	movs	r1, #8
 800080a:	48c3      	ldr	r0, [pc, #780]	@ (8000b18 <main+0x330>)
 800080c:	f002 fc2e 	bl	800306c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000810:	2100      	movs	r1, #0
 8000812:	48c1      	ldr	r0, [pc, #772]	@ (8000b18 <main+0x330>)
 8000814:	f002 fc2a 	bl	800306c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000818:	210c      	movs	r1, #12
 800081a:	48bf      	ldr	r0, [pc, #764]	@ (8000b18 <main+0x330>)
 800081c:	f002 fc26 	bl	800306c <HAL_TIM_PWM_Start>

  pwm_R = 0 ;
 8000820:	4bbe      	ldr	r3, [pc, #760]	@ (8000b1c <main+0x334>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
  pwm_G = 2 ;
 8000826:	4bbe      	ldr	r3, [pc, #760]	@ (8000b20 <main+0x338>)
 8000828:	2202      	movs	r2, #2
 800082a:	701a      	strb	r2, [r3, #0]
  pwm_B = 4 ;
 800082c:	4bbd      	ldr	r3, [pc, #756]	@ (8000b24 <main+0x33c>)
 800082e:	2204      	movs	r2, #4
 8000830:	701a      	strb	r2, [r3, #0]

  char buf[500] ;

//  HAL_UART_Transmit(&huart3,"Start!!\r\n", 9, 100);
  sprintf(buf,"Duty Cycle : RED-(%.2f)%% | GREEN-(%.2f)%% | BLUE-(%.2f)%%", duty_cycle_r*100, duty_cycle_g*100, duty_cycle_b*100);
 8000832:	4bbd      	ldr	r3, [pc, #756]	@ (8000b28 <main+0x340>)
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8000b2c <main+0x344>
 800083c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000840:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000844:	4bba      	ldr	r3, [pc, #744]	@ (8000b30 <main+0x348>)
 8000846:	edd3 7a00 	vldr	s15, [r3]
 800084a:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8000b2c <main+0x344>
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	4bb7      	ldr	r3, [pc, #732]	@ (8000b34 <main+0x34c>)
 8000858:	edd3 6a00 	vldr	s13, [r3]
 800085c:	ed9f 6ab3 	vldr	s12, [pc, #716]	@ 8000b2c <main+0x344>
 8000860:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000864:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000868:	1d38      	adds	r0, r7, #4
 800086a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800086e:	ed8d 7b00 	vstr	d7, [sp]
 8000872:	ec53 2b15 	vmov	r2, r3, d5
 8000876:	49b0      	ldr	r1, [pc, #704]	@ (8000b38 <main+0x350>)
 8000878:	f005 f8b6 	bl	80059e8 <siprintf>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  htim2.Instance -> CCR3 = (10000-1) * duty_cycle_r;
 800087c:	4baa      	ldr	r3, [pc, #680]	@ (8000b28 <main+0x340>)
 800087e:	edd3 7a00 	vldr	s15, [r3]
 8000882:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8000b3c <main+0x354>
 8000886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088a:	4ba3      	ldr	r3, [pc, #652]	@ (8000b18 <main+0x330>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000892:	ee17 2a90 	vmov	r2, s15
 8000896:	63da      	str	r2, [r3, #60]	@ 0x3c
	  htim2.Instance -> CCR1 = (10000-1) * duty_cycle_g;
 8000898:	4ba5      	ldr	r3, [pc, #660]	@ (8000b30 <main+0x348>)
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8000b3c <main+0x354>
 80008a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008a6:	4b9c      	ldr	r3, [pc, #624]	@ (8000b18 <main+0x330>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ae:	ee17 2a90 	vmov	r2, s15
 80008b2:	635a      	str	r2, [r3, #52]	@ 0x34
	  htim2.Instance -> CCR4 = (10000-1) * duty_cycle_b;
 80008b4:	4b9f      	ldr	r3, [pc, #636]	@ (8000b34 <main+0x34c>)
 80008b6:	edd3 7a00 	vldr	s15, [r3]
 80008ba:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8000b3c <main+0x354>
 80008be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008c2:	4b95      	ldr	r3, [pc, #596]	@ (8000b18 <main+0x330>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ca:	ee17 2a90 	vmov	r2, s15
 80008ce:	641a      	str	r2, [r3, #64]	@ 0x40
//	  HAL_UART_Transmit(&huart3, "\r", 1, 100);


//	  HAL_UART_Receive(&huart3, (uint8_t*)&input , 1 , 100);
	  char input ;
	  if (HAL_UART_Receive(&huart3, (uint8_t*)&input , 1 , 100) == HAL_OK){
 80008d0:	1cf9      	adds	r1, r7, #3
 80008d2:	2364      	movs	r3, #100	@ 0x64
 80008d4:	2201      	movs	r2, #1
 80008d6:	489a      	ldr	r0, [pc, #616]	@ (8000b40 <main+0x358>)
 80008d8:	f003 fbbd 	bl	8004056 <HAL_UART_Receive>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f040 80ed 	bne.w	8000abe <main+0x2d6>
		  if (input == 'r'){
 80008e4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80008e8:	f2a3 13f5 	subw	r3, r3, #501	@ 0x1f5
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b72      	cmp	r3, #114	@ 0x72
 80008f0:	d142      	bne.n	8000978 <main+0x190>
			  if (duty_cycle_r == 1.0){
 80008f2:	4b8d      	ldr	r3, [pc, #564]	@ (8000b28 <main+0x340>)
 80008f4:	edd3 7a00 	vldr	s15, [r3]
 80008f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80008fc:	eef4 7a47 	vcmp.f32	s15, s14
 8000900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000904:	d104      	bne.n	8000910 <main+0x128>
				  duty_cycle_r = 0;
 8000906:	4b88      	ldr	r3, [pc, #544]	@ (8000b28 <main+0x340>)
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e00d      	b.n	800092c <main+0x144>
			  }else{
				  duty_cycle_r += 0.2;
 8000910:	4b85      	ldr	r3, [pc, #532]	@ (8000b28 <main+0x340>)
 8000912:	edd3 7a00 	vldr	s15, [r3]
 8000916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800091a:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8000b10 <main+0x328>
 800091e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000922:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000926:	4b80      	ldr	r3, [pc, #512]	@ (8000b28 <main+0x340>)
 8000928:	edc3 7a00 	vstr	s15, [r3]
			  }
			  sprintf(buf,"Duty Cycle : RED-(%.2f)%% | GREEN-(%.2f)%% | BLUE-(%.2f)%% \r", duty_cycle_r*100, duty_cycle_g*100, duty_cycle_b*100);
 800092c:	4b7e      	ldr	r3, [pc, #504]	@ (8000b28 <main+0x340>)
 800092e:	edd3 7a00 	vldr	s15, [r3]
 8000932:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8000b2c <main+0x344>
 8000936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800093a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800093e:	4b7c      	ldr	r3, [pc, #496]	@ (8000b30 <main+0x348>)
 8000940:	edd3 7a00 	vldr	s15, [r3]
 8000944:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8000b2c <main+0x344>
 8000948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000950:	4b78      	ldr	r3, [pc, #480]	@ (8000b34 <main+0x34c>)
 8000952:	edd3 6a00 	vldr	s13, [r3]
 8000956:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 8000b2c <main+0x344>
 800095a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800095e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000962:	1d38      	adds	r0, r7, #4
 8000964:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000968:	ed8d 7b00 	vstr	d7, [sp]
 800096c:	ec53 2b15 	vmov	r2, r3, d5
 8000970:	4974      	ldr	r1, [pc, #464]	@ (8000b44 <main+0x35c>)
 8000972:	f005 f839 	bl	80059e8 <siprintf>
 8000976:	e092      	b.n	8000a9e <main+0x2b6>
		  }
		  else if (input == 'g'){
 8000978:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800097c:	f2a3 13f5 	subw	r3, r3, #501	@ 0x1f5
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b67      	cmp	r3, #103	@ 0x67
 8000984:	d142      	bne.n	8000a0c <main+0x224>
			  if (duty_cycle_g == 1.0){
 8000986:	4b6a      	ldr	r3, [pc, #424]	@ (8000b30 <main+0x348>)
 8000988:	edd3 7a00 	vldr	s15, [r3]
 800098c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000990:	eef4 7a47 	vcmp.f32	s15, s14
 8000994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000998:	d104      	bne.n	80009a4 <main+0x1bc>
				  duty_cycle_g = 0;
 800099a:	4b65      	ldr	r3, [pc, #404]	@ (8000b30 <main+0x348>)
 800099c:	f04f 0200 	mov.w	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	e00d      	b.n	80009c0 <main+0x1d8>
			  }else{
				  duty_cycle_g += 0.2;
 80009a4:	4b62      	ldr	r3, [pc, #392]	@ (8000b30 <main+0x348>)
 80009a6:	edd3 7a00 	vldr	s15, [r3]
 80009aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ae:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8000b10 <main+0x328>
 80009b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000b30 <main+0x348>)
 80009bc:	edc3 7a00 	vstr	s15, [r3]
			  }
			  sprintf(buf,"Duty Cycle : RED-(%.2f)%% | GREEN-(%.2f)%% | BLUE-(%.2f)%% \r", duty_cycle_r*100, duty_cycle_g*100, duty_cycle_b*100);
 80009c0:	4b59      	ldr	r3, [pc, #356]	@ (8000b28 <main+0x340>)
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8000b2c <main+0x344>
 80009ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ce:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80009d2:	4b57      	ldr	r3, [pc, #348]	@ (8000b30 <main+0x348>)
 80009d4:	edd3 7a00 	vldr	s15, [r3]
 80009d8:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8000b2c <main+0x344>
 80009dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e4:	4b53      	ldr	r3, [pc, #332]	@ (8000b34 <main+0x34c>)
 80009e6:	edd3 6a00 	vldr	s13, [r3]
 80009ea:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 8000b2c <main+0x344>
 80009ee:	ee66 6a86 	vmul.f32	s13, s13, s12
 80009f2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80009f6:	1d38      	adds	r0, r7, #4
 80009f8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80009fc:	ed8d 7b00 	vstr	d7, [sp]
 8000a00:	ec53 2b15 	vmov	r2, r3, d5
 8000a04:	494f      	ldr	r1, [pc, #316]	@ (8000b44 <main+0x35c>)
 8000a06:	f004 ffef 	bl	80059e8 <siprintf>
 8000a0a:	e048      	b.n	8000a9e <main+0x2b6>
		  }
		  else if (input == 'b'){
 8000a0c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000a10:	f2a3 13f5 	subw	r3, r3, #501	@ 0x1f5
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b62      	cmp	r3, #98	@ 0x62
 8000a18:	d141      	bne.n	8000a9e <main+0x2b6>
			  if (duty_cycle_b == 1.0){
 8000a1a:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <main+0x34c>)
 8000a1c:	edd3 7a00 	vldr	s15, [r3]
 8000a20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a24:	eef4 7a47 	vcmp.f32	s15, s14
 8000a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a2c:	d104      	bne.n	8000a38 <main+0x250>
				  duty_cycle_b = 0;
 8000a2e:	4b41      	ldr	r3, [pc, #260]	@ (8000b34 <main+0x34c>)
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e00d      	b.n	8000a54 <main+0x26c>
			  }else{
				  duty_cycle_b += 0.2;
 8000a38:	4b3e      	ldr	r3, [pc, #248]	@ (8000b34 <main+0x34c>)
 8000a3a:	edd3 7a00 	vldr	s15, [r3]
 8000a3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a42:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8000b10 <main+0x328>
 8000a46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a4e:	4b39      	ldr	r3, [pc, #228]	@ (8000b34 <main+0x34c>)
 8000a50:	edc3 7a00 	vstr	s15, [r3]
			  }
			  sprintf(buf,"Duty Cycle : RED-(%.2f)%% | GREEN-(%.2f)%% | BLUE-(%.2f)%% \r", duty_cycle_r*100, duty_cycle_g*100, duty_cycle_b*100);
 8000a54:	4b34      	ldr	r3, [pc, #208]	@ (8000b28 <main+0x340>)
 8000a56:	edd3 7a00 	vldr	s15, [r3]
 8000a5a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000b2c <main+0x344>
 8000a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a62:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a66:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <main+0x348>)
 8000a68:	edd3 7a00 	vldr	s15, [r3]
 8000a6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000b2c <main+0x344>
 8000a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a78:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <main+0x34c>)
 8000a7a:	edd3 6a00 	vldr	s13, [r3]
 8000a7e:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8000b2c <main+0x344>
 8000a82:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000a86:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a8a:	1d38      	adds	r0, r7, #4
 8000a8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a90:	ed8d 7b00 	vstr	d7, [sp]
 8000a94:	ec53 2b15 	vmov	r2, r3, d5
 8000a98:	492a      	ldr	r1, [pc, #168]	@ (8000b44 <main+0x35c>)
 8000a9a:	f004 ffa5 	bl	80059e8 <siprintf>
		  }
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 100);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fc1d 	bl	80002e0 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	1d39      	adds	r1, r7, #4
 8000aac:	2364      	movs	r3, #100	@ 0x64
 8000aae:	4824      	ldr	r0, [pc, #144]	@ (8000b40 <main+0x358>)
 8000ab0:	f003 fa4e 	bl	8003f50 <HAL_UART_Transmit>
		  sprintf(buf, "                                                                \r");
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4924      	ldr	r1, [pc, #144]	@ (8000b48 <main+0x360>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 ff95 	bl	80059e8 <siprintf>
	  }
//	  HAL_Delay(100);
	  input = '0';
 8000abe:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000ac2:	f2a3 13f5 	subw	r3, r3, #501	@ 0x1f5
 8000ac6:	2230      	movs	r2, #48	@ 0x30
 8000ac8:	701a      	strb	r2, [r3, #0]

	  pwm_R = (GPIOB->IDR & GPIO_PIN_10) >>10 ;
 8000aca:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <main+0x364>)
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	0a9b      	lsrs	r3, r3, #10
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <main+0x334>)
 8000ada:	701a      	strb	r2, [r3, #0]
	  pwm_G = ((GPIOA->IDR & GPIO_PIN_5) >>5 )+2 ;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <main+0x368>)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	095b      	lsrs	r3, r3, #5
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	3302      	adds	r3, #2
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <main+0x338>)
 8000af0:	701a      	strb	r2, [r3, #0]
	  pwm_B = ((GPIOB->IDR & GPIO_PIN_11) >>11) +4 ;
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <main+0x364>)
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	0adb      	lsrs	r3, r3, #11
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	3304      	adds	r3, #4
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <main+0x33c>)
 8000b06:	701a      	strb	r2, [r3, #0]
  {
 8000b08:	e6b8      	b.n	800087c <main+0x94>
 8000b0a:	bf00      	nop
 8000b0c:	f3af 8000 	nop.w
 8000b10:	9999999a 	.word	0x9999999a
 8000b14:	3fc99999 	.word	0x3fc99999
 8000b18:	20000204 	.word	0x20000204
 8000b1c:	200001fc 	.word	0x200001fc
 8000b20:	200001fd 	.word	0x200001fd
 8000b24:	200001fe 	.word	0x200001fe
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	42c80000 	.word	0x42c80000
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000008 	.word	0x20000008
 8000b38:	08007b88 	.word	0x08007b88
 8000b3c:	461c3c00 	.word	0x461c3c00
 8000b40:	20000250 	.word	0x20000250
 8000b44:	08007bc4 	.word	0x08007bc4
 8000b48:	08007c04 	.word	0x08007c04
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020000 	.word	0x40020000

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2234      	movs	r2, #52	@ 0x34
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 ffa5 	bl	8005ab2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b78:	f001 f864 	bl	8001c44 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <SystemClock_Config+0xd8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a2a      	ldr	r2, [pc, #168]	@ (8000c2c <SystemClock_Config+0xd8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b28      	ldr	r3, [pc, #160]	@ (8000c2c <SystemClock_Config+0xd8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <SystemClock_Config+0xdc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a25      	ldr	r2, [pc, #148]	@ (8000c30 <SystemClock_Config+0xdc>)
 8000b9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <SystemClock_Config+0xdc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bc4:	23d8      	movs	r3, #216	@ 0xd8
 8000bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000bcc:	2309      	movs	r3, #9
 8000bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 f893 	bl	8001d04 <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000be4:	f000 f826 	bl	8000c34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000be8:	f001 f83c 	bl	8001c64 <HAL_PWREx_EnableOverDrive>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bf2:	f000 f81f 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c02:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2107      	movs	r1, #7
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fb23 	bl	8002260 <HAL_RCC_ClockConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c20:	f000 f808 	bl	8000c34 <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3750      	adds	r7, #80	@ 0x50
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <Error_Handler+0x8>

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <HAL_MspInit+0x44>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <HAL_MspInit+0x44>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <HAL_MspInit+0x44>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <HAL_MspInit+0x44>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_MspInit+0x44>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f000 fb79 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  return 1;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_kill>:

int _kill(int pid, int sig)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d00:	f004 ff2a 	bl	8005b58 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2216      	movs	r2, #22
 8000d08:	601a      	str	r2, [r3, #0]
  return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_exit>:

void _exit (int status)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d1e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffe7 	bl	8000cf6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <_exit+0x12>

08000d2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e00a      	b.n	8000d54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3e:	f3af 8000 	nop.w
 8000d42:	4601      	mov	r1, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf0      	blt.n	8000d3e <_read+0x12>
  }

  return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e009      	b.n	8000d8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf1      	blt.n	8000d78 <_write+0x12>
  }
  return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_close>:

int _close(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_isatty>:

int _isatty(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a14      	ldr	r2, [pc, #80]	@ (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	@ (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e38:	f004 fe8e 	bl	8005b58 <__errno>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	220c      	movs	r2, #12
 8000e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20080000 	.word	0x20080000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	20000200 	.word	0x20000200
 8000e70:	20000930 	.word	0x20000930

08000e74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	@ 0x38
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eca:	4b39      	ldr	r3, [pc, #228]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000ecc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000ed2:	4b37      	ldr	r3, [pc, #220]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000ed4:	226b      	movs	r2, #107	@ 0x6b
 8000ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b35      	ldr	r3, [pc, #212]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000ede:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000ee0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef2:	482f      	ldr	r0, [pc, #188]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000ef4:	f002 f802 	bl	8002efc <HAL_TIM_Base_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000efe:	f7ff fe99 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4828      	ldr	r0, [pc, #160]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000f10:	f002 faba 	bl	8003488 <HAL_TIM_ConfigClockSource>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f1a:	f7ff fe8b 	bl	8000c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f1e:	4824      	ldr	r0, [pc, #144]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000f20:	f002 f843 	bl	8002faa <HAL_TIM_PWM_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f2a:	f7ff fe83 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000f3e:	f002 ff2b 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f48:	f7ff fe74 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4c:	2360      	movs	r3, #96	@ 0x60
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000f50:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8000f54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	4619      	mov	r1, r3
 8000f64:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000f66:	f002 f97b 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000f70:	f7ff fe60 	bl	8000c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	2208      	movs	r2, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000f7c:	f002 f970 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000f86:	f7ff fe55 	bl	8000c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000f92:	f002 f965 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000f9c:	f7ff fe4a 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <MX_TIM2_Init+0x118>)
 8000fa2:	f000 f825 	bl	8000ff0 <HAL_TIM_MspPostInit>

}
 8000fa6:	bf00      	nop
 8000fa8:	3738      	adds	r7, #56	@ 0x38
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000204 	.word	0x20000204

08000fb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc4:	d10b      	bne.n	8000fde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_TIM_Base_MspInit+0x38>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_TIM_Base_MspInit+0x38>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_TIM_Base_MspInit+0x38>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001010:	d138      	bne.n	8001084 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <HAL_TIM_MspPostInit+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <HAL_TIM_MspPostInit+0x9c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_TIM_MspPostInit+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <HAL_TIM_MspPostInit+0x9c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a17      	ldr	r2, [pc, #92]	@ (800108c <HAL_TIM_MspPostInit+0x9c>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_TIM_MspPostInit+0x9c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001042:	2320      	movs	r3, #32
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001052:	2301      	movs	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <HAL_TIM_MspPostInit+0xa0>)
 800105e:	f000 fae3 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001062:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001074:	2301      	movs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <HAL_TIM_MspPostInit+0xa4>)
 8001080:	f000 fad2 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	@ 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400

08001098 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <MX_USART3_UART_Init+0x5c>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_USART3_UART_Init+0x58>)
 80010dc:	f002 feea 	bl	8003eb4 <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010e6:	f7ff fda5 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000250 	.word	0x20000250
 80010f4:	40004800 	.word	0x40004800

080010f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0ae      	sub	sp, #184	@ 0xb8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2290      	movs	r2, #144	@ 0x90
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f004 fcca 	bl	8005ab2 <memset>
  if(uartHandle->Instance==USART3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a22      	ldr	r2, [pc, #136]	@ (80011ac <HAL_UART_MspInit+0xb4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d13c      	bne.n	80011a2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800112e:	2300      	movs	r3, #0
 8001130:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fab8 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001142:	f7ff fd77 	bl	8000c34 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <HAL_UART_MspInit+0xb8>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_UART_MspInit+0xb8>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <HAL_UART_MspInit+0xb8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <HAL_UART_MspInit+0xb8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <HAL_UART_MspInit+0xb8>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_UART_MspInit+0xb8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001176:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800117a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001196:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <HAL_UART_MspInit+0xbc>)
 800119e:	f000 fa43 	bl	8001628 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	37b8      	adds	r7, #184	@ 0xb8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40004800 	.word	0x40004800
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020c00 	.word	0x40020c00

080011b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c6:	2206      	movs	r2, #6
 80011c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d8:	2202      	movs	r2, #2
 80011da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011de:	2201      	movs	r2, #1
 80011e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fc:	f000 fbd9 	bl	80019b2 <HAL_PCD_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001206:	f7ff fd15 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200002d8 	.word	0x200002d8

08001214 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ae      	sub	sp, #184	@ 0xb8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2290      	movs	r2, #144	@ 0x90
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f004 fc3c 	bl	8005ab2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	d159      	bne.n	80012f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001244:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001248:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f001 fa29 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001260:	f7ff fce8 	bl	8000c34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800127c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001296:	230a      	movs	r3, #10
 8001298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4818      	ldr	r0, [pc, #96]	@ (8001304 <HAL_PCD_MspInit+0xf0>)
 80012a4:	f000 f9c0 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4810      	ldr	r0, [pc, #64]	@ (8001304 <HAL_PCD_MspInit+0xf0>)
 80012c4:	f000 f9b0 	bl	8001628 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012f8:	bf00      	nop
 80012fa:	37b8      	adds	r7, #184	@ 0xb8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	@ (8001344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	@ (8001348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	@ (8001354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001332:	f7ff fd9f 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f004 fc15 	bl	8005b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fa55 	bl	80007e8 <main>
  bx  lr    
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800134c:	08007fe4 	.word	0x08007fe4
  ldr r2, =_sbss
 8001350:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001354:	20000930 	.word	0x20000930

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>

0800135a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135e:	2003      	movs	r0, #3
 8001360:	f000 f92e 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f805 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136a:	f7ff fc69 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f93b 	bl	800160e <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b0:	f000 f911 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	@ (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000000c 	.word	0x2000000c
 80013cc:	20000014 	.word	0x20000014
 80013d0:	20000010 	.word	0x20000010

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000014 	.word	0x20000014
 80013f8:	200007e0 	.word	0x200007e0

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200007e0 	.word	0x200007e0

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000014 	.word	0x20000014

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <__NVIC_SetPriorityGrouping+0x40>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	4313      	orrs	r3, r2
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	@ (800149c <__NVIC_SetPriorityGrouping+0x40>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00
 80014a0:	05fa0000 	.word	0x05fa0000

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	@ (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	@ (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	@ 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff47 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff5c 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffb0 	bl	800157c <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e175      	b.n	8001934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	f040 8164 	bne.w	800192e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d005      	beq.n	800167e <HAL_GPIO_Init+0x56>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d130      	bne.n	80016e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 0201 	and.w	r2, r3, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d017      	beq.n	800171c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d123      	bne.n	8001770 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	69b9      	ldr	r1, [r7, #24]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80be 	beq.w	800192e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b66      	ldr	r3, [pc, #408]	@ (800194c <HAL_GPIO_Init+0x324>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a65      	ldr	r2, [pc, #404]	@ (800194c <HAL_GPIO_Init+0x324>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b63      	ldr	r3, [pc, #396]	@ (800194c <HAL_GPIO_Init+0x324>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ca:	4a61      	ldr	r2, [pc, #388]	@ (8001950 <HAL_GPIO_Init+0x328>)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a58      	ldr	r2, [pc, #352]	@ (8001954 <HAL_GPIO_Init+0x32c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d037      	beq.n	8001866 <HAL_GPIO_Init+0x23e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a57      	ldr	r2, [pc, #348]	@ (8001958 <HAL_GPIO_Init+0x330>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d031      	beq.n	8001862 <HAL_GPIO_Init+0x23a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a56      	ldr	r2, [pc, #344]	@ (800195c <HAL_GPIO_Init+0x334>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d02b      	beq.n	800185e <HAL_GPIO_Init+0x236>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a55      	ldr	r2, [pc, #340]	@ (8001960 <HAL_GPIO_Init+0x338>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d025      	beq.n	800185a <HAL_GPIO_Init+0x232>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a54      	ldr	r2, [pc, #336]	@ (8001964 <HAL_GPIO_Init+0x33c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01f      	beq.n	8001856 <HAL_GPIO_Init+0x22e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a53      	ldr	r2, [pc, #332]	@ (8001968 <HAL_GPIO_Init+0x340>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d019      	beq.n	8001852 <HAL_GPIO_Init+0x22a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a52      	ldr	r2, [pc, #328]	@ (800196c <HAL_GPIO_Init+0x344>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x226>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a51      	ldr	r2, [pc, #324]	@ (8001970 <HAL_GPIO_Init+0x348>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x222>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a50      	ldr	r2, [pc, #320]	@ (8001974 <HAL_GPIO_Init+0x34c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x21e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4f      	ldr	r2, [pc, #316]	@ (8001978 <HAL_GPIO_Init+0x350>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x21a>
 800183e:	2309      	movs	r3, #9
 8001840:	e012      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001842:	230a      	movs	r3, #10
 8001844:	e010      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001846:	2308      	movs	r3, #8
 8001848:	e00e      	b.n	8001868 <HAL_GPIO_Init+0x240>
 800184a:	2307      	movs	r3, #7
 800184c:	e00c      	b.n	8001868 <HAL_GPIO_Init+0x240>
 800184e:	2306      	movs	r3, #6
 8001850:	e00a      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001852:	2305      	movs	r3, #5
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001856:	2304      	movs	r3, #4
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x240>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x240>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001866:	2300      	movs	r3, #0
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	@ (8001950 <HAL_GPIO_Init+0x328>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b3d      	ldr	r3, [pc, #244]	@ (800197c <HAL_GPIO_Init+0x354>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a34      	ldr	r2, [pc, #208]	@ (800197c <HAL_GPIO_Init+0x354>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b32      	ldr	r3, [pc, #200]	@ (800197c <HAL_GPIO_Init+0x354>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a29      	ldr	r2, [pc, #164]	@ (800197c <HAL_GPIO_Init+0x354>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018da:	4b28      	ldr	r3, [pc, #160]	@ (800197c <HAL_GPIO_Init+0x354>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fe:	4a1f      	ldr	r2, [pc, #124]	@ (800197c <HAL_GPIO_Init+0x354>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <HAL_GPIO_Init+0x354>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001928:	4a14      	ldr	r2, [pc, #80]	@ (800197c <HAL_GPIO_Init+0x354>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	f67f ae86 	bls.w	8001648 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	@ 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40021400 	.word	0x40021400
 800196c:	40021800 	.word	0x40021800
 8001970:	40021c00 	.word	0x40021c00
 8001974:	40022000 	.word	0x40022000
 8001978:	40022400 	.word	0x40022400
 800197c:	40013c00 	.word	0x40013c00

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800199c:	e003      	b.n	80019a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	041a      	lsls	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	619a      	str	r2, [r3, #24]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b4:	b08f      	sub	sp, #60	@ 0x3c
 80019b6:	af0a      	add	r7, sp, #40	@ 0x28
 80019b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e116      	b.n	8001bf2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fc18 	bl	8001214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2203      	movs	r2, #3
 80019e8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 f85e 	bl	8004ac4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	687e      	ldr	r6, [r7, #4]
 8001a10:	466d      	mov	r5, sp
 8001a12:	f106 0410 	add.w	r4, r6, #16
 8001a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a22:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a26:	1d33      	adds	r3, r6, #4
 8001a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a2a:	6838      	ldr	r0, [r7, #0]
 8001a2c:	f002 fff2 	bl	8004a14 <USB_CoreInit>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0d7      	b.n	8001bf2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 f84c 	bl	8004ae6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e04a      	b.n	8001aea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	333d      	adds	r3, #61	@ 0x3d
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	333c      	adds	r3, #60	@ 0x3c
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	b298      	uxth	r0, r3
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3344      	adds	r3, #68	@ 0x44
 8001a90:	4602      	mov	r2, r0
 8001a92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3340      	adds	r3, #64	@ 0x40
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3348      	adds	r3, #72	@ 0x48
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	334c      	adds	r3, #76	@ 0x4c
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	3354      	adds	r3, #84	@ 0x54
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3af      	bcc.n	8001a54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e044      	b.n	8001b84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	3301      	adds	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d3b5      	bcc.n	8001afa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	687e      	ldr	r6, [r7, #4]
 8001b96:	466d      	mov	r5, sp
 8001b98:	f106 0410 	add.w	r4, r6, #16
 8001b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ba8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bac:	1d33      	adds	r3, r6, #4
 8001bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f002 ffe5 	bl	8004b80 <USB_DevInit>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e014      	b.n	8001bf2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d102      	bne.n	8001be6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f80b 	bl	8001bfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 f9a3 	bl	8004f36 <USB_DevDisconnect>

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_PCDEx_ActivateLPM+0x44>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	10000003 	.word	0x10000003

08001c44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000

08001c64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	4a22      	ldr	r2, [pc, #136]	@ (8001cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c92:	f7ff fbb3 	bl	80013fc <HAL_GetTick>
 8001c96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c98:	e009      	b.n	8001cae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c9a:	f7ff fbaf 	bl	80013fc <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ca8:	d901      	bls.n	8001cae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e022      	b.n	8001cf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cba:	d1ee      	bne.n	8001c9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cbc:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc8:	f7ff fb98 	bl	80013fc <HAL_GetTick>
 8001ccc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cce:	e009      	b.n	8001ce4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cd0:	f7ff fb94 	bl	80013fc <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cde:	d901      	bls.n	8001ce4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e007      	b.n	8001cf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001cf0:	d1ee      	bne.n	8001cd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e29b      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8087 	beq.w	8001e36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d28:	4b96      	ldr	r3, [pc, #600]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d00c      	beq.n	8001d4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d34:	4b93      	ldr	r3, [pc, #588]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d112      	bne.n	8001d66 <HAL_RCC_OscConfig+0x62>
 8001d40:	4b90      	ldr	r3, [pc, #576]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d4c:	d10b      	bne.n	8001d66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d06c      	beq.n	8001e34 <HAL_RCC_OscConfig+0x130>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d168      	bne.n	8001e34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e275      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x7a>
 8001d70:	4b84      	ldr	r3, [pc, #528]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a83      	ldr	r2, [pc, #524]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e02e      	b.n	8001ddc <HAL_RCC_OscConfig+0xd8>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x9c>
 8001d86:	4b7f      	ldr	r3, [pc, #508]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b7c      	ldr	r3, [pc, #496]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7b      	ldr	r2, [pc, #492]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001d98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0xd8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xc0>
 8001daa:	4b76      	ldr	r3, [pc, #472]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a75      	ldr	r2, [pc, #468]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a72      	ldr	r2, [pc, #456]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xd8>
 8001dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb0a 	bl	80013fc <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fb06 	bl	80013fc <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e229      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b61      	ldr	r3, [pc, #388]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xe8>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff faf6 	bl	80013fc <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff faf2 	bl	80013fc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e215      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	4b57      	ldr	r3, [pc, #348]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x110>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d069      	beq.n	8001f16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e42:	4b50      	ldr	r3, [pc, #320]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d11c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x190>
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x17a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e1e9      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	493d      	ldr	r1, [pc, #244]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	e040      	b.n	8001f16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d023      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9c:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a38      	ldr	r2, [pc, #224]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff faa8 	bl	80013fc <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7ff faa4 	bl	80013fc <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1c7      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec2:	4b30      	ldr	r3, [pc, #192]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4929      	ldr	r1, [pc, #164]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
 8001ee2:	e018      	b.n	8001f16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a26      	ldr	r2, [pc, #152]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fa84 	bl	80013fc <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fa80 	bl	80013fc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1a3      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d038      	beq.n	8001f94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d019      	beq.n	8001f5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2e:	4a15      	ldr	r2, [pc, #84]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff fa61 	bl	80013fc <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fa5d 	bl	80013fc <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e180      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x23a>
 8001f5c:	e01a      	b.n	8001f94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f62:	4a08      	ldr	r2, [pc, #32]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fa47 	bl	80013fc <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff fa43 	bl	80013fc <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d903      	bls.n	8001f88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e166      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
 8001f84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	4b92      	ldr	r3, [pc, #584]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8001f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ee      	bne.n	8001f72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a4 	beq.w	80020ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10d      	bne.n	8001fca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b89      	ldr	r3, [pc, #548]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	4a88      	ldr	r2, [pc, #544]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fba:	4b86      	ldr	r3, [pc, #536]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fca:	4b83      	ldr	r3, [pc, #524]	@ (80021d8 <HAL_RCC_OscConfig+0x4d4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d118      	bne.n	8002008 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fd6:	4b80      	ldr	r3, [pc, #512]	@ (80021d8 <HAL_RCC_OscConfig+0x4d4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7f      	ldr	r2, [pc, #508]	@ (80021d8 <HAL_RCC_OscConfig+0x4d4>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fa0b 	bl	80013fc <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fea:	f7ff fa07 	bl	80013fc <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b64      	cmp	r3, #100	@ 0x64
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e12a      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffc:	4b76      	ldr	r3, [pc, #472]	@ (80021d8 <HAL_RCC_OscConfig+0x4d4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x31a>
 8002010:	4b70      	ldr	r3, [pc, #448]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002014:	4a6f      	ldr	r2, [pc, #444]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6713      	str	r3, [r2, #112]	@ 0x70
 800201c:	e02d      	b.n	800207a <HAL_RCC_OscConfig+0x376>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x33c>
 8002026:	4b6b      	ldr	r3, [pc, #428]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202a:	4a6a      	ldr	r2, [pc, #424]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6713      	str	r3, [r2, #112]	@ 0x70
 8002032:	4b68      	ldr	r3, [pc, #416]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002036:	4a67      	ldr	r2, [pc, #412]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6713      	str	r3, [r2, #112]	@ 0x70
 800203e:	e01c      	b.n	800207a <HAL_RCC_OscConfig+0x376>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d10c      	bne.n	8002062 <HAL_RCC_OscConfig+0x35e>
 8002048:	4b62      	ldr	r3, [pc, #392]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204c:	4a61      	ldr	r2, [pc, #388]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6713      	str	r3, [r2, #112]	@ 0x70
 8002054:	4b5f      	ldr	r3, [pc, #380]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002058:	4a5e      	ldr	r2, [pc, #376]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x376>
 8002062:	4b5c      	ldr	r3, [pc, #368]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	4a5b      	ldr	r2, [pc, #364]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	@ 0x70
 800206e:	4b59      	ldr	r3, [pc, #356]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	4a58      	ldr	r2, [pc, #352]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d015      	beq.n	80020ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7ff f9bb 	bl	80013fc <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7ff f9b7 	bl	80013fc <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0d8      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ee      	beq.n	800208a <HAL_RCC_OscConfig+0x386>
 80020ac:	e014      	b.n	80020d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7ff f9a5 	bl	80013fc <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7ff f9a1 	bl	80013fc <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0c2      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020cc:	4b41      	ldr	r3, [pc, #260]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ee      	bne.n	80020b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a3c      	ldr	r2, [pc, #240]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80ae 	beq.w	8002250 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f4:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d06d      	beq.n	80021dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d14b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b32      	ldr	r3, [pc, #200]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a31      	ldr	r2, [pc, #196]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 800210e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f972 	bl	80013fc <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f96e 	bl	80013fc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e091      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	019b      	lsls	r3, r3, #6
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	3b01      	subs	r3, #1
 8002154:	041b      	lsls	r3, r3, #16
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	061b      	lsls	r3, r3, #24
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	071b      	lsls	r3, r3, #28
 8002166:	491b      	ldr	r1, [pc, #108]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a18      	ldr	r2, [pc, #96]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff f940 	bl	80013fc <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff f93c 	bl	80013fc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e05f      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x47c>
 800219e:	e057      	b.n	8002250 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0b      	ldr	r2, [pc, #44]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff f926 	bl	80013fc <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff f922 	bl	80013fc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e045      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	4b03      	ldr	r3, [pc, #12]	@ (80021d4 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4b0>
 80021d2:	e03d      	b.n	8002250 <HAL_RCC_OscConfig+0x54c>
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021dc:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <HAL_RCC_OscConfig+0x558>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d030      	beq.n	800224c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d129      	bne.n	800224c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d122      	bne.n	800224c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002212:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002214:	4293      	cmp	r3, r2
 8002216:	d119      	bne.n	800224c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d10f      	bne.n	800224c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002236:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d107      	bne.n	800224c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0d0      	b.n	800241a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b6a      	ldr	r3, [pc, #424]	@ (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d910      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b67      	ldr	r3, [pc, #412]	@ (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 020f 	bic.w	r2, r3, #15
 800228e:	4965      	ldr	r1, [pc, #404]	@ (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b63      	ldr	r3, [pc, #396]	@ (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0b8      	b.n	800241a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c0:	4b59      	ldr	r3, [pc, #356]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80022c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d8:	4b53      	ldr	r3, [pc, #332]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a52      	ldr	r2, [pc, #328]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80022de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e4:	4b50      	ldr	r3, [pc, #320]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	494d      	ldr	r1, [pc, #308]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d040      	beq.n	8002384 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d115      	bne.n	8002342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07f      	b.n	800241a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e073      	b.n	800241a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	4b3d      	ldr	r3, [pc, #244]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06b      	b.n	800241a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002342:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4936      	ldr	r1, [pc, #216]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002354:	f7ff f852 	bl	80013fc <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7ff f84e 	bl	80013fc <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e053      	b.n	800241a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	4b2d      	ldr	r3, [pc, #180]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 020c 	and.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	429a      	cmp	r2, r3
 8002382:	d1eb      	bne.n	800235c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002384:	4b27      	ldr	r3, [pc, #156]	@ (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d210      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b24      	ldr	r3, [pc, #144]	@ (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 020f 	bic.w	r2, r3, #15
 800239a:	4922      	ldr	r1, [pc, #136]	@ (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e032      	b.n	800241a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c0:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4916      	ldr	r1, [pc, #88]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	490e      	ldr	r1, [pc, #56]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f2:	f000 f821 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	490a      	ldr	r1, [pc, #40]	@ (800242c <HAL_RCC_ClockConfig+0x1cc>)
 8002404:	5ccb      	ldrb	r3, [r1, r3]
 8002406:	fa22 f303 	lsr.w	r3, r2, r3
 800240a:	4a09      	ldr	r2, [pc, #36]	@ (8002430 <HAL_RCC_ClockConfig+0x1d0>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_ClockConfig+0x1d4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe ffae 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023c00 	.word	0x40023c00
 8002428:	40023800 	.word	0x40023800
 800242c:	08007c48 	.word	0x08007c48
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000010 	.word	0x20000010

08002438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800243c:	b094      	sub	sp, #80	@ 0x50
 800243e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	647b      	str	r3, [r7, #68]	@ 0x44
 8002444:	2300      	movs	r3, #0
 8002446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002448:	2300      	movs	r3, #0
 800244a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002450:	4b79      	ldr	r3, [pc, #484]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x200>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d00d      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x40>
 800245c:	2b08      	cmp	r3, #8
 800245e:	f200 80e1 	bhi.w	8002624 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x34>
 8002466:	2b04      	cmp	r3, #4
 8002468:	d003      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x3a>
 800246a:	e0db      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b73      	ldr	r3, [pc, #460]	@ (800263c <HAL_RCC_GetSysClockFreq+0x204>)
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002470:	e0db      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002472:	4b73      	ldr	r3, [pc, #460]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x208>)
 8002474:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002476:	e0d8      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002478:	4b6f      	ldr	r3, [pc, #444]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x200>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002480:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002482:	4b6d      	ldr	r3, [pc, #436]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x200>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248e:	4b6a      	ldr	r3, [pc, #424]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x200>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	2200      	movs	r2, #0
 8002496:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002498:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024a2:	2300      	movs	r3, #0
 80024a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024aa:	4622      	mov	r2, r4
 80024ac:	462b      	mov	r3, r5
 80024ae:	f04f 0000 	mov.w	r0, #0
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	0159      	lsls	r1, r3, #5
 80024b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024bc:	0150      	lsls	r0, r2, #5
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4621      	mov	r1, r4
 80024c4:	1a51      	subs	r1, r2, r1
 80024c6:	6139      	str	r1, [r7, #16]
 80024c8:	4629      	mov	r1, r5
 80024ca:	eb63 0301 	sbc.w	r3, r3, r1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024dc:	4659      	mov	r1, fp
 80024de:	018b      	lsls	r3, r1, #6
 80024e0:	4651      	mov	r1, sl
 80024e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024e6:	4651      	mov	r1, sl
 80024e8:	018a      	lsls	r2, r1, #6
 80024ea:	4651      	mov	r1, sl
 80024ec:	ebb2 0801 	subs.w	r8, r2, r1
 80024f0:	4659      	mov	r1, fp
 80024f2:	eb63 0901 	sbc.w	r9, r3, r1
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800250a:	4690      	mov	r8, r2
 800250c:	4699      	mov	r9, r3
 800250e:	4623      	mov	r3, r4
 8002510:	eb18 0303 	adds.w	r3, r8, r3
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	462b      	mov	r3, r5
 8002518:	eb49 0303 	adc.w	r3, r9, r3
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800252a:	4629      	mov	r1, r5
 800252c:	024b      	lsls	r3, r1, #9
 800252e:	4621      	mov	r1, r4
 8002530:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002534:	4621      	mov	r1, r4
 8002536:	024a      	lsls	r2, r1, #9
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800253e:	2200      	movs	r2, #0
 8002540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002544:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002548:	f7fd fed2 	bl	80002f0 <__aeabi_uldivmod>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4613      	mov	r3, r2
 8002552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002554:	e058      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002556:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x200>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	099b      	lsrs	r3, r3, #6
 800255c:	2200      	movs	r2, #0
 800255e:	4618      	mov	r0, r3
 8002560:	4611      	mov	r1, r2
 8002562:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
 800256c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002570:	4642      	mov	r2, r8
 8002572:	464b      	mov	r3, r9
 8002574:	f04f 0000 	mov.w	r0, #0
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	0159      	lsls	r1, r3, #5
 800257e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002582:	0150      	lsls	r0, r2, #5
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4641      	mov	r1, r8
 800258a:	ebb2 0a01 	subs.w	sl, r2, r1
 800258e:	4649      	mov	r1, r9
 8002590:	eb63 0b01 	sbc.w	fp, r3, r1
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025a8:	ebb2 040a 	subs.w	r4, r2, sl
 80025ac:	eb63 050b 	sbc.w	r5, r3, fp
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	00eb      	lsls	r3, r5, #3
 80025ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025be:	00e2      	lsls	r2, r4, #3
 80025c0:	4614      	mov	r4, r2
 80025c2:	461d      	mov	r5, r3
 80025c4:	4643      	mov	r3, r8
 80025c6:	18e3      	adds	r3, r4, r3
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	464b      	mov	r3, r9
 80025cc:	eb45 0303 	adc.w	r3, r5, r3
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025de:	4629      	mov	r1, r5
 80025e0:	028b      	lsls	r3, r1, #10
 80025e2:	4621      	mov	r1, r4
 80025e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025e8:	4621      	mov	r1, r4
 80025ea:	028a      	lsls	r2, r1, #10
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025f2:	2200      	movs	r2, #0
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	61fa      	str	r2, [r7, #28]
 80025f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025fc:	f7fd fe78 	bl	80002f0 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4613      	mov	r3, r2
 8002606:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x200>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	3301      	adds	r3, #1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002618:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800261a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002622:	e002      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_RCC_GetSysClockFreq+0x204>)
 8002626:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800262c:	4618      	mov	r0, r3
 800262e:	3750      	adds	r7, #80	@ 0x50
 8002630:	46bd      	mov	sp, r7
 8002632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	00f42400 	.word	0x00f42400
 8002640:	007a1200 	.word	0x007a1200

08002644 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_RCC_GetHCLKFreq+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	2000000c 	.word	0x2000000c

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002660:	f7ff fff0 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	0a9b      	lsrs	r3, r3, #10
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4903      	ldr	r1, [pc, #12]	@ (8002680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40023800 	.word	0x40023800
 8002680:	08007c58 	.word	0x08007c58

08002684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002688:	f7ff ffdc 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	0b5b      	lsrs	r3, r3, #13
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4903      	ldr	r1, [pc, #12]	@ (80026a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800
 80026a8:	08007c58 	.word	0x08007c58

080026ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026d4:	4b69      	ldr	r3, [pc, #420]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a68      	ldr	r2, [pc, #416]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026de:	6093      	str	r3, [r2, #8]
 80026e0:	4b66      	ldr	r3, [pc, #408]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e8:	4964      	ldr	r1, [pc, #400]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d017      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002706:	4b5d      	ldr	r3, [pc, #372]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800270c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	4959      	ldr	r1, [pc, #356]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d017      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002742:	4b4e      	ldr	r3, [pc, #312]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002748:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	494a      	ldr	r1, [pc, #296]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002760:	d101      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 808b 	beq.w	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	4b3a      	ldr	r3, [pc, #232]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	4a39      	ldr	r2, [pc, #228]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279a:	6413      	str	r3, [r2, #64]	@ 0x40
 800279c:	4b37      	ldr	r3, [pc, #220]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027a8:	4b35      	ldr	r3, [pc, #212]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a34      	ldr	r2, [pc, #208]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7fe fe22 	bl	80013fc <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7fe fe1e 	bl	80013fc <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e38f      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027da:	4b28      	ldr	r3, [pc, #160]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d035      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d02e      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027f8:	4b20      	ldr	r3, [pc, #128]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002800:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002802:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002806:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002812:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002818:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800281a:	4a18      	ldr	r2, [pc, #96]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002820:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d114      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fde6 	bl	80013fc <HAL_GetTick>
 8002830:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe fde2 	bl	80013fc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e351      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284a:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ee      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002862:	d111      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002870:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002872:	400b      	ands	r3, r1
 8002874:	4901      	ldr	r1, [pc, #4]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
 800287a:	e00b      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800287c:	40023800 	.word	0x40023800
 8002880:	40007000 	.word	0x40007000
 8002884:	0ffffcff 	.word	0x0ffffcff
 8002888:	4bac      	ldr	r3, [pc, #688]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4aab      	ldr	r2, [pc, #684]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002892:	6093      	str	r3, [r2, #8]
 8002894:	4ba9      	ldr	r3, [pc, #676]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002896:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	49a6      	ldr	r1, [pc, #664]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028b2:	4ba2      	ldr	r3, [pc, #648]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028b8:	4aa0      	ldr	r2, [pc, #640]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028c2:	4b9e      	ldr	r3, [pc, #632]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	499b      	ldr	r1, [pc, #620]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e0:	4b96      	ldr	r3, [pc, #600]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ee:	4993      	ldr	r1, [pc, #588]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002902:	4b8e      	ldr	r3, [pc, #568]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002908:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002910:	498a      	ldr	r1, [pc, #552]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002924:	4b85      	ldr	r3, [pc, #532]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002932:	4982      	ldr	r1, [pc, #520]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002946:	4b7d      	ldr	r3, [pc, #500]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002954:	4979      	ldr	r1, [pc, #484]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002968:	4b74      	ldr	r3, [pc, #464]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	4971      	ldr	r1, [pc, #452]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800298a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002990:	f023 020c 	bic.w	r2, r3, #12
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002998:	4968      	ldr	r1, [pc, #416]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ac:	4b63      	ldr	r3, [pc, #396]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	4960      	ldr	r1, [pc, #384]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ce:	4b5b      	ldr	r3, [pc, #364]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029dc:	4957      	ldr	r1, [pc, #348]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029f0:	4b52      	ldr	r3, [pc, #328]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fe:	494f      	ldr	r1, [pc, #316]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a12:	4b4a      	ldr	r3, [pc, #296]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	4946      	ldr	r1, [pc, #280]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a34:	4b41      	ldr	r3, [pc, #260]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	493e      	ldr	r1, [pc, #248]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a56:	4b39      	ldr	r3, [pc, #228]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a64:	4935      	ldr	r1, [pc, #212]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a78:	4b30      	ldr	r3, [pc, #192]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a86:	492d      	ldr	r1, [pc, #180]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d011      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a9a:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aa8:	4924      	ldr	r1, [pc, #144]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ada:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae8:	4914      	ldr	r1, [pc, #80]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002afc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b0c:	490b      	ldr	r1, [pc, #44]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00f      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b30:	4902      	ldr	r1, [pc, #8]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b38:	e002      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	4986      	ldr	r1, [pc, #536]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b70:	4b81      	ldr	r3, [pc, #516]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b76:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b80:	497d      	ldr	r1, [pc, #500]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d006      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80d6 	beq.w	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b9c:	4b76      	ldr	r3, [pc, #472]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a75      	ldr	r2, [pc, #468]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fc28 	bl	80013fc <HAL_GetTick>
 8002bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bb0:	f7fe fc24 	bl	80013fc <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	@ 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e195      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d021      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002be2:	4b65      	ldr	r3, [pc, #404]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bf0:	4b61      	ldr	r3, [pc, #388]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bf6:	0e1b      	lsrs	r3, r3, #24
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	019a      	lsls	r2, r3, #6
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	071b      	lsls	r3, r3, #28
 8002c16:	4958      	ldr	r1, [pc, #352]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02e      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c48:	d129      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c58:	4b47      	ldr	r3, [pc, #284]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c5e:	0f1b      	lsrs	r3, r3, #28
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	019a      	lsls	r2, r3, #6
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	071b      	lsls	r3, r3, #28
 8002c7e:	493e      	ldr	r1, [pc, #248]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c86:	4b3c      	ldr	r3, [pc, #240]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c8c:	f023 021f 	bic.w	r2, r3, #31
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	3b01      	subs	r3, #1
 8002c96:	4938      	ldr	r1, [pc, #224]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002caa:	4b33      	ldr	r3, [pc, #204]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb0:	0e1b      	lsrs	r3, r3, #24
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cbe:	0f1b      	lsrs	r3, r3, #28
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	019a      	lsls	r2, r3, #6
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	061b      	lsls	r3, r3, #24
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	071b      	lsls	r3, r3, #28
 8002cde:	4926      	ldr	r1, [pc, #152]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d011      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	019a      	lsls	r2, r3, #6
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	071b      	lsls	r3, r3, #28
 8002d0e:	491a      	ldr	r1, [pc, #104]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d16:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a17      	ldr	r2, [pc, #92]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d22:	f7fe fb6b 	bl	80013fc <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d2a:	f7fe fb67 	bl	80013fc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	@ 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0d8      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	f040 80ce 	bne.w	8002eec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fb4e 	bl	80013fc <HAL_GetTick>
 8002d60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d62:	e00b      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d64:	f7fe fb4a 	bl	80013fc <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	@ 0x64
 8002d70:	d904      	bls.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0bb      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d88:	d0ec      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02e      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d12a      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002db2:	4b51      	ldr	r3, [pc, #324]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	0f1b      	lsrs	r3, r3, #28
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	019a      	lsls	r2, r3, #6
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	4944      	ldr	r1, [pc, #272]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dee:	4b42      	ldr	r3, [pc, #264]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	493d      	ldr	r1, [pc, #244]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d022      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e1c:	d11d      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e1e:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e24:	0e1b      	lsrs	r3, r3, #24
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e2c:	4b32      	ldr	r3, [pc, #200]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	0f1b      	lsrs	r3, r3, #28
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	019a      	lsls	r2, r3, #6
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	071b      	lsls	r3, r3, #28
 8002e52:	4929      	ldr	r1, [pc, #164]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d028      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e66:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e74:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	019a      	lsls	r2, r3, #6
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	071b      	lsls	r3, r3, #28
 8002e9a:	4917      	ldr	r1, [pc, #92]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	4911      	ldr	r1, [pc, #68]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fe fa9a 	bl	80013fc <HAL_GetTick>
 8002ec8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ecc:	f7fe fa96 	bl	80013fc <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e007      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ede:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eea:	d1ef      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800

08002efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e049      	b.n	8002fa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe f846 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 fb6e 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e049      	b.n	8003050 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f841 	bl	8003058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 fb17 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_TIM_PWM_Start+0x24>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e03c      	b.n	800310a <HAL_TIM_PWM_Start+0x9e>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b04      	cmp	r3, #4
 8003094:	d109      	bne.n	80030aa <HAL_TIM_PWM_Start+0x3e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	e02f      	b.n	800310a <HAL_TIM_PWM_Start+0x9e>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d109      	bne.n	80030c4 <HAL_TIM_PWM_Start+0x58>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e022      	b.n	800310a <HAL_TIM_PWM_Start+0x9e>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d109      	bne.n	80030de <HAL_TIM_PWM_Start+0x72>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e015      	b.n	800310a <HAL_TIM_PWM_Start+0x9e>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d109      	bne.n	80030f8 <HAL_TIM_PWM_Start+0x8c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e008      	b.n	800310a <HAL_TIM_PWM_Start+0x9e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e092      	b.n	8003238 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <HAL_TIM_PWM_Start+0xb6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003120:	e023      	b.n	800316a <HAL_TIM_PWM_Start+0xfe>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Start+0xc6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003130:	e01b      	b.n	800316a <HAL_TIM_PWM_Start+0xfe>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d104      	bne.n	8003142 <HAL_TIM_PWM_Start+0xd6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003140:	e013      	b.n	800316a <HAL_TIM_PWM_Start+0xfe>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start+0xe6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003150:	e00b      	b.n	800316a <HAL_TIM_PWM_Start+0xfe>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b10      	cmp	r3, #16
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0xf6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003160:	e003      	b.n	800316a <HAL_TIM_PWM_Start+0xfe>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	6839      	ldr	r1, [r7, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fdea 	bl	8003d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a30      	ldr	r2, [pc, #192]	@ (8003240 <HAL_TIM_PWM_Start+0x1d4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_TIM_PWM_Start+0x120>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2f      	ldr	r2, [pc, #188]	@ (8003244 <HAL_TIM_PWM_Start+0x1d8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_TIM_PWM_Start+0x124>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_TIM_PWM_Start+0x126>
 8003190:	2300      	movs	r3, #0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a25      	ldr	r2, [pc, #148]	@ (8003240 <HAL_TIM_PWM_Start+0x1d4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x18a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b8:	d01d      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x18a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a22      	ldr	r2, [pc, #136]	@ (8003248 <HAL_TIM_PWM_Start+0x1dc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x18a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a20      	ldr	r2, [pc, #128]	@ (800324c <HAL_TIM_PWM_Start+0x1e0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x18a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <HAL_TIM_PWM_Start+0x1e4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x18a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a19      	ldr	r2, [pc, #100]	@ (8003244 <HAL_TIM_PWM_Start+0x1d8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x18a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003254 <HAL_TIM_PWM_Start+0x1e8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x18a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a19      	ldr	r2, [pc, #100]	@ (8003258 <HAL_TIM_PWM_Start+0x1ec>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d115      	bne.n	8003222 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	4b17      	ldr	r3, [pc, #92]	@ (800325c <HAL_TIM_PWM_Start+0x1f0>)
 80031fe:	4013      	ands	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b06      	cmp	r3, #6
 8003206:	d015      	beq.n	8003234 <HAL_TIM_PWM_Start+0x1c8>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320e:	d011      	beq.n	8003234 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	e008      	b.n	8003234 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e000      	b.n	8003236 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40010000 	.word	0x40010000
 8003244:	40010400 	.word	0x40010400
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40014000 	.word	0x40014000
 8003258:	40001800 	.word	0x40001800
 800325c:	00010007 	.word	0x00010007

08003260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800327a:	2302      	movs	r3, #2
 800327c:	e0ff      	b.n	800347e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b14      	cmp	r3, #20
 800328a:	f200 80f0 	bhi.w	800346e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800328e:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032e9 	.word	0x080032e9
 8003298:	0800346f 	.word	0x0800346f
 800329c:	0800346f 	.word	0x0800346f
 80032a0:	0800346f 	.word	0x0800346f
 80032a4:	08003329 	.word	0x08003329
 80032a8:	0800346f 	.word	0x0800346f
 80032ac:	0800346f 	.word	0x0800346f
 80032b0:	0800346f 	.word	0x0800346f
 80032b4:	0800336b 	.word	0x0800336b
 80032b8:	0800346f 	.word	0x0800346f
 80032bc:	0800346f 	.word	0x0800346f
 80032c0:	0800346f 	.word	0x0800346f
 80032c4:	080033ab 	.word	0x080033ab
 80032c8:	0800346f 	.word	0x0800346f
 80032cc:	0800346f 	.word	0x0800346f
 80032d0:	0800346f 	.word	0x0800346f
 80032d4:	080033ed 	.word	0x080033ed
 80032d8:	0800346f 	.word	0x0800346f
 80032dc:	0800346f 	.word	0x0800346f
 80032e0:	0800346f 	.word	0x0800346f
 80032e4:	0800342d 	.word	0x0800342d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa34 	bl	800375c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0208 	orr.w	r2, r2, #8
 8003302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0204 	bic.w	r2, r2, #4
 8003312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	619a      	str	r2, [r3, #24]
      break;
 8003326:	e0a5      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fa86 	bl	8003840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	021a      	lsls	r2, r3, #8
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	619a      	str	r2, [r3, #24]
      break;
 8003368:	e084      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fadd 	bl	8003930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0208 	orr.w	r2, r2, #8
 8003384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0204 	bic.w	r2, r2, #4
 8003394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69d9      	ldr	r1, [r3, #28]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	61da      	str	r2, [r3, #28]
      break;
 80033a8:	e064      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fb33 	bl	8003a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	021a      	lsls	r2, r3, #8
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	61da      	str	r2, [r3, #28]
      break;
 80033ea:	e043      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fb6a 	bl	8003acc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0208 	orr.w	r2, r2, #8
 8003406:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800342a:	e023      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fb9c 	bl	8003b70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	021a      	lsls	r2, r3, #8
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800346c:	e002      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
      break;
 8003472:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800347c:	7dfb      	ldrb	r3, [r7, #23]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop

08003488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0b4      	b.n	800360e <HAL_TIM_ConfigClockSource+0x186>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	4b56      	ldr	r3, [pc, #344]	@ (8003618 <HAL_TIM_ConfigClockSource+0x190>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034dc:	d03e      	beq.n	800355c <HAL_TIM_ConfigClockSource+0xd4>
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e2:	f200 8087 	bhi.w	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ea:	f000 8086 	beq.w	80035fa <HAL_TIM_ConfigClockSource+0x172>
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f2:	d87f      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034f4:	2b70      	cmp	r3, #112	@ 0x70
 80034f6:	d01a      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xa6>
 80034f8:	2b70      	cmp	r3, #112	@ 0x70
 80034fa:	d87b      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b60      	cmp	r3, #96	@ 0x60
 80034fe:	d050      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003500:	2b60      	cmp	r3, #96	@ 0x60
 8003502:	d877      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b50      	cmp	r3, #80	@ 0x50
 8003506:	d03c      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0xfa>
 8003508:	2b50      	cmp	r3, #80	@ 0x50
 800350a:	d873      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b40      	cmp	r3, #64	@ 0x40
 800350e:	d058      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d86f      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b30      	cmp	r3, #48	@ 0x30
 8003516:	d064      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003518:	2b30      	cmp	r3, #48	@ 0x30
 800351a:	d86b      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b20      	cmp	r3, #32
 800351e:	d060      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003520:	2b20      	cmp	r3, #32
 8003522:	d867      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05c      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003528:	2b10      	cmp	r3, #16
 800352a:	d05a      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 800352c:	e062      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	f000 fbe5 	bl	8003d0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
      break;
 800355a:	e04f      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800356c:	f000 fbce 	bl	8003d0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800357e:	609a      	str	r2, [r3, #8]
      break;
 8003580:	e03c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358e:	461a      	mov	r2, r3
 8003590:	f000 fb42 	bl	8003c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2150      	movs	r1, #80	@ 0x50
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fb9b 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 80035a0:	e02c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ae:	461a      	mov	r2, r3
 80035b0:	f000 fb61 	bl	8003c76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2160      	movs	r1, #96	@ 0x60
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fb8b 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 80035c0:	e01c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	461a      	mov	r2, r3
 80035d0:	f000 fb22 	bl	8003c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2140      	movs	r1, #64	@ 0x40
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fb7b 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 80035e0:	e00c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f000 fb72 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 80035f2:	e003      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e000      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	fffeff88 	.word	0xfffeff88

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a40      	ldr	r2, [pc, #256]	@ (8003730 <TIM_Base_SetConfig+0x114>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363a:	d00f      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a3d      	ldr	r2, [pc, #244]	@ (8003734 <TIM_Base_SetConfig+0x118>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3c      	ldr	r2, [pc, #240]	@ (8003738 <TIM_Base_SetConfig+0x11c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a3b      	ldr	r2, [pc, #236]	@ (800373c <TIM_Base_SetConfig+0x120>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a3a      	ldr	r2, [pc, #232]	@ (8003740 <TIM_Base_SetConfig+0x124>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2f      	ldr	r2, [pc, #188]	@ (8003730 <TIM_Base_SetConfig+0x114>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d02b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367c:	d027      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2c      	ldr	r2, [pc, #176]	@ (8003734 <TIM_Base_SetConfig+0x118>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d023      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a2b      	ldr	r2, [pc, #172]	@ (8003738 <TIM_Base_SetConfig+0x11c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a2a      	ldr	r2, [pc, #168]	@ (800373c <TIM_Base_SetConfig+0x120>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a29      	ldr	r2, [pc, #164]	@ (8003740 <TIM_Base_SetConfig+0x124>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d017      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <TIM_Base_SetConfig+0x128>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a27      	ldr	r2, [pc, #156]	@ (8003748 <TIM_Base_SetConfig+0x12c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a26      	ldr	r2, [pc, #152]	@ (800374c <TIM_Base_SetConfig+0x130>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a25      	ldr	r2, [pc, #148]	@ (8003750 <TIM_Base_SetConfig+0x134>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a24      	ldr	r2, [pc, #144]	@ (8003754 <TIM_Base_SetConfig+0x138>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a23      	ldr	r2, [pc, #140]	@ (8003758 <TIM_Base_SetConfig+0x13c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <TIM_Base_SetConfig+0x114>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_Base_SetConfig+0xf8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0c      	ldr	r2, [pc, #48]	@ (8003740 <TIM_Base_SetConfig+0x124>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d103      	bne.n	800371c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	615a      	str	r2, [r3, #20]
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40010400 	.word	0x40010400
 8003744:	40014000 	.word	0x40014000
 8003748:	40014400 	.word	0x40014400
 800374c:	40014800 	.word	0x40014800
 8003750:	40001800 	.word	0x40001800
 8003754:	40001c00 	.word	0x40001c00
 8003758:	40002000 	.word	0x40002000

0800375c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f023 0201 	bic.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4b2b      	ldr	r3, [pc, #172]	@ (8003834 <TIM_OC1_SetConfig+0xd8>)
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0302 	bic.w	r3, r3, #2
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a21      	ldr	r2, [pc, #132]	@ (8003838 <TIM_OC1_SetConfig+0xdc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC1_SetConfig+0x64>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a20      	ldr	r2, [pc, #128]	@ (800383c <TIM_OC1_SetConfig+0xe0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10c      	bne.n	80037da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0308 	bic.w	r3, r3, #8
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a16      	ldr	r2, [pc, #88]	@ (8003838 <TIM_OC1_SetConfig+0xdc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d003      	beq.n	80037ea <TIM_OC1_SetConfig+0x8e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a15      	ldr	r2, [pc, #84]	@ (800383c <TIM_OC1_SetConfig+0xe0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d111      	bne.n	800380e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	fffeff8f 	.word	0xfffeff8f
 8003838:	40010000 	.word	0x40010000
 800383c:	40010400 	.word	0x40010400

08003840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0210 	bic.w	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4b2e      	ldr	r3, [pc, #184]	@ (8003924 <TIM_OC2_SetConfig+0xe4>)
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0320 	bic.w	r3, r3, #32
 800388a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a23      	ldr	r2, [pc, #140]	@ (8003928 <TIM_OC2_SetConfig+0xe8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_OC2_SetConfig+0x68>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a22      	ldr	r2, [pc, #136]	@ (800392c <TIM_OC2_SetConfig+0xec>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d10d      	bne.n	80038c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a18      	ldr	r2, [pc, #96]	@ (8003928 <TIM_OC2_SetConfig+0xe8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_OC2_SetConfig+0x94>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a17      	ldr	r2, [pc, #92]	@ (800392c <TIM_OC2_SetConfig+0xec>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d113      	bne.n	80038fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	feff8fff 	.word	0xfeff8fff
 8003928:	40010000 	.word	0x40010000
 800392c:	40010400 	.word	0x40010400

08003930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a10 <TIM_OC3_SetConfig+0xe0>)
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a22      	ldr	r2, [pc, #136]	@ (8003a14 <TIM_OC3_SetConfig+0xe4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_OC3_SetConfig+0x66>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a21      	ldr	r2, [pc, #132]	@ (8003a18 <TIM_OC3_SetConfig+0xe8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10d      	bne.n	80039b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800399c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a17      	ldr	r2, [pc, #92]	@ (8003a14 <TIM_OC3_SetConfig+0xe4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_OC3_SetConfig+0x92>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a16      	ldr	r2, [pc, #88]	@ (8003a18 <TIM_OC3_SetConfig+0xe8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d113      	bne.n	80039ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	621a      	str	r2, [r3, #32]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	fffeff8f 	.word	0xfffeff8f
 8003a14:	40010000 	.word	0x40010000
 8003a18:	40010400 	.word	0x40010400

08003a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <TIM_OC4_SetConfig+0xa4>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a13      	ldr	r2, [pc, #76]	@ (8003ac4 <TIM_OC4_SetConfig+0xa8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_OC4_SetConfig+0x68>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a12      	ldr	r2, [pc, #72]	@ (8003ac8 <TIM_OC4_SetConfig+0xac>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d109      	bne.n	8003a98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	feff8fff 	.word	0xfeff8fff
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40010400 	.word	0x40010400

08003acc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <TIM_OC5_SetConfig+0x98>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003b0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	041b      	lsls	r3, r3, #16
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a12      	ldr	r2, [pc, #72]	@ (8003b68 <TIM_OC5_SetConfig+0x9c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <TIM_OC5_SetConfig+0x5e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a11      	ldr	r2, [pc, #68]	@ (8003b6c <TIM_OC5_SetConfig+0xa0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d109      	bne.n	8003b3e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	621a      	str	r2, [r3, #32]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	fffeff8f 	.word	0xfffeff8f
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40010400 	.word	0x40010400

08003b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c0c <TIM_OC6_SetConfig+0x9c>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	051b      	lsls	r3, r3, #20
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a13      	ldr	r2, [pc, #76]	@ (8003c10 <TIM_OC6_SetConfig+0xa0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC6_SetConfig+0x60>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a12      	ldr	r2, [pc, #72]	@ (8003c14 <TIM_OC6_SetConfig+0xa4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d109      	bne.n	8003be4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	029b      	lsls	r3, r3, #10
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	feff8fff 	.word	0xfeff8fff
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40010400 	.word	0x40010400

08003c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 030a 	bic.w	r3, r3, #10
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f043 0307 	orr.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2201      	movs	r2, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	401a      	ands	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e06d      	b.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a30      	ldr	r2, [pc, #192]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2f      	ldr	r2, [pc, #188]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d108      	bne.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003dea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a20      	ldr	r2, [pc, #128]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d022      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e22:	d01d      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d018      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00e      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a15      	ldr	r2, [pc, #84]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a16      	ldr	r2, [pc, #88]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10c      	bne.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40010400 	.word	0x40010400
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40000c00 	.word	0x40000c00
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40001800 	.word	0x40001800

08003eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e040      	b.n	8003f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd f90e 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2224      	movs	r2, #36	@ 0x24
 8003ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f974 	bl	80041e0 <UART_SetConfig>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e022      	b.n	8003f48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fbcc 	bl	80046a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fc53 	bl	80047ec <UART_CheckIdleState>
 8003f46:	4603      	mov	r3, r0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	@ 0x28
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d171      	bne.n	800404c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_UART_Transmit+0x24>
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e06a      	b.n	800404e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2221      	movs	r2, #33	@ 0x21
 8003f84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f86:	f7fd fa39 	bl	80013fc <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa4:	d108      	bne.n	8003fb8 <HAL_UART_Transmit+0x68>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e003      	b.n	8003fc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fc0:	e02c      	b.n	800401c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2180      	movs	r1, #128	@ 0x80
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fc5a 	bl	8004886 <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e038      	b.n	800404e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e007      	b.n	800400a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1cc      	bne.n	8003fc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2200      	movs	r2, #0
 8004030:	2140      	movs	r1, #64	@ 0x40
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fc27 	bl	8004886 <UART_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e005      	b.n	800404e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b08a      	sub	sp, #40	@ 0x28
 800405a:	af02      	add	r7, sp, #8
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800406c:	2b20      	cmp	r3, #32
 800406e:	f040 80b1 	bne.w	80041d4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_UART_Receive+0x28>
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0a9      	b.n	80041d6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2222      	movs	r2, #34	@ 0x22
 800408e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004098:	f7fd f9b0 	bl	80013fc <HAL_GetTick>
 800409c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b6:	d10e      	bne.n	80040d6 <HAL_UART_Receive+0x80>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_UART_Receive+0x76>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80040c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040ca:	e02d      	b.n	8004128 <HAL_UART_Receive+0xd2>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	22ff      	movs	r2, #255	@ 0xff
 80040d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040d4:	e028      	b.n	8004128 <HAL_UART_Receive+0xd2>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <HAL_UART_Receive+0xa4>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_UART_Receive+0x9a>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	22ff      	movs	r2, #255	@ 0xff
 80040ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040ee:	e01b      	b.n	8004128 <HAL_UART_Receive+0xd2>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	227f      	movs	r2, #127	@ 0x7f
 80040f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040f8:	e016      	b.n	8004128 <HAL_UART_Receive+0xd2>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004102:	d10d      	bne.n	8004120 <HAL_UART_Receive+0xca>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <HAL_UART_Receive+0xc0>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	227f      	movs	r2, #127	@ 0x7f
 8004110:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004114:	e008      	b.n	8004128 <HAL_UART_Receive+0xd2>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	223f      	movs	r2, #63	@ 0x3f
 800411a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800411e:	e003      	b.n	8004128 <HAL_UART_Receive+0xd2>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800412e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004138:	d108      	bne.n	800414c <HAL_UART_Receive+0xf6>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d104      	bne.n	800414c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	e003      	b.n	8004154 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004154:	e032      	b.n	80041bc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	2120      	movs	r1, #32
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fb90 	bl	8004886 <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e032      	b.n	80041d6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10c      	bne.n	8004190 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	b29a      	uxth	r2, r3
 800417e:	8a7b      	ldrh	r3, [r7, #18]
 8004180:	4013      	ands	r3, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	3302      	adds	r3, #2
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e00c      	b.n	80041aa <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	b2da      	uxtb	r2, r3
 8004198:	8a7b      	ldrh	r3, [r7, #18]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4013      	ands	r3, r2
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3301      	adds	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1c6      	bne.n	8004156 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4ba6      	ldr	r3, [pc, #664]	@ (80044a4 <UART_SetConfig+0x2c4>)
 800420c:	4013      	ands	r3, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	6979      	ldr	r1, [r7, #20]
 8004214:	430b      	orrs	r3, r1
 8004216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a94      	ldr	r2, [pc, #592]	@ (80044a8 <UART_SetConfig+0x2c8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d120      	bne.n	800429e <UART_SetConfig+0xbe>
 800425c:	4b93      	ldr	r3, [pc, #588]	@ (80044ac <UART_SetConfig+0x2cc>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b03      	cmp	r3, #3
 8004268:	d816      	bhi.n	8004298 <UART_SetConfig+0xb8>
 800426a:	a201      	add	r2, pc, #4	@ (adr r2, 8004270 <UART_SetConfig+0x90>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004281 	.word	0x08004281
 8004274:	0800428d 	.word	0x0800428d
 8004278:	08004287 	.word	0x08004287
 800427c:	08004293 	.word	0x08004293
 8004280:	2301      	movs	r3, #1
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e150      	b.n	8004528 <UART_SetConfig+0x348>
 8004286:	2302      	movs	r3, #2
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e14d      	b.n	8004528 <UART_SetConfig+0x348>
 800428c:	2304      	movs	r3, #4
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e14a      	b.n	8004528 <UART_SetConfig+0x348>
 8004292:	2308      	movs	r3, #8
 8004294:	77fb      	strb	r3, [r7, #31]
 8004296:	e147      	b.n	8004528 <UART_SetConfig+0x348>
 8004298:	2310      	movs	r3, #16
 800429a:	77fb      	strb	r3, [r7, #31]
 800429c:	e144      	b.n	8004528 <UART_SetConfig+0x348>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a83      	ldr	r2, [pc, #524]	@ (80044b0 <UART_SetConfig+0x2d0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d132      	bne.n	800430e <UART_SetConfig+0x12e>
 80042a8:	4b80      	ldr	r3, [pc, #512]	@ (80044ac <UART_SetConfig+0x2cc>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d828      	bhi.n	8004308 <UART_SetConfig+0x128>
 80042b6:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <UART_SetConfig+0xdc>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	08004309 	.word	0x08004309
 80042c4:	08004309 	.word	0x08004309
 80042c8:	08004309 	.word	0x08004309
 80042cc:	080042fd 	.word	0x080042fd
 80042d0:	08004309 	.word	0x08004309
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004309 	.word	0x08004309
 80042dc:	080042f7 	.word	0x080042f7
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004309 	.word	0x08004309
 80042ec:	08004303 	.word	0x08004303
 80042f0:	2300      	movs	r3, #0
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e118      	b.n	8004528 <UART_SetConfig+0x348>
 80042f6:	2302      	movs	r3, #2
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e115      	b.n	8004528 <UART_SetConfig+0x348>
 80042fc:	2304      	movs	r3, #4
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e112      	b.n	8004528 <UART_SetConfig+0x348>
 8004302:	2308      	movs	r3, #8
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e10f      	b.n	8004528 <UART_SetConfig+0x348>
 8004308:	2310      	movs	r3, #16
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e10c      	b.n	8004528 <UART_SetConfig+0x348>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a68      	ldr	r2, [pc, #416]	@ (80044b4 <UART_SetConfig+0x2d4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d120      	bne.n	800435a <UART_SetConfig+0x17a>
 8004318:	4b64      	ldr	r3, [pc, #400]	@ (80044ac <UART_SetConfig+0x2cc>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004322:	2b30      	cmp	r3, #48	@ 0x30
 8004324:	d013      	beq.n	800434e <UART_SetConfig+0x16e>
 8004326:	2b30      	cmp	r3, #48	@ 0x30
 8004328:	d814      	bhi.n	8004354 <UART_SetConfig+0x174>
 800432a:	2b20      	cmp	r3, #32
 800432c:	d009      	beq.n	8004342 <UART_SetConfig+0x162>
 800432e:	2b20      	cmp	r3, #32
 8004330:	d810      	bhi.n	8004354 <UART_SetConfig+0x174>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <UART_SetConfig+0x15c>
 8004336:	2b10      	cmp	r3, #16
 8004338:	d006      	beq.n	8004348 <UART_SetConfig+0x168>
 800433a:	e00b      	b.n	8004354 <UART_SetConfig+0x174>
 800433c:	2300      	movs	r3, #0
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e0f2      	b.n	8004528 <UART_SetConfig+0x348>
 8004342:	2302      	movs	r3, #2
 8004344:	77fb      	strb	r3, [r7, #31]
 8004346:	e0ef      	b.n	8004528 <UART_SetConfig+0x348>
 8004348:	2304      	movs	r3, #4
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e0ec      	b.n	8004528 <UART_SetConfig+0x348>
 800434e:	2308      	movs	r3, #8
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e0e9      	b.n	8004528 <UART_SetConfig+0x348>
 8004354:	2310      	movs	r3, #16
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e0e6      	b.n	8004528 <UART_SetConfig+0x348>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a56      	ldr	r2, [pc, #344]	@ (80044b8 <UART_SetConfig+0x2d8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d120      	bne.n	80043a6 <UART_SetConfig+0x1c6>
 8004364:	4b51      	ldr	r3, [pc, #324]	@ (80044ac <UART_SetConfig+0x2cc>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800436e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004370:	d013      	beq.n	800439a <UART_SetConfig+0x1ba>
 8004372:	2bc0      	cmp	r3, #192	@ 0xc0
 8004374:	d814      	bhi.n	80043a0 <UART_SetConfig+0x1c0>
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d009      	beq.n	800438e <UART_SetConfig+0x1ae>
 800437a:	2b80      	cmp	r3, #128	@ 0x80
 800437c:	d810      	bhi.n	80043a0 <UART_SetConfig+0x1c0>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <UART_SetConfig+0x1a8>
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d006      	beq.n	8004394 <UART_SetConfig+0x1b4>
 8004386:	e00b      	b.n	80043a0 <UART_SetConfig+0x1c0>
 8004388:	2300      	movs	r3, #0
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e0cc      	b.n	8004528 <UART_SetConfig+0x348>
 800438e:	2302      	movs	r3, #2
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e0c9      	b.n	8004528 <UART_SetConfig+0x348>
 8004394:	2304      	movs	r3, #4
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e0c6      	b.n	8004528 <UART_SetConfig+0x348>
 800439a:	2308      	movs	r3, #8
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e0c3      	b.n	8004528 <UART_SetConfig+0x348>
 80043a0:	2310      	movs	r3, #16
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e0c0      	b.n	8004528 <UART_SetConfig+0x348>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a44      	ldr	r2, [pc, #272]	@ (80044bc <UART_SetConfig+0x2dc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d125      	bne.n	80043fc <UART_SetConfig+0x21c>
 80043b0:	4b3e      	ldr	r3, [pc, #248]	@ (80044ac <UART_SetConfig+0x2cc>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043be:	d017      	beq.n	80043f0 <UART_SetConfig+0x210>
 80043c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043c4:	d817      	bhi.n	80043f6 <UART_SetConfig+0x216>
 80043c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ca:	d00b      	beq.n	80043e4 <UART_SetConfig+0x204>
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d0:	d811      	bhi.n	80043f6 <UART_SetConfig+0x216>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <UART_SetConfig+0x1fe>
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043da:	d006      	beq.n	80043ea <UART_SetConfig+0x20a>
 80043dc:	e00b      	b.n	80043f6 <UART_SetConfig+0x216>
 80043de:	2300      	movs	r3, #0
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e0a1      	b.n	8004528 <UART_SetConfig+0x348>
 80043e4:	2302      	movs	r3, #2
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e09e      	b.n	8004528 <UART_SetConfig+0x348>
 80043ea:	2304      	movs	r3, #4
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e09b      	b.n	8004528 <UART_SetConfig+0x348>
 80043f0:	2308      	movs	r3, #8
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e098      	b.n	8004528 <UART_SetConfig+0x348>
 80043f6:	2310      	movs	r3, #16
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e095      	b.n	8004528 <UART_SetConfig+0x348>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2f      	ldr	r2, [pc, #188]	@ (80044c0 <UART_SetConfig+0x2e0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d125      	bne.n	8004452 <UART_SetConfig+0x272>
 8004406:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <UART_SetConfig+0x2cc>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004410:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004414:	d017      	beq.n	8004446 <UART_SetConfig+0x266>
 8004416:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800441a:	d817      	bhi.n	800444c <UART_SetConfig+0x26c>
 800441c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004420:	d00b      	beq.n	800443a <UART_SetConfig+0x25a>
 8004422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004426:	d811      	bhi.n	800444c <UART_SetConfig+0x26c>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART_SetConfig+0x254>
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d006      	beq.n	8004440 <UART_SetConfig+0x260>
 8004432:	e00b      	b.n	800444c <UART_SetConfig+0x26c>
 8004434:	2301      	movs	r3, #1
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e076      	b.n	8004528 <UART_SetConfig+0x348>
 800443a:	2302      	movs	r3, #2
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e073      	b.n	8004528 <UART_SetConfig+0x348>
 8004440:	2304      	movs	r3, #4
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e070      	b.n	8004528 <UART_SetConfig+0x348>
 8004446:	2308      	movs	r3, #8
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e06d      	b.n	8004528 <UART_SetConfig+0x348>
 800444c:	2310      	movs	r3, #16
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e06a      	b.n	8004528 <UART_SetConfig+0x348>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1b      	ldr	r2, [pc, #108]	@ (80044c4 <UART_SetConfig+0x2e4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d138      	bne.n	80044ce <UART_SetConfig+0x2ee>
 800445c:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <UART_SetConfig+0x2cc>)
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004462:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004466:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800446a:	d017      	beq.n	800449c <UART_SetConfig+0x2bc>
 800446c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004470:	d82a      	bhi.n	80044c8 <UART_SetConfig+0x2e8>
 8004472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004476:	d00b      	beq.n	8004490 <UART_SetConfig+0x2b0>
 8004478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800447c:	d824      	bhi.n	80044c8 <UART_SetConfig+0x2e8>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <UART_SetConfig+0x2aa>
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004486:	d006      	beq.n	8004496 <UART_SetConfig+0x2b6>
 8004488:	e01e      	b.n	80044c8 <UART_SetConfig+0x2e8>
 800448a:	2300      	movs	r3, #0
 800448c:	77fb      	strb	r3, [r7, #31]
 800448e:	e04b      	b.n	8004528 <UART_SetConfig+0x348>
 8004490:	2302      	movs	r3, #2
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e048      	b.n	8004528 <UART_SetConfig+0x348>
 8004496:	2304      	movs	r3, #4
 8004498:	77fb      	strb	r3, [r7, #31]
 800449a:	e045      	b.n	8004528 <UART_SetConfig+0x348>
 800449c:	2308      	movs	r3, #8
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e042      	b.n	8004528 <UART_SetConfig+0x348>
 80044a2:	bf00      	nop
 80044a4:	efff69f3 	.word	0xefff69f3
 80044a8:	40011000 	.word	0x40011000
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40004400 	.word	0x40004400
 80044b4:	40004800 	.word	0x40004800
 80044b8:	40004c00 	.word	0x40004c00
 80044bc:	40005000 	.word	0x40005000
 80044c0:	40011400 	.word	0x40011400
 80044c4:	40007800 	.word	0x40007800
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e02c      	b.n	8004528 <UART_SetConfig+0x348>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a72      	ldr	r2, [pc, #456]	@ (800469c <UART_SetConfig+0x4bc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d125      	bne.n	8004524 <UART_SetConfig+0x344>
 80044d8:	4b71      	ldr	r3, [pc, #452]	@ (80046a0 <UART_SetConfig+0x4c0>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044e6:	d017      	beq.n	8004518 <UART_SetConfig+0x338>
 80044e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044ec:	d817      	bhi.n	800451e <UART_SetConfig+0x33e>
 80044ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044f2:	d00b      	beq.n	800450c <UART_SetConfig+0x32c>
 80044f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044f8:	d811      	bhi.n	800451e <UART_SetConfig+0x33e>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <UART_SetConfig+0x326>
 80044fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004502:	d006      	beq.n	8004512 <UART_SetConfig+0x332>
 8004504:	e00b      	b.n	800451e <UART_SetConfig+0x33e>
 8004506:	2300      	movs	r3, #0
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e00d      	b.n	8004528 <UART_SetConfig+0x348>
 800450c:	2302      	movs	r3, #2
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e00a      	b.n	8004528 <UART_SetConfig+0x348>
 8004512:	2304      	movs	r3, #4
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e007      	b.n	8004528 <UART_SetConfig+0x348>
 8004518:	2308      	movs	r3, #8
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e004      	b.n	8004528 <UART_SetConfig+0x348>
 800451e:	2310      	movs	r3, #16
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e001      	b.n	8004528 <UART_SetConfig+0x348>
 8004524:	2310      	movs	r3, #16
 8004526:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004530:	d15b      	bne.n	80045ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004532:	7ffb      	ldrb	r3, [r7, #31]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d828      	bhi.n	800458a <UART_SetConfig+0x3aa>
 8004538:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <UART_SetConfig+0x360>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004565 	.word	0x08004565
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004575 	.word	0x08004575
 800454c:	0800458b 	.word	0x0800458b
 8004550:	0800457b 	.word	0x0800457b
 8004554:	0800458b 	.word	0x0800458b
 8004558:	0800458b 	.word	0x0800458b
 800455c:	0800458b 	.word	0x0800458b
 8004560:	08004583 	.word	0x08004583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7fe f87a 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8004568:	61b8      	str	r0, [r7, #24]
        break;
 800456a:	e013      	b.n	8004594 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800456c:	f7fe f88a 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 8004570:	61b8      	str	r0, [r7, #24]
        break;
 8004572:	e00f      	b.n	8004594 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004574:	4b4b      	ldr	r3, [pc, #300]	@ (80046a4 <UART_SetConfig+0x4c4>)
 8004576:	61bb      	str	r3, [r7, #24]
        break;
 8004578:	e00c      	b.n	8004594 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457a:	f7fd ff5d 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 800457e:	61b8      	str	r0, [r7, #24]
        break;
 8004580:	e008      	b.n	8004594 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004586:	61bb      	str	r3, [r7, #24]
        break;
 8004588:	e004      	b.n	8004594 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	77bb      	strb	r3, [r7, #30]
        break;
 8004592:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d074      	beq.n	8004684 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	005a      	lsls	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	441a      	add	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	d916      	bls.n	80045e4 <UART_SetConfig+0x404>
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045bc:	d212      	bcs.n	80045e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f023 030f 	bic.w	r3, r3, #15
 80045c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	89fb      	ldrh	r3, [r7, #14]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	89fa      	ldrh	r2, [r7, #14]
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	e04f      	b.n	8004684 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	77bb      	strb	r3, [r7, #30]
 80045e8:	e04c      	b.n	8004684 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ea:	7ffb      	ldrb	r3, [r7, #31]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d828      	bhi.n	8004642 <UART_SetConfig+0x462>
 80045f0:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <UART_SetConfig+0x418>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	08004625 	.word	0x08004625
 8004600:	0800462d 	.word	0x0800462d
 8004604:	08004643 	.word	0x08004643
 8004608:	08004633 	.word	0x08004633
 800460c:	08004643 	.word	0x08004643
 8004610:	08004643 	.word	0x08004643
 8004614:	08004643 	.word	0x08004643
 8004618:	0800463b 	.word	0x0800463b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe f81e 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8004620:	61b8      	str	r0, [r7, #24]
        break;
 8004622:	e013      	b.n	800464c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe f82e 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 8004628:	61b8      	str	r0, [r7, #24]
        break;
 800462a:	e00f      	b.n	800464c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462c:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <UART_SetConfig+0x4c4>)
 800462e:	61bb      	str	r3, [r7, #24]
        break;
 8004630:	e00c      	b.n	800464c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fd ff01 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 8004636:	61b8      	str	r0, [r7, #24]
        break;
 8004638:	e008      	b.n	800464c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800463e:	61bb      	str	r3, [r7, #24]
        break;
 8004640:	e004      	b.n	800464c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	77bb      	strb	r3, [r7, #30]
        break;
 800464a:	bf00      	nop
    }

    if (pclk != 0U)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d018      	beq.n	8004684 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	085a      	lsrs	r2, r3, #1
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	441a      	add	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b0f      	cmp	r3, #15
 800466a:	d909      	bls.n	8004680 <UART_SetConfig+0x4a0>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004672:	d205      	bcs.n	8004680 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	e001      	b.n	8004684 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004690:	7fbb      	ldrb	r3, [r7, #30]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40007c00 	.word	0x40007c00
 80046a0:	40023800 	.word	0x40023800
 80046a4:	00f42400 	.word	0x00f42400

080046a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01a      	beq.n	80047be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047a6:	d10a      	bne.n	80047be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047fc:	f7fc fdfe 	bl	80013fc <HAL_GetTick>
 8004800:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b08      	cmp	r3, #8
 800480e:	d10e      	bne.n	800482e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004810:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f831 	bl	8004886 <UART_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e027      	b.n	800487e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d10e      	bne.n	800485a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f81b 	bl	8004886 <UART_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e011      	b.n	800487e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b09c      	sub	sp, #112	@ 0x70
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	4613      	mov	r3, r2
 8004894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004896:	e0a7      	b.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004898:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800489e:	f000 80a3 	beq.w	80049e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a2:	f7fc fdab 	bl	80013fc <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d302      	bcc.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80048b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d13f      	bne.n	8004938 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80048c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80048cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80048dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80048e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e6      	bne.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3308      	adds	r3, #8
 80048f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	663b      	str	r3, [r7, #96]	@ 0x60
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800490a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800490c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e5      	bne.n	80048ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e068      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d050      	beq.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004954:	d148      	bne.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800495e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004974:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800497e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004980:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004984:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800498c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e6      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	613b      	str	r3, [r7, #16]
   return(result);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80049b2:	623a      	str	r2, [r7, #32]
 80049b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	69f9      	ldr	r1, [r7, #28]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e5      	bne.n	8004992 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e010      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f43f af48 	beq.w	8004898 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3770      	adds	r7, #112	@ 0x70
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a14:	b084      	sub	sp, #16
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	f107 001c 	add.w	r0, r7, #28
 8004a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d120      	bne.n	8004a6e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <USB_CoreInit+0xac>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa96 	bl	8004f94 <USB_CoreReset>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e010      	b.n	8004a90 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa8a 	bl	8004f94 <USB_CoreReset>
 8004a80:	4603      	mov	r3, r0
 8004a82:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d10b      	bne.n	8004aae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f043 0206 	orr.w	r2, r3, #6
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aba:	b004      	add	sp, #16
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	ffbdffbf 	.word	0xffbdffbf

08004ac4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 0201 	bic.w	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d115      	bne.n	8004b34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7fc fc7d 	bl	8001414 <HAL_Delay>
      ms++;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fa29 	bl	8004f78 <USB_GetMode>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d01e      	beq.n	8004b6a <USB_SetCurrentMode+0x84>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b31      	cmp	r3, #49	@ 0x31
 8004b30:	d9f0      	bls.n	8004b14 <USB_SetCurrentMode+0x2e>
 8004b32:	e01a      	b.n	8004b6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d115      	bne.n	8004b66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b46:	2001      	movs	r0, #1
 8004b48:	f7fc fc64 	bl	8001414 <HAL_Delay>
      ms++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa10 	bl	8004f78 <USB_GetMode>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <USB_SetCurrentMode+0x84>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b31      	cmp	r3, #49	@ 0x31
 8004b62:	d9f0      	bls.n	8004b46 <USB_SetCurrentMode+0x60>
 8004b64:	e001      	b.n	8004b6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e005      	b.n	8004b76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b32      	cmp	r3, #50	@ 0x32
 8004b6e:	d101      	bne.n	8004b74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b80:	b084      	sub	sp, #16
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	e009      	b.n	8004bb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	3340      	adds	r3, #64	@ 0x40
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b0e      	cmp	r3, #14
 8004bb8:	d9f2      	bls.n	8004ba0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d11c      	bne.n	8004bfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e005      	b.n	8004c06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2300      	movs	r3, #0
 8004c10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c18:	4619      	mov	r1, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c20:	461a      	mov	r2, r3
 8004c22:	680b      	ldr	r3, [r1, #0]
 8004c24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d10c      	bne.n	8004c46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d104      	bne.n	8004c3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c32:	2100      	movs	r1, #0
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f965 	bl	8004f04 <USB_SetDevSpeed>
 8004c3a:	e008      	b.n	8004c4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f960 	bl	8004f04 <USB_SetDevSpeed>
 8004c44:	e003      	b.n	8004c4e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c46:	2103      	movs	r1, #3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f95b 	bl	8004f04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c4e:	2110      	movs	r1, #16
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8f3 	bl	8004e3c <USB_FlushTxFifo>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f91f 	bl	8004ea4 <USB_FlushRxFifo>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c82:	461a      	mov	r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	e043      	b.n	8004d22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cb0:	d118      	bne.n	8004ce4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e013      	b.n	8004cf6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e008      	b.n	8004cf6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d02:	461a      	mov	r2, r3
 8004d04:	2300      	movs	r3, #0
 8004d06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d14:	461a      	mov	r2, r3
 8004d16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d3b7      	bcc.n	8004c9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	e043      	b.n	8004db8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d46:	d118      	bne.n	8004d7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e013      	b.n	8004d8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d70:	461a      	mov	r2, r3
 8004d72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e008      	b.n	8004d8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004daa:	461a      	mov	r2, r3
 8004dac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004db0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	3301      	adds	r3, #1
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d3b7      	bcc.n	8004d30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004de0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f043 0210 	orr.w	r2, r3, #16
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e34 <USB_DevInit+0x2b4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f043 0208 	orr.w	r2, r3, #8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d105      	bne.n	8004e24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <USB_DevInit+0x2b8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e30:	b004      	add	sp, #16
 8004e32:	4770      	bx	lr
 8004e34:	803c3800 	.word	0x803c3800
 8004e38:	40000004 	.word	0x40000004

08004e3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a13      	ldr	r2, [pc, #76]	@ (8004ea0 <USB_FlushTxFifo+0x64>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e01b      	b.n	8004e94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	daf2      	bge.n	8004e4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	019b      	lsls	r3, r3, #6
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a08      	ldr	r2, [pc, #32]	@ (8004ea0 <USB_FlushTxFifo+0x64>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e006      	b.n	8004e94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d0f0      	beq.n	8004e74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	00030d40 	.word	0x00030d40

08004ea4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a11      	ldr	r2, [pc, #68]	@ (8004f00 <USB_FlushRxFifo+0x5c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e018      	b.n	8004ef4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	daf2      	bge.n	8004eb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2210      	movs	r2, #16
 8004ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a08      	ldr	r2, [pc, #32]	@ (8004f00 <USB_FlushRxFifo+0x5c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e006      	b.n	8004ef4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d0f0      	beq.n	8004ed4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	00030d40 	.word	0x00030d40

08004f04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f24:	4313      	orrs	r3, r2
 8004f26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f50:	f023 0303 	bic.w	r3, r3, #3
 8004f54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0301 	and.w	r3, r3, #1
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	@ (8004ff8 <USB_CoreReset+0x64>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e01b      	b.n	8004fea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	daf2      	bge.n	8004fa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f043 0201 	orr.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a09      	ldr	r2, [pc, #36]	@ (8004ff8 <USB_CoreReset+0x64>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e006      	b.n	8004fea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d0f0      	beq.n	8004fca <USB_CoreReset+0x36>

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	00030d40 	.word	0x00030d40

08004ffc <__cvt>:
 8004ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffe:	ed2d 8b02 	vpush	{d8}
 8005002:	eeb0 8b40 	vmov.f64	d8, d0
 8005006:	b085      	sub	sp, #20
 8005008:	4617      	mov	r7, r2
 800500a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800500c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800500e:	ee18 2a90 	vmov	r2, s17
 8005012:	f025 0520 	bic.w	r5, r5, #32
 8005016:	2a00      	cmp	r2, #0
 8005018:	bfb6      	itet	lt
 800501a:	222d      	movlt	r2, #45	@ 0x2d
 800501c:	2200      	movge	r2, #0
 800501e:	eeb1 8b40 	vneglt.f64	d8, d0
 8005022:	2d46      	cmp	r5, #70	@ 0x46
 8005024:	460c      	mov	r4, r1
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	d004      	beq.n	8005034 <__cvt+0x38>
 800502a:	2d45      	cmp	r5, #69	@ 0x45
 800502c:	d100      	bne.n	8005030 <__cvt+0x34>
 800502e:	3401      	adds	r4, #1
 8005030:	2102      	movs	r1, #2
 8005032:	e000      	b.n	8005036 <__cvt+0x3a>
 8005034:	2103      	movs	r1, #3
 8005036:	ab03      	add	r3, sp, #12
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	ab02      	add	r3, sp, #8
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	4622      	mov	r2, r4
 8005040:	4633      	mov	r3, r6
 8005042:	eeb0 0b48 	vmov.f64	d0, d8
 8005046:	f000 fe3f 	bl	8005cc8 <_dtoa_r>
 800504a:	2d47      	cmp	r5, #71	@ 0x47
 800504c:	d114      	bne.n	8005078 <__cvt+0x7c>
 800504e:	07fb      	lsls	r3, r7, #31
 8005050:	d50a      	bpl.n	8005068 <__cvt+0x6c>
 8005052:	1902      	adds	r2, r0, r4
 8005054:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505c:	bf08      	it	eq
 800505e:	9203      	streq	r2, [sp, #12]
 8005060:	2130      	movs	r1, #48	@ 0x30
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	4293      	cmp	r3, r2
 8005066:	d319      	bcc.n	800509c <__cvt+0xa0>
 8005068:	9b03      	ldr	r3, [sp, #12]
 800506a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800506c:	1a1b      	subs	r3, r3, r0
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	b005      	add	sp, #20
 8005072:	ecbd 8b02 	vpop	{d8}
 8005076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005078:	2d46      	cmp	r5, #70	@ 0x46
 800507a:	eb00 0204 	add.w	r2, r0, r4
 800507e:	d1e9      	bne.n	8005054 <__cvt+0x58>
 8005080:	7803      	ldrb	r3, [r0, #0]
 8005082:	2b30      	cmp	r3, #48	@ 0x30
 8005084:	d107      	bne.n	8005096 <__cvt+0x9a>
 8005086:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	bf1c      	itt	ne
 8005090:	f1c4 0401 	rsbne	r4, r4, #1
 8005094:	6034      	strne	r4, [r6, #0]
 8005096:	6833      	ldr	r3, [r6, #0]
 8005098:	441a      	add	r2, r3
 800509a:	e7db      	b.n	8005054 <__cvt+0x58>
 800509c:	1c5c      	adds	r4, r3, #1
 800509e:	9403      	str	r4, [sp, #12]
 80050a0:	7019      	strb	r1, [r3, #0]
 80050a2:	e7de      	b.n	8005062 <__cvt+0x66>

080050a4 <__exponent>:
 80050a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a6:	2900      	cmp	r1, #0
 80050a8:	bfba      	itte	lt
 80050aa:	4249      	neglt	r1, r1
 80050ac:	232d      	movlt	r3, #45	@ 0x2d
 80050ae:	232b      	movge	r3, #43	@ 0x2b
 80050b0:	2909      	cmp	r1, #9
 80050b2:	7002      	strb	r2, [r0, #0]
 80050b4:	7043      	strb	r3, [r0, #1]
 80050b6:	dd29      	ble.n	800510c <__exponent+0x68>
 80050b8:	f10d 0307 	add.w	r3, sp, #7
 80050bc:	461d      	mov	r5, r3
 80050be:	270a      	movs	r7, #10
 80050c0:	461a      	mov	r2, r3
 80050c2:	fbb1 f6f7 	udiv	r6, r1, r7
 80050c6:	fb07 1416 	mls	r4, r7, r6, r1
 80050ca:	3430      	adds	r4, #48	@ 0x30
 80050cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050d0:	460c      	mov	r4, r1
 80050d2:	2c63      	cmp	r4, #99	@ 0x63
 80050d4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80050d8:	4631      	mov	r1, r6
 80050da:	dcf1      	bgt.n	80050c0 <__exponent+0x1c>
 80050dc:	3130      	adds	r1, #48	@ 0x30
 80050de:	1e94      	subs	r4, r2, #2
 80050e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050e4:	1c41      	adds	r1, r0, #1
 80050e6:	4623      	mov	r3, r4
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	d30a      	bcc.n	8005102 <__exponent+0x5e>
 80050ec:	f10d 0309 	add.w	r3, sp, #9
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	42ac      	cmp	r4, r5
 80050f4:	bf88      	it	hi
 80050f6:	2300      	movhi	r3, #0
 80050f8:	3302      	adds	r3, #2
 80050fa:	4403      	add	r3, r0
 80050fc:	1a18      	subs	r0, r3, r0
 80050fe:	b003      	add	sp, #12
 8005100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005102:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005106:	f801 6f01 	strb.w	r6, [r1, #1]!
 800510a:	e7ed      	b.n	80050e8 <__exponent+0x44>
 800510c:	2330      	movs	r3, #48	@ 0x30
 800510e:	3130      	adds	r1, #48	@ 0x30
 8005110:	7083      	strb	r3, [r0, #2]
 8005112:	70c1      	strb	r1, [r0, #3]
 8005114:	1d03      	adds	r3, r0, #4
 8005116:	e7f1      	b.n	80050fc <__exponent+0x58>

08005118 <_printf_float>:
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	b08d      	sub	sp, #52	@ 0x34
 800511e:	460c      	mov	r4, r1
 8005120:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005124:	4616      	mov	r6, r2
 8005126:	461f      	mov	r7, r3
 8005128:	4605      	mov	r5, r0
 800512a:	f000 fccb 	bl	8005ac4 <_localeconv_r>
 800512e:	f8d0 b000 	ldr.w	fp, [r0]
 8005132:	4658      	mov	r0, fp
 8005134:	f7fb f8d4 	bl	80002e0 <strlen>
 8005138:	2300      	movs	r3, #0
 800513a:	930a      	str	r3, [sp, #40]	@ 0x28
 800513c:	f8d8 3000 	ldr.w	r3, [r8]
 8005140:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	9005      	str	r0, [sp, #20]
 8005148:	3307      	adds	r3, #7
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	f103 0108 	add.w	r1, r3, #8
 8005152:	f8c8 1000 	str.w	r1, [r8]
 8005156:	ed93 0b00 	vldr	d0, [r3]
 800515a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80053b8 <_printf_float+0x2a0>
 800515e:	eeb0 7bc0 	vabs.f64	d7, d0
 8005162:	eeb4 7b46 	vcmp.f64	d7, d6
 8005166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800516e:	dd24      	ble.n	80051ba <_printf_float+0xa2>
 8005170:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005178:	d502      	bpl.n	8005180 <_printf_float+0x68>
 800517a:	232d      	movs	r3, #45	@ 0x2d
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005180:	498f      	ldr	r1, [pc, #572]	@ (80053c0 <_printf_float+0x2a8>)
 8005182:	4b90      	ldr	r3, [pc, #576]	@ (80053c4 <_printf_float+0x2ac>)
 8005184:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8005188:	bf8c      	ite	hi
 800518a:	4688      	movhi	r8, r1
 800518c:	4698      	movls	r8, r3
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	2303      	movs	r3, #3
 8005194:	6123      	str	r3, [r4, #16]
 8005196:	6022      	str	r2, [r4, #0]
 8005198:	f04f 0a00 	mov.w	sl, #0
 800519c:	9700      	str	r7, [sp, #0]
 800519e:	4633      	mov	r3, r6
 80051a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 f9d1 	bl	800554c <_printf_common>
 80051aa:	3001      	adds	r0, #1
 80051ac:	f040 8089 	bne.w	80052c2 <_printf_float+0x1aa>
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051b4:	b00d      	add	sp, #52	@ 0x34
 80051b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80051be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c2:	d709      	bvc.n	80051d8 <_printf_float+0xc0>
 80051c4:	ee10 3a90 	vmov	r3, s1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bfbc      	itt	lt
 80051cc:	232d      	movlt	r3, #45	@ 0x2d
 80051ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80051d2:	497d      	ldr	r1, [pc, #500]	@ (80053c8 <_printf_float+0x2b0>)
 80051d4:	4b7d      	ldr	r3, [pc, #500]	@ (80053cc <_printf_float+0x2b4>)
 80051d6:	e7d5      	b.n	8005184 <_printf_float+0x6c>
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	1c59      	adds	r1, r3, #1
 80051dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80051e0:	d139      	bne.n	8005256 <_printf_float+0x13e>
 80051e2:	2306      	movs	r3, #6
 80051e4:	6063      	str	r3, [r4, #4]
 80051e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051ea:	2300      	movs	r3, #0
 80051ec:	6022      	str	r2, [r4, #0]
 80051ee:	9303      	str	r3, [sp, #12]
 80051f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80051f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80051f6:	ab09      	add	r3, sp, #36	@ 0x24
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	6861      	ldr	r1, [r4, #4]
 80051fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005200:	4628      	mov	r0, r5
 8005202:	f7ff fefb 	bl	8004ffc <__cvt>
 8005206:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800520a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800520c:	4680      	mov	r8, r0
 800520e:	d129      	bne.n	8005264 <_printf_float+0x14c>
 8005210:	1cc8      	adds	r0, r1, #3
 8005212:	db02      	blt.n	800521a <_printf_float+0x102>
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	4299      	cmp	r1, r3
 8005218:	dd41      	ble.n	800529e <_printf_float+0x186>
 800521a:	f1a9 0902 	sub.w	r9, r9, #2
 800521e:	fa5f f989 	uxtb.w	r9, r9
 8005222:	3901      	subs	r1, #1
 8005224:	464a      	mov	r2, r9
 8005226:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800522a:	9109      	str	r1, [sp, #36]	@ 0x24
 800522c:	f7ff ff3a 	bl	80050a4 <__exponent>
 8005230:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005232:	1813      	adds	r3, r2, r0
 8005234:	2a01      	cmp	r2, #1
 8005236:	4682      	mov	sl, r0
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	dc02      	bgt.n	8005242 <_printf_float+0x12a>
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	07d2      	lsls	r2, r2, #31
 8005240:	d501      	bpl.n	8005246 <_printf_float+0x12e>
 8005242:	3301      	adds	r3, #1
 8005244:	6123      	str	r3, [r4, #16]
 8005246:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0a6      	beq.n	800519c <_printf_float+0x84>
 800524e:	232d      	movs	r3, #45	@ 0x2d
 8005250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005254:	e7a2      	b.n	800519c <_printf_float+0x84>
 8005256:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800525a:	d1c4      	bne.n	80051e6 <_printf_float+0xce>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1c2      	bne.n	80051e6 <_printf_float+0xce>
 8005260:	2301      	movs	r3, #1
 8005262:	e7bf      	b.n	80051e4 <_printf_float+0xcc>
 8005264:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005268:	d9db      	bls.n	8005222 <_printf_float+0x10a>
 800526a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800526e:	d118      	bne.n	80052a2 <_printf_float+0x18a>
 8005270:	2900      	cmp	r1, #0
 8005272:	6863      	ldr	r3, [r4, #4]
 8005274:	dd0b      	ble.n	800528e <_printf_float+0x176>
 8005276:	6121      	str	r1, [r4, #16]
 8005278:	b913      	cbnz	r3, 8005280 <_printf_float+0x168>
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	07d0      	lsls	r0, r2, #31
 800527e:	d502      	bpl.n	8005286 <_printf_float+0x16e>
 8005280:	3301      	adds	r3, #1
 8005282:	440b      	add	r3, r1
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005288:	f04f 0a00 	mov.w	sl, #0
 800528c:	e7db      	b.n	8005246 <_printf_float+0x12e>
 800528e:	b913      	cbnz	r3, 8005296 <_printf_float+0x17e>
 8005290:	6822      	ldr	r2, [r4, #0]
 8005292:	07d2      	lsls	r2, r2, #31
 8005294:	d501      	bpl.n	800529a <_printf_float+0x182>
 8005296:	3302      	adds	r3, #2
 8005298:	e7f4      	b.n	8005284 <_printf_float+0x16c>
 800529a:	2301      	movs	r3, #1
 800529c:	e7f2      	b.n	8005284 <_printf_float+0x16c>
 800529e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80052a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052a4:	4299      	cmp	r1, r3
 80052a6:	db05      	blt.n	80052b4 <_printf_float+0x19c>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	6121      	str	r1, [r4, #16]
 80052ac:	07d8      	lsls	r0, r3, #31
 80052ae:	d5ea      	bpl.n	8005286 <_printf_float+0x16e>
 80052b0:	1c4b      	adds	r3, r1, #1
 80052b2:	e7e7      	b.n	8005284 <_printf_float+0x16c>
 80052b4:	2900      	cmp	r1, #0
 80052b6:	bfd4      	ite	le
 80052b8:	f1c1 0202 	rsble	r2, r1, #2
 80052bc:	2201      	movgt	r2, #1
 80052be:	4413      	add	r3, r2
 80052c0:	e7e0      	b.n	8005284 <_printf_float+0x16c>
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	055a      	lsls	r2, r3, #21
 80052c6:	d407      	bmi.n	80052d8 <_printf_float+0x1c0>
 80052c8:	6923      	ldr	r3, [r4, #16]
 80052ca:	4642      	mov	r2, r8
 80052cc:	4631      	mov	r1, r6
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b8      	blx	r7
 80052d2:	3001      	adds	r0, #1
 80052d4:	d12a      	bne.n	800532c <_printf_float+0x214>
 80052d6:	e76b      	b.n	80051b0 <_printf_float+0x98>
 80052d8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80052dc:	f240 80e0 	bls.w	80054a0 <_printf_float+0x388>
 80052e0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80052e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ec:	d133      	bne.n	8005356 <_printf_float+0x23e>
 80052ee:	4a38      	ldr	r2, [pc, #224]	@ (80053d0 <_printf_float+0x2b8>)
 80052f0:	2301      	movs	r3, #1
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f af59 	beq.w	80051b0 <_printf_float+0x98>
 80052fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005302:	4543      	cmp	r3, r8
 8005304:	db02      	blt.n	800530c <_printf_float+0x1f4>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	07d8      	lsls	r0, r3, #31
 800530a:	d50f      	bpl.n	800532c <_printf_float+0x214>
 800530c:	9b05      	ldr	r3, [sp, #20]
 800530e:	465a      	mov	r2, fp
 8005310:	4631      	mov	r1, r6
 8005312:	4628      	mov	r0, r5
 8005314:	47b8      	blx	r7
 8005316:	3001      	adds	r0, #1
 8005318:	f43f af4a 	beq.w	80051b0 <_printf_float+0x98>
 800531c:	f04f 0900 	mov.w	r9, #0
 8005320:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005324:	f104 0a1a 	add.w	sl, r4, #26
 8005328:	45c8      	cmp	r8, r9
 800532a:	dc09      	bgt.n	8005340 <_printf_float+0x228>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	079b      	lsls	r3, r3, #30
 8005330:	f100 8107 	bmi.w	8005542 <_printf_float+0x42a>
 8005334:	68e0      	ldr	r0, [r4, #12]
 8005336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005338:	4298      	cmp	r0, r3
 800533a:	bfb8      	it	lt
 800533c:	4618      	movlt	r0, r3
 800533e:	e739      	b.n	80051b4 <_printf_float+0x9c>
 8005340:	2301      	movs	r3, #1
 8005342:	4652      	mov	r2, sl
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	f43f af30 	beq.w	80051b0 <_printf_float+0x98>
 8005350:	f109 0901 	add.w	r9, r9, #1
 8005354:	e7e8      	b.n	8005328 <_printf_float+0x210>
 8005356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	dc3b      	bgt.n	80053d4 <_printf_float+0x2bc>
 800535c:	4a1c      	ldr	r2, [pc, #112]	@ (80053d0 <_printf_float+0x2b8>)
 800535e:	2301      	movs	r3, #1
 8005360:	4631      	mov	r1, r6
 8005362:	4628      	mov	r0, r5
 8005364:	47b8      	blx	r7
 8005366:	3001      	adds	r0, #1
 8005368:	f43f af22 	beq.w	80051b0 <_printf_float+0x98>
 800536c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005370:	ea59 0303 	orrs.w	r3, r9, r3
 8005374:	d102      	bne.n	800537c <_printf_float+0x264>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	07d9      	lsls	r1, r3, #31
 800537a:	d5d7      	bpl.n	800532c <_printf_float+0x214>
 800537c:	9b05      	ldr	r3, [sp, #20]
 800537e:	465a      	mov	r2, fp
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	f43f af12 	beq.w	80051b0 <_printf_float+0x98>
 800538c:	f04f 0a00 	mov.w	sl, #0
 8005390:	f104 0b1a 	add.w	fp, r4, #26
 8005394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005396:	425b      	negs	r3, r3
 8005398:	4553      	cmp	r3, sl
 800539a:	dc01      	bgt.n	80053a0 <_printf_float+0x288>
 800539c:	464b      	mov	r3, r9
 800539e:	e794      	b.n	80052ca <_printf_float+0x1b2>
 80053a0:	2301      	movs	r3, #1
 80053a2:	465a      	mov	r2, fp
 80053a4:	4631      	mov	r1, r6
 80053a6:	4628      	mov	r0, r5
 80053a8:	47b8      	blx	r7
 80053aa:	3001      	adds	r0, #1
 80053ac:	f43f af00 	beq.w	80051b0 <_printf_float+0x98>
 80053b0:	f10a 0a01 	add.w	sl, sl, #1
 80053b4:	e7ee      	b.n	8005394 <_printf_float+0x27c>
 80053b6:	bf00      	nop
 80053b8:	ffffffff 	.word	0xffffffff
 80053bc:	7fefffff 	.word	0x7fefffff
 80053c0:	08007c64 	.word	0x08007c64
 80053c4:	08007c60 	.word	0x08007c60
 80053c8:	08007c6c 	.word	0x08007c6c
 80053cc:	08007c68 	.word	0x08007c68
 80053d0:	08007c70 	.word	0x08007c70
 80053d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053da:	4553      	cmp	r3, sl
 80053dc:	bfa8      	it	ge
 80053de:	4653      	movge	r3, sl
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	4699      	mov	r9, r3
 80053e4:	dc37      	bgt.n	8005456 <_printf_float+0x33e>
 80053e6:	2300      	movs	r3, #0
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ee:	f104 021a 	add.w	r2, r4, #26
 80053f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053f4:	9907      	ldr	r1, [sp, #28]
 80053f6:	9306      	str	r3, [sp, #24]
 80053f8:	eba3 0309 	sub.w	r3, r3, r9
 80053fc:	428b      	cmp	r3, r1
 80053fe:	dc31      	bgt.n	8005464 <_printf_float+0x34c>
 8005400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005402:	459a      	cmp	sl, r3
 8005404:	dc3b      	bgt.n	800547e <_printf_float+0x366>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	07da      	lsls	r2, r3, #31
 800540a:	d438      	bmi.n	800547e <_printf_float+0x366>
 800540c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800540e:	ebaa 0903 	sub.w	r9, sl, r3
 8005412:	9b06      	ldr	r3, [sp, #24]
 8005414:	ebaa 0303 	sub.w	r3, sl, r3
 8005418:	4599      	cmp	r9, r3
 800541a:	bfa8      	it	ge
 800541c:	4699      	movge	r9, r3
 800541e:	f1b9 0f00 	cmp.w	r9, #0
 8005422:	dc34      	bgt.n	800548e <_printf_float+0x376>
 8005424:	f04f 0800 	mov.w	r8, #0
 8005428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800542c:	f104 0b1a 	add.w	fp, r4, #26
 8005430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005432:	ebaa 0303 	sub.w	r3, sl, r3
 8005436:	eba3 0309 	sub.w	r3, r3, r9
 800543a:	4543      	cmp	r3, r8
 800543c:	f77f af76 	ble.w	800532c <_printf_float+0x214>
 8005440:	2301      	movs	r3, #1
 8005442:	465a      	mov	r2, fp
 8005444:	4631      	mov	r1, r6
 8005446:	4628      	mov	r0, r5
 8005448:	47b8      	blx	r7
 800544a:	3001      	adds	r0, #1
 800544c:	f43f aeb0 	beq.w	80051b0 <_printf_float+0x98>
 8005450:	f108 0801 	add.w	r8, r8, #1
 8005454:	e7ec      	b.n	8005430 <_printf_float+0x318>
 8005456:	4642      	mov	r2, r8
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	d1c1      	bne.n	80053e6 <_printf_float+0x2ce>
 8005462:	e6a5      	b.n	80051b0 <_printf_float+0x98>
 8005464:	2301      	movs	r3, #1
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	9206      	str	r2, [sp, #24]
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	f43f ae9e 	beq.w	80051b0 <_printf_float+0x98>
 8005474:	9b07      	ldr	r3, [sp, #28]
 8005476:	9a06      	ldr	r2, [sp, #24]
 8005478:	3301      	adds	r3, #1
 800547a:	9307      	str	r3, [sp, #28]
 800547c:	e7b9      	b.n	80053f2 <_printf_float+0x2da>
 800547e:	9b05      	ldr	r3, [sp, #20]
 8005480:	465a      	mov	r2, fp
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	47b8      	blx	r7
 8005488:	3001      	adds	r0, #1
 800548a:	d1bf      	bne.n	800540c <_printf_float+0x2f4>
 800548c:	e690      	b.n	80051b0 <_printf_float+0x98>
 800548e:	9a06      	ldr	r2, [sp, #24]
 8005490:	464b      	mov	r3, r9
 8005492:	4442      	add	r2, r8
 8005494:	4631      	mov	r1, r6
 8005496:	4628      	mov	r0, r5
 8005498:	47b8      	blx	r7
 800549a:	3001      	adds	r0, #1
 800549c:	d1c2      	bne.n	8005424 <_printf_float+0x30c>
 800549e:	e687      	b.n	80051b0 <_printf_float+0x98>
 80054a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80054a4:	f1b9 0f01 	cmp.w	r9, #1
 80054a8:	dc01      	bgt.n	80054ae <_printf_float+0x396>
 80054aa:	07db      	lsls	r3, r3, #31
 80054ac:	d536      	bpl.n	800551c <_printf_float+0x404>
 80054ae:	2301      	movs	r3, #1
 80054b0:	4642      	mov	r2, r8
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	f43f ae79 	beq.w	80051b0 <_printf_float+0x98>
 80054be:	9b05      	ldr	r3, [sp, #20]
 80054c0:	465a      	mov	r2, fp
 80054c2:	4631      	mov	r1, r6
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b8      	blx	r7
 80054c8:	3001      	adds	r0, #1
 80054ca:	f43f ae71 	beq.w	80051b0 <_printf_float+0x98>
 80054ce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80054d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80054d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054da:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80054de:	d018      	beq.n	8005512 <_printf_float+0x3fa>
 80054e0:	464b      	mov	r3, r9
 80054e2:	f108 0201 	add.w	r2, r8, #1
 80054e6:	4631      	mov	r1, r6
 80054e8:	4628      	mov	r0, r5
 80054ea:	47b8      	blx	r7
 80054ec:	3001      	adds	r0, #1
 80054ee:	d10c      	bne.n	800550a <_printf_float+0x3f2>
 80054f0:	e65e      	b.n	80051b0 <_printf_float+0x98>
 80054f2:	2301      	movs	r3, #1
 80054f4:	465a      	mov	r2, fp
 80054f6:	4631      	mov	r1, r6
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b8      	blx	r7
 80054fc:	3001      	adds	r0, #1
 80054fe:	f43f ae57 	beq.w	80051b0 <_printf_float+0x98>
 8005502:	f108 0801 	add.w	r8, r8, #1
 8005506:	45c8      	cmp	r8, r9
 8005508:	dbf3      	blt.n	80054f2 <_printf_float+0x3da>
 800550a:	4653      	mov	r3, sl
 800550c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005510:	e6dc      	b.n	80052cc <_printf_float+0x1b4>
 8005512:	f04f 0800 	mov.w	r8, #0
 8005516:	f104 0b1a 	add.w	fp, r4, #26
 800551a:	e7f4      	b.n	8005506 <_printf_float+0x3ee>
 800551c:	2301      	movs	r3, #1
 800551e:	4642      	mov	r2, r8
 8005520:	e7e1      	b.n	80054e6 <_printf_float+0x3ce>
 8005522:	2301      	movs	r3, #1
 8005524:	464a      	mov	r2, r9
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	f43f ae3f 	beq.w	80051b0 <_printf_float+0x98>
 8005532:	f108 0801 	add.w	r8, r8, #1
 8005536:	68e3      	ldr	r3, [r4, #12]
 8005538:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800553a:	1a5b      	subs	r3, r3, r1
 800553c:	4543      	cmp	r3, r8
 800553e:	dcf0      	bgt.n	8005522 <_printf_float+0x40a>
 8005540:	e6f8      	b.n	8005334 <_printf_float+0x21c>
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	f104 0919 	add.w	r9, r4, #25
 800554a:	e7f4      	b.n	8005536 <_printf_float+0x41e>

0800554c <_printf_common>:
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	4616      	mov	r6, r2
 8005552:	4698      	mov	r8, r3
 8005554:	688a      	ldr	r2, [r1, #8]
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800555c:	4293      	cmp	r3, r2
 800555e:	bfb8      	it	lt
 8005560:	4613      	movlt	r3, r2
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005568:	4607      	mov	r7, r0
 800556a:	460c      	mov	r4, r1
 800556c:	b10a      	cbz	r2, 8005572 <_printf_common+0x26>
 800556e:	3301      	adds	r3, #1
 8005570:	6033      	str	r3, [r6, #0]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	0699      	lsls	r1, r3, #26
 8005576:	bf42      	ittt	mi
 8005578:	6833      	ldrmi	r3, [r6, #0]
 800557a:	3302      	addmi	r3, #2
 800557c:	6033      	strmi	r3, [r6, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	f015 0506 	ands.w	r5, r5, #6
 8005584:	d106      	bne.n	8005594 <_printf_common+0x48>
 8005586:	f104 0a19 	add.w	sl, r4, #25
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	6832      	ldr	r2, [r6, #0]
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	42ab      	cmp	r3, r5
 8005592:	dc26      	bgt.n	80055e2 <_printf_common+0x96>
 8005594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	3b00      	subs	r3, #0
 800559c:	bf18      	it	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	0692      	lsls	r2, r2, #26
 80055a2:	d42b      	bmi.n	80055fc <_printf_common+0xb0>
 80055a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055a8:	4641      	mov	r1, r8
 80055aa:	4638      	mov	r0, r7
 80055ac:	47c8      	blx	r9
 80055ae:	3001      	adds	r0, #1
 80055b0:	d01e      	beq.n	80055f0 <_printf_common+0xa4>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	f003 0306 	and.w	r3, r3, #6
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	bf02      	ittt	eq
 80055be:	68e5      	ldreq	r5, [r4, #12]
 80055c0:	6833      	ldreq	r3, [r6, #0]
 80055c2:	1aed      	subeq	r5, r5, r3
 80055c4:	68a3      	ldr	r3, [r4, #8]
 80055c6:	bf0c      	ite	eq
 80055c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055cc:	2500      	movne	r5, #0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bfc4      	itt	gt
 80055d2:	1a9b      	subgt	r3, r3, r2
 80055d4:	18ed      	addgt	r5, r5, r3
 80055d6:	2600      	movs	r6, #0
 80055d8:	341a      	adds	r4, #26
 80055da:	42b5      	cmp	r5, r6
 80055dc:	d11a      	bne.n	8005614 <_printf_common+0xc8>
 80055de:	2000      	movs	r0, #0
 80055e0:	e008      	b.n	80055f4 <_printf_common+0xa8>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4652      	mov	r2, sl
 80055e6:	4641      	mov	r1, r8
 80055e8:	4638      	mov	r0, r7
 80055ea:	47c8      	blx	r9
 80055ec:	3001      	adds	r0, #1
 80055ee:	d103      	bne.n	80055f8 <_printf_common+0xac>
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f8:	3501      	adds	r5, #1
 80055fa:	e7c6      	b.n	800558a <_printf_common+0x3e>
 80055fc:	18e1      	adds	r1, r4, r3
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	2030      	movs	r0, #48	@ 0x30
 8005602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005606:	4422      	add	r2, r4
 8005608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800560c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005610:	3302      	adds	r3, #2
 8005612:	e7c7      	b.n	80055a4 <_printf_common+0x58>
 8005614:	2301      	movs	r3, #1
 8005616:	4622      	mov	r2, r4
 8005618:	4641      	mov	r1, r8
 800561a:	4638      	mov	r0, r7
 800561c:	47c8      	blx	r9
 800561e:	3001      	adds	r0, #1
 8005620:	d0e6      	beq.n	80055f0 <_printf_common+0xa4>
 8005622:	3601      	adds	r6, #1
 8005624:	e7d9      	b.n	80055da <_printf_common+0x8e>
	...

08005628 <_printf_i>:
 8005628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	7e0f      	ldrb	r7, [r1, #24]
 800562e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005630:	2f78      	cmp	r7, #120	@ 0x78
 8005632:	4691      	mov	r9, r2
 8005634:	4680      	mov	r8, r0
 8005636:	460c      	mov	r4, r1
 8005638:	469a      	mov	sl, r3
 800563a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800563e:	d807      	bhi.n	8005650 <_printf_i+0x28>
 8005640:	2f62      	cmp	r7, #98	@ 0x62
 8005642:	d80a      	bhi.n	800565a <_printf_i+0x32>
 8005644:	2f00      	cmp	r7, #0
 8005646:	f000 80d1 	beq.w	80057ec <_printf_i+0x1c4>
 800564a:	2f58      	cmp	r7, #88	@ 0x58
 800564c:	f000 80b8 	beq.w	80057c0 <_printf_i+0x198>
 8005650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005658:	e03a      	b.n	80056d0 <_printf_i+0xa8>
 800565a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800565e:	2b15      	cmp	r3, #21
 8005660:	d8f6      	bhi.n	8005650 <_printf_i+0x28>
 8005662:	a101      	add	r1, pc, #4	@ (adr r1, 8005668 <_printf_i+0x40>)
 8005664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056d5 	.word	0x080056d5
 8005670:	08005651 	.word	0x08005651
 8005674:	08005651 	.word	0x08005651
 8005678:	08005651 	.word	0x08005651
 800567c:	08005651 	.word	0x08005651
 8005680:	080056d5 	.word	0x080056d5
 8005684:	08005651 	.word	0x08005651
 8005688:	08005651 	.word	0x08005651
 800568c:	08005651 	.word	0x08005651
 8005690:	08005651 	.word	0x08005651
 8005694:	080057d3 	.word	0x080057d3
 8005698:	080056ff 	.word	0x080056ff
 800569c:	0800578d 	.word	0x0800578d
 80056a0:	08005651 	.word	0x08005651
 80056a4:	08005651 	.word	0x08005651
 80056a8:	080057f5 	.word	0x080057f5
 80056ac:	08005651 	.word	0x08005651
 80056b0:	080056ff 	.word	0x080056ff
 80056b4:	08005651 	.word	0x08005651
 80056b8:	08005651 	.word	0x08005651
 80056bc:	08005795 	.word	0x08005795
 80056c0:	6833      	ldr	r3, [r6, #0]
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6032      	str	r2, [r6, #0]
 80056c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056d0:	2301      	movs	r3, #1
 80056d2:	e09c      	b.n	800580e <_printf_i+0x1e6>
 80056d4:	6833      	ldr	r3, [r6, #0]
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	6031      	str	r1, [r6, #0]
 80056dc:	0606      	lsls	r6, r0, #24
 80056de:	d501      	bpl.n	80056e4 <_printf_i+0xbc>
 80056e0:	681d      	ldr	r5, [r3, #0]
 80056e2:	e003      	b.n	80056ec <_printf_i+0xc4>
 80056e4:	0645      	lsls	r5, r0, #25
 80056e6:	d5fb      	bpl.n	80056e0 <_printf_i+0xb8>
 80056e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	da03      	bge.n	80056f8 <_printf_i+0xd0>
 80056f0:	232d      	movs	r3, #45	@ 0x2d
 80056f2:	426d      	negs	r5, r5
 80056f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056f8:	4858      	ldr	r0, [pc, #352]	@ (800585c <_printf_i+0x234>)
 80056fa:	230a      	movs	r3, #10
 80056fc:	e011      	b.n	8005722 <_printf_i+0xfa>
 80056fe:	6821      	ldr	r1, [r4, #0]
 8005700:	6833      	ldr	r3, [r6, #0]
 8005702:	0608      	lsls	r0, r1, #24
 8005704:	f853 5b04 	ldr.w	r5, [r3], #4
 8005708:	d402      	bmi.n	8005710 <_printf_i+0xe8>
 800570a:	0649      	lsls	r1, r1, #25
 800570c:	bf48      	it	mi
 800570e:	b2ad      	uxthmi	r5, r5
 8005710:	2f6f      	cmp	r7, #111	@ 0x6f
 8005712:	4852      	ldr	r0, [pc, #328]	@ (800585c <_printf_i+0x234>)
 8005714:	6033      	str	r3, [r6, #0]
 8005716:	bf14      	ite	ne
 8005718:	230a      	movne	r3, #10
 800571a:	2308      	moveq	r3, #8
 800571c:	2100      	movs	r1, #0
 800571e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005722:	6866      	ldr	r6, [r4, #4]
 8005724:	60a6      	str	r6, [r4, #8]
 8005726:	2e00      	cmp	r6, #0
 8005728:	db05      	blt.n	8005736 <_printf_i+0x10e>
 800572a:	6821      	ldr	r1, [r4, #0]
 800572c:	432e      	orrs	r6, r5
 800572e:	f021 0104 	bic.w	r1, r1, #4
 8005732:	6021      	str	r1, [r4, #0]
 8005734:	d04b      	beq.n	80057ce <_printf_i+0x1a6>
 8005736:	4616      	mov	r6, r2
 8005738:	fbb5 f1f3 	udiv	r1, r5, r3
 800573c:	fb03 5711 	mls	r7, r3, r1, r5
 8005740:	5dc7      	ldrb	r7, [r0, r7]
 8005742:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005746:	462f      	mov	r7, r5
 8005748:	42bb      	cmp	r3, r7
 800574a:	460d      	mov	r5, r1
 800574c:	d9f4      	bls.n	8005738 <_printf_i+0x110>
 800574e:	2b08      	cmp	r3, #8
 8005750:	d10b      	bne.n	800576a <_printf_i+0x142>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	07df      	lsls	r7, r3, #31
 8005756:	d508      	bpl.n	800576a <_printf_i+0x142>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	6861      	ldr	r1, [r4, #4]
 800575c:	4299      	cmp	r1, r3
 800575e:	bfde      	ittt	le
 8005760:	2330      	movle	r3, #48	@ 0x30
 8005762:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005766:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800576a:	1b92      	subs	r2, r2, r6
 800576c:	6122      	str	r2, [r4, #16]
 800576e:	f8cd a000 	str.w	sl, [sp]
 8005772:	464b      	mov	r3, r9
 8005774:	aa03      	add	r2, sp, #12
 8005776:	4621      	mov	r1, r4
 8005778:	4640      	mov	r0, r8
 800577a:	f7ff fee7 	bl	800554c <_printf_common>
 800577e:	3001      	adds	r0, #1
 8005780:	d14a      	bne.n	8005818 <_printf_i+0x1f0>
 8005782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005786:	b004      	add	sp, #16
 8005788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	f043 0320 	orr.w	r3, r3, #32
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	4832      	ldr	r0, [pc, #200]	@ (8005860 <_printf_i+0x238>)
 8005796:	2778      	movs	r7, #120	@ 0x78
 8005798:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	6831      	ldr	r1, [r6, #0]
 80057a0:	061f      	lsls	r7, r3, #24
 80057a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80057a6:	d402      	bmi.n	80057ae <_printf_i+0x186>
 80057a8:	065f      	lsls	r7, r3, #25
 80057aa:	bf48      	it	mi
 80057ac:	b2ad      	uxthmi	r5, r5
 80057ae:	6031      	str	r1, [r6, #0]
 80057b0:	07d9      	lsls	r1, r3, #31
 80057b2:	bf44      	itt	mi
 80057b4:	f043 0320 	orrmi.w	r3, r3, #32
 80057b8:	6023      	strmi	r3, [r4, #0]
 80057ba:	b11d      	cbz	r5, 80057c4 <_printf_i+0x19c>
 80057bc:	2310      	movs	r3, #16
 80057be:	e7ad      	b.n	800571c <_printf_i+0xf4>
 80057c0:	4826      	ldr	r0, [pc, #152]	@ (800585c <_printf_i+0x234>)
 80057c2:	e7e9      	b.n	8005798 <_printf_i+0x170>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	f023 0320 	bic.w	r3, r3, #32
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	e7f6      	b.n	80057bc <_printf_i+0x194>
 80057ce:	4616      	mov	r6, r2
 80057d0:	e7bd      	b.n	800574e <_printf_i+0x126>
 80057d2:	6833      	ldr	r3, [r6, #0]
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	6961      	ldr	r1, [r4, #20]
 80057d8:	1d18      	adds	r0, r3, #4
 80057da:	6030      	str	r0, [r6, #0]
 80057dc:	062e      	lsls	r6, r5, #24
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	d501      	bpl.n	80057e6 <_printf_i+0x1be>
 80057e2:	6019      	str	r1, [r3, #0]
 80057e4:	e002      	b.n	80057ec <_printf_i+0x1c4>
 80057e6:	0668      	lsls	r0, r5, #25
 80057e8:	d5fb      	bpl.n	80057e2 <_printf_i+0x1ba>
 80057ea:	8019      	strh	r1, [r3, #0]
 80057ec:	2300      	movs	r3, #0
 80057ee:	6123      	str	r3, [r4, #16]
 80057f0:	4616      	mov	r6, r2
 80057f2:	e7bc      	b.n	800576e <_printf_i+0x146>
 80057f4:	6833      	ldr	r3, [r6, #0]
 80057f6:	1d1a      	adds	r2, r3, #4
 80057f8:	6032      	str	r2, [r6, #0]
 80057fa:	681e      	ldr	r6, [r3, #0]
 80057fc:	6862      	ldr	r2, [r4, #4]
 80057fe:	2100      	movs	r1, #0
 8005800:	4630      	mov	r0, r6
 8005802:	f7fa fd1d 	bl	8000240 <memchr>
 8005806:	b108      	cbz	r0, 800580c <_printf_i+0x1e4>
 8005808:	1b80      	subs	r0, r0, r6
 800580a:	6060      	str	r0, [r4, #4]
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	6123      	str	r3, [r4, #16]
 8005810:	2300      	movs	r3, #0
 8005812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005816:	e7aa      	b.n	800576e <_printf_i+0x146>
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	4632      	mov	r2, r6
 800581c:	4649      	mov	r1, r9
 800581e:	4640      	mov	r0, r8
 8005820:	47d0      	blx	sl
 8005822:	3001      	adds	r0, #1
 8005824:	d0ad      	beq.n	8005782 <_printf_i+0x15a>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	079b      	lsls	r3, r3, #30
 800582a:	d413      	bmi.n	8005854 <_printf_i+0x22c>
 800582c:	68e0      	ldr	r0, [r4, #12]
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	4298      	cmp	r0, r3
 8005832:	bfb8      	it	lt
 8005834:	4618      	movlt	r0, r3
 8005836:	e7a6      	b.n	8005786 <_printf_i+0x15e>
 8005838:	2301      	movs	r3, #1
 800583a:	4632      	mov	r2, r6
 800583c:	4649      	mov	r1, r9
 800583e:	4640      	mov	r0, r8
 8005840:	47d0      	blx	sl
 8005842:	3001      	adds	r0, #1
 8005844:	d09d      	beq.n	8005782 <_printf_i+0x15a>
 8005846:	3501      	adds	r5, #1
 8005848:	68e3      	ldr	r3, [r4, #12]
 800584a:	9903      	ldr	r1, [sp, #12]
 800584c:	1a5b      	subs	r3, r3, r1
 800584e:	42ab      	cmp	r3, r5
 8005850:	dcf2      	bgt.n	8005838 <_printf_i+0x210>
 8005852:	e7eb      	b.n	800582c <_printf_i+0x204>
 8005854:	2500      	movs	r5, #0
 8005856:	f104 0619 	add.w	r6, r4, #25
 800585a:	e7f5      	b.n	8005848 <_printf_i+0x220>
 800585c:	08007c72 	.word	0x08007c72
 8005860:	08007c83 	.word	0x08007c83

08005864 <std>:
 8005864:	2300      	movs	r3, #0
 8005866:	b510      	push	{r4, lr}
 8005868:	4604      	mov	r4, r0
 800586a:	e9c0 3300 	strd	r3, r3, [r0]
 800586e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005872:	6083      	str	r3, [r0, #8]
 8005874:	8181      	strh	r1, [r0, #12]
 8005876:	6643      	str	r3, [r0, #100]	@ 0x64
 8005878:	81c2      	strh	r2, [r0, #14]
 800587a:	6183      	str	r3, [r0, #24]
 800587c:	4619      	mov	r1, r3
 800587e:	2208      	movs	r2, #8
 8005880:	305c      	adds	r0, #92	@ 0x5c
 8005882:	f000 f916 	bl	8005ab2 <memset>
 8005886:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <std+0x58>)
 8005888:	6263      	str	r3, [r4, #36]	@ 0x24
 800588a:	4b0d      	ldr	r3, [pc, #52]	@ (80058c0 <std+0x5c>)
 800588c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800588e:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <std+0x60>)
 8005890:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005892:	4b0d      	ldr	r3, [pc, #52]	@ (80058c8 <std+0x64>)
 8005894:	6323      	str	r3, [r4, #48]	@ 0x30
 8005896:	4b0d      	ldr	r3, [pc, #52]	@ (80058cc <std+0x68>)
 8005898:	6224      	str	r4, [r4, #32]
 800589a:	429c      	cmp	r4, r3
 800589c:	d006      	beq.n	80058ac <std+0x48>
 800589e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058a2:	4294      	cmp	r4, r2
 80058a4:	d002      	beq.n	80058ac <std+0x48>
 80058a6:	33d0      	adds	r3, #208	@ 0xd0
 80058a8:	429c      	cmp	r4, r3
 80058aa:	d105      	bne.n	80058b8 <std+0x54>
 80058ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b4:	f000 b97a 	b.w	8005bac <__retarget_lock_init_recursive>
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	08005a2d 	.word	0x08005a2d
 80058c0:	08005a4f 	.word	0x08005a4f
 80058c4:	08005a87 	.word	0x08005a87
 80058c8:	08005aab 	.word	0x08005aab
 80058cc:	200007e4 	.word	0x200007e4

080058d0 <stdio_exit_handler>:
 80058d0:	4a02      	ldr	r2, [pc, #8]	@ (80058dc <stdio_exit_handler+0xc>)
 80058d2:	4903      	ldr	r1, [pc, #12]	@ (80058e0 <stdio_exit_handler+0x10>)
 80058d4:	4803      	ldr	r0, [pc, #12]	@ (80058e4 <stdio_exit_handler+0x14>)
 80058d6:	f000 b869 	b.w	80059ac <_fwalk_sglue>
 80058da:	bf00      	nop
 80058dc:	20000018 	.word	0x20000018
 80058e0:	08007431 	.word	0x08007431
 80058e4:	20000028 	.word	0x20000028

080058e8 <cleanup_stdio>:
 80058e8:	6841      	ldr	r1, [r0, #4]
 80058ea:	4b0c      	ldr	r3, [pc, #48]	@ (800591c <cleanup_stdio+0x34>)
 80058ec:	4299      	cmp	r1, r3
 80058ee:	b510      	push	{r4, lr}
 80058f0:	4604      	mov	r4, r0
 80058f2:	d001      	beq.n	80058f8 <cleanup_stdio+0x10>
 80058f4:	f001 fd9c 	bl	8007430 <_fflush_r>
 80058f8:	68a1      	ldr	r1, [r4, #8]
 80058fa:	4b09      	ldr	r3, [pc, #36]	@ (8005920 <cleanup_stdio+0x38>)
 80058fc:	4299      	cmp	r1, r3
 80058fe:	d002      	beq.n	8005906 <cleanup_stdio+0x1e>
 8005900:	4620      	mov	r0, r4
 8005902:	f001 fd95 	bl	8007430 <_fflush_r>
 8005906:	68e1      	ldr	r1, [r4, #12]
 8005908:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <cleanup_stdio+0x3c>)
 800590a:	4299      	cmp	r1, r3
 800590c:	d004      	beq.n	8005918 <cleanup_stdio+0x30>
 800590e:	4620      	mov	r0, r4
 8005910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005914:	f001 bd8c 	b.w	8007430 <_fflush_r>
 8005918:	bd10      	pop	{r4, pc}
 800591a:	bf00      	nop
 800591c:	200007e4 	.word	0x200007e4
 8005920:	2000084c 	.word	0x2000084c
 8005924:	200008b4 	.word	0x200008b4

08005928 <global_stdio_init.part.0>:
 8005928:	b510      	push	{r4, lr}
 800592a:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <global_stdio_init.part.0+0x30>)
 800592c:	4c0b      	ldr	r4, [pc, #44]	@ (800595c <global_stdio_init.part.0+0x34>)
 800592e:	4a0c      	ldr	r2, [pc, #48]	@ (8005960 <global_stdio_init.part.0+0x38>)
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	4620      	mov	r0, r4
 8005934:	2200      	movs	r2, #0
 8005936:	2104      	movs	r1, #4
 8005938:	f7ff ff94 	bl	8005864 <std>
 800593c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005940:	2201      	movs	r2, #1
 8005942:	2109      	movs	r1, #9
 8005944:	f7ff ff8e 	bl	8005864 <std>
 8005948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800594c:	2202      	movs	r2, #2
 800594e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005952:	2112      	movs	r1, #18
 8005954:	f7ff bf86 	b.w	8005864 <std>
 8005958:	2000091c 	.word	0x2000091c
 800595c:	200007e4 	.word	0x200007e4
 8005960:	080058d1 	.word	0x080058d1

08005964 <__sfp_lock_acquire>:
 8005964:	4801      	ldr	r0, [pc, #4]	@ (800596c <__sfp_lock_acquire+0x8>)
 8005966:	f000 b922 	b.w	8005bae <__retarget_lock_acquire_recursive>
 800596a:	bf00      	nop
 800596c:	20000925 	.word	0x20000925

08005970 <__sfp_lock_release>:
 8005970:	4801      	ldr	r0, [pc, #4]	@ (8005978 <__sfp_lock_release+0x8>)
 8005972:	f000 b91d 	b.w	8005bb0 <__retarget_lock_release_recursive>
 8005976:	bf00      	nop
 8005978:	20000925 	.word	0x20000925

0800597c <__sinit>:
 800597c:	b510      	push	{r4, lr}
 800597e:	4604      	mov	r4, r0
 8005980:	f7ff fff0 	bl	8005964 <__sfp_lock_acquire>
 8005984:	6a23      	ldr	r3, [r4, #32]
 8005986:	b11b      	cbz	r3, 8005990 <__sinit+0x14>
 8005988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598c:	f7ff bff0 	b.w	8005970 <__sfp_lock_release>
 8005990:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <__sinit+0x28>)
 8005992:	6223      	str	r3, [r4, #32]
 8005994:	4b04      	ldr	r3, [pc, #16]	@ (80059a8 <__sinit+0x2c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1f5      	bne.n	8005988 <__sinit+0xc>
 800599c:	f7ff ffc4 	bl	8005928 <global_stdio_init.part.0>
 80059a0:	e7f2      	b.n	8005988 <__sinit+0xc>
 80059a2:	bf00      	nop
 80059a4:	080058e9 	.word	0x080058e9
 80059a8:	2000091c 	.word	0x2000091c

080059ac <_fwalk_sglue>:
 80059ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b0:	4607      	mov	r7, r0
 80059b2:	4688      	mov	r8, r1
 80059b4:	4614      	mov	r4, r2
 80059b6:	2600      	movs	r6, #0
 80059b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059bc:	f1b9 0901 	subs.w	r9, r9, #1
 80059c0:	d505      	bpl.n	80059ce <_fwalk_sglue+0x22>
 80059c2:	6824      	ldr	r4, [r4, #0]
 80059c4:	2c00      	cmp	r4, #0
 80059c6:	d1f7      	bne.n	80059b8 <_fwalk_sglue+0xc>
 80059c8:	4630      	mov	r0, r6
 80059ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ce:	89ab      	ldrh	r3, [r5, #12]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d907      	bls.n	80059e4 <_fwalk_sglue+0x38>
 80059d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059d8:	3301      	adds	r3, #1
 80059da:	d003      	beq.n	80059e4 <_fwalk_sglue+0x38>
 80059dc:	4629      	mov	r1, r5
 80059de:	4638      	mov	r0, r7
 80059e0:	47c0      	blx	r8
 80059e2:	4306      	orrs	r6, r0
 80059e4:	3568      	adds	r5, #104	@ 0x68
 80059e6:	e7e9      	b.n	80059bc <_fwalk_sglue+0x10>

080059e8 <siprintf>:
 80059e8:	b40e      	push	{r1, r2, r3}
 80059ea:	b510      	push	{r4, lr}
 80059ec:	b09d      	sub	sp, #116	@ 0x74
 80059ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80059f0:	9002      	str	r0, [sp, #8]
 80059f2:	9006      	str	r0, [sp, #24]
 80059f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059f8:	480a      	ldr	r0, [pc, #40]	@ (8005a24 <siprintf+0x3c>)
 80059fa:	9107      	str	r1, [sp, #28]
 80059fc:	9104      	str	r1, [sp, #16]
 80059fe:	490a      	ldr	r1, [pc, #40]	@ (8005a28 <siprintf+0x40>)
 8005a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a04:	9105      	str	r1, [sp, #20]
 8005a06:	2400      	movs	r4, #0
 8005a08:	a902      	add	r1, sp, #8
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a10:	f001 fb8e 	bl	8007130 <_svfiprintf_r>
 8005a14:	9b02      	ldr	r3, [sp, #8]
 8005a16:	701c      	strb	r4, [r3, #0]
 8005a18:	b01d      	add	sp, #116	@ 0x74
 8005a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a1e:	b003      	add	sp, #12
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000024 	.word	0x20000024
 8005a28:	ffff0208 	.word	0xffff0208

08005a2c <__sread>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	460c      	mov	r4, r1
 8005a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a34:	f000 f86c 	bl	8005b10 <_read_r>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	bfab      	itete	ge
 8005a3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a40:	181b      	addge	r3, r3, r0
 8005a42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a46:	bfac      	ite	ge
 8005a48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a4a:	81a3      	strhlt	r3, [r4, #12]
 8005a4c:	bd10      	pop	{r4, pc}

08005a4e <__swrite>:
 8005a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a52:	461f      	mov	r7, r3
 8005a54:	898b      	ldrh	r3, [r1, #12]
 8005a56:	05db      	lsls	r3, r3, #23
 8005a58:	4605      	mov	r5, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	d505      	bpl.n	8005a6c <__swrite+0x1e>
 8005a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a64:	2302      	movs	r3, #2
 8005a66:	2200      	movs	r2, #0
 8005a68:	f000 f840 	bl	8005aec <_lseek_r>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	4632      	mov	r2, r6
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a82:	f000 b857 	b.w	8005b34 <_write_r>

08005a86 <__sseek>:
 8005a86:	b510      	push	{r4, lr}
 8005a88:	460c      	mov	r4, r1
 8005a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8e:	f000 f82d 	bl	8005aec <_lseek_r>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	bf15      	itete	ne
 8005a98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aa2:	81a3      	strheq	r3, [r4, #12]
 8005aa4:	bf18      	it	ne
 8005aa6:	81a3      	strhne	r3, [r4, #12]
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <__sclose>:
 8005aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aae:	f000 b80d 	b.w	8005acc <_close_r>

08005ab2 <memset>:
 8005ab2:	4402      	add	r2, r0
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d100      	bne.n	8005abc <memset+0xa>
 8005aba:	4770      	bx	lr
 8005abc:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac0:	e7f9      	b.n	8005ab6 <memset+0x4>
	...

08005ac4 <_localeconv_r>:
 8005ac4:	4800      	ldr	r0, [pc, #0]	@ (8005ac8 <_localeconv_r+0x4>)
 8005ac6:	4770      	bx	lr
 8005ac8:	20000164 	.word	0x20000164

08005acc <_close_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d06      	ldr	r5, [pc, #24]	@ (8005ae8 <_close_r+0x1c>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fb f961 	bl	8000d9e <_close>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_close_r+0x1a>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_close_r+0x1a>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000920 	.word	0x20000920

08005aec <_lseek_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4d07      	ldr	r5, [pc, #28]	@ (8005b0c <_lseek_r+0x20>)
 8005af0:	4604      	mov	r4, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	4611      	mov	r1, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7fb f976 	bl	8000dec <_lseek>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_lseek_r+0x1e>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_lseek_r+0x1e>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	20000920 	.word	0x20000920

08005b10 <_read_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	@ (8005b30 <_read_r+0x20>)
 8005b14:	4604      	mov	r4, r0
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	602a      	str	r2, [r5, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f7fb f904 	bl	8000d2c <_read>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_read_r+0x1e>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_read_r+0x1e>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	20000920 	.word	0x20000920

08005b34 <_write_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d07      	ldr	r5, [pc, #28]	@ (8005b54 <_write_r+0x20>)
 8005b38:	4604      	mov	r4, r0
 8005b3a:	4608      	mov	r0, r1
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	2200      	movs	r2, #0
 8005b40:	602a      	str	r2, [r5, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f7fb f90f 	bl	8000d66 <_write>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d102      	bne.n	8005b52 <_write_r+0x1e>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	b103      	cbz	r3, 8005b52 <_write_r+0x1e>
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	20000920 	.word	0x20000920

08005b58 <__errno>:
 8005b58:	4b01      	ldr	r3, [pc, #4]	@ (8005b60 <__errno+0x8>)
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000024 	.word	0x20000024

08005b64 <__libc_init_array>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	4d0d      	ldr	r5, [pc, #52]	@ (8005b9c <__libc_init_array+0x38>)
 8005b68:	4c0d      	ldr	r4, [pc, #52]	@ (8005ba0 <__libc_init_array+0x3c>)
 8005b6a:	1b64      	subs	r4, r4, r5
 8005b6c:	10a4      	asrs	r4, r4, #2
 8005b6e:	2600      	movs	r6, #0
 8005b70:	42a6      	cmp	r6, r4
 8005b72:	d109      	bne.n	8005b88 <__libc_init_array+0x24>
 8005b74:	4d0b      	ldr	r5, [pc, #44]	@ (8005ba4 <__libc_init_array+0x40>)
 8005b76:	4c0c      	ldr	r4, [pc, #48]	@ (8005ba8 <__libc_init_array+0x44>)
 8005b78:	f001 fff8 	bl	8007b6c <_init>
 8005b7c:	1b64      	subs	r4, r4, r5
 8005b7e:	10a4      	asrs	r4, r4, #2
 8005b80:	2600      	movs	r6, #0
 8005b82:	42a6      	cmp	r6, r4
 8005b84:	d105      	bne.n	8005b92 <__libc_init_array+0x2e>
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8c:	4798      	blx	r3
 8005b8e:	3601      	adds	r6, #1
 8005b90:	e7ee      	b.n	8005b70 <__libc_init_array+0xc>
 8005b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b96:	4798      	blx	r3
 8005b98:	3601      	adds	r6, #1
 8005b9a:	e7f2      	b.n	8005b82 <__libc_init_array+0x1e>
 8005b9c:	08007fdc 	.word	0x08007fdc
 8005ba0:	08007fdc 	.word	0x08007fdc
 8005ba4:	08007fdc 	.word	0x08007fdc
 8005ba8:	08007fe0 	.word	0x08007fe0

08005bac <__retarget_lock_init_recursive>:
 8005bac:	4770      	bx	lr

08005bae <__retarget_lock_acquire_recursive>:
 8005bae:	4770      	bx	lr

08005bb0 <__retarget_lock_release_recursive>:
 8005bb0:	4770      	bx	lr

08005bb2 <quorem>:
 8005bb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb6:	6903      	ldr	r3, [r0, #16]
 8005bb8:	690c      	ldr	r4, [r1, #16]
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	db7e      	blt.n	8005cbe <quorem+0x10c>
 8005bc0:	3c01      	subs	r4, #1
 8005bc2:	f101 0814 	add.w	r8, r1, #20
 8005bc6:	00a3      	lsls	r3, r4, #2
 8005bc8:	f100 0514 	add.w	r5, r0, #20
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	429a      	cmp	r2, r3
 8005be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005be8:	d32e      	bcc.n	8005c48 <quorem+0x96>
 8005bea:	f04f 0a00 	mov.w	sl, #0
 8005bee:	46c4      	mov	ip, r8
 8005bf0:	46ae      	mov	lr, r5
 8005bf2:	46d3      	mov	fp, sl
 8005bf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bf8:	b298      	uxth	r0, r3
 8005bfa:	fb06 a000 	mla	r0, r6, r0, sl
 8005bfe:	0c02      	lsrs	r2, r0, #16
 8005c00:	0c1b      	lsrs	r3, r3, #16
 8005c02:	fb06 2303 	mla	r3, r6, r3, r2
 8005c06:	f8de 2000 	ldr.w	r2, [lr]
 8005c0a:	b280      	uxth	r0, r0
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	1a12      	subs	r2, r2, r0
 8005c10:	445a      	add	r2, fp
 8005c12:	f8de 0000 	ldr.w	r0, [lr]
 8005c16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c24:	b292      	uxth	r2, r2
 8005c26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c2a:	45e1      	cmp	r9, ip
 8005c2c:	f84e 2b04 	str.w	r2, [lr], #4
 8005c30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c34:	d2de      	bcs.n	8005bf4 <quorem+0x42>
 8005c36:	9b00      	ldr	r3, [sp, #0]
 8005c38:	58eb      	ldr	r3, [r5, r3]
 8005c3a:	b92b      	cbnz	r3, 8005c48 <quorem+0x96>
 8005c3c:	9b01      	ldr	r3, [sp, #4]
 8005c3e:	3b04      	subs	r3, #4
 8005c40:	429d      	cmp	r5, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	d32f      	bcc.n	8005ca6 <quorem+0xf4>
 8005c46:	613c      	str	r4, [r7, #16]
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f001 f90d 	bl	8006e68 <__mcmp>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	db25      	blt.n	8005c9e <quorem+0xec>
 8005c52:	4629      	mov	r1, r5
 8005c54:	2000      	movs	r0, #0
 8005c56:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c5a:	f8d1 c000 	ldr.w	ip, [r1]
 8005c5e:	fa1f fe82 	uxth.w	lr, r2
 8005c62:	fa1f f38c 	uxth.w	r3, ip
 8005c66:	eba3 030e 	sub.w	r3, r3, lr
 8005c6a:	4403      	add	r3, r0
 8005c6c:	0c12      	lsrs	r2, r2, #16
 8005c6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c7c:	45c1      	cmp	r9, r8
 8005c7e:	f841 3b04 	str.w	r3, [r1], #4
 8005c82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c86:	d2e6      	bcs.n	8005c56 <quorem+0xa4>
 8005c88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c90:	b922      	cbnz	r2, 8005c9c <quorem+0xea>
 8005c92:	3b04      	subs	r3, #4
 8005c94:	429d      	cmp	r5, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	d30b      	bcc.n	8005cb2 <quorem+0x100>
 8005c9a:	613c      	str	r4, [r7, #16]
 8005c9c:	3601      	adds	r6, #1
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	b003      	add	sp, #12
 8005ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	3b04      	subs	r3, #4
 8005caa:	2a00      	cmp	r2, #0
 8005cac:	d1cb      	bne.n	8005c46 <quorem+0x94>
 8005cae:	3c01      	subs	r4, #1
 8005cb0:	e7c6      	b.n	8005c40 <quorem+0x8e>
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	2a00      	cmp	r2, #0
 8005cb8:	d1ef      	bne.n	8005c9a <quorem+0xe8>
 8005cba:	3c01      	subs	r4, #1
 8005cbc:	e7ea      	b.n	8005c94 <quorem+0xe2>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	e7ee      	b.n	8005ca0 <quorem+0xee>
 8005cc2:	0000      	movs	r0, r0
 8005cc4:	0000      	movs	r0, r0
	...

08005cc8 <_dtoa_r>:
 8005cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ccc:	ed2d 8b02 	vpush	{d8}
 8005cd0:	69c7      	ldr	r7, [r0, #28]
 8005cd2:	b091      	sub	sp, #68	@ 0x44
 8005cd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005cd8:	ec55 4b10 	vmov	r4, r5, d0
 8005cdc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005cde:	9107      	str	r1, [sp, #28]
 8005ce0:	4681      	mov	r9, r0
 8005ce2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ce4:	930d      	str	r3, [sp, #52]	@ 0x34
 8005ce6:	b97f      	cbnz	r7, 8005d08 <_dtoa_r+0x40>
 8005ce8:	2010      	movs	r0, #16
 8005cea:	f000 fd95 	bl	8006818 <malloc>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	f8c9 001c 	str.w	r0, [r9, #28]
 8005cf4:	b920      	cbnz	r0, 8005d00 <_dtoa_r+0x38>
 8005cf6:	4ba0      	ldr	r3, [pc, #640]	@ (8005f78 <_dtoa_r+0x2b0>)
 8005cf8:	21ef      	movs	r1, #239	@ 0xef
 8005cfa:	48a0      	ldr	r0, [pc, #640]	@ (8005f7c <_dtoa_r+0x2b4>)
 8005cfc:	f001 fbf8 	bl	80074f0 <__assert_func>
 8005d00:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d04:	6007      	str	r7, [r0, #0]
 8005d06:	60c7      	str	r7, [r0, #12]
 8005d08:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d0c:	6819      	ldr	r1, [r3, #0]
 8005d0e:	b159      	cbz	r1, 8005d28 <_dtoa_r+0x60>
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	604a      	str	r2, [r1, #4]
 8005d14:	2301      	movs	r3, #1
 8005d16:	4093      	lsls	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
 8005d1a:	4648      	mov	r0, r9
 8005d1c:	f000 fe72 	bl	8006a04 <_Bfree>
 8005d20:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	1e2b      	subs	r3, r5, #0
 8005d2a:	bfbb      	ittet	lt
 8005d2c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d30:	9303      	strlt	r3, [sp, #12]
 8005d32:	2300      	movge	r3, #0
 8005d34:	2201      	movlt	r2, #1
 8005d36:	bfac      	ite	ge
 8005d38:	6033      	strge	r3, [r6, #0]
 8005d3a:	6032      	strlt	r2, [r6, #0]
 8005d3c:	4b90      	ldr	r3, [pc, #576]	@ (8005f80 <_dtoa_r+0x2b8>)
 8005d3e:	9e03      	ldr	r6, [sp, #12]
 8005d40:	43b3      	bics	r3, r6
 8005d42:	d110      	bne.n	8005d66 <_dtoa_r+0x9e>
 8005d44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d46:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005d50:	4323      	orrs	r3, r4
 8005d52:	f000 84e6 	beq.w	8006722 <_dtoa_r+0xa5a>
 8005d56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005d58:	4f8a      	ldr	r7, [pc, #552]	@ (8005f84 <_dtoa_r+0x2bc>)
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 84e8 	beq.w	8006730 <_dtoa_r+0xa68>
 8005d60:	1cfb      	adds	r3, r7, #3
 8005d62:	f000 bce3 	b.w	800672c <_dtoa_r+0xa64>
 8005d66:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005d6a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d72:	d10a      	bne.n	8005d8a <_dtoa_r+0xc2>
 8005d74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d76:	2301      	movs	r3, #1
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005d7c:	b113      	cbz	r3, 8005d84 <_dtoa_r+0xbc>
 8005d7e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005d80:	4b81      	ldr	r3, [pc, #516]	@ (8005f88 <_dtoa_r+0x2c0>)
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	4f81      	ldr	r7, [pc, #516]	@ (8005f8c <_dtoa_r+0x2c4>)
 8005d86:	f000 bcd3 	b.w	8006730 <_dtoa_r+0xa68>
 8005d8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005d8c:	a90f      	add	r1, sp, #60	@ 0x3c
 8005d8e:	4648      	mov	r0, r9
 8005d90:	eeb0 0b48 	vmov.f64	d0, d8
 8005d94:	f001 f918 	bl	8006fc8 <__d2b>
 8005d98:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d9e:	9001      	str	r0, [sp, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d045      	beq.n	8005e30 <_dtoa_r+0x168>
 8005da4:	eeb0 7b48 	vmov.f64	d7, d8
 8005da8:	ee18 1a90 	vmov	r1, s17
 8005dac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005db0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005db4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005db8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005dbc:	2500      	movs	r5, #0
 8005dbe:	ee07 1a90 	vmov	s15, r1
 8005dc2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005dc6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005f60 <_dtoa_r+0x298>
 8005dca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005f68 <_dtoa_r+0x2a0>
 8005dd2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005dd6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005f70 <_dtoa_r+0x2a8>
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005de2:	eeb0 7b46 	vmov.f64	d7, d6
 8005de6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005dea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005dee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df6:	ee16 8a90 	vmov	r8, s13
 8005dfa:	d508      	bpl.n	8005e0e <_dtoa_r+0x146>
 8005dfc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005e00:	eeb4 6b47 	vcmp.f64	d6, d7
 8005e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e08:	bf18      	it	ne
 8005e0a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8005e0e:	f1b8 0f16 	cmp.w	r8, #22
 8005e12:	d82b      	bhi.n	8005e6c <_dtoa_r+0x1a4>
 8005e14:	495e      	ldr	r1, [pc, #376]	@ (8005f90 <_dtoa_r+0x2c8>)
 8005e16:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005e1a:	ed91 7b00 	vldr	d7, [r1]
 8005e1e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e26:	d501      	bpl.n	8005e2c <_dtoa_r+0x164>
 8005e28:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	e01e      	b.n	8005e6e <_dtoa_r+0x1a6>
 8005e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005e38:	2920      	cmp	r1, #32
 8005e3a:	bfc1      	itttt	gt
 8005e3c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005e40:	408e      	lslgt	r6, r1
 8005e42:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005e46:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005e4a:	bfd6      	itet	le
 8005e4c:	f1c1 0120 	rsble	r1, r1, #32
 8005e50:	4331      	orrgt	r1, r6
 8005e52:	fa04 f101 	lslle.w	r1, r4, r1
 8005e56:	ee07 1a90 	vmov	s15, r1
 8005e5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	ee17 1a90 	vmov	r1, s15
 8005e64:	2501      	movs	r5, #1
 8005e66:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005e6a:	e7a8      	b.n	8005dbe <_dtoa_r+0xf6>
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	1e53      	subs	r3, r2, #1
 8005e72:	9306      	str	r3, [sp, #24]
 8005e74:	bf45      	ittet	mi
 8005e76:	f1c2 0301 	rsbmi	r3, r2, #1
 8005e7a:	9304      	strmi	r3, [sp, #16]
 8005e7c:	2300      	movpl	r3, #0
 8005e7e:	2300      	movmi	r3, #0
 8005e80:	bf4c      	ite	mi
 8005e82:	9306      	strmi	r3, [sp, #24]
 8005e84:	9304      	strpl	r3, [sp, #16]
 8005e86:	f1b8 0f00 	cmp.w	r8, #0
 8005e8a:	910c      	str	r1, [sp, #48]	@ 0x30
 8005e8c:	db18      	blt.n	8005ec0 <_dtoa_r+0x1f8>
 8005e8e:	9b06      	ldr	r3, [sp, #24]
 8005e90:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005e94:	4443      	add	r3, r8
 8005e96:	9306      	str	r3, [sp, #24]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9a07      	ldr	r2, [sp, #28]
 8005e9c:	2a09      	cmp	r2, #9
 8005e9e:	d845      	bhi.n	8005f2c <_dtoa_r+0x264>
 8005ea0:	2a05      	cmp	r2, #5
 8005ea2:	bfc4      	itt	gt
 8005ea4:	3a04      	subgt	r2, #4
 8005ea6:	9207      	strgt	r2, [sp, #28]
 8005ea8:	9a07      	ldr	r2, [sp, #28]
 8005eaa:	f1a2 0202 	sub.w	r2, r2, #2
 8005eae:	bfcc      	ite	gt
 8005eb0:	2400      	movgt	r4, #0
 8005eb2:	2401      	movle	r4, #1
 8005eb4:	2a03      	cmp	r2, #3
 8005eb6:	d844      	bhi.n	8005f42 <_dtoa_r+0x27a>
 8005eb8:	e8df f002 	tbb	[pc, r2]
 8005ebc:	0b173634 	.word	0x0b173634
 8005ec0:	9b04      	ldr	r3, [sp, #16]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	eba3 0308 	sub.w	r3, r3, r8
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	920a      	str	r2, [sp, #40]	@ 0x28
 8005ecc:	f1c8 0300 	rsb	r3, r8, #0
 8005ed0:	e7e3      	b.n	8005e9a <_dtoa_r+0x1d2>
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	9208      	str	r2, [sp, #32]
 8005ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ed8:	eb08 0b02 	add.w	fp, r8, r2
 8005edc:	f10b 0a01 	add.w	sl, fp, #1
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	2a01      	cmp	r2, #1
 8005ee4:	bfb8      	it	lt
 8005ee6:	2201      	movlt	r2, #1
 8005ee8:	e006      	b.n	8005ef8 <_dtoa_r+0x230>
 8005eea:	2201      	movs	r2, #1
 8005eec:	9208      	str	r2, [sp, #32]
 8005eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	dd29      	ble.n	8005f48 <_dtoa_r+0x280>
 8005ef4:	4693      	mov	fp, r2
 8005ef6:	4692      	mov	sl, r2
 8005ef8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005efc:	2100      	movs	r1, #0
 8005efe:	2004      	movs	r0, #4
 8005f00:	f100 0614 	add.w	r6, r0, #20
 8005f04:	4296      	cmp	r6, r2
 8005f06:	d926      	bls.n	8005f56 <_dtoa_r+0x28e>
 8005f08:	6079      	str	r1, [r7, #4]
 8005f0a:	4648      	mov	r0, r9
 8005f0c:	9305      	str	r3, [sp, #20]
 8005f0e:	f000 fd39 	bl	8006984 <_Balloc>
 8005f12:	9b05      	ldr	r3, [sp, #20]
 8005f14:	4607      	mov	r7, r0
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d13e      	bne.n	8005f98 <_dtoa_r+0x2d0>
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005f94 <_dtoa_r+0x2cc>)
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f22:	e6ea      	b.n	8005cfa <_dtoa_r+0x32>
 8005f24:	2200      	movs	r2, #0
 8005f26:	e7e1      	b.n	8005eec <_dtoa_r+0x224>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	e7d3      	b.n	8005ed4 <_dtoa_r+0x20c>
 8005f2c:	2401      	movs	r4, #1
 8005f2e:	2200      	movs	r2, #0
 8005f30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005f34:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005f38:	2100      	movs	r1, #0
 8005f3a:	46da      	mov	sl, fp
 8005f3c:	2212      	movs	r2, #18
 8005f3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f40:	e7da      	b.n	8005ef8 <_dtoa_r+0x230>
 8005f42:	2201      	movs	r2, #1
 8005f44:	9208      	str	r2, [sp, #32]
 8005f46:	e7f5      	b.n	8005f34 <_dtoa_r+0x26c>
 8005f48:	f04f 0b01 	mov.w	fp, #1
 8005f4c:	46da      	mov	sl, fp
 8005f4e:	465a      	mov	r2, fp
 8005f50:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005f54:	e7d0      	b.n	8005ef8 <_dtoa_r+0x230>
 8005f56:	3101      	adds	r1, #1
 8005f58:	0040      	lsls	r0, r0, #1
 8005f5a:	e7d1      	b.n	8005f00 <_dtoa_r+0x238>
 8005f5c:	f3af 8000 	nop.w
 8005f60:	636f4361 	.word	0x636f4361
 8005f64:	3fd287a7 	.word	0x3fd287a7
 8005f68:	8b60c8b3 	.word	0x8b60c8b3
 8005f6c:	3fc68a28 	.word	0x3fc68a28
 8005f70:	509f79fb 	.word	0x509f79fb
 8005f74:	3fd34413 	.word	0x3fd34413
 8005f78:	08007ca1 	.word	0x08007ca1
 8005f7c:	08007cb8 	.word	0x08007cb8
 8005f80:	7ff00000 	.word	0x7ff00000
 8005f84:	08007c9d 	.word	0x08007c9d
 8005f88:	08007c71 	.word	0x08007c71
 8005f8c:	08007c70 	.word	0x08007c70
 8005f90:	08007e08 	.word	0x08007e08
 8005f94:	08007d10 	.word	0x08007d10
 8005f98:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005f9c:	f1ba 0f0e 	cmp.w	sl, #14
 8005fa0:	6010      	str	r0, [r2, #0]
 8005fa2:	d86e      	bhi.n	8006082 <_dtoa_r+0x3ba>
 8005fa4:	2c00      	cmp	r4, #0
 8005fa6:	d06c      	beq.n	8006082 <_dtoa_r+0x3ba>
 8005fa8:	f1b8 0f00 	cmp.w	r8, #0
 8005fac:	f340 80b4 	ble.w	8006118 <_dtoa_r+0x450>
 8005fb0:	4ac8      	ldr	r2, [pc, #800]	@ (80062d4 <_dtoa_r+0x60c>)
 8005fb2:	f008 010f 	and.w	r1, r8, #15
 8005fb6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005fba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005fbe:	ed92 7b00 	vldr	d7, [r2]
 8005fc2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005fc6:	f000 809b 	beq.w	8006100 <_dtoa_r+0x438>
 8005fca:	4ac3      	ldr	r2, [pc, #780]	@ (80062d8 <_dtoa_r+0x610>)
 8005fcc:	ed92 6b08 	vldr	d6, [r2, #32]
 8005fd0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005fd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005fd8:	f001 010f 	and.w	r1, r1, #15
 8005fdc:	2203      	movs	r2, #3
 8005fde:	48be      	ldr	r0, [pc, #760]	@ (80062d8 <_dtoa_r+0x610>)
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	f040 808f 	bne.w	8006104 <_dtoa_r+0x43c>
 8005fe6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005fea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005fee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ff2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005ff4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	f000 80b3 	beq.w	8006164 <_dtoa_r+0x49c>
 8005ffe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8006002:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600a:	f140 80ab 	bpl.w	8006164 <_dtoa_r+0x49c>
 800600e:	f1ba 0f00 	cmp.w	sl, #0
 8006012:	f000 80a7 	beq.w	8006164 <_dtoa_r+0x49c>
 8006016:	f1bb 0f00 	cmp.w	fp, #0
 800601a:	dd30      	ble.n	800607e <_dtoa_r+0x3b6>
 800601c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006020:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006024:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006028:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800602c:	9105      	str	r1, [sp, #20]
 800602e:	3201      	adds	r2, #1
 8006030:	465c      	mov	r4, fp
 8006032:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006036:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800603a:	ee07 2a90 	vmov	s15, r2
 800603e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006042:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006046:	ee15 2a90 	vmov	r2, s11
 800604a:	ec51 0b15 	vmov	r0, r1, d5
 800604e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8006052:	2c00      	cmp	r4, #0
 8006054:	f040 808a 	bne.w	800616c <_dtoa_r+0x4a4>
 8006058:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800605c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006060:	ec41 0b17 	vmov	d7, r0, r1
 8006064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606c:	f300 826a 	bgt.w	8006544 <_dtoa_r+0x87c>
 8006070:	eeb1 7b47 	vneg.f64	d7, d7
 8006074:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607c:	d423      	bmi.n	80060c6 <_dtoa_r+0x3fe>
 800607e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006082:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006084:	2a00      	cmp	r2, #0
 8006086:	f2c0 8129 	blt.w	80062dc <_dtoa_r+0x614>
 800608a:	f1b8 0f0e 	cmp.w	r8, #14
 800608e:	f300 8125 	bgt.w	80062dc <_dtoa_r+0x614>
 8006092:	4b90      	ldr	r3, [pc, #576]	@ (80062d4 <_dtoa_r+0x60c>)
 8006094:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006098:	ed93 6b00 	vldr	d6, [r3]
 800609c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f280 80c8 	bge.w	8006234 <_dtoa_r+0x56c>
 80060a4:	f1ba 0f00 	cmp.w	sl, #0
 80060a8:	f300 80c4 	bgt.w	8006234 <_dtoa_r+0x56c>
 80060ac:	d10b      	bne.n	80060c6 <_dtoa_r+0x3fe>
 80060ae:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80060b2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80060b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80060be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c2:	f2c0 823c 	blt.w	800653e <_dtoa_r+0x876>
 80060c6:	2400      	movs	r4, #0
 80060c8:	4625      	mov	r5, r4
 80060ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060cc:	43db      	mvns	r3, r3
 80060ce:	9305      	str	r3, [sp, #20]
 80060d0:	463e      	mov	r6, r7
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	4621      	mov	r1, r4
 80060d8:	4648      	mov	r0, r9
 80060da:	f000 fc93 	bl	8006a04 <_Bfree>
 80060de:	2d00      	cmp	r5, #0
 80060e0:	f000 80a2 	beq.w	8006228 <_dtoa_r+0x560>
 80060e4:	f1b8 0f00 	cmp.w	r8, #0
 80060e8:	d005      	beq.n	80060f6 <_dtoa_r+0x42e>
 80060ea:	45a8      	cmp	r8, r5
 80060ec:	d003      	beq.n	80060f6 <_dtoa_r+0x42e>
 80060ee:	4641      	mov	r1, r8
 80060f0:	4648      	mov	r0, r9
 80060f2:	f000 fc87 	bl	8006a04 <_Bfree>
 80060f6:	4629      	mov	r1, r5
 80060f8:	4648      	mov	r0, r9
 80060fa:	f000 fc83 	bl	8006a04 <_Bfree>
 80060fe:	e093      	b.n	8006228 <_dtoa_r+0x560>
 8006100:	2202      	movs	r2, #2
 8006102:	e76c      	b.n	8005fde <_dtoa_r+0x316>
 8006104:	07cc      	lsls	r4, r1, #31
 8006106:	d504      	bpl.n	8006112 <_dtoa_r+0x44a>
 8006108:	ed90 6b00 	vldr	d6, [r0]
 800610c:	3201      	adds	r2, #1
 800610e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006112:	1049      	asrs	r1, r1, #1
 8006114:	3008      	adds	r0, #8
 8006116:	e763      	b.n	8005fe0 <_dtoa_r+0x318>
 8006118:	d022      	beq.n	8006160 <_dtoa_r+0x498>
 800611a:	f1c8 0100 	rsb	r1, r8, #0
 800611e:	4a6d      	ldr	r2, [pc, #436]	@ (80062d4 <_dtoa_r+0x60c>)
 8006120:	f001 000f 	and.w	r0, r1, #15
 8006124:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006128:	ed92 7b00 	vldr	d7, [r2]
 800612c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006130:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006134:	4868      	ldr	r0, [pc, #416]	@ (80062d8 <_dtoa_r+0x610>)
 8006136:	1109      	asrs	r1, r1, #4
 8006138:	2400      	movs	r4, #0
 800613a:	2202      	movs	r2, #2
 800613c:	b929      	cbnz	r1, 800614a <_dtoa_r+0x482>
 800613e:	2c00      	cmp	r4, #0
 8006140:	f43f af57 	beq.w	8005ff2 <_dtoa_r+0x32a>
 8006144:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006148:	e753      	b.n	8005ff2 <_dtoa_r+0x32a>
 800614a:	07ce      	lsls	r6, r1, #31
 800614c:	d505      	bpl.n	800615a <_dtoa_r+0x492>
 800614e:	ed90 6b00 	vldr	d6, [r0]
 8006152:	3201      	adds	r2, #1
 8006154:	2401      	movs	r4, #1
 8006156:	ee27 7b06 	vmul.f64	d7, d7, d6
 800615a:	1049      	asrs	r1, r1, #1
 800615c:	3008      	adds	r0, #8
 800615e:	e7ed      	b.n	800613c <_dtoa_r+0x474>
 8006160:	2202      	movs	r2, #2
 8006162:	e746      	b.n	8005ff2 <_dtoa_r+0x32a>
 8006164:	f8cd 8014 	str.w	r8, [sp, #20]
 8006168:	4654      	mov	r4, sl
 800616a:	e762      	b.n	8006032 <_dtoa_r+0x36a>
 800616c:	4a59      	ldr	r2, [pc, #356]	@ (80062d4 <_dtoa_r+0x60c>)
 800616e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006172:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006176:	9a08      	ldr	r2, [sp, #32]
 8006178:	ec41 0b17 	vmov	d7, r0, r1
 800617c:	443c      	add	r4, r7
 800617e:	b34a      	cbz	r2, 80061d4 <_dtoa_r+0x50c>
 8006180:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006184:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8006188:	463e      	mov	r6, r7
 800618a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800618e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006192:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006196:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800619a:	ee14 2a90 	vmov	r2, s9
 800619e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80061a2:	3230      	adds	r2, #48	@ 0x30
 80061a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80061a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b0:	f806 2b01 	strb.w	r2, [r6], #1
 80061b4:	d438      	bmi.n	8006228 <_dtoa_r+0x560>
 80061b6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80061ba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80061be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c2:	d46e      	bmi.n	80062a2 <_dtoa_r+0x5da>
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	f43f af5a 	beq.w	800607e <_dtoa_r+0x3b6>
 80061ca:	ee27 7b03 	vmul.f64	d7, d7, d3
 80061ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 80061d2:	e7e0      	b.n	8006196 <_dtoa_r+0x4ce>
 80061d4:	4621      	mov	r1, r4
 80061d6:	463e      	mov	r6, r7
 80061d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80061dc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80061e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80061e4:	ee14 2a90 	vmov	r2, s9
 80061e8:	3230      	adds	r2, #48	@ 0x30
 80061ea:	f806 2b01 	strb.w	r2, [r6], #1
 80061ee:	42a6      	cmp	r6, r4
 80061f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80061f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80061f8:	d119      	bne.n	800622e <_dtoa_r+0x566>
 80061fa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80061fe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006202:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620a:	dc4a      	bgt.n	80062a2 <_dtoa_r+0x5da>
 800620c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006210:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	f57f af31 	bpl.w	800607e <_dtoa_r+0x3b6>
 800621c:	460e      	mov	r6, r1
 800621e:	3901      	subs	r1, #1
 8006220:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006224:	2b30      	cmp	r3, #48	@ 0x30
 8006226:	d0f9      	beq.n	800621c <_dtoa_r+0x554>
 8006228:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800622c:	e027      	b.n	800627e <_dtoa_r+0x5b6>
 800622e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006232:	e7d5      	b.n	80061e0 <_dtoa_r+0x518>
 8006234:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006238:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800623c:	463e      	mov	r6, r7
 800623e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006242:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006246:	ee15 3a10 	vmov	r3, s10
 800624a:	3330      	adds	r3, #48	@ 0x30
 800624c:	f806 3b01 	strb.w	r3, [r6], #1
 8006250:	1bf3      	subs	r3, r6, r7
 8006252:	459a      	cmp	sl, r3
 8006254:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006258:	eea3 7b46 	vfms.f64	d7, d3, d6
 800625c:	d132      	bne.n	80062c4 <_dtoa_r+0x5fc>
 800625e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006262:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626a:	dc18      	bgt.n	800629e <_dtoa_r+0x5d6>
 800626c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006274:	d103      	bne.n	800627e <_dtoa_r+0x5b6>
 8006276:	ee15 3a10 	vmov	r3, s10
 800627a:	07db      	lsls	r3, r3, #31
 800627c:	d40f      	bmi.n	800629e <_dtoa_r+0x5d6>
 800627e:	9901      	ldr	r1, [sp, #4]
 8006280:	4648      	mov	r0, r9
 8006282:	f000 fbbf 	bl	8006a04 <_Bfree>
 8006286:	2300      	movs	r3, #0
 8006288:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800628a:	7033      	strb	r3, [r6, #0]
 800628c:	f108 0301 	add.w	r3, r8, #1
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 824b 	beq.w	8006730 <_dtoa_r+0xa68>
 800629a:	601e      	str	r6, [r3, #0]
 800629c:	e248      	b.n	8006730 <_dtoa_r+0xa68>
 800629e:	f8cd 8014 	str.w	r8, [sp, #20]
 80062a2:	4633      	mov	r3, r6
 80062a4:	461e      	mov	r6, r3
 80062a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062aa:	2a39      	cmp	r2, #57	@ 0x39
 80062ac:	d106      	bne.n	80062bc <_dtoa_r+0x5f4>
 80062ae:	429f      	cmp	r7, r3
 80062b0:	d1f8      	bne.n	80062a4 <_dtoa_r+0x5dc>
 80062b2:	9a05      	ldr	r2, [sp, #20]
 80062b4:	3201      	adds	r2, #1
 80062b6:	9205      	str	r2, [sp, #20]
 80062b8:	2230      	movs	r2, #48	@ 0x30
 80062ba:	703a      	strb	r2, [r7, #0]
 80062bc:	781a      	ldrb	r2, [r3, #0]
 80062be:	3201      	adds	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	e7b1      	b.n	8006228 <_dtoa_r+0x560>
 80062c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80062c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80062cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d0:	d1b5      	bne.n	800623e <_dtoa_r+0x576>
 80062d2:	e7d4      	b.n	800627e <_dtoa_r+0x5b6>
 80062d4:	08007e08 	.word	0x08007e08
 80062d8:	08007de0 	.word	0x08007de0
 80062dc:	9908      	ldr	r1, [sp, #32]
 80062de:	2900      	cmp	r1, #0
 80062e0:	f000 80e9 	beq.w	80064b6 <_dtoa_r+0x7ee>
 80062e4:	9907      	ldr	r1, [sp, #28]
 80062e6:	2901      	cmp	r1, #1
 80062e8:	f300 80cb 	bgt.w	8006482 <_dtoa_r+0x7ba>
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	f000 80c4 	beq.w	800647a <_dtoa_r+0x7b2>
 80062f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80062f6:	9e04      	ldr	r6, [sp, #16]
 80062f8:	461c      	mov	r4, r3
 80062fa:	9305      	str	r3, [sp, #20]
 80062fc:	9b04      	ldr	r3, [sp, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	9304      	str	r3, [sp, #16]
 8006302:	9b06      	ldr	r3, [sp, #24]
 8006304:	2101      	movs	r1, #1
 8006306:	4413      	add	r3, r2
 8006308:	4648      	mov	r0, r9
 800630a:	9306      	str	r3, [sp, #24]
 800630c:	f000 fc2e 	bl	8006b6c <__i2b>
 8006310:	9b05      	ldr	r3, [sp, #20]
 8006312:	4605      	mov	r5, r0
 8006314:	b166      	cbz	r6, 8006330 <_dtoa_r+0x668>
 8006316:	9a06      	ldr	r2, [sp, #24]
 8006318:	2a00      	cmp	r2, #0
 800631a:	dd09      	ble.n	8006330 <_dtoa_r+0x668>
 800631c:	42b2      	cmp	r2, r6
 800631e:	9904      	ldr	r1, [sp, #16]
 8006320:	bfa8      	it	ge
 8006322:	4632      	movge	r2, r6
 8006324:	1a89      	subs	r1, r1, r2
 8006326:	9104      	str	r1, [sp, #16]
 8006328:	9906      	ldr	r1, [sp, #24]
 800632a:	1ab6      	subs	r6, r6, r2
 800632c:	1a8a      	subs	r2, r1, r2
 800632e:	9206      	str	r2, [sp, #24]
 8006330:	b30b      	cbz	r3, 8006376 <_dtoa_r+0x6ae>
 8006332:	9a08      	ldr	r2, [sp, #32]
 8006334:	2a00      	cmp	r2, #0
 8006336:	f000 80c5 	beq.w	80064c4 <_dtoa_r+0x7fc>
 800633a:	2c00      	cmp	r4, #0
 800633c:	f000 80bf 	beq.w	80064be <_dtoa_r+0x7f6>
 8006340:	4629      	mov	r1, r5
 8006342:	4622      	mov	r2, r4
 8006344:	4648      	mov	r0, r9
 8006346:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006348:	f000 fcc8 	bl	8006cdc <__pow5mult>
 800634c:	9a01      	ldr	r2, [sp, #4]
 800634e:	4601      	mov	r1, r0
 8006350:	4605      	mov	r5, r0
 8006352:	4648      	mov	r0, r9
 8006354:	f000 fc20 	bl	8006b98 <__multiply>
 8006358:	9901      	ldr	r1, [sp, #4]
 800635a:	9005      	str	r0, [sp, #20]
 800635c:	4648      	mov	r0, r9
 800635e:	f000 fb51 	bl	8006a04 <_Bfree>
 8006362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006364:	1b1b      	subs	r3, r3, r4
 8006366:	f000 80b0 	beq.w	80064ca <_dtoa_r+0x802>
 800636a:	9905      	ldr	r1, [sp, #20]
 800636c:	461a      	mov	r2, r3
 800636e:	4648      	mov	r0, r9
 8006370:	f000 fcb4 	bl	8006cdc <__pow5mult>
 8006374:	9001      	str	r0, [sp, #4]
 8006376:	2101      	movs	r1, #1
 8006378:	4648      	mov	r0, r9
 800637a:	f000 fbf7 	bl	8006b6c <__i2b>
 800637e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006380:	4604      	mov	r4, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 81da 	beq.w	800673c <_dtoa_r+0xa74>
 8006388:	461a      	mov	r2, r3
 800638a:	4601      	mov	r1, r0
 800638c:	4648      	mov	r0, r9
 800638e:	f000 fca5 	bl	8006cdc <__pow5mult>
 8006392:	9b07      	ldr	r3, [sp, #28]
 8006394:	2b01      	cmp	r3, #1
 8006396:	4604      	mov	r4, r0
 8006398:	f300 80a0 	bgt.w	80064dc <_dtoa_r+0x814>
 800639c:	9b02      	ldr	r3, [sp, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 8096 	bne.w	80064d0 <_dtoa_r+0x808>
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	f040 8092 	bne.w	80064d4 <_dtoa_r+0x80c>
 80063b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80063b4:	0d12      	lsrs	r2, r2, #20
 80063b6:	0512      	lsls	r2, r2, #20
 80063b8:	2a00      	cmp	r2, #0
 80063ba:	f000 808d 	beq.w	80064d8 <_dtoa_r+0x810>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	3301      	adds	r3, #1
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	9b06      	ldr	r3, [sp, #24]
 80063c6:	3301      	adds	r3, #1
 80063c8:	9306      	str	r3, [sp, #24]
 80063ca:	2301      	movs	r3, #1
 80063cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 81b9 	beq.w	8006748 <_dtoa_r+0xa80>
 80063d6:	6922      	ldr	r2, [r4, #16]
 80063d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80063dc:	6910      	ldr	r0, [r2, #16]
 80063de:	f000 fb79 	bl	8006ad4 <__hi0bits>
 80063e2:	f1c0 0020 	rsb	r0, r0, #32
 80063e6:	9b06      	ldr	r3, [sp, #24]
 80063e8:	4418      	add	r0, r3
 80063ea:	f010 001f 	ands.w	r0, r0, #31
 80063ee:	f000 8081 	beq.w	80064f4 <_dtoa_r+0x82c>
 80063f2:	f1c0 0220 	rsb	r2, r0, #32
 80063f6:	2a04      	cmp	r2, #4
 80063f8:	dd73      	ble.n	80064e2 <_dtoa_r+0x81a>
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	f1c0 001c 	rsb	r0, r0, #28
 8006400:	4403      	add	r3, r0
 8006402:	9304      	str	r3, [sp, #16]
 8006404:	9b06      	ldr	r3, [sp, #24]
 8006406:	4406      	add	r6, r0
 8006408:	4403      	add	r3, r0
 800640a:	9306      	str	r3, [sp, #24]
 800640c:	9b04      	ldr	r3, [sp, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	dd05      	ble.n	800641e <_dtoa_r+0x756>
 8006412:	9901      	ldr	r1, [sp, #4]
 8006414:	461a      	mov	r2, r3
 8006416:	4648      	mov	r0, r9
 8006418:	f000 fcba 	bl	8006d90 <__lshift>
 800641c:	9001      	str	r0, [sp, #4]
 800641e:	9b06      	ldr	r3, [sp, #24]
 8006420:	2b00      	cmp	r3, #0
 8006422:	dd05      	ble.n	8006430 <_dtoa_r+0x768>
 8006424:	4621      	mov	r1, r4
 8006426:	461a      	mov	r2, r3
 8006428:	4648      	mov	r0, r9
 800642a:	f000 fcb1 	bl	8006d90 <__lshift>
 800642e:	4604      	mov	r4, r0
 8006430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006432:	2b00      	cmp	r3, #0
 8006434:	d060      	beq.n	80064f8 <_dtoa_r+0x830>
 8006436:	9801      	ldr	r0, [sp, #4]
 8006438:	4621      	mov	r1, r4
 800643a:	f000 fd15 	bl	8006e68 <__mcmp>
 800643e:	2800      	cmp	r0, #0
 8006440:	da5a      	bge.n	80064f8 <_dtoa_r+0x830>
 8006442:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006446:	9305      	str	r3, [sp, #20]
 8006448:	9901      	ldr	r1, [sp, #4]
 800644a:	2300      	movs	r3, #0
 800644c:	220a      	movs	r2, #10
 800644e:	4648      	mov	r0, r9
 8006450:	f000 fafa 	bl	8006a48 <__multadd>
 8006454:	9b08      	ldr	r3, [sp, #32]
 8006456:	9001      	str	r0, [sp, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8177 	beq.w	800674c <_dtoa_r+0xa84>
 800645e:	4629      	mov	r1, r5
 8006460:	2300      	movs	r3, #0
 8006462:	220a      	movs	r2, #10
 8006464:	4648      	mov	r0, r9
 8006466:	f000 faef 	bl	8006a48 <__multadd>
 800646a:	f1bb 0f00 	cmp.w	fp, #0
 800646e:	4605      	mov	r5, r0
 8006470:	dc6e      	bgt.n	8006550 <_dtoa_r+0x888>
 8006472:	9b07      	ldr	r3, [sp, #28]
 8006474:	2b02      	cmp	r3, #2
 8006476:	dc48      	bgt.n	800650a <_dtoa_r+0x842>
 8006478:	e06a      	b.n	8006550 <_dtoa_r+0x888>
 800647a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800647c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006480:	e739      	b.n	80062f6 <_dtoa_r+0x62e>
 8006482:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8006486:	42a3      	cmp	r3, r4
 8006488:	db07      	blt.n	800649a <_dtoa_r+0x7d2>
 800648a:	f1ba 0f00 	cmp.w	sl, #0
 800648e:	eba3 0404 	sub.w	r4, r3, r4
 8006492:	db0b      	blt.n	80064ac <_dtoa_r+0x7e4>
 8006494:	9e04      	ldr	r6, [sp, #16]
 8006496:	4652      	mov	r2, sl
 8006498:	e72f      	b.n	80062fa <_dtoa_r+0x632>
 800649a:	1ae2      	subs	r2, r4, r3
 800649c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800649e:	9e04      	ldr	r6, [sp, #16]
 80064a0:	4413      	add	r3, r2
 80064a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80064a4:	4652      	mov	r2, sl
 80064a6:	4623      	mov	r3, r4
 80064a8:	2400      	movs	r4, #0
 80064aa:	e726      	b.n	80062fa <_dtoa_r+0x632>
 80064ac:	9a04      	ldr	r2, [sp, #16]
 80064ae:	eba2 060a 	sub.w	r6, r2, sl
 80064b2:	2200      	movs	r2, #0
 80064b4:	e721      	b.n	80062fa <_dtoa_r+0x632>
 80064b6:	9e04      	ldr	r6, [sp, #16]
 80064b8:	9d08      	ldr	r5, [sp, #32]
 80064ba:	461c      	mov	r4, r3
 80064bc:	e72a      	b.n	8006314 <_dtoa_r+0x64c>
 80064be:	9a01      	ldr	r2, [sp, #4]
 80064c0:	9205      	str	r2, [sp, #20]
 80064c2:	e752      	b.n	800636a <_dtoa_r+0x6a2>
 80064c4:	9901      	ldr	r1, [sp, #4]
 80064c6:	461a      	mov	r2, r3
 80064c8:	e751      	b.n	800636e <_dtoa_r+0x6a6>
 80064ca:	9b05      	ldr	r3, [sp, #20]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	e752      	b.n	8006376 <_dtoa_r+0x6ae>
 80064d0:	2300      	movs	r3, #0
 80064d2:	e77b      	b.n	80063cc <_dtoa_r+0x704>
 80064d4:	9b02      	ldr	r3, [sp, #8]
 80064d6:	e779      	b.n	80063cc <_dtoa_r+0x704>
 80064d8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80064da:	e778      	b.n	80063ce <_dtoa_r+0x706>
 80064dc:	2300      	movs	r3, #0
 80064de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064e0:	e779      	b.n	80063d6 <_dtoa_r+0x70e>
 80064e2:	d093      	beq.n	800640c <_dtoa_r+0x744>
 80064e4:	9b04      	ldr	r3, [sp, #16]
 80064e6:	321c      	adds	r2, #28
 80064e8:	4413      	add	r3, r2
 80064ea:	9304      	str	r3, [sp, #16]
 80064ec:	9b06      	ldr	r3, [sp, #24]
 80064ee:	4416      	add	r6, r2
 80064f0:	4413      	add	r3, r2
 80064f2:	e78a      	b.n	800640a <_dtoa_r+0x742>
 80064f4:	4602      	mov	r2, r0
 80064f6:	e7f5      	b.n	80064e4 <_dtoa_r+0x81c>
 80064f8:	f1ba 0f00 	cmp.w	sl, #0
 80064fc:	f8cd 8014 	str.w	r8, [sp, #20]
 8006500:	46d3      	mov	fp, sl
 8006502:	dc21      	bgt.n	8006548 <_dtoa_r+0x880>
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	2b02      	cmp	r3, #2
 8006508:	dd1e      	ble.n	8006548 <_dtoa_r+0x880>
 800650a:	f1bb 0f00 	cmp.w	fp, #0
 800650e:	f47f addc 	bne.w	80060ca <_dtoa_r+0x402>
 8006512:	4621      	mov	r1, r4
 8006514:	465b      	mov	r3, fp
 8006516:	2205      	movs	r2, #5
 8006518:	4648      	mov	r0, r9
 800651a:	f000 fa95 	bl	8006a48 <__multadd>
 800651e:	4601      	mov	r1, r0
 8006520:	4604      	mov	r4, r0
 8006522:	9801      	ldr	r0, [sp, #4]
 8006524:	f000 fca0 	bl	8006e68 <__mcmp>
 8006528:	2800      	cmp	r0, #0
 800652a:	f77f adce 	ble.w	80060ca <_dtoa_r+0x402>
 800652e:	463e      	mov	r6, r7
 8006530:	2331      	movs	r3, #49	@ 0x31
 8006532:	f806 3b01 	strb.w	r3, [r6], #1
 8006536:	9b05      	ldr	r3, [sp, #20]
 8006538:	3301      	adds	r3, #1
 800653a:	9305      	str	r3, [sp, #20]
 800653c:	e5c9      	b.n	80060d2 <_dtoa_r+0x40a>
 800653e:	f8cd 8014 	str.w	r8, [sp, #20]
 8006542:	4654      	mov	r4, sl
 8006544:	4625      	mov	r5, r4
 8006546:	e7f2      	b.n	800652e <_dtoa_r+0x866>
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8102 	beq.w	8006754 <_dtoa_r+0xa8c>
 8006550:	2e00      	cmp	r6, #0
 8006552:	dd05      	ble.n	8006560 <_dtoa_r+0x898>
 8006554:	4629      	mov	r1, r5
 8006556:	4632      	mov	r2, r6
 8006558:	4648      	mov	r0, r9
 800655a:	f000 fc19 	bl	8006d90 <__lshift>
 800655e:	4605      	mov	r5, r0
 8006560:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d058      	beq.n	8006618 <_dtoa_r+0x950>
 8006566:	6869      	ldr	r1, [r5, #4]
 8006568:	4648      	mov	r0, r9
 800656a:	f000 fa0b 	bl	8006984 <_Balloc>
 800656e:	4606      	mov	r6, r0
 8006570:	b928      	cbnz	r0, 800657e <_dtoa_r+0x8b6>
 8006572:	4b82      	ldr	r3, [pc, #520]	@ (800677c <_dtoa_r+0xab4>)
 8006574:	4602      	mov	r2, r0
 8006576:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800657a:	f7ff bbbe 	b.w	8005cfa <_dtoa_r+0x32>
 800657e:	692a      	ldr	r2, [r5, #16]
 8006580:	3202      	adds	r2, #2
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	f105 010c 	add.w	r1, r5, #12
 8006588:	300c      	adds	r0, #12
 800658a:	f000 ffa3 	bl	80074d4 <memcpy>
 800658e:	2201      	movs	r2, #1
 8006590:	4631      	mov	r1, r6
 8006592:	4648      	mov	r0, r9
 8006594:	f000 fbfc 	bl	8006d90 <__lshift>
 8006598:	1c7b      	adds	r3, r7, #1
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	eb07 030b 	add.w	r3, r7, fp
 80065a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a2:	9b02      	ldr	r3, [sp, #8]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	46a8      	mov	r8, r5
 80065aa:	9308      	str	r3, [sp, #32]
 80065ac:	4605      	mov	r5, r0
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	9801      	ldr	r0, [sp, #4]
 80065b2:	4621      	mov	r1, r4
 80065b4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80065b8:	f7ff fafb 	bl	8005bb2 <quorem>
 80065bc:	4641      	mov	r1, r8
 80065be:	9002      	str	r0, [sp, #8]
 80065c0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80065c4:	9801      	ldr	r0, [sp, #4]
 80065c6:	f000 fc4f 	bl	8006e68 <__mcmp>
 80065ca:	462a      	mov	r2, r5
 80065cc:	9006      	str	r0, [sp, #24]
 80065ce:	4621      	mov	r1, r4
 80065d0:	4648      	mov	r0, r9
 80065d2:	f000 fc65 	bl	8006ea0 <__mdiff>
 80065d6:	68c2      	ldr	r2, [r0, #12]
 80065d8:	4606      	mov	r6, r0
 80065da:	b9fa      	cbnz	r2, 800661c <_dtoa_r+0x954>
 80065dc:	4601      	mov	r1, r0
 80065de:	9801      	ldr	r0, [sp, #4]
 80065e0:	f000 fc42 	bl	8006e68 <__mcmp>
 80065e4:	4602      	mov	r2, r0
 80065e6:	4631      	mov	r1, r6
 80065e8:	4648      	mov	r0, r9
 80065ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80065ec:	f000 fa0a 	bl	8006a04 <_Bfree>
 80065f0:	9b07      	ldr	r3, [sp, #28]
 80065f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065f4:	9e04      	ldr	r6, [sp, #16]
 80065f6:	ea42 0103 	orr.w	r1, r2, r3
 80065fa:	9b08      	ldr	r3, [sp, #32]
 80065fc:	4319      	orrs	r1, r3
 80065fe:	d10f      	bne.n	8006620 <_dtoa_r+0x958>
 8006600:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006604:	d028      	beq.n	8006658 <_dtoa_r+0x990>
 8006606:	9b06      	ldr	r3, [sp, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	dd02      	ble.n	8006612 <_dtoa_r+0x94a>
 800660c:	9b02      	ldr	r3, [sp, #8]
 800660e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006612:	f88b a000 	strb.w	sl, [fp]
 8006616:	e55e      	b.n	80060d6 <_dtoa_r+0x40e>
 8006618:	4628      	mov	r0, r5
 800661a:	e7bd      	b.n	8006598 <_dtoa_r+0x8d0>
 800661c:	2201      	movs	r2, #1
 800661e:	e7e2      	b.n	80065e6 <_dtoa_r+0x91e>
 8006620:	9b06      	ldr	r3, [sp, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	db04      	blt.n	8006630 <_dtoa_r+0x968>
 8006626:	9907      	ldr	r1, [sp, #28]
 8006628:	430b      	orrs	r3, r1
 800662a:	9908      	ldr	r1, [sp, #32]
 800662c:	430b      	orrs	r3, r1
 800662e:	d120      	bne.n	8006672 <_dtoa_r+0x9aa>
 8006630:	2a00      	cmp	r2, #0
 8006632:	ddee      	ble.n	8006612 <_dtoa_r+0x94a>
 8006634:	9901      	ldr	r1, [sp, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	4648      	mov	r0, r9
 800663a:	f000 fba9 	bl	8006d90 <__lshift>
 800663e:	4621      	mov	r1, r4
 8006640:	9001      	str	r0, [sp, #4]
 8006642:	f000 fc11 	bl	8006e68 <__mcmp>
 8006646:	2800      	cmp	r0, #0
 8006648:	dc03      	bgt.n	8006652 <_dtoa_r+0x98a>
 800664a:	d1e2      	bne.n	8006612 <_dtoa_r+0x94a>
 800664c:	f01a 0f01 	tst.w	sl, #1
 8006650:	d0df      	beq.n	8006612 <_dtoa_r+0x94a>
 8006652:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006656:	d1d9      	bne.n	800660c <_dtoa_r+0x944>
 8006658:	2339      	movs	r3, #57	@ 0x39
 800665a:	f88b 3000 	strb.w	r3, [fp]
 800665e:	4633      	mov	r3, r6
 8006660:	461e      	mov	r6, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006668:	2a39      	cmp	r2, #57	@ 0x39
 800666a:	d052      	beq.n	8006712 <_dtoa_r+0xa4a>
 800666c:	3201      	adds	r2, #1
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e531      	b.n	80060d6 <_dtoa_r+0x40e>
 8006672:	2a00      	cmp	r2, #0
 8006674:	dd07      	ble.n	8006686 <_dtoa_r+0x9be>
 8006676:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800667a:	d0ed      	beq.n	8006658 <_dtoa_r+0x990>
 800667c:	f10a 0301 	add.w	r3, sl, #1
 8006680:	f88b 3000 	strb.w	r3, [fp]
 8006684:	e527      	b.n	80060d6 <_dtoa_r+0x40e>
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800668a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800668e:	4293      	cmp	r3, r2
 8006690:	d029      	beq.n	80066e6 <_dtoa_r+0xa1e>
 8006692:	9901      	ldr	r1, [sp, #4]
 8006694:	2300      	movs	r3, #0
 8006696:	220a      	movs	r2, #10
 8006698:	4648      	mov	r0, r9
 800669a:	f000 f9d5 	bl	8006a48 <__multadd>
 800669e:	45a8      	cmp	r8, r5
 80066a0:	9001      	str	r0, [sp, #4]
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	f04f 020a 	mov.w	r2, #10
 80066aa:	4641      	mov	r1, r8
 80066ac:	4648      	mov	r0, r9
 80066ae:	d107      	bne.n	80066c0 <_dtoa_r+0x9f8>
 80066b0:	f000 f9ca 	bl	8006a48 <__multadd>
 80066b4:	4680      	mov	r8, r0
 80066b6:	4605      	mov	r5, r0
 80066b8:	9b04      	ldr	r3, [sp, #16]
 80066ba:	3301      	adds	r3, #1
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	e776      	b.n	80065ae <_dtoa_r+0x8e6>
 80066c0:	f000 f9c2 	bl	8006a48 <__multadd>
 80066c4:	4629      	mov	r1, r5
 80066c6:	4680      	mov	r8, r0
 80066c8:	2300      	movs	r3, #0
 80066ca:	220a      	movs	r2, #10
 80066cc:	4648      	mov	r0, r9
 80066ce:	f000 f9bb 	bl	8006a48 <__multadd>
 80066d2:	4605      	mov	r5, r0
 80066d4:	e7f0      	b.n	80066b8 <_dtoa_r+0x9f0>
 80066d6:	f1bb 0f00 	cmp.w	fp, #0
 80066da:	bfcc      	ite	gt
 80066dc:	465e      	movgt	r6, fp
 80066de:	2601      	movle	r6, #1
 80066e0:	443e      	add	r6, r7
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	9901      	ldr	r1, [sp, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	4648      	mov	r0, r9
 80066ec:	f000 fb50 	bl	8006d90 <__lshift>
 80066f0:	4621      	mov	r1, r4
 80066f2:	9001      	str	r0, [sp, #4]
 80066f4:	f000 fbb8 	bl	8006e68 <__mcmp>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	dcb0      	bgt.n	800665e <_dtoa_r+0x996>
 80066fc:	d102      	bne.n	8006704 <_dtoa_r+0xa3c>
 80066fe:	f01a 0f01 	tst.w	sl, #1
 8006702:	d1ac      	bne.n	800665e <_dtoa_r+0x996>
 8006704:	4633      	mov	r3, r6
 8006706:	461e      	mov	r6, r3
 8006708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800670c:	2a30      	cmp	r2, #48	@ 0x30
 800670e:	d0fa      	beq.n	8006706 <_dtoa_r+0xa3e>
 8006710:	e4e1      	b.n	80060d6 <_dtoa_r+0x40e>
 8006712:	429f      	cmp	r7, r3
 8006714:	d1a4      	bne.n	8006660 <_dtoa_r+0x998>
 8006716:	9b05      	ldr	r3, [sp, #20]
 8006718:	3301      	adds	r3, #1
 800671a:	9305      	str	r3, [sp, #20]
 800671c:	2331      	movs	r3, #49	@ 0x31
 800671e:	703b      	strb	r3, [r7, #0]
 8006720:	e4d9      	b.n	80060d6 <_dtoa_r+0x40e>
 8006722:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006724:	4f16      	ldr	r7, [pc, #88]	@ (8006780 <_dtoa_r+0xab8>)
 8006726:	b11b      	cbz	r3, 8006730 <_dtoa_r+0xa68>
 8006728:	f107 0308 	add.w	r3, r7, #8
 800672c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	4638      	mov	r0, r7
 8006732:	b011      	add	sp, #68	@ 0x44
 8006734:	ecbd 8b02 	vpop	{d8}
 8006738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673c:	9b07      	ldr	r3, [sp, #28]
 800673e:	2b01      	cmp	r3, #1
 8006740:	f77f ae2c 	ble.w	800639c <_dtoa_r+0x6d4>
 8006744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006746:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006748:	2001      	movs	r0, #1
 800674a:	e64c      	b.n	80063e6 <_dtoa_r+0x71e>
 800674c:	f1bb 0f00 	cmp.w	fp, #0
 8006750:	f77f aed8 	ble.w	8006504 <_dtoa_r+0x83c>
 8006754:	463e      	mov	r6, r7
 8006756:	9801      	ldr	r0, [sp, #4]
 8006758:	4621      	mov	r1, r4
 800675a:	f7ff fa2a 	bl	8005bb2 <quorem>
 800675e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006762:	f806 ab01 	strb.w	sl, [r6], #1
 8006766:	1bf2      	subs	r2, r6, r7
 8006768:	4593      	cmp	fp, r2
 800676a:	ddb4      	ble.n	80066d6 <_dtoa_r+0xa0e>
 800676c:	9901      	ldr	r1, [sp, #4]
 800676e:	2300      	movs	r3, #0
 8006770:	220a      	movs	r2, #10
 8006772:	4648      	mov	r0, r9
 8006774:	f000 f968 	bl	8006a48 <__multadd>
 8006778:	9001      	str	r0, [sp, #4]
 800677a:	e7ec      	b.n	8006756 <_dtoa_r+0xa8e>
 800677c:	08007d10 	.word	0x08007d10
 8006780:	08007c94 	.word	0x08007c94

08006784 <_free_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4605      	mov	r5, r0
 8006788:	2900      	cmp	r1, #0
 800678a:	d041      	beq.n	8006810 <_free_r+0x8c>
 800678c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006790:	1f0c      	subs	r4, r1, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	bfb8      	it	lt
 8006796:	18e4      	addlt	r4, r4, r3
 8006798:	f000 f8e8 	bl	800696c <__malloc_lock>
 800679c:	4a1d      	ldr	r2, [pc, #116]	@ (8006814 <_free_r+0x90>)
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	b933      	cbnz	r3, 80067b0 <_free_r+0x2c>
 80067a2:	6063      	str	r3, [r4, #4]
 80067a4:	6014      	str	r4, [r2, #0]
 80067a6:	4628      	mov	r0, r5
 80067a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ac:	f000 b8e4 	b.w	8006978 <__malloc_unlock>
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	d908      	bls.n	80067c6 <_free_r+0x42>
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	1821      	adds	r1, r4, r0
 80067b8:	428b      	cmp	r3, r1
 80067ba:	bf01      	itttt	eq
 80067bc:	6819      	ldreq	r1, [r3, #0]
 80067be:	685b      	ldreq	r3, [r3, #4]
 80067c0:	1809      	addeq	r1, r1, r0
 80067c2:	6021      	streq	r1, [r4, #0]
 80067c4:	e7ed      	b.n	80067a2 <_free_r+0x1e>
 80067c6:	461a      	mov	r2, r3
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b10b      	cbz	r3, 80067d0 <_free_r+0x4c>
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d9fa      	bls.n	80067c6 <_free_r+0x42>
 80067d0:	6811      	ldr	r1, [r2, #0]
 80067d2:	1850      	adds	r0, r2, r1
 80067d4:	42a0      	cmp	r0, r4
 80067d6:	d10b      	bne.n	80067f0 <_free_r+0x6c>
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	4401      	add	r1, r0
 80067dc:	1850      	adds	r0, r2, r1
 80067de:	4283      	cmp	r3, r0
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	d1e0      	bne.n	80067a6 <_free_r+0x22>
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	6053      	str	r3, [r2, #4]
 80067ea:	4408      	add	r0, r1
 80067ec:	6010      	str	r0, [r2, #0]
 80067ee:	e7da      	b.n	80067a6 <_free_r+0x22>
 80067f0:	d902      	bls.n	80067f8 <_free_r+0x74>
 80067f2:	230c      	movs	r3, #12
 80067f4:	602b      	str	r3, [r5, #0]
 80067f6:	e7d6      	b.n	80067a6 <_free_r+0x22>
 80067f8:	6820      	ldr	r0, [r4, #0]
 80067fa:	1821      	adds	r1, r4, r0
 80067fc:	428b      	cmp	r3, r1
 80067fe:	bf04      	itt	eq
 8006800:	6819      	ldreq	r1, [r3, #0]
 8006802:	685b      	ldreq	r3, [r3, #4]
 8006804:	6063      	str	r3, [r4, #4]
 8006806:	bf04      	itt	eq
 8006808:	1809      	addeq	r1, r1, r0
 800680a:	6021      	streq	r1, [r4, #0]
 800680c:	6054      	str	r4, [r2, #4]
 800680e:	e7ca      	b.n	80067a6 <_free_r+0x22>
 8006810:	bd38      	pop	{r3, r4, r5, pc}
 8006812:	bf00      	nop
 8006814:	2000092c 	.word	0x2000092c

08006818 <malloc>:
 8006818:	4b02      	ldr	r3, [pc, #8]	@ (8006824 <malloc+0xc>)
 800681a:	4601      	mov	r1, r0
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	f000 b825 	b.w	800686c <_malloc_r>
 8006822:	bf00      	nop
 8006824:	20000024 	.word	0x20000024

08006828 <sbrk_aligned>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4e0f      	ldr	r6, [pc, #60]	@ (8006868 <sbrk_aligned+0x40>)
 800682c:	460c      	mov	r4, r1
 800682e:	6831      	ldr	r1, [r6, #0]
 8006830:	4605      	mov	r5, r0
 8006832:	b911      	cbnz	r1, 800683a <sbrk_aligned+0x12>
 8006834:	f000 fe3e 	bl	80074b4 <_sbrk_r>
 8006838:	6030      	str	r0, [r6, #0]
 800683a:	4621      	mov	r1, r4
 800683c:	4628      	mov	r0, r5
 800683e:	f000 fe39 	bl	80074b4 <_sbrk_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d103      	bne.n	800684e <sbrk_aligned+0x26>
 8006846:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800684a:	4620      	mov	r0, r4
 800684c:	bd70      	pop	{r4, r5, r6, pc}
 800684e:	1cc4      	adds	r4, r0, #3
 8006850:	f024 0403 	bic.w	r4, r4, #3
 8006854:	42a0      	cmp	r0, r4
 8006856:	d0f8      	beq.n	800684a <sbrk_aligned+0x22>
 8006858:	1a21      	subs	r1, r4, r0
 800685a:	4628      	mov	r0, r5
 800685c:	f000 fe2a 	bl	80074b4 <_sbrk_r>
 8006860:	3001      	adds	r0, #1
 8006862:	d1f2      	bne.n	800684a <sbrk_aligned+0x22>
 8006864:	e7ef      	b.n	8006846 <sbrk_aligned+0x1e>
 8006866:	bf00      	nop
 8006868:	20000928 	.word	0x20000928

0800686c <_malloc_r>:
 800686c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006870:	1ccd      	adds	r5, r1, #3
 8006872:	f025 0503 	bic.w	r5, r5, #3
 8006876:	3508      	adds	r5, #8
 8006878:	2d0c      	cmp	r5, #12
 800687a:	bf38      	it	cc
 800687c:	250c      	movcc	r5, #12
 800687e:	2d00      	cmp	r5, #0
 8006880:	4606      	mov	r6, r0
 8006882:	db01      	blt.n	8006888 <_malloc_r+0x1c>
 8006884:	42a9      	cmp	r1, r5
 8006886:	d904      	bls.n	8006892 <_malloc_r+0x26>
 8006888:	230c      	movs	r3, #12
 800688a:	6033      	str	r3, [r6, #0]
 800688c:	2000      	movs	r0, #0
 800688e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006968 <_malloc_r+0xfc>
 8006896:	f000 f869 	bl	800696c <__malloc_lock>
 800689a:	f8d8 3000 	ldr.w	r3, [r8]
 800689e:	461c      	mov	r4, r3
 80068a0:	bb44      	cbnz	r4, 80068f4 <_malloc_r+0x88>
 80068a2:	4629      	mov	r1, r5
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff ffbf 	bl	8006828 <sbrk_aligned>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	4604      	mov	r4, r0
 80068ae:	d158      	bne.n	8006962 <_malloc_r+0xf6>
 80068b0:	f8d8 4000 	ldr.w	r4, [r8]
 80068b4:	4627      	mov	r7, r4
 80068b6:	2f00      	cmp	r7, #0
 80068b8:	d143      	bne.n	8006942 <_malloc_r+0xd6>
 80068ba:	2c00      	cmp	r4, #0
 80068bc:	d04b      	beq.n	8006956 <_malloc_r+0xea>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	4639      	mov	r1, r7
 80068c2:	4630      	mov	r0, r6
 80068c4:	eb04 0903 	add.w	r9, r4, r3
 80068c8:	f000 fdf4 	bl	80074b4 <_sbrk_r>
 80068cc:	4581      	cmp	r9, r0
 80068ce:	d142      	bne.n	8006956 <_malloc_r+0xea>
 80068d0:	6821      	ldr	r1, [r4, #0]
 80068d2:	1a6d      	subs	r5, r5, r1
 80068d4:	4629      	mov	r1, r5
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7ff ffa6 	bl	8006828 <sbrk_aligned>
 80068dc:	3001      	adds	r0, #1
 80068de:	d03a      	beq.n	8006956 <_malloc_r+0xea>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	442b      	add	r3, r5
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	f8d8 3000 	ldr.w	r3, [r8]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	bb62      	cbnz	r2, 8006948 <_malloc_r+0xdc>
 80068ee:	f8c8 7000 	str.w	r7, [r8]
 80068f2:	e00f      	b.n	8006914 <_malloc_r+0xa8>
 80068f4:	6822      	ldr	r2, [r4, #0]
 80068f6:	1b52      	subs	r2, r2, r5
 80068f8:	d420      	bmi.n	800693c <_malloc_r+0xd0>
 80068fa:	2a0b      	cmp	r2, #11
 80068fc:	d917      	bls.n	800692e <_malloc_r+0xc2>
 80068fe:	1961      	adds	r1, r4, r5
 8006900:	42a3      	cmp	r3, r4
 8006902:	6025      	str	r5, [r4, #0]
 8006904:	bf18      	it	ne
 8006906:	6059      	strne	r1, [r3, #4]
 8006908:	6863      	ldr	r3, [r4, #4]
 800690a:	bf08      	it	eq
 800690c:	f8c8 1000 	streq.w	r1, [r8]
 8006910:	5162      	str	r2, [r4, r5]
 8006912:	604b      	str	r3, [r1, #4]
 8006914:	4630      	mov	r0, r6
 8006916:	f000 f82f 	bl	8006978 <__malloc_unlock>
 800691a:	f104 000b 	add.w	r0, r4, #11
 800691e:	1d23      	adds	r3, r4, #4
 8006920:	f020 0007 	bic.w	r0, r0, #7
 8006924:	1ac2      	subs	r2, r0, r3
 8006926:	bf1c      	itt	ne
 8006928:	1a1b      	subne	r3, r3, r0
 800692a:	50a3      	strne	r3, [r4, r2]
 800692c:	e7af      	b.n	800688e <_malloc_r+0x22>
 800692e:	6862      	ldr	r2, [r4, #4]
 8006930:	42a3      	cmp	r3, r4
 8006932:	bf0c      	ite	eq
 8006934:	f8c8 2000 	streq.w	r2, [r8]
 8006938:	605a      	strne	r2, [r3, #4]
 800693a:	e7eb      	b.n	8006914 <_malloc_r+0xa8>
 800693c:	4623      	mov	r3, r4
 800693e:	6864      	ldr	r4, [r4, #4]
 8006940:	e7ae      	b.n	80068a0 <_malloc_r+0x34>
 8006942:	463c      	mov	r4, r7
 8006944:	687f      	ldr	r7, [r7, #4]
 8006946:	e7b6      	b.n	80068b6 <_malloc_r+0x4a>
 8006948:	461a      	mov	r2, r3
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	42a3      	cmp	r3, r4
 800694e:	d1fb      	bne.n	8006948 <_malloc_r+0xdc>
 8006950:	2300      	movs	r3, #0
 8006952:	6053      	str	r3, [r2, #4]
 8006954:	e7de      	b.n	8006914 <_malloc_r+0xa8>
 8006956:	230c      	movs	r3, #12
 8006958:	6033      	str	r3, [r6, #0]
 800695a:	4630      	mov	r0, r6
 800695c:	f000 f80c 	bl	8006978 <__malloc_unlock>
 8006960:	e794      	b.n	800688c <_malloc_r+0x20>
 8006962:	6005      	str	r5, [r0, #0]
 8006964:	e7d6      	b.n	8006914 <_malloc_r+0xa8>
 8006966:	bf00      	nop
 8006968:	2000092c 	.word	0x2000092c

0800696c <__malloc_lock>:
 800696c:	4801      	ldr	r0, [pc, #4]	@ (8006974 <__malloc_lock+0x8>)
 800696e:	f7ff b91e 	b.w	8005bae <__retarget_lock_acquire_recursive>
 8006972:	bf00      	nop
 8006974:	20000924 	.word	0x20000924

08006978 <__malloc_unlock>:
 8006978:	4801      	ldr	r0, [pc, #4]	@ (8006980 <__malloc_unlock+0x8>)
 800697a:	f7ff b919 	b.w	8005bb0 <__retarget_lock_release_recursive>
 800697e:	bf00      	nop
 8006980:	20000924 	.word	0x20000924

08006984 <_Balloc>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	69c6      	ldr	r6, [r0, #28]
 8006988:	4604      	mov	r4, r0
 800698a:	460d      	mov	r5, r1
 800698c:	b976      	cbnz	r6, 80069ac <_Balloc+0x28>
 800698e:	2010      	movs	r0, #16
 8006990:	f7ff ff42 	bl	8006818 <malloc>
 8006994:	4602      	mov	r2, r0
 8006996:	61e0      	str	r0, [r4, #28]
 8006998:	b920      	cbnz	r0, 80069a4 <_Balloc+0x20>
 800699a:	4b18      	ldr	r3, [pc, #96]	@ (80069fc <_Balloc+0x78>)
 800699c:	4818      	ldr	r0, [pc, #96]	@ (8006a00 <_Balloc+0x7c>)
 800699e:	216b      	movs	r1, #107	@ 0x6b
 80069a0:	f000 fda6 	bl	80074f0 <__assert_func>
 80069a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069a8:	6006      	str	r6, [r0, #0]
 80069aa:	60c6      	str	r6, [r0, #12]
 80069ac:	69e6      	ldr	r6, [r4, #28]
 80069ae:	68f3      	ldr	r3, [r6, #12]
 80069b0:	b183      	cbz	r3, 80069d4 <_Balloc+0x50>
 80069b2:	69e3      	ldr	r3, [r4, #28]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ba:	b9b8      	cbnz	r0, 80069ec <_Balloc+0x68>
 80069bc:	2101      	movs	r1, #1
 80069be:	fa01 f605 	lsl.w	r6, r1, r5
 80069c2:	1d72      	adds	r2, r6, #5
 80069c4:	0092      	lsls	r2, r2, #2
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 fdb0 	bl	800752c <_calloc_r>
 80069cc:	b160      	cbz	r0, 80069e8 <_Balloc+0x64>
 80069ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069d2:	e00e      	b.n	80069f2 <_Balloc+0x6e>
 80069d4:	2221      	movs	r2, #33	@ 0x21
 80069d6:	2104      	movs	r1, #4
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 fda7 	bl	800752c <_calloc_r>
 80069de:	69e3      	ldr	r3, [r4, #28]
 80069e0:	60f0      	str	r0, [r6, #12]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e4      	bne.n	80069b2 <_Balloc+0x2e>
 80069e8:	2000      	movs	r0, #0
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	6802      	ldr	r2, [r0, #0]
 80069ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069f2:	2300      	movs	r3, #0
 80069f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069f8:	e7f7      	b.n	80069ea <_Balloc+0x66>
 80069fa:	bf00      	nop
 80069fc:	08007ca1 	.word	0x08007ca1
 8006a00:	08007d21 	.word	0x08007d21

08006a04 <_Bfree>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	69c6      	ldr	r6, [r0, #28]
 8006a08:	4605      	mov	r5, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	b976      	cbnz	r6, 8006a2c <_Bfree+0x28>
 8006a0e:	2010      	movs	r0, #16
 8006a10:	f7ff ff02 	bl	8006818 <malloc>
 8006a14:	4602      	mov	r2, r0
 8006a16:	61e8      	str	r0, [r5, #28]
 8006a18:	b920      	cbnz	r0, 8006a24 <_Bfree+0x20>
 8006a1a:	4b09      	ldr	r3, [pc, #36]	@ (8006a40 <_Bfree+0x3c>)
 8006a1c:	4809      	ldr	r0, [pc, #36]	@ (8006a44 <_Bfree+0x40>)
 8006a1e:	218f      	movs	r1, #143	@ 0x8f
 8006a20:	f000 fd66 	bl	80074f0 <__assert_func>
 8006a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a28:	6006      	str	r6, [r0, #0]
 8006a2a:	60c6      	str	r6, [r0, #12]
 8006a2c:	b13c      	cbz	r4, 8006a3e <_Bfree+0x3a>
 8006a2e:	69eb      	ldr	r3, [r5, #28]
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a38:	6021      	str	r1, [r4, #0]
 8006a3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	08007ca1 	.word	0x08007ca1
 8006a44:	08007d21 	.word	0x08007d21

08006a48 <__multadd>:
 8006a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4c:	690d      	ldr	r5, [r1, #16]
 8006a4e:	4607      	mov	r7, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	461e      	mov	r6, r3
 8006a54:	f101 0c14 	add.w	ip, r1, #20
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a5e:	b299      	uxth	r1, r3
 8006a60:	fb02 6101 	mla	r1, r2, r1, r6
 8006a64:	0c1e      	lsrs	r6, r3, #16
 8006a66:	0c0b      	lsrs	r3, r1, #16
 8006a68:	fb02 3306 	mla	r3, r2, r6, r3
 8006a6c:	b289      	uxth	r1, r1
 8006a6e:	3001      	adds	r0, #1
 8006a70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a74:	4285      	cmp	r5, r0
 8006a76:	f84c 1b04 	str.w	r1, [ip], #4
 8006a7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a7e:	dcec      	bgt.n	8006a5a <__multadd+0x12>
 8006a80:	b30e      	cbz	r6, 8006ac6 <__multadd+0x7e>
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc19      	bgt.n	8006abc <__multadd+0x74>
 8006a88:	6861      	ldr	r1, [r4, #4]
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	3101      	adds	r1, #1
 8006a8e:	f7ff ff79 	bl	8006984 <_Balloc>
 8006a92:	4680      	mov	r8, r0
 8006a94:	b928      	cbnz	r0, 8006aa2 <__multadd+0x5a>
 8006a96:	4602      	mov	r2, r0
 8006a98:	4b0c      	ldr	r3, [pc, #48]	@ (8006acc <__multadd+0x84>)
 8006a9a:	480d      	ldr	r0, [pc, #52]	@ (8006ad0 <__multadd+0x88>)
 8006a9c:	21ba      	movs	r1, #186	@ 0xba
 8006a9e:	f000 fd27 	bl	80074f0 <__assert_func>
 8006aa2:	6922      	ldr	r2, [r4, #16]
 8006aa4:	3202      	adds	r2, #2
 8006aa6:	f104 010c 	add.w	r1, r4, #12
 8006aaa:	0092      	lsls	r2, r2, #2
 8006aac:	300c      	adds	r0, #12
 8006aae:	f000 fd11 	bl	80074d4 <memcpy>
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f7ff ffa5 	bl	8006a04 <_Bfree>
 8006aba:	4644      	mov	r4, r8
 8006abc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ac0:	3501      	adds	r5, #1
 8006ac2:	615e      	str	r6, [r3, #20]
 8006ac4:	6125      	str	r5, [r4, #16]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006acc:	08007d10 	.word	0x08007d10
 8006ad0:	08007d21 	.word	0x08007d21

08006ad4 <__hi0bits>:
 8006ad4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ad8:	4603      	mov	r3, r0
 8006ada:	bf36      	itet	cc
 8006adc:	0403      	lslcc	r3, r0, #16
 8006ade:	2000      	movcs	r0, #0
 8006ae0:	2010      	movcc	r0, #16
 8006ae2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ae6:	bf3c      	itt	cc
 8006ae8:	021b      	lslcc	r3, r3, #8
 8006aea:	3008      	addcc	r0, #8
 8006aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006af0:	bf3c      	itt	cc
 8006af2:	011b      	lslcc	r3, r3, #4
 8006af4:	3004      	addcc	r0, #4
 8006af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006afa:	bf3c      	itt	cc
 8006afc:	009b      	lslcc	r3, r3, #2
 8006afe:	3002      	addcc	r0, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	db05      	blt.n	8006b10 <__hi0bits+0x3c>
 8006b04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b08:	f100 0001 	add.w	r0, r0, #1
 8006b0c:	bf08      	it	eq
 8006b0e:	2020      	moveq	r0, #32
 8006b10:	4770      	bx	lr

08006b12 <__lo0bits>:
 8006b12:	6803      	ldr	r3, [r0, #0]
 8006b14:	4602      	mov	r2, r0
 8006b16:	f013 0007 	ands.w	r0, r3, #7
 8006b1a:	d00b      	beq.n	8006b34 <__lo0bits+0x22>
 8006b1c:	07d9      	lsls	r1, r3, #31
 8006b1e:	d421      	bmi.n	8006b64 <__lo0bits+0x52>
 8006b20:	0798      	lsls	r0, r3, #30
 8006b22:	bf49      	itett	mi
 8006b24:	085b      	lsrmi	r3, r3, #1
 8006b26:	089b      	lsrpl	r3, r3, #2
 8006b28:	2001      	movmi	r0, #1
 8006b2a:	6013      	strmi	r3, [r2, #0]
 8006b2c:	bf5c      	itt	pl
 8006b2e:	6013      	strpl	r3, [r2, #0]
 8006b30:	2002      	movpl	r0, #2
 8006b32:	4770      	bx	lr
 8006b34:	b299      	uxth	r1, r3
 8006b36:	b909      	cbnz	r1, 8006b3c <__lo0bits+0x2a>
 8006b38:	0c1b      	lsrs	r3, r3, #16
 8006b3a:	2010      	movs	r0, #16
 8006b3c:	b2d9      	uxtb	r1, r3
 8006b3e:	b909      	cbnz	r1, 8006b44 <__lo0bits+0x32>
 8006b40:	3008      	adds	r0, #8
 8006b42:	0a1b      	lsrs	r3, r3, #8
 8006b44:	0719      	lsls	r1, r3, #28
 8006b46:	bf04      	itt	eq
 8006b48:	091b      	lsreq	r3, r3, #4
 8006b4a:	3004      	addeq	r0, #4
 8006b4c:	0799      	lsls	r1, r3, #30
 8006b4e:	bf04      	itt	eq
 8006b50:	089b      	lsreq	r3, r3, #2
 8006b52:	3002      	addeq	r0, #2
 8006b54:	07d9      	lsls	r1, r3, #31
 8006b56:	d403      	bmi.n	8006b60 <__lo0bits+0x4e>
 8006b58:	085b      	lsrs	r3, r3, #1
 8006b5a:	f100 0001 	add.w	r0, r0, #1
 8006b5e:	d003      	beq.n	8006b68 <__lo0bits+0x56>
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	4770      	bx	lr
 8006b64:	2000      	movs	r0, #0
 8006b66:	4770      	bx	lr
 8006b68:	2020      	movs	r0, #32
 8006b6a:	4770      	bx	lr

08006b6c <__i2b>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	460c      	mov	r4, r1
 8006b70:	2101      	movs	r1, #1
 8006b72:	f7ff ff07 	bl	8006984 <_Balloc>
 8006b76:	4602      	mov	r2, r0
 8006b78:	b928      	cbnz	r0, 8006b86 <__i2b+0x1a>
 8006b7a:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <__i2b+0x24>)
 8006b7c:	4805      	ldr	r0, [pc, #20]	@ (8006b94 <__i2b+0x28>)
 8006b7e:	f240 1145 	movw	r1, #325	@ 0x145
 8006b82:	f000 fcb5 	bl	80074f0 <__assert_func>
 8006b86:	2301      	movs	r3, #1
 8006b88:	6144      	str	r4, [r0, #20]
 8006b8a:	6103      	str	r3, [r0, #16]
 8006b8c:	bd10      	pop	{r4, pc}
 8006b8e:	bf00      	nop
 8006b90:	08007d10 	.word	0x08007d10
 8006b94:	08007d21 	.word	0x08007d21

08006b98 <__multiply>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	4617      	mov	r7, r2
 8006b9e:	690a      	ldr	r2, [r1, #16]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	bfa8      	it	ge
 8006ba6:	463b      	movge	r3, r7
 8006ba8:	4689      	mov	r9, r1
 8006baa:	bfa4      	itt	ge
 8006bac:	460f      	movge	r7, r1
 8006bae:	4699      	movge	r9, r3
 8006bb0:	693d      	ldr	r5, [r7, #16]
 8006bb2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	eb05 060a 	add.w	r6, r5, sl
 8006bbe:	42b3      	cmp	r3, r6
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	bfb8      	it	lt
 8006bc4:	3101      	addlt	r1, #1
 8006bc6:	f7ff fedd 	bl	8006984 <_Balloc>
 8006bca:	b930      	cbnz	r0, 8006bda <__multiply+0x42>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b41      	ldr	r3, [pc, #260]	@ (8006cd4 <__multiply+0x13c>)
 8006bd0:	4841      	ldr	r0, [pc, #260]	@ (8006cd8 <__multiply+0x140>)
 8006bd2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006bd6:	f000 fc8b 	bl	80074f0 <__assert_func>
 8006bda:	f100 0414 	add.w	r4, r0, #20
 8006bde:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006be2:	4623      	mov	r3, r4
 8006be4:	2200      	movs	r2, #0
 8006be6:	4573      	cmp	r3, lr
 8006be8:	d320      	bcc.n	8006c2c <__multiply+0x94>
 8006bea:	f107 0814 	add.w	r8, r7, #20
 8006bee:	f109 0114 	add.w	r1, r9, #20
 8006bf2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006bf6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006bfa:	9302      	str	r3, [sp, #8]
 8006bfc:	1beb      	subs	r3, r5, r7
 8006bfe:	3b15      	subs	r3, #21
 8006c00:	f023 0303 	bic.w	r3, r3, #3
 8006c04:	3304      	adds	r3, #4
 8006c06:	3715      	adds	r7, #21
 8006c08:	42bd      	cmp	r5, r7
 8006c0a:	bf38      	it	cc
 8006c0c:	2304      	movcc	r3, #4
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	9b02      	ldr	r3, [sp, #8]
 8006c12:	9103      	str	r1, [sp, #12]
 8006c14:	428b      	cmp	r3, r1
 8006c16:	d80c      	bhi.n	8006c32 <__multiply+0x9a>
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	dd03      	ble.n	8006c24 <__multiply+0x8c>
 8006c1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d055      	beq.n	8006cd0 <__multiply+0x138>
 8006c24:	6106      	str	r6, [r0, #16]
 8006c26:	b005      	add	sp, #20
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	f843 2b04 	str.w	r2, [r3], #4
 8006c30:	e7d9      	b.n	8006be6 <__multiply+0x4e>
 8006c32:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c36:	f1ba 0f00 	cmp.w	sl, #0
 8006c3a:	d01f      	beq.n	8006c7c <__multiply+0xe4>
 8006c3c:	46c4      	mov	ip, r8
 8006c3e:	46a1      	mov	r9, r4
 8006c40:	2700      	movs	r7, #0
 8006c42:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c46:	f8d9 3000 	ldr.w	r3, [r9]
 8006c4a:	fa1f fb82 	uxth.w	fp, r2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c54:	443b      	add	r3, r7
 8006c56:	f8d9 7000 	ldr.w	r7, [r9]
 8006c5a:	0c12      	lsrs	r2, r2, #16
 8006c5c:	0c3f      	lsrs	r7, r7, #16
 8006c5e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006c62:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c6c:	4565      	cmp	r5, ip
 8006c6e:	f849 3b04 	str.w	r3, [r9], #4
 8006c72:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006c76:	d8e4      	bhi.n	8006c42 <__multiply+0xaa>
 8006c78:	9b01      	ldr	r3, [sp, #4]
 8006c7a:	50e7      	str	r7, [r4, r3]
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c82:	3104      	adds	r1, #4
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	d020      	beq.n	8006ccc <__multiply+0x134>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	4647      	mov	r7, r8
 8006c8e:	46a4      	mov	ip, r4
 8006c90:	f04f 0a00 	mov.w	sl, #0
 8006c94:	f8b7 b000 	ldrh.w	fp, [r7]
 8006c98:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006c9c:	fb09 220b 	mla	r2, r9, fp, r2
 8006ca0:	4452      	add	r2, sl
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ca8:	f84c 3b04 	str.w	r3, [ip], #4
 8006cac:	f857 3b04 	ldr.w	r3, [r7], #4
 8006cb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cb4:	f8bc 3000 	ldrh.w	r3, [ip]
 8006cb8:	fb09 330a 	mla	r3, r9, sl, r3
 8006cbc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006cc0:	42bd      	cmp	r5, r7
 8006cc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cc6:	d8e5      	bhi.n	8006c94 <__multiply+0xfc>
 8006cc8:	9a01      	ldr	r2, [sp, #4]
 8006cca:	50a3      	str	r3, [r4, r2]
 8006ccc:	3404      	adds	r4, #4
 8006cce:	e79f      	b.n	8006c10 <__multiply+0x78>
 8006cd0:	3e01      	subs	r6, #1
 8006cd2:	e7a1      	b.n	8006c18 <__multiply+0x80>
 8006cd4:	08007d10 	.word	0x08007d10
 8006cd8:	08007d21 	.word	0x08007d21

08006cdc <__pow5mult>:
 8006cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce0:	4615      	mov	r5, r2
 8006ce2:	f012 0203 	ands.w	r2, r2, #3
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	460e      	mov	r6, r1
 8006cea:	d007      	beq.n	8006cfc <__pow5mult+0x20>
 8006cec:	4c25      	ldr	r4, [pc, #148]	@ (8006d84 <__pow5mult+0xa8>)
 8006cee:	3a01      	subs	r2, #1
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cf6:	f7ff fea7 	bl	8006a48 <__multadd>
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	10ad      	asrs	r5, r5, #2
 8006cfe:	d03d      	beq.n	8006d7c <__pow5mult+0xa0>
 8006d00:	69fc      	ldr	r4, [r7, #28]
 8006d02:	b97c      	cbnz	r4, 8006d24 <__pow5mult+0x48>
 8006d04:	2010      	movs	r0, #16
 8006d06:	f7ff fd87 	bl	8006818 <malloc>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	61f8      	str	r0, [r7, #28]
 8006d0e:	b928      	cbnz	r0, 8006d1c <__pow5mult+0x40>
 8006d10:	4b1d      	ldr	r3, [pc, #116]	@ (8006d88 <__pow5mult+0xac>)
 8006d12:	481e      	ldr	r0, [pc, #120]	@ (8006d8c <__pow5mult+0xb0>)
 8006d14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d18:	f000 fbea 	bl	80074f0 <__assert_func>
 8006d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d20:	6004      	str	r4, [r0, #0]
 8006d22:	60c4      	str	r4, [r0, #12]
 8006d24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d2c:	b94c      	cbnz	r4, 8006d42 <__pow5mult+0x66>
 8006d2e:	f240 2171 	movw	r1, #625	@ 0x271
 8006d32:	4638      	mov	r0, r7
 8006d34:	f7ff ff1a 	bl	8006b6c <__i2b>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d3e:	4604      	mov	r4, r0
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	f04f 0900 	mov.w	r9, #0
 8006d46:	07eb      	lsls	r3, r5, #31
 8006d48:	d50a      	bpl.n	8006d60 <__pow5mult+0x84>
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f7ff ff22 	bl	8006b98 <__multiply>
 8006d54:	4631      	mov	r1, r6
 8006d56:	4680      	mov	r8, r0
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff fe53 	bl	8006a04 <_Bfree>
 8006d5e:	4646      	mov	r6, r8
 8006d60:	106d      	asrs	r5, r5, #1
 8006d62:	d00b      	beq.n	8006d7c <__pow5mult+0xa0>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	b938      	cbnz	r0, 8006d78 <__pow5mult+0x9c>
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f7ff ff13 	bl	8006b98 <__multiply>
 8006d72:	6020      	str	r0, [r4, #0]
 8006d74:	f8c0 9000 	str.w	r9, [r0]
 8006d78:	4604      	mov	r4, r0
 8006d7a:	e7e4      	b.n	8006d46 <__pow5mult+0x6a>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d82:	bf00      	nop
 8006d84:	08007dd4 	.word	0x08007dd4
 8006d88:	08007ca1 	.word	0x08007ca1
 8006d8c:	08007d21 	.word	0x08007d21

08006d90 <__lshift>:
 8006d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	6849      	ldr	r1, [r1, #4]
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	4607      	mov	r7, r0
 8006da2:	4691      	mov	r9, r2
 8006da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006da8:	f108 0601 	add.w	r6, r8, #1
 8006dac:	42b3      	cmp	r3, r6
 8006dae:	db0b      	blt.n	8006dc8 <__lshift+0x38>
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff fde7 	bl	8006984 <_Balloc>
 8006db6:	4605      	mov	r5, r0
 8006db8:	b948      	cbnz	r0, 8006dce <__lshift+0x3e>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b28      	ldr	r3, [pc, #160]	@ (8006e60 <__lshift+0xd0>)
 8006dbe:	4829      	ldr	r0, [pc, #164]	@ (8006e64 <__lshift+0xd4>)
 8006dc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006dc4:	f000 fb94 	bl	80074f0 <__assert_func>
 8006dc8:	3101      	adds	r1, #1
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	e7ee      	b.n	8006dac <__lshift+0x1c>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f100 0114 	add.w	r1, r0, #20
 8006dd4:	f100 0210 	add.w	r2, r0, #16
 8006dd8:	4618      	mov	r0, r3
 8006dda:	4553      	cmp	r3, sl
 8006ddc:	db33      	blt.n	8006e46 <__lshift+0xb6>
 8006dde:	6920      	ldr	r0, [r4, #16]
 8006de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006de4:	f104 0314 	add.w	r3, r4, #20
 8006de8:	f019 091f 	ands.w	r9, r9, #31
 8006dec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006df0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006df4:	d02b      	beq.n	8006e4e <__lshift+0xbe>
 8006df6:	f1c9 0e20 	rsb	lr, r9, #32
 8006dfa:	468a      	mov	sl, r1
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	fa00 f009 	lsl.w	r0, r0, r9
 8006e04:	4310      	orrs	r0, r2
 8006e06:	f84a 0b04 	str.w	r0, [sl], #4
 8006e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0e:	459c      	cmp	ip, r3
 8006e10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e14:	d8f3      	bhi.n	8006dfe <__lshift+0x6e>
 8006e16:	ebac 0304 	sub.w	r3, ip, r4
 8006e1a:	3b15      	subs	r3, #21
 8006e1c:	f023 0303 	bic.w	r3, r3, #3
 8006e20:	3304      	adds	r3, #4
 8006e22:	f104 0015 	add.w	r0, r4, #21
 8006e26:	4560      	cmp	r0, ip
 8006e28:	bf88      	it	hi
 8006e2a:	2304      	movhi	r3, #4
 8006e2c:	50ca      	str	r2, [r1, r3]
 8006e2e:	b10a      	cbz	r2, 8006e34 <__lshift+0xa4>
 8006e30:	f108 0602 	add.w	r6, r8, #2
 8006e34:	3e01      	subs	r6, #1
 8006e36:	4638      	mov	r0, r7
 8006e38:	612e      	str	r6, [r5, #16]
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	f7ff fde2 	bl	8006a04 <_Bfree>
 8006e40:	4628      	mov	r0, r5
 8006e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	e7c5      	b.n	8006dda <__lshift+0x4a>
 8006e4e:	3904      	subs	r1, #4
 8006e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e58:	459c      	cmp	ip, r3
 8006e5a:	d8f9      	bhi.n	8006e50 <__lshift+0xc0>
 8006e5c:	e7ea      	b.n	8006e34 <__lshift+0xa4>
 8006e5e:	bf00      	nop
 8006e60:	08007d10 	.word	0x08007d10
 8006e64:	08007d21 	.word	0x08007d21

08006e68 <__mcmp>:
 8006e68:	690a      	ldr	r2, [r1, #16]
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	6900      	ldr	r0, [r0, #16]
 8006e6e:	1a80      	subs	r0, r0, r2
 8006e70:	b530      	push	{r4, r5, lr}
 8006e72:	d10e      	bne.n	8006e92 <__mcmp+0x2a>
 8006e74:	3314      	adds	r3, #20
 8006e76:	3114      	adds	r1, #20
 8006e78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e88:	4295      	cmp	r5, r2
 8006e8a:	d003      	beq.n	8006e94 <__mcmp+0x2c>
 8006e8c:	d205      	bcs.n	8006e9a <__mcmp+0x32>
 8006e8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e92:	bd30      	pop	{r4, r5, pc}
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d3f3      	bcc.n	8006e80 <__mcmp+0x18>
 8006e98:	e7fb      	b.n	8006e92 <__mcmp+0x2a>
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	e7f9      	b.n	8006e92 <__mcmp+0x2a>
	...

08006ea0 <__mdiff>:
 8006ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	4689      	mov	r9, r1
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	4648      	mov	r0, r9
 8006eac:	4614      	mov	r4, r2
 8006eae:	f7ff ffdb 	bl	8006e68 <__mcmp>
 8006eb2:	1e05      	subs	r5, r0, #0
 8006eb4:	d112      	bne.n	8006edc <__mdiff+0x3c>
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff fd63 	bl	8006984 <_Balloc>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	b928      	cbnz	r0, 8006ece <__mdiff+0x2e>
 8006ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8006fc0 <__mdiff+0x120>)
 8006ec4:	f240 2137 	movw	r1, #567	@ 0x237
 8006ec8:	483e      	ldr	r0, [pc, #248]	@ (8006fc4 <__mdiff+0x124>)
 8006eca:	f000 fb11 	bl	80074f0 <__assert_func>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	b003      	add	sp, #12
 8006ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006edc:	bfbc      	itt	lt
 8006ede:	464b      	movlt	r3, r9
 8006ee0:	46a1      	movlt	r9, r4
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ee8:	bfba      	itte	lt
 8006eea:	461c      	movlt	r4, r3
 8006eec:	2501      	movlt	r5, #1
 8006eee:	2500      	movge	r5, #0
 8006ef0:	f7ff fd48 	bl	8006984 <_Balloc>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	b918      	cbnz	r0, 8006f00 <__mdiff+0x60>
 8006ef8:	4b31      	ldr	r3, [pc, #196]	@ (8006fc0 <__mdiff+0x120>)
 8006efa:	f240 2145 	movw	r1, #581	@ 0x245
 8006efe:	e7e3      	b.n	8006ec8 <__mdiff+0x28>
 8006f00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f04:	6926      	ldr	r6, [r4, #16]
 8006f06:	60c5      	str	r5, [r0, #12]
 8006f08:	f109 0310 	add.w	r3, r9, #16
 8006f0c:	f109 0514 	add.w	r5, r9, #20
 8006f10:	f104 0e14 	add.w	lr, r4, #20
 8006f14:	f100 0b14 	add.w	fp, r0, #20
 8006f18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	46d9      	mov	r9, fp
 8006f24:	f04f 0c00 	mov.w	ip, #0
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	fa1f f38a 	uxth.w	r3, sl
 8006f38:	4619      	mov	r1, r3
 8006f3a:	b283      	uxth	r3, r0
 8006f3c:	1acb      	subs	r3, r1, r3
 8006f3e:	0c00      	lsrs	r0, r0, #16
 8006f40:	4463      	add	r3, ip
 8006f42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f50:	4576      	cmp	r6, lr
 8006f52:	f849 3b04 	str.w	r3, [r9], #4
 8006f56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f5a:	d8e5      	bhi.n	8006f28 <__mdiff+0x88>
 8006f5c:	1b33      	subs	r3, r6, r4
 8006f5e:	3b15      	subs	r3, #21
 8006f60:	f023 0303 	bic.w	r3, r3, #3
 8006f64:	3415      	adds	r4, #21
 8006f66:	3304      	adds	r3, #4
 8006f68:	42a6      	cmp	r6, r4
 8006f6a:	bf38      	it	cc
 8006f6c:	2304      	movcc	r3, #4
 8006f6e:	441d      	add	r5, r3
 8006f70:	445b      	add	r3, fp
 8006f72:	461e      	mov	r6, r3
 8006f74:	462c      	mov	r4, r5
 8006f76:	4544      	cmp	r4, r8
 8006f78:	d30e      	bcc.n	8006f98 <__mdiff+0xf8>
 8006f7a:	f108 0103 	add.w	r1, r8, #3
 8006f7e:	1b49      	subs	r1, r1, r5
 8006f80:	f021 0103 	bic.w	r1, r1, #3
 8006f84:	3d03      	subs	r5, #3
 8006f86:	45a8      	cmp	r8, r5
 8006f88:	bf38      	it	cc
 8006f8a:	2100      	movcc	r1, #0
 8006f8c:	440b      	add	r3, r1
 8006f8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f92:	b191      	cbz	r1, 8006fba <__mdiff+0x11a>
 8006f94:	6117      	str	r7, [r2, #16]
 8006f96:	e79d      	b.n	8006ed4 <__mdiff+0x34>
 8006f98:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f9c:	46e6      	mov	lr, ip
 8006f9e:	0c08      	lsrs	r0, r1, #16
 8006fa0:	fa1c fc81 	uxtah	ip, ip, r1
 8006fa4:	4471      	add	r1, lr
 8006fa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006faa:	b289      	uxth	r1, r1
 8006fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006fb0:	f846 1b04 	str.w	r1, [r6], #4
 8006fb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fb8:	e7dd      	b.n	8006f76 <__mdiff+0xd6>
 8006fba:	3f01      	subs	r7, #1
 8006fbc:	e7e7      	b.n	8006f8e <__mdiff+0xee>
 8006fbe:	bf00      	nop
 8006fc0:	08007d10 	.word	0x08007d10
 8006fc4:	08007d21 	.word	0x08007d21

08006fc8 <__d2b>:
 8006fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	460f      	mov	r7, r1
 8006fce:	2101      	movs	r1, #1
 8006fd0:	ec59 8b10 	vmov	r8, r9, d0
 8006fd4:	4616      	mov	r6, r2
 8006fd6:	f7ff fcd5 	bl	8006984 <_Balloc>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	b930      	cbnz	r0, 8006fec <__d2b+0x24>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	4b23      	ldr	r3, [pc, #140]	@ (8007070 <__d2b+0xa8>)
 8006fe2:	4824      	ldr	r0, [pc, #144]	@ (8007074 <__d2b+0xac>)
 8006fe4:	f240 310f 	movw	r1, #783	@ 0x30f
 8006fe8:	f000 fa82 	bl	80074f0 <__assert_func>
 8006fec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ff4:	b10d      	cbz	r5, 8006ffa <__d2b+0x32>
 8006ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	f1b8 0300 	subs.w	r3, r8, #0
 8007000:	d023      	beq.n	800704a <__d2b+0x82>
 8007002:	4668      	mov	r0, sp
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	f7ff fd84 	bl	8006b12 <__lo0bits>
 800700a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800700e:	b1d0      	cbz	r0, 8007046 <__d2b+0x7e>
 8007010:	f1c0 0320 	rsb	r3, r0, #32
 8007014:	fa02 f303 	lsl.w	r3, r2, r3
 8007018:	430b      	orrs	r3, r1
 800701a:	40c2      	lsrs	r2, r0
 800701c:	6163      	str	r3, [r4, #20]
 800701e:	9201      	str	r2, [sp, #4]
 8007020:	9b01      	ldr	r3, [sp, #4]
 8007022:	61a3      	str	r3, [r4, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf0c      	ite	eq
 8007028:	2201      	moveq	r2, #1
 800702a:	2202      	movne	r2, #2
 800702c:	6122      	str	r2, [r4, #16]
 800702e:	b1a5      	cbz	r5, 800705a <__d2b+0x92>
 8007030:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007034:	4405      	add	r5, r0
 8007036:	603d      	str	r5, [r7, #0]
 8007038:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800703c:	6030      	str	r0, [r6, #0]
 800703e:	4620      	mov	r0, r4
 8007040:	b003      	add	sp, #12
 8007042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007046:	6161      	str	r1, [r4, #20]
 8007048:	e7ea      	b.n	8007020 <__d2b+0x58>
 800704a:	a801      	add	r0, sp, #4
 800704c:	f7ff fd61 	bl	8006b12 <__lo0bits>
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	6163      	str	r3, [r4, #20]
 8007054:	3020      	adds	r0, #32
 8007056:	2201      	movs	r2, #1
 8007058:	e7e8      	b.n	800702c <__d2b+0x64>
 800705a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800705e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007062:	6038      	str	r0, [r7, #0]
 8007064:	6918      	ldr	r0, [r3, #16]
 8007066:	f7ff fd35 	bl	8006ad4 <__hi0bits>
 800706a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800706e:	e7e5      	b.n	800703c <__d2b+0x74>
 8007070:	08007d10 	.word	0x08007d10
 8007074:	08007d21 	.word	0x08007d21

08007078 <__ssputs_r>:
 8007078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800707c:	688e      	ldr	r6, [r1, #8]
 800707e:	461f      	mov	r7, r3
 8007080:	42be      	cmp	r6, r7
 8007082:	680b      	ldr	r3, [r1, #0]
 8007084:	4682      	mov	sl, r0
 8007086:	460c      	mov	r4, r1
 8007088:	4690      	mov	r8, r2
 800708a:	d82d      	bhi.n	80070e8 <__ssputs_r+0x70>
 800708c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007090:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007094:	d026      	beq.n	80070e4 <__ssputs_r+0x6c>
 8007096:	6965      	ldr	r5, [r4, #20]
 8007098:	6909      	ldr	r1, [r1, #16]
 800709a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800709e:	eba3 0901 	sub.w	r9, r3, r1
 80070a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070a6:	1c7b      	adds	r3, r7, #1
 80070a8:	444b      	add	r3, r9
 80070aa:	106d      	asrs	r5, r5, #1
 80070ac:	429d      	cmp	r5, r3
 80070ae:	bf38      	it	cc
 80070b0:	461d      	movcc	r5, r3
 80070b2:	0553      	lsls	r3, r2, #21
 80070b4:	d527      	bpl.n	8007106 <__ssputs_r+0x8e>
 80070b6:	4629      	mov	r1, r5
 80070b8:	f7ff fbd8 	bl	800686c <_malloc_r>
 80070bc:	4606      	mov	r6, r0
 80070be:	b360      	cbz	r0, 800711a <__ssputs_r+0xa2>
 80070c0:	6921      	ldr	r1, [r4, #16]
 80070c2:	464a      	mov	r2, r9
 80070c4:	f000 fa06 	bl	80074d4 <memcpy>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	6126      	str	r6, [r4, #16]
 80070d6:	6165      	str	r5, [r4, #20]
 80070d8:	444e      	add	r6, r9
 80070da:	eba5 0509 	sub.w	r5, r5, r9
 80070de:	6026      	str	r6, [r4, #0]
 80070e0:	60a5      	str	r5, [r4, #8]
 80070e2:	463e      	mov	r6, r7
 80070e4:	42be      	cmp	r6, r7
 80070e6:	d900      	bls.n	80070ea <__ssputs_r+0x72>
 80070e8:	463e      	mov	r6, r7
 80070ea:	6820      	ldr	r0, [r4, #0]
 80070ec:	4632      	mov	r2, r6
 80070ee:	4641      	mov	r1, r8
 80070f0:	f000 f9c6 	bl	8007480 <memmove>
 80070f4:	68a3      	ldr	r3, [r4, #8]
 80070f6:	1b9b      	subs	r3, r3, r6
 80070f8:	60a3      	str	r3, [r4, #8]
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	4433      	add	r3, r6
 80070fe:	6023      	str	r3, [r4, #0]
 8007100:	2000      	movs	r0, #0
 8007102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007106:	462a      	mov	r2, r5
 8007108:	f000 fa36 	bl	8007578 <_realloc_r>
 800710c:	4606      	mov	r6, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d1e0      	bne.n	80070d4 <__ssputs_r+0x5c>
 8007112:	6921      	ldr	r1, [r4, #16]
 8007114:	4650      	mov	r0, sl
 8007116:	f7ff fb35 	bl	8006784 <_free_r>
 800711a:	230c      	movs	r3, #12
 800711c:	f8ca 3000 	str.w	r3, [sl]
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800712c:	e7e9      	b.n	8007102 <__ssputs_r+0x8a>
	...

08007130 <_svfiprintf_r>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	4698      	mov	r8, r3
 8007136:	898b      	ldrh	r3, [r1, #12]
 8007138:	061b      	lsls	r3, r3, #24
 800713a:	b09d      	sub	sp, #116	@ 0x74
 800713c:	4607      	mov	r7, r0
 800713e:	460d      	mov	r5, r1
 8007140:	4614      	mov	r4, r2
 8007142:	d510      	bpl.n	8007166 <_svfiprintf_r+0x36>
 8007144:	690b      	ldr	r3, [r1, #16]
 8007146:	b973      	cbnz	r3, 8007166 <_svfiprintf_r+0x36>
 8007148:	2140      	movs	r1, #64	@ 0x40
 800714a:	f7ff fb8f 	bl	800686c <_malloc_r>
 800714e:	6028      	str	r0, [r5, #0]
 8007150:	6128      	str	r0, [r5, #16]
 8007152:	b930      	cbnz	r0, 8007162 <_svfiprintf_r+0x32>
 8007154:	230c      	movs	r3, #12
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800715c:	b01d      	add	sp, #116	@ 0x74
 800715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007162:	2340      	movs	r3, #64	@ 0x40
 8007164:	616b      	str	r3, [r5, #20]
 8007166:	2300      	movs	r3, #0
 8007168:	9309      	str	r3, [sp, #36]	@ 0x24
 800716a:	2320      	movs	r3, #32
 800716c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007170:	f8cd 800c 	str.w	r8, [sp, #12]
 8007174:	2330      	movs	r3, #48	@ 0x30
 8007176:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007314 <_svfiprintf_r+0x1e4>
 800717a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800717e:	f04f 0901 	mov.w	r9, #1
 8007182:	4623      	mov	r3, r4
 8007184:	469a      	mov	sl, r3
 8007186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800718a:	b10a      	cbz	r2, 8007190 <_svfiprintf_r+0x60>
 800718c:	2a25      	cmp	r2, #37	@ 0x25
 800718e:	d1f9      	bne.n	8007184 <_svfiprintf_r+0x54>
 8007190:	ebba 0b04 	subs.w	fp, sl, r4
 8007194:	d00b      	beq.n	80071ae <_svfiprintf_r+0x7e>
 8007196:	465b      	mov	r3, fp
 8007198:	4622      	mov	r2, r4
 800719a:	4629      	mov	r1, r5
 800719c:	4638      	mov	r0, r7
 800719e:	f7ff ff6b 	bl	8007078 <__ssputs_r>
 80071a2:	3001      	adds	r0, #1
 80071a4:	f000 80a7 	beq.w	80072f6 <_svfiprintf_r+0x1c6>
 80071a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071aa:	445a      	add	r2, fp
 80071ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80071ae:	f89a 3000 	ldrb.w	r3, [sl]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 809f 	beq.w	80072f6 <_svfiprintf_r+0x1c6>
 80071b8:	2300      	movs	r3, #0
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071c2:	f10a 0a01 	add.w	sl, sl, #1
 80071c6:	9304      	str	r3, [sp, #16]
 80071c8:	9307      	str	r3, [sp, #28]
 80071ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80071d0:	4654      	mov	r4, sl
 80071d2:	2205      	movs	r2, #5
 80071d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d8:	484e      	ldr	r0, [pc, #312]	@ (8007314 <_svfiprintf_r+0x1e4>)
 80071da:	f7f9 f831 	bl	8000240 <memchr>
 80071de:	9a04      	ldr	r2, [sp, #16]
 80071e0:	b9d8      	cbnz	r0, 800721a <_svfiprintf_r+0xea>
 80071e2:	06d0      	lsls	r0, r2, #27
 80071e4:	bf44      	itt	mi
 80071e6:	2320      	movmi	r3, #32
 80071e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071ec:	0711      	lsls	r1, r2, #28
 80071ee:	bf44      	itt	mi
 80071f0:	232b      	movmi	r3, #43	@ 0x2b
 80071f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071f6:	f89a 3000 	ldrb.w	r3, [sl]
 80071fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80071fc:	d015      	beq.n	800722a <_svfiprintf_r+0xfa>
 80071fe:	9a07      	ldr	r2, [sp, #28]
 8007200:	4654      	mov	r4, sl
 8007202:	2000      	movs	r0, #0
 8007204:	f04f 0c0a 	mov.w	ip, #10
 8007208:	4621      	mov	r1, r4
 800720a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800720e:	3b30      	subs	r3, #48	@ 0x30
 8007210:	2b09      	cmp	r3, #9
 8007212:	d94b      	bls.n	80072ac <_svfiprintf_r+0x17c>
 8007214:	b1b0      	cbz	r0, 8007244 <_svfiprintf_r+0x114>
 8007216:	9207      	str	r2, [sp, #28]
 8007218:	e014      	b.n	8007244 <_svfiprintf_r+0x114>
 800721a:	eba0 0308 	sub.w	r3, r0, r8
 800721e:	fa09 f303 	lsl.w	r3, r9, r3
 8007222:	4313      	orrs	r3, r2
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	46a2      	mov	sl, r4
 8007228:	e7d2      	b.n	80071d0 <_svfiprintf_r+0xa0>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	1d19      	adds	r1, r3, #4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	9103      	str	r1, [sp, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	bfbb      	ittet	lt
 8007236:	425b      	neglt	r3, r3
 8007238:	f042 0202 	orrlt.w	r2, r2, #2
 800723c:	9307      	strge	r3, [sp, #28]
 800723e:	9307      	strlt	r3, [sp, #28]
 8007240:	bfb8      	it	lt
 8007242:	9204      	strlt	r2, [sp, #16]
 8007244:	7823      	ldrb	r3, [r4, #0]
 8007246:	2b2e      	cmp	r3, #46	@ 0x2e
 8007248:	d10a      	bne.n	8007260 <_svfiprintf_r+0x130>
 800724a:	7863      	ldrb	r3, [r4, #1]
 800724c:	2b2a      	cmp	r3, #42	@ 0x2a
 800724e:	d132      	bne.n	80072b6 <_svfiprintf_r+0x186>
 8007250:	9b03      	ldr	r3, [sp, #12]
 8007252:	1d1a      	adds	r2, r3, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	9203      	str	r2, [sp, #12]
 8007258:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800725c:	3402      	adds	r4, #2
 800725e:	9305      	str	r3, [sp, #20]
 8007260:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007324 <_svfiprintf_r+0x1f4>
 8007264:	7821      	ldrb	r1, [r4, #0]
 8007266:	2203      	movs	r2, #3
 8007268:	4650      	mov	r0, sl
 800726a:	f7f8 ffe9 	bl	8000240 <memchr>
 800726e:	b138      	cbz	r0, 8007280 <_svfiprintf_r+0x150>
 8007270:	9b04      	ldr	r3, [sp, #16]
 8007272:	eba0 000a 	sub.w	r0, r0, sl
 8007276:	2240      	movs	r2, #64	@ 0x40
 8007278:	4082      	lsls	r2, r0
 800727a:	4313      	orrs	r3, r2
 800727c:	3401      	adds	r4, #1
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007284:	4824      	ldr	r0, [pc, #144]	@ (8007318 <_svfiprintf_r+0x1e8>)
 8007286:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800728a:	2206      	movs	r2, #6
 800728c:	f7f8 ffd8 	bl	8000240 <memchr>
 8007290:	2800      	cmp	r0, #0
 8007292:	d036      	beq.n	8007302 <_svfiprintf_r+0x1d2>
 8007294:	4b21      	ldr	r3, [pc, #132]	@ (800731c <_svfiprintf_r+0x1ec>)
 8007296:	bb1b      	cbnz	r3, 80072e0 <_svfiprintf_r+0x1b0>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	3307      	adds	r3, #7
 800729c:	f023 0307 	bic.w	r3, r3, #7
 80072a0:	3308      	adds	r3, #8
 80072a2:	9303      	str	r3, [sp, #12]
 80072a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a6:	4433      	add	r3, r6
 80072a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072aa:	e76a      	b.n	8007182 <_svfiprintf_r+0x52>
 80072ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80072b0:	460c      	mov	r4, r1
 80072b2:	2001      	movs	r0, #1
 80072b4:	e7a8      	b.n	8007208 <_svfiprintf_r+0xd8>
 80072b6:	2300      	movs	r3, #0
 80072b8:	3401      	adds	r4, #1
 80072ba:	9305      	str	r3, [sp, #20]
 80072bc:	4619      	mov	r1, r3
 80072be:	f04f 0c0a 	mov.w	ip, #10
 80072c2:	4620      	mov	r0, r4
 80072c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072c8:	3a30      	subs	r2, #48	@ 0x30
 80072ca:	2a09      	cmp	r2, #9
 80072cc:	d903      	bls.n	80072d6 <_svfiprintf_r+0x1a6>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0c6      	beq.n	8007260 <_svfiprintf_r+0x130>
 80072d2:	9105      	str	r1, [sp, #20]
 80072d4:	e7c4      	b.n	8007260 <_svfiprintf_r+0x130>
 80072d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072da:	4604      	mov	r4, r0
 80072dc:	2301      	movs	r3, #1
 80072de:	e7f0      	b.n	80072c2 <_svfiprintf_r+0x192>
 80072e0:	ab03      	add	r3, sp, #12
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	462a      	mov	r2, r5
 80072e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <_svfiprintf_r+0x1f0>)
 80072e8:	a904      	add	r1, sp, #16
 80072ea:	4638      	mov	r0, r7
 80072ec:	f7fd ff14 	bl	8005118 <_printf_float>
 80072f0:	1c42      	adds	r2, r0, #1
 80072f2:	4606      	mov	r6, r0
 80072f4:	d1d6      	bne.n	80072a4 <_svfiprintf_r+0x174>
 80072f6:	89ab      	ldrh	r3, [r5, #12]
 80072f8:	065b      	lsls	r3, r3, #25
 80072fa:	f53f af2d 	bmi.w	8007158 <_svfiprintf_r+0x28>
 80072fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007300:	e72c      	b.n	800715c <_svfiprintf_r+0x2c>
 8007302:	ab03      	add	r3, sp, #12
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	462a      	mov	r2, r5
 8007308:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <_svfiprintf_r+0x1f0>)
 800730a:	a904      	add	r1, sp, #16
 800730c:	4638      	mov	r0, r7
 800730e:	f7fe f98b 	bl	8005628 <_printf_i>
 8007312:	e7ed      	b.n	80072f0 <_svfiprintf_r+0x1c0>
 8007314:	08007d7a 	.word	0x08007d7a
 8007318:	08007d84 	.word	0x08007d84
 800731c:	08005119 	.word	0x08005119
 8007320:	08007079 	.word	0x08007079
 8007324:	08007d80 	.word	0x08007d80

08007328 <__sflush_r>:
 8007328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800732c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007330:	0716      	lsls	r6, r2, #28
 8007332:	4605      	mov	r5, r0
 8007334:	460c      	mov	r4, r1
 8007336:	d454      	bmi.n	80073e2 <__sflush_r+0xba>
 8007338:	684b      	ldr	r3, [r1, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	dc02      	bgt.n	8007344 <__sflush_r+0x1c>
 800733e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	dd48      	ble.n	80073d6 <__sflush_r+0xae>
 8007344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007346:	2e00      	cmp	r6, #0
 8007348:	d045      	beq.n	80073d6 <__sflush_r+0xae>
 800734a:	2300      	movs	r3, #0
 800734c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007350:	682f      	ldr	r7, [r5, #0]
 8007352:	6a21      	ldr	r1, [r4, #32]
 8007354:	602b      	str	r3, [r5, #0]
 8007356:	d030      	beq.n	80073ba <__sflush_r+0x92>
 8007358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	0759      	lsls	r1, r3, #29
 800735e:	d505      	bpl.n	800736c <__sflush_r+0x44>
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	1ad2      	subs	r2, r2, r3
 8007364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007366:	b10b      	cbz	r3, 800736c <__sflush_r+0x44>
 8007368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	2300      	movs	r3, #0
 800736e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007370:	6a21      	ldr	r1, [r4, #32]
 8007372:	4628      	mov	r0, r5
 8007374:	47b0      	blx	r6
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	d106      	bne.n	800738a <__sflush_r+0x62>
 800737c:	6829      	ldr	r1, [r5, #0]
 800737e:	291d      	cmp	r1, #29
 8007380:	d82b      	bhi.n	80073da <__sflush_r+0xb2>
 8007382:	4a2a      	ldr	r2, [pc, #168]	@ (800742c <__sflush_r+0x104>)
 8007384:	40ca      	lsrs	r2, r1
 8007386:	07d6      	lsls	r6, r2, #31
 8007388:	d527      	bpl.n	80073da <__sflush_r+0xb2>
 800738a:	2200      	movs	r2, #0
 800738c:	6062      	str	r2, [r4, #4]
 800738e:	04d9      	lsls	r1, r3, #19
 8007390:	6922      	ldr	r2, [r4, #16]
 8007392:	6022      	str	r2, [r4, #0]
 8007394:	d504      	bpl.n	80073a0 <__sflush_r+0x78>
 8007396:	1c42      	adds	r2, r0, #1
 8007398:	d101      	bne.n	800739e <__sflush_r+0x76>
 800739a:	682b      	ldr	r3, [r5, #0]
 800739c:	b903      	cbnz	r3, 80073a0 <__sflush_r+0x78>
 800739e:	6560      	str	r0, [r4, #84]	@ 0x54
 80073a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073a2:	602f      	str	r7, [r5, #0]
 80073a4:	b1b9      	cbz	r1, 80073d6 <__sflush_r+0xae>
 80073a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d002      	beq.n	80073b4 <__sflush_r+0x8c>
 80073ae:	4628      	mov	r0, r5
 80073b0:	f7ff f9e8 	bl	8006784 <_free_r>
 80073b4:	2300      	movs	r3, #0
 80073b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80073b8:	e00d      	b.n	80073d6 <__sflush_r+0xae>
 80073ba:	2301      	movs	r3, #1
 80073bc:	4628      	mov	r0, r5
 80073be:	47b0      	blx	r6
 80073c0:	4602      	mov	r2, r0
 80073c2:	1c50      	adds	r0, r2, #1
 80073c4:	d1c9      	bne.n	800735a <__sflush_r+0x32>
 80073c6:	682b      	ldr	r3, [r5, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0c6      	beq.n	800735a <__sflush_r+0x32>
 80073cc:	2b1d      	cmp	r3, #29
 80073ce:	d001      	beq.n	80073d4 <__sflush_r+0xac>
 80073d0:	2b16      	cmp	r3, #22
 80073d2:	d11e      	bne.n	8007412 <__sflush_r+0xea>
 80073d4:	602f      	str	r7, [r5, #0]
 80073d6:	2000      	movs	r0, #0
 80073d8:	e022      	b.n	8007420 <__sflush_r+0xf8>
 80073da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073de:	b21b      	sxth	r3, r3
 80073e0:	e01b      	b.n	800741a <__sflush_r+0xf2>
 80073e2:	690f      	ldr	r7, [r1, #16]
 80073e4:	2f00      	cmp	r7, #0
 80073e6:	d0f6      	beq.n	80073d6 <__sflush_r+0xae>
 80073e8:	0793      	lsls	r3, r2, #30
 80073ea:	680e      	ldr	r6, [r1, #0]
 80073ec:	bf08      	it	eq
 80073ee:	694b      	ldreq	r3, [r1, #20]
 80073f0:	600f      	str	r7, [r1, #0]
 80073f2:	bf18      	it	ne
 80073f4:	2300      	movne	r3, #0
 80073f6:	eba6 0807 	sub.w	r8, r6, r7
 80073fa:	608b      	str	r3, [r1, #8]
 80073fc:	f1b8 0f00 	cmp.w	r8, #0
 8007400:	dde9      	ble.n	80073d6 <__sflush_r+0xae>
 8007402:	6a21      	ldr	r1, [r4, #32]
 8007404:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007406:	4643      	mov	r3, r8
 8007408:	463a      	mov	r2, r7
 800740a:	4628      	mov	r0, r5
 800740c:	47b0      	blx	r6
 800740e:	2800      	cmp	r0, #0
 8007410:	dc08      	bgt.n	8007424 <__sflush_r+0xfc>
 8007412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800741a:	81a3      	strh	r3, [r4, #12]
 800741c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007424:	4407      	add	r7, r0
 8007426:	eba8 0800 	sub.w	r8, r8, r0
 800742a:	e7e7      	b.n	80073fc <__sflush_r+0xd4>
 800742c:	20400001 	.word	0x20400001

08007430 <_fflush_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	690b      	ldr	r3, [r1, #16]
 8007434:	4605      	mov	r5, r0
 8007436:	460c      	mov	r4, r1
 8007438:	b913      	cbnz	r3, 8007440 <_fflush_r+0x10>
 800743a:	2500      	movs	r5, #0
 800743c:	4628      	mov	r0, r5
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	b118      	cbz	r0, 800744a <_fflush_r+0x1a>
 8007442:	6a03      	ldr	r3, [r0, #32]
 8007444:	b90b      	cbnz	r3, 800744a <_fflush_r+0x1a>
 8007446:	f7fe fa99 	bl	800597c <__sinit>
 800744a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f3      	beq.n	800743a <_fflush_r+0xa>
 8007452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007454:	07d0      	lsls	r0, r2, #31
 8007456:	d404      	bmi.n	8007462 <_fflush_r+0x32>
 8007458:	0599      	lsls	r1, r3, #22
 800745a:	d402      	bmi.n	8007462 <_fflush_r+0x32>
 800745c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800745e:	f7fe fba6 	bl	8005bae <__retarget_lock_acquire_recursive>
 8007462:	4628      	mov	r0, r5
 8007464:	4621      	mov	r1, r4
 8007466:	f7ff ff5f 	bl	8007328 <__sflush_r>
 800746a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800746c:	07da      	lsls	r2, r3, #31
 800746e:	4605      	mov	r5, r0
 8007470:	d4e4      	bmi.n	800743c <_fflush_r+0xc>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	059b      	lsls	r3, r3, #22
 8007476:	d4e1      	bmi.n	800743c <_fflush_r+0xc>
 8007478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800747a:	f7fe fb99 	bl	8005bb0 <__retarget_lock_release_recursive>
 800747e:	e7dd      	b.n	800743c <_fflush_r+0xc>

08007480 <memmove>:
 8007480:	4288      	cmp	r0, r1
 8007482:	b510      	push	{r4, lr}
 8007484:	eb01 0402 	add.w	r4, r1, r2
 8007488:	d902      	bls.n	8007490 <memmove+0x10>
 800748a:	4284      	cmp	r4, r0
 800748c:	4623      	mov	r3, r4
 800748e:	d807      	bhi.n	80074a0 <memmove+0x20>
 8007490:	1e43      	subs	r3, r0, #1
 8007492:	42a1      	cmp	r1, r4
 8007494:	d008      	beq.n	80074a8 <memmove+0x28>
 8007496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800749a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800749e:	e7f8      	b.n	8007492 <memmove+0x12>
 80074a0:	4402      	add	r2, r0
 80074a2:	4601      	mov	r1, r0
 80074a4:	428a      	cmp	r2, r1
 80074a6:	d100      	bne.n	80074aa <memmove+0x2a>
 80074a8:	bd10      	pop	{r4, pc}
 80074aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074b2:	e7f7      	b.n	80074a4 <memmove+0x24>

080074b4 <_sbrk_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d06      	ldr	r5, [pc, #24]	@ (80074d0 <_sbrk_r+0x1c>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	f7f9 fca2 	bl	8000e08 <_sbrk>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_sbrk_r+0x1a>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_sbrk_r+0x1a>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20000920 	.word	0x20000920

080074d4 <memcpy>:
 80074d4:	440a      	add	r2, r1
 80074d6:	4291      	cmp	r1, r2
 80074d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	4770      	bx	lr
 80074e0:	b510      	push	{r4, lr}
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memcpy+0xe>
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <__assert_func>:
 80074f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074f2:	4614      	mov	r4, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	4b09      	ldr	r3, [pc, #36]	@ (800751c <__assert_func+0x2c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4605      	mov	r5, r0
 80074fc:	68d8      	ldr	r0, [r3, #12]
 80074fe:	b14c      	cbz	r4, 8007514 <__assert_func+0x24>
 8007500:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <__assert_func+0x30>)
 8007502:	9100      	str	r1, [sp, #0]
 8007504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007508:	4906      	ldr	r1, [pc, #24]	@ (8007524 <__assert_func+0x34>)
 800750a:	462b      	mov	r3, r5
 800750c:	f000 f870 	bl	80075f0 <fiprintf>
 8007510:	f000 f880 	bl	8007614 <abort>
 8007514:	4b04      	ldr	r3, [pc, #16]	@ (8007528 <__assert_func+0x38>)
 8007516:	461c      	mov	r4, r3
 8007518:	e7f3      	b.n	8007502 <__assert_func+0x12>
 800751a:	bf00      	nop
 800751c:	20000024 	.word	0x20000024
 8007520:	08007d95 	.word	0x08007d95
 8007524:	08007da2 	.word	0x08007da2
 8007528:	08007dd0 	.word	0x08007dd0

0800752c <_calloc_r>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	fba1 5402 	umull	r5, r4, r1, r2
 8007532:	b934      	cbnz	r4, 8007542 <_calloc_r+0x16>
 8007534:	4629      	mov	r1, r5
 8007536:	f7ff f999 	bl	800686c <_malloc_r>
 800753a:	4606      	mov	r6, r0
 800753c:	b928      	cbnz	r0, 800754a <_calloc_r+0x1e>
 800753e:	4630      	mov	r0, r6
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	220c      	movs	r2, #12
 8007544:	6002      	str	r2, [r0, #0]
 8007546:	2600      	movs	r6, #0
 8007548:	e7f9      	b.n	800753e <_calloc_r+0x12>
 800754a:	462a      	mov	r2, r5
 800754c:	4621      	mov	r1, r4
 800754e:	f7fe fab0 	bl	8005ab2 <memset>
 8007552:	e7f4      	b.n	800753e <_calloc_r+0x12>

08007554 <__ascii_mbtowc>:
 8007554:	b082      	sub	sp, #8
 8007556:	b901      	cbnz	r1, 800755a <__ascii_mbtowc+0x6>
 8007558:	a901      	add	r1, sp, #4
 800755a:	b142      	cbz	r2, 800756e <__ascii_mbtowc+0x1a>
 800755c:	b14b      	cbz	r3, 8007572 <__ascii_mbtowc+0x1e>
 800755e:	7813      	ldrb	r3, [r2, #0]
 8007560:	600b      	str	r3, [r1, #0]
 8007562:	7812      	ldrb	r2, [r2, #0]
 8007564:	1e10      	subs	r0, r2, #0
 8007566:	bf18      	it	ne
 8007568:	2001      	movne	r0, #1
 800756a:	b002      	add	sp, #8
 800756c:	4770      	bx	lr
 800756e:	4610      	mov	r0, r2
 8007570:	e7fb      	b.n	800756a <__ascii_mbtowc+0x16>
 8007572:	f06f 0001 	mvn.w	r0, #1
 8007576:	e7f8      	b.n	800756a <__ascii_mbtowc+0x16>

08007578 <_realloc_r>:
 8007578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757c:	4607      	mov	r7, r0
 800757e:	4614      	mov	r4, r2
 8007580:	460d      	mov	r5, r1
 8007582:	b921      	cbnz	r1, 800758e <_realloc_r+0x16>
 8007584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	4611      	mov	r1, r2
 800758a:	f7ff b96f 	b.w	800686c <_malloc_r>
 800758e:	b92a      	cbnz	r2, 800759c <_realloc_r+0x24>
 8007590:	f7ff f8f8 	bl	8006784 <_free_r>
 8007594:	4625      	mov	r5, r4
 8007596:	4628      	mov	r0, r5
 8007598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800759c:	f000 f841 	bl	8007622 <_malloc_usable_size_r>
 80075a0:	4284      	cmp	r4, r0
 80075a2:	4606      	mov	r6, r0
 80075a4:	d802      	bhi.n	80075ac <_realloc_r+0x34>
 80075a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075aa:	d8f4      	bhi.n	8007596 <_realloc_r+0x1e>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4638      	mov	r0, r7
 80075b0:	f7ff f95c 	bl	800686c <_malloc_r>
 80075b4:	4680      	mov	r8, r0
 80075b6:	b908      	cbnz	r0, 80075bc <_realloc_r+0x44>
 80075b8:	4645      	mov	r5, r8
 80075ba:	e7ec      	b.n	8007596 <_realloc_r+0x1e>
 80075bc:	42b4      	cmp	r4, r6
 80075be:	4622      	mov	r2, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	bf28      	it	cs
 80075c4:	4632      	movcs	r2, r6
 80075c6:	f7ff ff85 	bl	80074d4 <memcpy>
 80075ca:	4629      	mov	r1, r5
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff f8d9 	bl	8006784 <_free_r>
 80075d2:	e7f1      	b.n	80075b8 <_realloc_r+0x40>

080075d4 <__ascii_wctomb>:
 80075d4:	4603      	mov	r3, r0
 80075d6:	4608      	mov	r0, r1
 80075d8:	b141      	cbz	r1, 80075ec <__ascii_wctomb+0x18>
 80075da:	2aff      	cmp	r2, #255	@ 0xff
 80075dc:	d904      	bls.n	80075e8 <__ascii_wctomb+0x14>
 80075de:	228a      	movs	r2, #138	@ 0x8a
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075e6:	4770      	bx	lr
 80075e8:	700a      	strb	r2, [r1, #0]
 80075ea:	2001      	movs	r0, #1
 80075ec:	4770      	bx	lr
	...

080075f0 <fiprintf>:
 80075f0:	b40e      	push	{r1, r2, r3}
 80075f2:	b503      	push	{r0, r1, lr}
 80075f4:	4601      	mov	r1, r0
 80075f6:	ab03      	add	r3, sp, #12
 80075f8:	4805      	ldr	r0, [pc, #20]	@ (8007610 <fiprintf+0x20>)
 80075fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80075fe:	6800      	ldr	r0, [r0, #0]
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	f000 f83f 	bl	8007684 <_vfiprintf_r>
 8007606:	b002      	add	sp, #8
 8007608:	f85d eb04 	ldr.w	lr, [sp], #4
 800760c:	b003      	add	sp, #12
 800760e:	4770      	bx	lr
 8007610:	20000024 	.word	0x20000024

08007614 <abort>:
 8007614:	b508      	push	{r3, lr}
 8007616:	2006      	movs	r0, #6
 8007618:	f000 fa08 	bl	8007a2c <raise>
 800761c:	2001      	movs	r0, #1
 800761e:	f7f9 fb7a 	bl	8000d16 <_exit>

08007622 <_malloc_usable_size_r>:
 8007622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007626:	1f18      	subs	r0, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	bfbc      	itt	lt
 800762c:	580b      	ldrlt	r3, [r1, r0]
 800762e:	18c0      	addlt	r0, r0, r3
 8007630:	4770      	bx	lr

08007632 <__sfputc_r>:
 8007632:	6893      	ldr	r3, [r2, #8]
 8007634:	3b01      	subs	r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	b410      	push	{r4}
 800763a:	6093      	str	r3, [r2, #8]
 800763c:	da08      	bge.n	8007650 <__sfputc_r+0x1e>
 800763e:	6994      	ldr	r4, [r2, #24]
 8007640:	42a3      	cmp	r3, r4
 8007642:	db01      	blt.n	8007648 <__sfputc_r+0x16>
 8007644:	290a      	cmp	r1, #10
 8007646:	d103      	bne.n	8007650 <__sfputc_r+0x1e>
 8007648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800764c:	f000 b932 	b.w	80078b4 <__swbuf_r>
 8007650:	6813      	ldr	r3, [r2, #0]
 8007652:	1c58      	adds	r0, r3, #1
 8007654:	6010      	str	r0, [r2, #0]
 8007656:	7019      	strb	r1, [r3, #0]
 8007658:	4608      	mov	r0, r1
 800765a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800765e:	4770      	bx	lr

08007660 <__sfputs_r>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	4614      	mov	r4, r2
 8007668:	18d5      	adds	r5, r2, r3
 800766a:	42ac      	cmp	r4, r5
 800766c:	d101      	bne.n	8007672 <__sfputs_r+0x12>
 800766e:	2000      	movs	r0, #0
 8007670:	e007      	b.n	8007682 <__sfputs_r+0x22>
 8007672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007676:	463a      	mov	r2, r7
 8007678:	4630      	mov	r0, r6
 800767a:	f7ff ffda 	bl	8007632 <__sfputc_r>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d1f3      	bne.n	800766a <__sfputs_r+0xa>
 8007682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007684 <_vfiprintf_r>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	460d      	mov	r5, r1
 800768a:	b09d      	sub	sp, #116	@ 0x74
 800768c:	4614      	mov	r4, r2
 800768e:	4698      	mov	r8, r3
 8007690:	4606      	mov	r6, r0
 8007692:	b118      	cbz	r0, 800769c <_vfiprintf_r+0x18>
 8007694:	6a03      	ldr	r3, [r0, #32]
 8007696:	b90b      	cbnz	r3, 800769c <_vfiprintf_r+0x18>
 8007698:	f7fe f970 	bl	800597c <__sinit>
 800769c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_vfiprintf_r+0x2a>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	059a      	lsls	r2, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_vfiprintf_r+0x2a>
 80076a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076aa:	f7fe fa80 	bl	8005bae <__retarget_lock_acquire_recursive>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	071b      	lsls	r3, r3, #28
 80076b2:	d501      	bpl.n	80076b8 <_vfiprintf_r+0x34>
 80076b4:	692b      	ldr	r3, [r5, #16]
 80076b6:	b99b      	cbnz	r3, 80076e0 <_vfiprintf_r+0x5c>
 80076b8:	4629      	mov	r1, r5
 80076ba:	4630      	mov	r0, r6
 80076bc:	f000 f938 	bl	8007930 <__swsetup_r>
 80076c0:	b170      	cbz	r0, 80076e0 <_vfiprintf_r+0x5c>
 80076c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076c4:	07dc      	lsls	r4, r3, #31
 80076c6:	d504      	bpl.n	80076d2 <_vfiprintf_r+0x4e>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076cc:	b01d      	add	sp, #116	@ 0x74
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	0598      	lsls	r0, r3, #22
 80076d6:	d4f7      	bmi.n	80076c8 <_vfiprintf_r+0x44>
 80076d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076da:	f7fe fa69 	bl	8005bb0 <__retarget_lock_release_recursive>
 80076de:	e7f3      	b.n	80076c8 <_vfiprintf_r+0x44>
 80076e0:	2300      	movs	r3, #0
 80076e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e4:	2320      	movs	r3, #32
 80076e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ee:	2330      	movs	r3, #48	@ 0x30
 80076f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078a0 <_vfiprintf_r+0x21c>
 80076f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076f8:	f04f 0901 	mov.w	r9, #1
 80076fc:	4623      	mov	r3, r4
 80076fe:	469a      	mov	sl, r3
 8007700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007704:	b10a      	cbz	r2, 800770a <_vfiprintf_r+0x86>
 8007706:	2a25      	cmp	r2, #37	@ 0x25
 8007708:	d1f9      	bne.n	80076fe <_vfiprintf_r+0x7a>
 800770a:	ebba 0b04 	subs.w	fp, sl, r4
 800770e:	d00b      	beq.n	8007728 <_vfiprintf_r+0xa4>
 8007710:	465b      	mov	r3, fp
 8007712:	4622      	mov	r2, r4
 8007714:	4629      	mov	r1, r5
 8007716:	4630      	mov	r0, r6
 8007718:	f7ff ffa2 	bl	8007660 <__sfputs_r>
 800771c:	3001      	adds	r0, #1
 800771e:	f000 80a7 	beq.w	8007870 <_vfiprintf_r+0x1ec>
 8007722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007724:	445a      	add	r2, fp
 8007726:	9209      	str	r2, [sp, #36]	@ 0x24
 8007728:	f89a 3000 	ldrb.w	r3, [sl]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 809f 	beq.w	8007870 <_vfiprintf_r+0x1ec>
 8007732:	2300      	movs	r3, #0
 8007734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800773c:	f10a 0a01 	add.w	sl, sl, #1
 8007740:	9304      	str	r3, [sp, #16]
 8007742:	9307      	str	r3, [sp, #28]
 8007744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007748:	931a      	str	r3, [sp, #104]	@ 0x68
 800774a:	4654      	mov	r4, sl
 800774c:	2205      	movs	r2, #5
 800774e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007752:	4853      	ldr	r0, [pc, #332]	@ (80078a0 <_vfiprintf_r+0x21c>)
 8007754:	f7f8 fd74 	bl	8000240 <memchr>
 8007758:	9a04      	ldr	r2, [sp, #16]
 800775a:	b9d8      	cbnz	r0, 8007794 <_vfiprintf_r+0x110>
 800775c:	06d1      	lsls	r1, r2, #27
 800775e:	bf44      	itt	mi
 8007760:	2320      	movmi	r3, #32
 8007762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007766:	0713      	lsls	r3, r2, #28
 8007768:	bf44      	itt	mi
 800776a:	232b      	movmi	r3, #43	@ 0x2b
 800776c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007770:	f89a 3000 	ldrb.w	r3, [sl]
 8007774:	2b2a      	cmp	r3, #42	@ 0x2a
 8007776:	d015      	beq.n	80077a4 <_vfiprintf_r+0x120>
 8007778:	9a07      	ldr	r2, [sp, #28]
 800777a:	4654      	mov	r4, sl
 800777c:	2000      	movs	r0, #0
 800777e:	f04f 0c0a 	mov.w	ip, #10
 8007782:	4621      	mov	r1, r4
 8007784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007788:	3b30      	subs	r3, #48	@ 0x30
 800778a:	2b09      	cmp	r3, #9
 800778c:	d94b      	bls.n	8007826 <_vfiprintf_r+0x1a2>
 800778e:	b1b0      	cbz	r0, 80077be <_vfiprintf_r+0x13a>
 8007790:	9207      	str	r2, [sp, #28]
 8007792:	e014      	b.n	80077be <_vfiprintf_r+0x13a>
 8007794:	eba0 0308 	sub.w	r3, r0, r8
 8007798:	fa09 f303 	lsl.w	r3, r9, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	46a2      	mov	sl, r4
 80077a2:	e7d2      	b.n	800774a <_vfiprintf_r+0xc6>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	1d19      	adds	r1, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	9103      	str	r1, [sp, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfbb      	ittet	lt
 80077b0:	425b      	neglt	r3, r3
 80077b2:	f042 0202 	orrlt.w	r2, r2, #2
 80077b6:	9307      	strge	r3, [sp, #28]
 80077b8:	9307      	strlt	r3, [sp, #28]
 80077ba:	bfb8      	it	lt
 80077bc:	9204      	strlt	r2, [sp, #16]
 80077be:	7823      	ldrb	r3, [r4, #0]
 80077c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80077c2:	d10a      	bne.n	80077da <_vfiprintf_r+0x156>
 80077c4:	7863      	ldrb	r3, [r4, #1]
 80077c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077c8:	d132      	bne.n	8007830 <_vfiprintf_r+0x1ac>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	1d1a      	adds	r2, r3, #4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	9203      	str	r2, [sp, #12]
 80077d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077d6:	3402      	adds	r4, #2
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078b0 <_vfiprintf_r+0x22c>
 80077de:	7821      	ldrb	r1, [r4, #0]
 80077e0:	2203      	movs	r2, #3
 80077e2:	4650      	mov	r0, sl
 80077e4:	f7f8 fd2c 	bl	8000240 <memchr>
 80077e8:	b138      	cbz	r0, 80077fa <_vfiprintf_r+0x176>
 80077ea:	9b04      	ldr	r3, [sp, #16]
 80077ec:	eba0 000a 	sub.w	r0, r0, sl
 80077f0:	2240      	movs	r2, #64	@ 0x40
 80077f2:	4082      	lsls	r2, r0
 80077f4:	4313      	orrs	r3, r2
 80077f6:	3401      	adds	r4, #1
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fe:	4829      	ldr	r0, [pc, #164]	@ (80078a4 <_vfiprintf_r+0x220>)
 8007800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007804:	2206      	movs	r2, #6
 8007806:	f7f8 fd1b 	bl	8000240 <memchr>
 800780a:	2800      	cmp	r0, #0
 800780c:	d03f      	beq.n	800788e <_vfiprintf_r+0x20a>
 800780e:	4b26      	ldr	r3, [pc, #152]	@ (80078a8 <_vfiprintf_r+0x224>)
 8007810:	bb1b      	cbnz	r3, 800785a <_vfiprintf_r+0x1d6>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	3307      	adds	r3, #7
 8007816:	f023 0307 	bic.w	r3, r3, #7
 800781a:	3308      	adds	r3, #8
 800781c:	9303      	str	r3, [sp, #12]
 800781e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007820:	443b      	add	r3, r7
 8007822:	9309      	str	r3, [sp, #36]	@ 0x24
 8007824:	e76a      	b.n	80076fc <_vfiprintf_r+0x78>
 8007826:	fb0c 3202 	mla	r2, ip, r2, r3
 800782a:	460c      	mov	r4, r1
 800782c:	2001      	movs	r0, #1
 800782e:	e7a8      	b.n	8007782 <_vfiprintf_r+0xfe>
 8007830:	2300      	movs	r3, #0
 8007832:	3401      	adds	r4, #1
 8007834:	9305      	str	r3, [sp, #20]
 8007836:	4619      	mov	r1, r3
 8007838:	f04f 0c0a 	mov.w	ip, #10
 800783c:	4620      	mov	r0, r4
 800783e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007842:	3a30      	subs	r2, #48	@ 0x30
 8007844:	2a09      	cmp	r2, #9
 8007846:	d903      	bls.n	8007850 <_vfiprintf_r+0x1cc>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0c6      	beq.n	80077da <_vfiprintf_r+0x156>
 800784c:	9105      	str	r1, [sp, #20]
 800784e:	e7c4      	b.n	80077da <_vfiprintf_r+0x156>
 8007850:	fb0c 2101 	mla	r1, ip, r1, r2
 8007854:	4604      	mov	r4, r0
 8007856:	2301      	movs	r3, #1
 8007858:	e7f0      	b.n	800783c <_vfiprintf_r+0x1b8>
 800785a:	ab03      	add	r3, sp, #12
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	462a      	mov	r2, r5
 8007860:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <_vfiprintf_r+0x228>)
 8007862:	a904      	add	r1, sp, #16
 8007864:	4630      	mov	r0, r6
 8007866:	f7fd fc57 	bl	8005118 <_printf_float>
 800786a:	4607      	mov	r7, r0
 800786c:	1c78      	adds	r0, r7, #1
 800786e:	d1d6      	bne.n	800781e <_vfiprintf_r+0x19a>
 8007870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007872:	07d9      	lsls	r1, r3, #31
 8007874:	d405      	bmi.n	8007882 <_vfiprintf_r+0x1fe>
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	059a      	lsls	r2, r3, #22
 800787a:	d402      	bmi.n	8007882 <_vfiprintf_r+0x1fe>
 800787c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800787e:	f7fe f997 	bl	8005bb0 <__retarget_lock_release_recursive>
 8007882:	89ab      	ldrh	r3, [r5, #12]
 8007884:	065b      	lsls	r3, r3, #25
 8007886:	f53f af1f 	bmi.w	80076c8 <_vfiprintf_r+0x44>
 800788a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800788c:	e71e      	b.n	80076cc <_vfiprintf_r+0x48>
 800788e:	ab03      	add	r3, sp, #12
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	462a      	mov	r2, r5
 8007894:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <_vfiprintf_r+0x228>)
 8007896:	a904      	add	r1, sp, #16
 8007898:	4630      	mov	r0, r6
 800789a:	f7fd fec5 	bl	8005628 <_printf_i>
 800789e:	e7e4      	b.n	800786a <_vfiprintf_r+0x1e6>
 80078a0:	08007d7a 	.word	0x08007d7a
 80078a4:	08007d84 	.word	0x08007d84
 80078a8:	08005119 	.word	0x08005119
 80078ac:	08007661 	.word	0x08007661
 80078b0:	08007d80 	.word	0x08007d80

080078b4 <__swbuf_r>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	460e      	mov	r6, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	4605      	mov	r5, r0
 80078bc:	b118      	cbz	r0, 80078c6 <__swbuf_r+0x12>
 80078be:	6a03      	ldr	r3, [r0, #32]
 80078c0:	b90b      	cbnz	r3, 80078c6 <__swbuf_r+0x12>
 80078c2:	f7fe f85b 	bl	800597c <__sinit>
 80078c6:	69a3      	ldr	r3, [r4, #24]
 80078c8:	60a3      	str	r3, [r4, #8]
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	071a      	lsls	r2, r3, #28
 80078ce:	d501      	bpl.n	80078d4 <__swbuf_r+0x20>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	b943      	cbnz	r3, 80078e6 <__swbuf_r+0x32>
 80078d4:	4621      	mov	r1, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 f82a 	bl	8007930 <__swsetup_r>
 80078dc:	b118      	cbz	r0, 80078e6 <__swbuf_r+0x32>
 80078de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80078e2:	4638      	mov	r0, r7
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	6922      	ldr	r2, [r4, #16]
 80078ea:	1a98      	subs	r0, r3, r2
 80078ec:	6963      	ldr	r3, [r4, #20]
 80078ee:	b2f6      	uxtb	r6, r6
 80078f0:	4283      	cmp	r3, r0
 80078f2:	4637      	mov	r7, r6
 80078f4:	dc05      	bgt.n	8007902 <__swbuf_r+0x4e>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f7ff fd99 	bl	8007430 <_fflush_r>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d1ed      	bne.n	80078de <__swbuf_r+0x2a>
 8007902:	68a3      	ldr	r3, [r4, #8]
 8007904:	3b01      	subs	r3, #1
 8007906:	60a3      	str	r3, [r4, #8]
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	701e      	strb	r6, [r3, #0]
 8007910:	6962      	ldr	r2, [r4, #20]
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	429a      	cmp	r2, r3
 8007916:	d004      	beq.n	8007922 <__swbuf_r+0x6e>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	07db      	lsls	r3, r3, #31
 800791c:	d5e1      	bpl.n	80078e2 <__swbuf_r+0x2e>
 800791e:	2e0a      	cmp	r6, #10
 8007920:	d1df      	bne.n	80078e2 <__swbuf_r+0x2e>
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f7ff fd83 	bl	8007430 <_fflush_r>
 800792a:	2800      	cmp	r0, #0
 800792c:	d0d9      	beq.n	80078e2 <__swbuf_r+0x2e>
 800792e:	e7d6      	b.n	80078de <__swbuf_r+0x2a>

08007930 <__swsetup_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4b29      	ldr	r3, [pc, #164]	@ (80079d8 <__swsetup_r+0xa8>)
 8007934:	4605      	mov	r5, r0
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	460c      	mov	r4, r1
 800793a:	b118      	cbz	r0, 8007944 <__swsetup_r+0x14>
 800793c:	6a03      	ldr	r3, [r0, #32]
 800793e:	b90b      	cbnz	r3, 8007944 <__swsetup_r+0x14>
 8007940:	f7fe f81c 	bl	800597c <__sinit>
 8007944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007948:	0719      	lsls	r1, r3, #28
 800794a:	d422      	bmi.n	8007992 <__swsetup_r+0x62>
 800794c:	06da      	lsls	r2, r3, #27
 800794e:	d407      	bmi.n	8007960 <__swsetup_r+0x30>
 8007950:	2209      	movs	r2, #9
 8007952:	602a      	str	r2, [r5, #0]
 8007954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007958:	81a3      	strh	r3, [r4, #12]
 800795a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800795e:	e033      	b.n	80079c8 <__swsetup_r+0x98>
 8007960:	0758      	lsls	r0, r3, #29
 8007962:	d512      	bpl.n	800798a <__swsetup_r+0x5a>
 8007964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007966:	b141      	cbz	r1, 800797a <__swsetup_r+0x4a>
 8007968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800796c:	4299      	cmp	r1, r3
 800796e:	d002      	beq.n	8007976 <__swsetup_r+0x46>
 8007970:	4628      	mov	r0, r5
 8007972:	f7fe ff07 	bl	8006784 <_free_r>
 8007976:	2300      	movs	r3, #0
 8007978:	6363      	str	r3, [r4, #52]	@ 0x34
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	2300      	movs	r3, #0
 8007984:	6063      	str	r3, [r4, #4]
 8007986:	6923      	ldr	r3, [r4, #16]
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	f043 0308 	orr.w	r3, r3, #8
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	6923      	ldr	r3, [r4, #16]
 8007994:	b94b      	cbnz	r3, 80079aa <__swsetup_r+0x7a>
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800799c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079a0:	d003      	beq.n	80079aa <__swsetup_r+0x7a>
 80079a2:	4621      	mov	r1, r4
 80079a4:	4628      	mov	r0, r5
 80079a6:	f000 f883 	bl	8007ab0 <__smakebuf_r>
 80079aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ae:	f013 0201 	ands.w	r2, r3, #1
 80079b2:	d00a      	beq.n	80079ca <__swsetup_r+0x9a>
 80079b4:	2200      	movs	r2, #0
 80079b6:	60a2      	str	r2, [r4, #8]
 80079b8:	6962      	ldr	r2, [r4, #20]
 80079ba:	4252      	negs	r2, r2
 80079bc:	61a2      	str	r2, [r4, #24]
 80079be:	6922      	ldr	r2, [r4, #16]
 80079c0:	b942      	cbnz	r2, 80079d4 <__swsetup_r+0xa4>
 80079c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80079c6:	d1c5      	bne.n	8007954 <__swsetup_r+0x24>
 80079c8:	bd38      	pop	{r3, r4, r5, pc}
 80079ca:	0799      	lsls	r1, r3, #30
 80079cc:	bf58      	it	pl
 80079ce:	6962      	ldrpl	r2, [r4, #20]
 80079d0:	60a2      	str	r2, [r4, #8]
 80079d2:	e7f4      	b.n	80079be <__swsetup_r+0x8e>
 80079d4:	2000      	movs	r0, #0
 80079d6:	e7f7      	b.n	80079c8 <__swsetup_r+0x98>
 80079d8:	20000024 	.word	0x20000024

080079dc <_raise_r>:
 80079dc:	291f      	cmp	r1, #31
 80079de:	b538      	push	{r3, r4, r5, lr}
 80079e0:	4605      	mov	r5, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	d904      	bls.n	80079f0 <_raise_r+0x14>
 80079e6:	2316      	movs	r3, #22
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079f2:	b112      	cbz	r2, 80079fa <_raise_r+0x1e>
 80079f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079f8:	b94b      	cbnz	r3, 8007a0e <_raise_r+0x32>
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 f830 	bl	8007a60 <_getpid_r>
 8007a00:	4622      	mov	r2, r4
 8007a02:	4601      	mov	r1, r0
 8007a04:	4628      	mov	r0, r5
 8007a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a0a:	f000 b817 	b.w	8007a3c <_kill_r>
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d00a      	beq.n	8007a28 <_raise_r+0x4c>
 8007a12:	1c59      	adds	r1, r3, #1
 8007a14:	d103      	bne.n	8007a1e <_raise_r+0x42>
 8007a16:	2316      	movs	r3, #22
 8007a18:	6003      	str	r3, [r0, #0]
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	e7e7      	b.n	80079ee <_raise_r+0x12>
 8007a1e:	2100      	movs	r1, #0
 8007a20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a24:	4620      	mov	r0, r4
 8007a26:	4798      	blx	r3
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7e0      	b.n	80079ee <_raise_r+0x12>

08007a2c <raise>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	@ (8007a38 <raise+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f7ff bfd3 	b.w	80079dc <_raise_r>
 8007a36:	bf00      	nop
 8007a38:	20000024 	.word	0x20000024

08007a3c <_kill_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	@ (8007a5c <_kill_r+0x20>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	f7f9 f954 	bl	8000cf6 <_kill>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d102      	bne.n	8007a58 <_kill_r+0x1c>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	b103      	cbz	r3, 8007a58 <_kill_r+0x1c>
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	bd38      	pop	{r3, r4, r5, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000920 	.word	0x20000920

08007a60 <_getpid_r>:
 8007a60:	f7f9 b941 	b.w	8000ce6 <_getpid>

08007a64 <__swhatbuf_r>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	460c      	mov	r4, r1
 8007a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	b096      	sub	sp, #88	@ 0x58
 8007a70:	4615      	mov	r5, r2
 8007a72:	461e      	mov	r6, r3
 8007a74:	da0d      	bge.n	8007a92 <__swhatbuf_r+0x2e>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a7c:	f04f 0100 	mov.w	r1, #0
 8007a80:	bf14      	ite	ne
 8007a82:	2340      	movne	r3, #64	@ 0x40
 8007a84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a88:	2000      	movs	r0, #0
 8007a8a:	6031      	str	r1, [r6, #0]
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	b016      	add	sp, #88	@ 0x58
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	466a      	mov	r2, sp
 8007a94:	f000 f848 	bl	8007b28 <_fstat_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	dbec      	blt.n	8007a76 <__swhatbuf_r+0x12>
 8007a9c:	9901      	ldr	r1, [sp, #4]
 8007a9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007aa6:	4259      	negs	r1, r3
 8007aa8:	4159      	adcs	r1, r3
 8007aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aae:	e7eb      	b.n	8007a88 <__swhatbuf_r+0x24>

08007ab0 <__smakebuf_r>:
 8007ab0:	898b      	ldrh	r3, [r1, #12]
 8007ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ab4:	079d      	lsls	r5, r3, #30
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	d507      	bpl.n	8007acc <__smakebuf_r+0x1c>
 8007abc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	6163      	str	r3, [r4, #20]
 8007ac8:	b003      	add	sp, #12
 8007aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007acc:	ab01      	add	r3, sp, #4
 8007ace:	466a      	mov	r2, sp
 8007ad0:	f7ff ffc8 	bl	8007a64 <__swhatbuf_r>
 8007ad4:	9f00      	ldr	r7, [sp, #0]
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7fe fec6 	bl	800686c <_malloc_r>
 8007ae0:	b948      	cbnz	r0, 8007af6 <__smakebuf_r+0x46>
 8007ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae6:	059a      	lsls	r2, r3, #22
 8007ae8:	d4ee      	bmi.n	8007ac8 <__smakebuf_r+0x18>
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	f043 0302 	orr.w	r3, r3, #2
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	e7e2      	b.n	8007abc <__smakebuf_r+0xc>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	6020      	str	r0, [r4, #0]
 8007afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b06:	b15b      	cbz	r3, 8007b20 <__smakebuf_r+0x70>
 8007b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f000 f81d 	bl	8007b4c <_isatty_r>
 8007b12:	b128      	cbz	r0, 8007b20 <__smakebuf_r+0x70>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	431d      	orrs	r5, r3
 8007b24:	81a5      	strh	r5, [r4, #12]
 8007b26:	e7cf      	b.n	8007ac8 <__smakebuf_r+0x18>

08007b28 <_fstat_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4d07      	ldr	r5, [pc, #28]	@ (8007b48 <_fstat_r+0x20>)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	4611      	mov	r1, r2
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	f7f9 f93e 	bl	8000db6 <_fstat>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d102      	bne.n	8007b44 <_fstat_r+0x1c>
 8007b3e:	682b      	ldr	r3, [r5, #0]
 8007b40:	b103      	cbz	r3, 8007b44 <_fstat_r+0x1c>
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	20000920 	.word	0x20000920

08007b4c <_isatty_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d06      	ldr	r5, [pc, #24]	@ (8007b68 <_isatty_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7f9 f93d 	bl	8000dd6 <_isatty>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_isatty_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_isatty_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20000920 	.word	0x20000920

08007b6c <_init>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr

08007b78 <_fini>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr
