
lab5_ADC_special.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047dc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080049dc  080049dc  000059dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a6c  08004a6c  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a6c  08004a6c  00005a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a74  08004a74  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a74  08004a74  00005a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a78  08004a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004a7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000064  08004ae0  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08004ae0  00006320  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c081  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210f  00000000  00000000  00012113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00014228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b9  00000000  00000000  00014b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027338  00000000  00000000  000151c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c866  00000000  00000000  0003c4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5fad  00000000  00000000  00048d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ed0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  0013ed50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00141490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	080049c4 	.word	0x080049c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	080049c4 	.word	0x080049c4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062e:	4b52      	ldr	r3, [pc, #328]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000630:	4a52      	ldr	r2, [pc, #328]	@ (800077c <MX_ADC1_Init+0x160>)
 8000632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000634:	4b50      	ldr	r3, [pc, #320]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000636:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800063a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063c:	4b4e      	ldr	r3, [pc, #312]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000642:	4b4d      	ldr	r3, [pc, #308]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000644:	2201      	movs	r2, #1
 8000646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000648:	4b4b      	ldr	r3, [pc, #300]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800064a:	2201      	movs	r2, #1
 800064c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064e:	4b4a      	ldr	r3, [pc, #296]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b48      	ldr	r3, [pc, #288]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065c:	4b46      	ldr	r3, [pc, #280]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800065e:	4a48      	ldr	r2, [pc, #288]	@ (8000780 <MX_ADC1_Init+0x164>)
 8000660:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000662:	4b45      	ldr	r3, [pc, #276]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000668:	4b43      	ldr	r3, [pc, #268]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800066a:	2208      	movs	r2, #8
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066e:	4b42      	ldr	r3, [pc, #264]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000670:	2201      	movs	r2, #1
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000676:	4b40      	ldr	r3, [pc, #256]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000678:	2201      	movs	r2, #1
 800067a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	483e      	ldr	r0, [pc, #248]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800067e:	f000 fc73 	bl	8000f68 <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000688:	f000 faac 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800068c:	230c      	movs	r3, #12
 800068e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000690:	2301      	movs	r3, #1
 8000692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000694:	2307      	movs	r3, #7
 8000696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4836      	ldr	r0, [pc, #216]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800069e:	f000 fdab 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006a8:	f000 fa9c 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006ac:	230d      	movs	r3, #13
 80006ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	482f      	ldr	r0, [pc, #188]	@ (8000778 <MX_ADC1_Init+0x15c>)
 80006ba:	f000 fd9d 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006c4:	f000 fa8e 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006c8:	230a      	movs	r3, #10
 80006ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006cc:	2303      	movs	r3, #3
 80006ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4828      	ldr	r0, [pc, #160]	@ (8000778 <MX_ADC1_Init+0x15c>)
 80006d6:	f000 fd8f 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006e0:	f000 fa80 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006e4:	2303      	movs	r3, #3
 80006e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4821      	ldr	r0, [pc, #132]	@ (8000778 <MX_ADC1_Init+0x15c>)
 80006f2:	f000 fd81 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006fc:	f000 fa72 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000700:	2304      	movs	r3, #4
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000704:	2305      	movs	r3, #5
 8000706:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	481a      	ldr	r0, [pc, #104]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800070e:	f000 fd73 	bl	80011f8 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000718:	f000 fa64 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800071c:	2305      	movs	r3, #5
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000720:	2306      	movs	r3, #6
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4813      	ldr	r0, [pc, #76]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800072a:	f000 fd65 	bl	80011f8 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000734:	f000 fa56 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000738:	2306      	movs	r3, #6
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800073c:	2307      	movs	r3, #7
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000746:	f000 fd57 	bl	80011f8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000750:	f000 fa48 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000754:	2309      	movs	r3, #9
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000758:	2308      	movs	r3, #8
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000762:	f000 fd49 	bl	80011f8 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800076c:	f000 fa3a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000080 	.word	0x20000080
 800077c:	40012000 	.word	0x40012000
 8000780:	0f000001 	.word	0x0f000001

08000784 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a45      	ldr	r2, [pc, #276]	@ (80008b8 <HAL_ADC_MspInit+0x134>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	f040 8084 	bne.w	80008b0 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007a8:	4b44      	ldr	r3, [pc, #272]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ac:	4a43      	ldr	r2, [pc, #268]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b4:	4b41      	ldr	r3, [pc, #260]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c0:	4b3e      	ldr	r3, [pc, #248]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c4:	4a3d      	ldr	r2, [pc, #244]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80007cc:	4b3b      	ldr	r3, [pc, #236]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b38      	ldr	r3, [pc, #224]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	4a37      	ldr	r2, [pc, #220]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e4:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b32      	ldr	r3, [pc, #200]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f4:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007f6:	f043 0302 	orr.w	r3, r3, #2
 80007fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fc:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000808:	230d      	movs	r3, #13
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4829      	ldr	r0, [pc, #164]	@ (80008c0 <HAL_ADC_MspInit+0x13c>)
 800081c:	f001 fcc4 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000820:	2378      	movs	r3, #120	@ 0x78
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4824      	ldr	r0, [pc, #144]	@ (80008c4 <HAL_ADC_MspInit+0x140>)
 8000834:	f001 fcb8 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	481f      	ldr	r0, [pc, #124]	@ (80008c8 <HAL_ADC_MspInit+0x144>)
 800084c:	f001 fcac 	bl	80021a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000852:	4a1f      	ldr	r2, [pc, #124]	@ (80008d0 <HAL_ADC_MspInit+0x14c>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 800086a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800086e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000872:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000876:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 800087a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800087e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000886:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000894:	480d      	ldr	r0, [pc, #52]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000896:	f001 f90f 	bl	8001ab8 <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 80008a0:	f000 f9a0 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a09      	ldr	r2, [pc, #36]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 80008a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008b0:	bf00      	nop
 80008b2:	3730      	adds	r7, #48	@ 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40012000 	.word	0x40012000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	200000c8 	.word	0x200000c8
 80008d0:	40026410 	.word	0x40026410

080008d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_DMA_Init+0x38>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <MX_DMA_Init+0x38>)
 80008e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_DMA_Init+0x38>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	2038      	movs	r0, #56	@ 0x38
 80008f8:	f001 f82b 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008fc:	2038      	movs	r0, #56	@ 0x38
 80008fe:	f001 f844 	bl	800198a <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b23      	ldr	r3, [pc, #140]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a22      	ldr	r2, [pc, #136]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a1c      	ldr	r2, [pc, #112]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <MX_GPIO_Init+0xa8>)
 800098c:	f001 fdb8 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_GPIO_Init+0xa8>)
 80009a8:	f001 fbfe 	bl	80021a8 <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	@ 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009c0:	f000 f8e4 	bl	8000b8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c4:	f000 fa73 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f814 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f7ff ffa0 	bl	8000910 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d0:	f7ff ff80 	bl	80008d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80009d4:	f7ff fe22 	bl	800061c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80009d8:	f000 f9b0 	bl	8000d3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_val, size_of_adc_value);
 80009dc:	2208      	movs	r2, #8
 80009de:	4903      	ldr	r1, [pc, #12]	@ (80009ec <main+0x30>)
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <main+0x34>)
 80009e2:	f000 fb05 	bl	8000ff0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e6:	bf00      	nop
 80009e8:	e7fd      	b.n	80009e6 <main+0x2a>
 80009ea:	bf00      	nop
 80009ec:	20000128 	.word	0x20000128
 80009f0:	20000080 	.word	0x20000080

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	@ 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fb60 	bl	80040c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	4b29      	ldr	r3, [pc, #164]	@ (8000ac0 <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <SystemClock_Config+0xcc>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a30:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a38:	4a22      	ldr	r2, [pc, #136]	@ (8000ac4 <SystemClock_Config+0xd0>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2310      	movs	r3, #16
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a60:	2310      	movs	r3, #16
 8000a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a64:	23c0      	movs	r3, #192	@ 0xc0
 8000a66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fd5b 	bl	8002534 <HAL_RCC_OscConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a84:	f000 f8ae 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a88:	230f      	movs	r3, #15
 8000a8a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000a90:	23b0      	movs	r3, #176	@ 0xb0
 8000a92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000a9a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fff2 	bl	8002a90 <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ab2:	f000 f897 	bl	8000be4 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3750      	adds	r7, #80	@ 0x50
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0b6      	sub	sp, #216	@ 0xd8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	481e      	ldr	r0, [pc, #120]	@ (8000b50 <HAL_ADC_ConvCpltCallback+0x88>)
 8000ad6:	f001 fd13 	bl	8002500 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < size_of_adc_value; i++){
 8000ada:	2300      	movs	r3, #0
 8000adc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8000ae0:	e027      	b.n	8000b32 <HAL_ADC_ConvCpltCallback+0x6a>
		char buf[200];
		sprintf(buf, "Value of ADC1 Channel %2d --> %4d  ", ch_adc[i], adc_val[i]);
 8000ae2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000ae8:	5cd3      	ldrb	r3, [r2, r3]
 8000aea:	4619      	mov	r1, r3
 8000aec:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x90>)
 8000af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af6:	f107 000c 	add.w	r0, r7, #12
 8000afa:	460a      	mov	r2, r1
 8000afc:	4917      	ldr	r1, [pc, #92]	@ (8000b5c <HAL_ADC_ConvCpltCallback+0x94>)
 8000afe:	f003 fac1 	bl	8004084 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 100);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fb9a 	bl	8000240 <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	2364      	movs	r3, #100	@ 0x64
 8000b16:	4812      	ldr	r0, [pc, #72]	@ (8000b60 <HAL_ADC_ConvCpltCallback+0x98>)
 8000b18:	f002 fe16 	bl	8003748 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 100);
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	2202      	movs	r2, #2
 8000b20:	4910      	ldr	r1, [pc, #64]	@ (8000b64 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000b22:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <HAL_ADC_ConvCpltCallback+0x98>)
 8000b24:	f002 fe10 	bl	8003748 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < size_of_adc_value; i++){
 8000b28:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8000b32:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d9d3      	bls.n	8000ae2 <HAL_ADC_ConvCpltCallback+0x1a>
	}

	HAL_UART_Transmit(&huart3, "--------------\r\n", 17, 100);
 8000b3a:	2364      	movs	r3, #100	@ 0x64
 8000b3c:	2211      	movs	r2, #17
 8000b3e:	490a      	ldr	r1, [pc, #40]	@ (8000b68 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000b40:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <HAL_ADC_ConvCpltCallback+0x98>)
 8000b42:	f002 fe01 	bl	8003748 <HAL_UART_Transmit>



}
 8000b46:	bf00      	nop
 8000b48:	37d8      	adds	r7, #216	@ 0xd8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40020400 	.word	0x40020400
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000128 	.word	0x20000128
 8000b5c:	080049dc 	.word	0x080049dc
 8000b60:	2000014c 	.word	0x2000014c
 8000b64:	08004a00 	.word	0x08004a00
 8000b68:	08004a04 	.word	0x08004a04

08000b6c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2180      	movs	r1, #128	@ 0x80
 8000b78:	4803      	ldr	r0, [pc, #12]	@ (8000b88 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000b7a:	f001 fcc1 	bl	8002500 <HAL_GPIO_WritePin>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020400 	.word	0x40020400

08000b8c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b9e:	f000 ff0f 	bl	80019c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bae:	231f      	movs	r3, #31
 8000bb0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bb2:	2387      	movs	r3, #135	@ 0x87
 8000bb4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 ff2d 	bl	8001a30 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f000 ff0a 	bl	80019f0 <HAL_MPU_Enable>

}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <Error_Handler+0x8>

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_MspInit+0x44>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_MspInit+0x44>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000c26:	2005      	movs	r0, #5
 8000c28:	f000 fe88 	bl	800193c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <NMI_Handler+0x4>

08000c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <MemManage_Handler+0x4>

08000c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f94b 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <DMA2_Stream0_IRQHandler+0x10>)
 8000c9e:	f001 f819 	bl	8001cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */


  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000c8 	.word	0x200000c8

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f003 f9fc 	bl	80040d8 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20080000 	.word	0x20080000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	20000148 	.word	0x20000148
 8000d14:	20000320 	.word	0x20000320

08000d18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	@ (8000d98 <MX_USART3_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_USART3_UART_Init+0x58>)
 8000d80:	f002 fc94 	bl	80036ac <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f7ff ff2b 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000014c 	.word	0x2000014c
 8000d98:	40004800 	.word	0x40004800

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2290      	movs	r2, #144	@ 0x90
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 f983 	bl	80040c8 <memset>
  if(uartHandle->Instance==USART3)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <HAL_UART_MspInit+0xb4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d13c      	bne.n	8000e46 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 f83e 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000de6:	f7ff fefd 	bl	8000be4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <HAL_UART_MspInit+0xb8>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a19      	ldr	r2, [pc, #100]	@ (8000e54 <HAL_UART_MspInit+0xb8>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_UART_MspInit+0xb8>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_UART_MspInit+0xb8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <HAL_UART_MspInit+0xb8>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <HAL_UART_MspInit+0xb8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e34:	2307      	movs	r3, #7
 8000e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_UART_MspInit+0xbc>)
 8000e42:	f001 f9b1 	bl	80021a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e46:	bf00      	nop
 8000e48:	37b8      	adds	r7, #184	@ 0xb8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40004800 	.word	0x40004800
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020c00 	.word	0x40020c00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	@ (8000e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	@ (8000ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e86:	f7ff ff47 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f003 f92b 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fd95 	bl	80009bc <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ea0:	08004a7c 	.word	0x08004a7c
  ldr r2, =_sbss
 8000ea4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ea8:	20000320 	.word	0x20000320

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>

08000eae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 fd42 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 f805 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebe:	f7ff fe97 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fd5d 	bl	80019a6 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f04:	f000 fd25 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000010 	.word	0x20000010
 8000f24:	2000000c 	.word	0x2000000c

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000010 	.word	0x20000010
 8000f4c:	200001d4 	.word	0x200001d4

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001d4 	.word	0x200001d4

08000f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e031      	b.n	8000fe2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fbfc 	bl	8000784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d116      	bne.n	8000fd4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_ADC_Init+0x84>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	f043 0202 	orr.w	r2, r3, #2
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fa74 	bl	80014a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f023 0303 	bic.w	r3, r3, #3
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fd2:	e001      	b.n	8000fd8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	ffffeefd 	.word	0xffffeefd

08000ff0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <HAL_ADC_Start_DMA+0x1e>
 800100a:	2302      	movs	r3, #2
 800100c:	e0d4      	b.n	80011b8 <HAL_ADC_Start_DMA+0x1c8>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b01      	cmp	r3, #1
 8001022:	d018      	beq.n	8001056 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001034:	4b62      	ldr	r3, [pc, #392]	@ (80011c0 <HAL_ADC_Start_DMA+0x1d0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a62      	ldr	r2, [pc, #392]	@ (80011c4 <HAL_ADC_Start_DMA+0x1d4>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9a      	lsrs	r2, r3, #18
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001048:	e002      	b.n	8001050 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3b01      	subs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f9      	bne.n	800104a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	f040 809c 	bne.w	800119e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800106a:	4b57      	ldr	r3, [pc, #348]	@ (80011c8 <HAL_ADC_Start_DMA+0x1d8>)
 800106c:	4013      	ands	r3, r2
 800106e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800108c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800109c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010a0:	d106      	bne.n	80010b0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	f023 0206 	bic.w	r2, r3, #6
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80010ae:	e002      	b.n	80010b6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c2:	4a42      	ldr	r2, [pc, #264]	@ (80011cc <HAL_ADC_Start_DMA+0x1dc>)
 80010c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ca:	4a41      	ldr	r2, [pc, #260]	@ (80011d0 <HAL_ADC_Start_DMA+0x1e0>)
 80010cc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d2:	4a40      	ldr	r2, [pc, #256]	@ (80011d4 <HAL_ADC_Start_DMA+0x1e4>)
 80010d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80010ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	334c      	adds	r3, #76	@ 0x4c
 800110a:	4619      	mov	r1, r3
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f000 fd80 	bl	8001c14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001114:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <HAL_ADC_Start_DMA+0x1e8>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d143      	bne.n	80011b6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	e03a      	b.n	80011b6 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a25      	ldr	r2, [pc, #148]	@ (80011dc <HAL_ADC_Start_DMA+0x1ec>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d10e      	bne.n	8001168 <HAL_ADC_Start_DMA+0x178>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d107      	bne.n	8001168 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001166:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_ADC_Start_DMA+0x1e8>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	2b00      	cmp	r3, #0
 8001172:	d120      	bne.n	80011b6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a19      	ldr	r2, [pc, #100]	@ (80011e0 <HAL_ADC_Start_DMA+0x1f0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d11b      	bne.n	80011b6 <HAL_ADC_Start_DMA+0x1c6>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d114      	bne.n	80011b6 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	e00b      	b.n	80011b6 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f043 0210 	orr.w	r2, r3, #16
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f043 0201 	orr.w	r2, r3, #1
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000008 	.word	0x20000008
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	fffff8fe 	.word	0xfffff8fe
 80011cc:	08001699 	.word	0x08001699
 80011d0:	08001753 	.word	0x08001753
 80011d4:	0800176f 	.word	0x0800176f
 80011d8:	40012300 	.word	0x40012300
 80011dc:	40012000 	.word	0x40012000
 80011e0:	40012200 	.word	0x40012200

080011e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1c>
 8001210:	2302      	movs	r3, #2
 8001212:	e136      	b.n	8001482 <HAL_ADC_ConfigChannel+0x28a>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b09      	cmp	r3, #9
 8001222:	d93a      	bls.n	800129a <HAL_ADC_ConfigChannel+0xa2>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800122c:	d035      	beq.n	800129a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68d9      	ldr	r1, [r3, #12]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	3b1e      	subs	r3, #30
 8001244:	2207      	movs	r2, #7
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	400a      	ands	r2, r1
 8001252:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a8d      	ldr	r2, [pc, #564]	@ (8001490 <HAL_ADC_ConfigChannel+0x298>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d10a      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d9      	ldr	r1, [r3, #12]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	061a      	lsls	r2, r3, #24
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001272:	e035      	b.n	80012e0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68d9      	ldr	r1, [r3, #12]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	4603      	mov	r3, r0
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4403      	add	r3, r0
 800128c:	3b1e      	subs	r3, #30
 800128e:	409a      	lsls	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001298:	e022      	b.n	80012e0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6919      	ldr	r1, [r3, #16]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	2207      	movs	r2, #7
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43da      	mvns	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	400a      	ands	r2, r1
 80012bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6919      	ldr	r1, [r3, #16]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	4603      	mov	r3, r0
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4403      	add	r3, r0
 80012d6:	409a      	lsls	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d824      	bhi.n	8001332 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	3b05      	subs	r3, #5
 80012fa:	221f      	movs	r2, #31
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43da      	mvns	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	400a      	ands	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b05      	subs	r3, #5
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001330:	e04c      	b.n	80013cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b0c      	cmp	r3, #12
 8001338:	d824      	bhi.n	8001384 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	3b23      	subs	r3, #35	@ 0x23
 800134c:	221f      	movs	r2, #31
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	400a      	ands	r2, r1
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	3b23      	subs	r3, #35	@ 0x23
 8001376:	fa00 f203 	lsl.w	r2, r0, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	631a      	str	r2, [r3, #48]	@ 0x30
 8001382:	e023      	b.n	80013cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	3b41      	subs	r3, #65	@ 0x41
 8001396:	221f      	movs	r2, #31
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43da      	mvns	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	400a      	ands	r2, r1
 80013a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b41      	subs	r3, #65	@ 0x41
 80013c0:	fa00 f203 	lsl.w	r2, r0, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a30      	ldr	r2, [pc, #192]	@ (8001494 <HAL_ADC_ConfigChannel+0x29c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10a      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1f4>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013de:	d105      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 80013e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80013ea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <HAL_ADC_ConfigChannel+0x29c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10f      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x21e>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b12      	cmp	r3, #18
 80013fc:	d10b      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4a25      	ldr	r2, [pc, #148]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 8001404:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001408:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a22      	ldr	r2, [pc, #136]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001414:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <HAL_ADC_ConfigChannel+0x29c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d12b      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x280>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <HAL_ADC_ConfigChannel+0x298>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d003      	beq.n	8001432 <HAL_ADC_ConfigChannel+0x23a>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b11      	cmp	r3, #17
 8001430:	d122      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 8001438:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800143c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a15      	ldr	r2, [pc, #84]	@ (8001498 <HAL_ADC_ConfigChannel+0x2a0>)
 8001444:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001448:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_ADC_ConfigChannel+0x298>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d111      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_ADC_ConfigChannel+0x2a4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9a      	lsrs	r2, r3, #18
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800146a:	e002      	b.n	8001472 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3b01      	subs	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f9      	bne.n	800146c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	10000012 	.word	0x10000012
 8001494:	40012000 	.word	0x40012000
 8001498:	40012300 	.word	0x40012300
 800149c:	20000008 	.word	0x20000008
 80014a0:	431bde83 	.word	0x431bde83

080014a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80014ac:	4b78      	ldr	r3, [pc, #480]	@ (8001690 <ADC_Init+0x1ec>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a77      	ldr	r2, [pc, #476]	@ (8001690 <ADC_Init+0x1ec>)
 80014b2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80014b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80014b8:	4b75      	ldr	r3, [pc, #468]	@ (8001690 <ADC_Init+0x1ec>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4973      	ldr	r1, [pc, #460]	@ (8001690 <ADC_Init+0x1ec>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	021a      	lsls	r2, r3, #8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800151a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6899      	ldr	r1, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001532:	4a58      	ldr	r2, [pc, #352]	@ (8001694 <ADC_Init+0x1f0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d022      	beq.n	800157e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001546:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6899      	ldr	r1, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6899      	ldr	r1, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	e00f      	b.n	800159e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800158c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800159c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0202 	bic.w	r2, r2, #2
 80015ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6899      	ldr	r1, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	005a      	lsls	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01b      	beq.n	8001604 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80015ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6859      	ldr	r1, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	3b01      	subs	r3, #1
 80015f8:	035a      	lsls	r2, r3, #13
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	e007      	b.n	8001614 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001612:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	3b01      	subs	r3, #1
 8001630:	051a      	lsls	r2, r3, #20
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001656:	025a      	lsls	r2, r3, #9
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800166e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6899      	ldr	r1, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	029a      	lsls	r2, r3, #10
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40012300 	.word	0x40012300
 8001694:	0f000001 	.word	0x0f000001

08001698 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d13c      	bne.n	800172c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d12b      	bne.n	8001724 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d127      	bne.n	8001724 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d119      	bne.n	8001724 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0220 	bic.w	r2, r2, #32
 80016fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff f9cf 	bl	8000ac8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800172a:	e00e      	b.n	800174a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fd53 	bl	80011e4 <HAL_ADC_ErrorCallback>
}
 800173e:	e004      	b.n	800174a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fa03 	bl	8000b6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800177a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2240      	movs	r2, #64	@ 0x40
 8001780:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f043 0204 	orr.w	r2, r3, #4
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff fd28 	bl	80011e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <__NVIC_SetPriorityGrouping+0x40>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <__NVIC_SetPriorityGrouping+0x40>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	05fa0000 	.word	0x05fa0000

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	@ (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	@ (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	@ (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	@ 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	@ 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff29 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff3e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff31 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019c4:	f3bf 8f5f 	dmb	sy
}
 80019c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <HAL_MPU_Disable+0x28>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	4a06      	ldr	r2, [pc, #24]	@ (80019e8 <HAL_MPU_Disable+0x28>)
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_MPU_Disable+0x2c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00
 80019ec:	e000ed90 	.word	0xe000ed90

080019f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a28 <HAL_MPU_Enable+0x38>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_MPU_Enable+0x3c>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	4a09      	ldr	r2, [pc, #36]	@ (8001a2c <HAL_MPU_Enable+0x3c>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a0e:	f3bf 8f4f 	dsb	sy
}
 8001a12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a14:	f3bf 8f6f 	isb	sy
}
 8001a18:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed90 	.word	0xe000ed90
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	785a      	ldrb	r2, [r3, #1]
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x84>)
 8001a3e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d029      	beq.n	8001a9c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001a48:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x84>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7b1b      	ldrb	r3, [r3, #12]
 8001a54:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7adb      	ldrb	r3, [r3, #11]
 8001a5a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7a9b      	ldrb	r3, [r3, #10]
 8001a62:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7b5b      	ldrb	r3, [r3, #13]
 8001a6a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7b9b      	ldrb	r3, [r3, #14]
 8001a72:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7bdb      	ldrb	r3, [r3, #15]
 8001a7a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7a5b      	ldrb	r3, [r3, #9]
 8001a82:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7a1b      	ldrb	r3, [r3, #8]
 8001a8a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a8c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a96:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a98:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a9a:	e005      	b.n	8001aa8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x84>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001aa2:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x84>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed90 	.word	0xe000ed90

08001ab8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff fa44 	bl	8000f50 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e099      	b.n	8001c08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af4:	e00f      	b.n	8001b16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001af6:	f7ff fa2b 	bl	8000f50 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d908      	bls.n	8001b16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e078      	b.n	8001c08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e8      	bne.n	8001af6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <HAL_DMA_Init+0x158>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d107      	bne.n	8001b80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f023 0307 	bic.w	r3, r3, #7
 8001b96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d117      	bne.n	8001bda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00e      	beq.n	8001bda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fa77 	bl	80020b0 <DMA_CheckFifoParam>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2240      	movs	r2, #64	@ 0x40
 8001bcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e016      	b.n	8001c08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fa2e 	bl	8002044 <DMA_CalcBaseAndBitshift>
 8001be8:	4603      	mov	r3, r0
 8001bea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	223f      	movs	r2, #63	@ 0x3f
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	e010803f 	.word	0xe010803f

08001c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_DMA_Start_IT+0x26>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e048      	b.n	8001ccc <HAL_DMA_Start_IT+0xb8>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d137      	bne.n	8001cbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2202      	movs	r2, #2
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f9c0 	bl	8001fe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6c:	223f      	movs	r2, #63	@ 0x3f
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0216 	orr.w	r2, r2, #22
 8001c82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c92:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0208 	orr.w	r2, r2, #8
 8001caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e005      	b.n	8001cca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8001f1c <HAL_DMA_IRQHandler+0x248>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a8e      	ldr	r2, [pc, #568]	@ (8001f20 <HAL_DMA_IRQHandler+0x24c>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0a9b      	lsrs	r3, r3, #10
 8001cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfe:	2208      	movs	r2, #8
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01a      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d44:	2201      	movs	r2, #1
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d012      	beq.n	8001d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d62:	2201      	movs	r2, #1
 8001d64:	409a      	lsls	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6e:	f043 0202 	orr.w	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d012      	beq.n	8001dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	2204      	movs	r2, #4
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da4:	f043 0204 	orr.w	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db0:	2210      	movs	r2, #16
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d043      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03c      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dce:	2210      	movs	r2, #16
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d018      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d108      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d024      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
 8001e02:	e01f      	b.n	8001e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01b      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
 8001e14:	e016      	b.n	8001e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0208 	bic.w	r2, r2, #8
 8001e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e48:	2220      	movs	r2, #32
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 808f 	beq.w	8001f74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8087 	beq.w	8001f74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d136      	bne.n	8001eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0216 	bic.w	r2, r2, #22
 8001e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <HAL_DMA_IRQHandler+0x1da>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0208 	bic.w	r2, r2, #8
 8001ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec2:	223f      	movs	r2, #63	@ 0x3f
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d07e      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
        }
        return;
 8001eea:	e079      	b.n	8001fe0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01d      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10d      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d031      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
 8001f18:	e02c      	b.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d023      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
 8001f34:	e01e      	b.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0210 	bic.w	r2, r2, #16
 8001f52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d032      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d022      	beq.n	8001fce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d307      	bcc.n	8001fbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f2      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x2cc>
 8001fba:	e000      	b.n	8001fbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
 8001fde:	e000      	b.n	8001fe2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fe0:	bf00      	nop
    }
  }
}
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b40      	cmp	r3, #64	@ 0x40
 8002014:	d108      	bne.n	8002028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002026:	e007      	b.n	8002038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3b10      	subs	r3, #16
 8002054:	4a13      	ldr	r2, [pc, #76]	@ (80020a4 <DMA_CalcBaseAndBitshift+0x60>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800205e:	4a12      	ldr	r2, [pc, #72]	@ (80020a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d908      	bls.n	8002084 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <DMA_CalcBaseAndBitshift+0x68>)
 800207a:	4013      	ands	r3, r2
 800207c:	1d1a      	adds	r2, r3, #4
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	659a      	str	r2, [r3, #88]	@ 0x58
 8002082:	e006      	b.n	8002092 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <DMA_CalcBaseAndBitshift+0x68>)
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	aaaaaaab 	.word	0xaaaaaaab
 80020a8:	08004a30 	.word	0x08004a30
 80020ac:	fffffc00 	.word	0xfffffc00

080020b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11f      	bne.n	800210a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d856      	bhi.n	800217e <DMA_CheckFifoParam+0xce>
 80020d0:	a201      	add	r2, pc, #4	@ (adr r2, 80020d8 <DMA_CheckFifoParam+0x28>)
 80020d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d6:	bf00      	nop
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	080020fb 	.word	0x080020fb
 80020e0:	080020e9 	.word	0x080020e9
 80020e4:	0800217f 	.word	0x0800217f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d046      	beq.n	8002182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f8:	e043      	b.n	8002182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002102:	d140      	bne.n	8002186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002108:	e03d      	b.n	8002186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002112:	d121      	bne.n	8002158 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d837      	bhi.n	800218a <DMA_CheckFifoParam+0xda>
 800211a:	a201      	add	r2, pc, #4	@ (adr r2, 8002120 <DMA_CheckFifoParam+0x70>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	08002131 	.word	0x08002131
 8002124:	08002137 	.word	0x08002137
 8002128:	08002131 	.word	0x08002131
 800212c:	08002149 	.word	0x08002149
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
      break;
 8002134:	e030      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d025      	beq.n	800218e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002146:	e022      	b.n	800218e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002150:	d11f      	bne.n	8002192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002156:	e01c      	b.n	8002192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d903      	bls.n	8002166 <DMA_CheckFifoParam+0xb6>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d003      	beq.n	800216c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002164:	e018      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
      break;
 800216a:	e015      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00e      	beq.n	8002196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      break;
 800217c:	e00b      	b.n	8002196 <DMA_CheckFifoParam+0xe6>
      break;
 800217e:	bf00      	nop
 8002180:	e00a      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e008      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
 8002188:	e006      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
 800218c:	e004      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e002      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;   
 8002192:	bf00      	nop
 8002194:	e000      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
    }
  } 
  
  return status; 
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	@ 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e175      	b.n	80024b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 8164 	bne.w	80024ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d005      	beq.n	80021fe <HAL_GPIO_Init+0x56>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d130      	bne.n	8002260 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 0201 	and.w	r2, r3, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b03      	cmp	r3, #3
 800226a:	d017      	beq.n	800229c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d123      	bne.n	80022f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0203 	and.w	r2, r3, #3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80be 	beq.w	80024ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b66      	ldr	r3, [pc, #408]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	4a65      	ldr	r2, [pc, #404]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233c:	6453      	str	r3, [r2, #68]	@ 0x44
 800233e:	4b63      	ldr	r3, [pc, #396]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800234a:	4a61      	ldr	r2, [pc, #388]	@ (80024d0 <HAL_GPIO_Init+0x328>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a58      	ldr	r2, [pc, #352]	@ (80024d4 <HAL_GPIO_Init+0x32c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d037      	beq.n	80023e6 <HAL_GPIO_Init+0x23e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a57      	ldr	r2, [pc, #348]	@ (80024d8 <HAL_GPIO_Init+0x330>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_GPIO_Init+0x23a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a56      	ldr	r2, [pc, #344]	@ (80024dc <HAL_GPIO_Init+0x334>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x236>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a55      	ldr	r2, [pc, #340]	@ (80024e0 <HAL_GPIO_Init+0x338>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x232>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a54      	ldr	r2, [pc, #336]	@ (80024e4 <HAL_GPIO_Init+0x33c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x22e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a53      	ldr	r2, [pc, #332]	@ (80024e8 <HAL_GPIO_Init+0x340>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x22a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_GPIO_Init+0x344>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x226>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_GPIO_Init+0x348>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x222>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a50      	ldr	r2, [pc, #320]	@ (80024f4 <HAL_GPIO_Init+0x34c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x21e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x21a>
 80023be:	2309      	movs	r3, #9
 80023c0:	e012      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023c2:	230a      	movs	r3, #10
 80023c4:	e010      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023c6:	2308      	movs	r3, #8
 80023c8:	e00e      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	@ (80024d0 <HAL_GPIO_Init+0x328>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a34      	ldr	r2, [pc, #208]	@ (80024fc <HAL_GPIO_Init+0x354>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a29      	ldr	r2, [pc, #164]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <HAL_GPIO_Init+0x354>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247e:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a8:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <HAL_GPIO_Init+0x354>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f ae86 	bls.w	80021c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40021400 	.word	0x40021400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40021c00 	.word	0x40021c00
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40022400 	.word	0x40022400
 80024fc:	40013c00 	.word	0x40013c00

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800251c:	e003      	b.n	8002526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	041a      	lsls	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	619a      	str	r2, [r3, #24]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e29b      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8087 	beq.w	8002666 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002558:	4b96      	ldr	r3, [pc, #600]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b04      	cmp	r3, #4
 8002562:	d00c      	beq.n	800257e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002564:	4b93      	ldr	r3, [pc, #588]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d112      	bne.n	8002596 <HAL_RCC_OscConfig+0x62>
 8002570:	4b90      	ldr	r3, [pc, #576]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800257c:	d10b      	bne.n	8002596 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257e:	4b8d      	ldr	r3, [pc, #564]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d06c      	beq.n	8002664 <HAL_RCC_OscConfig+0x130>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d168      	bne.n	8002664 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e275      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x7a>
 80025a0:	4b84      	ldr	r3, [pc, #528]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a83      	ldr	r2, [pc, #524]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e02e      	b.n	800260c <HAL_RCC_OscConfig+0xd8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x9c>
 80025b6:	4b7f      	ldr	r3, [pc, #508]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a7e      	ldr	r2, [pc, #504]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b7c      	ldr	r3, [pc, #496]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7b      	ldr	r2, [pc, #492]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e01d      	b.n	800260c <HAL_RCC_OscConfig+0xd8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0xc0>
 80025da:	4b76      	ldr	r3, [pc, #472]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a75      	ldr	r2, [pc, #468]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b73      	ldr	r3, [pc, #460]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a72      	ldr	r2, [pc, #456]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xd8>
 80025f4:	4b6f      	ldr	r3, [pc, #444]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a6e      	ldr	r2, [pc, #440]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b6c      	ldr	r3, [pc, #432]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6b      	ldr	r2, [pc, #428]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fc9c 	bl	8000f50 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe fc98 	bl	8000f50 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e229      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b61      	ldr	r3, [pc, #388]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0xe8>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fc88 	bl	8000f50 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fc84 	bl	8000f50 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e215      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	4b57      	ldr	r3, [pc, #348]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x110>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d069      	beq.n	8002746 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002672:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267e:	4b4d      	ldr	r3, [pc, #308]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b08      	cmp	r3, #8
 8002688:	d11c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x190>
 800268a:	4b4a      	ldr	r3, [pc, #296]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x17a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1e9      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	493d      	ldr	r1, [pc, #244]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	e040      	b.n	8002746 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d023      	beq.n	8002714 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026cc:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a38      	ldr	r2, [pc, #224]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fc3a 	bl	8000f50 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7fe fc36 	bl	8000f50 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1c7      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f2:	4b30      	ldr	r3, [pc, #192]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	4b2d      	ldr	r3, [pc, #180]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4929      	ldr	r1, [pc, #164]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
 8002712:	e018      	b.n	8002746 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002714:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a26      	ldr	r2, [pc, #152]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fc16 	bl	8000f50 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002728:	f7fe fc12 	bl	8000f50 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1a3      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d038      	beq.n	80027c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 800275c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275e:	4a15      	ldr	r2, [pc, #84]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fbf3 	bl	8000f50 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe fbef 	bl	8000f50 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e180      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x23a>
 800278c:	e01a      	b.n	80027c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002792:	4a08      	ldr	r2, [pc, #32]	@ (80027b4 <HAL_RCC_OscConfig+0x280>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe fbd9 	bl	8000f50 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a2:	f7fe fbd5 	bl	8000f50 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d903      	bls.n	80027b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e166      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
 80027b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	4b92      	ldr	r3, [pc, #584]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ee      	bne.n	80027a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a4 	beq.w	800291a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b8c      	ldr	r3, [pc, #560]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10d      	bne.n	80027fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	4b89      	ldr	r3, [pc, #548]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	4a88      	ldr	r2, [pc, #544]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ea:	4b86      	ldr	r3, [pc, #536]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fa:	4b83      	ldr	r3, [pc, #524]	@ (8002a08 <HAL_RCC_OscConfig+0x4d4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002806:	4b80      	ldr	r3, [pc, #512]	@ (8002a08 <HAL_RCC_OscConfig+0x4d4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a08 <HAL_RCC_OscConfig+0x4d4>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002812:	f7fe fb9d 	bl	8000f50 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7fe fb99 	bl	8000f50 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b64      	cmp	r3, #100	@ 0x64
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e12a      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282c:	4b76      	ldr	r3, [pc, #472]	@ (8002a08 <HAL_RCC_OscConfig+0x4d4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x31a>
 8002840:	4b70      	ldr	r3, [pc, #448]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a6f      	ldr	r2, [pc, #444]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
 800284c:	e02d      	b.n	80028aa <HAL_RCC_OscConfig+0x376>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x33c>
 8002856:	4b6b      	ldr	r3, [pc, #428]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	4a6a      	ldr	r2, [pc, #424]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	@ 0x70
 8002862:	4b68      	ldr	r3, [pc, #416]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	4a67      	ldr	r2, [pc, #412]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002868:	f023 0304 	bic.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	@ 0x70
 800286e:	e01c      	b.n	80028aa <HAL_RCC_OscConfig+0x376>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d10c      	bne.n	8002892 <HAL_RCC_OscConfig+0x35e>
 8002878:	4b62      	ldr	r3, [pc, #392]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287c:	4a61      	ldr	r2, [pc, #388]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	6713      	str	r3, [r2, #112]	@ 0x70
 8002884:	4b5f      	ldr	r3, [pc, #380]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	4a5e      	ldr	r2, [pc, #376]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002890:	e00b      	b.n	80028aa <HAL_RCC_OscConfig+0x376>
 8002892:	4b5c      	ldr	r3, [pc, #368]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	4a5b      	ldr	r2, [pc, #364]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	6713      	str	r3, [r2, #112]	@ 0x70
 800289e:	4b59      	ldr	r3, [pc, #356]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	4a58      	ldr	r2, [pc, #352]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d015      	beq.n	80028de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe fb4d 	bl	8000f50 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe fb49 	bl	8000f50 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0d8      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ee      	beq.n	80028ba <HAL_RCC_OscConfig+0x386>
 80028dc:	e014      	b.n	8002908 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7fe fb37 	bl	8000f50 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe fb33 	bl	8000f50 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e0c2      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fc:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ee      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4a3c      	ldr	r2, [pc, #240]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80ae 	beq.w	8002a80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002924:	4b37      	ldr	r3, [pc, #220]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d06d      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d14b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a31      	ldr	r2, [pc, #196]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 800293e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fb04 	bl	8000f50 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fb00 	bl	8000f50 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e091      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	3b01      	subs	r3, #1
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	061b      	lsls	r3, r3, #24
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	071b      	lsls	r3, r3, #28
 8002996:	491b      	ldr	r1, [pc, #108]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a18      	ldr	r2, [pc, #96]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fad2 	bl	8000f50 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe face 	bl	8000f50 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e05f      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x47c>
 80029ce:	e057      	b.n	8002a80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80029d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fab8 	bl	8000f50 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe fab4 	bl	8000f50 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e045      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_RCC_OscConfig+0x4d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4b0>
 8002a02:	e03d      	b.n	8002a80 <HAL_RCC_OscConfig+0x54c>
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <HAL_RCC_OscConfig+0x558>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d030      	beq.n	8002a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d129      	bne.n	8002a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d122      	bne.n	8002a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d119      	bne.n	8002a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10f      	bne.n	8002a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0d0      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d910      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b67      	ldr	r3, [pc, #412]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 020f 	bic.w	r2, r3, #15
 8002abe:	4965      	ldr	r1, [pc, #404]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af0:	4b59      	ldr	r3, [pc, #356]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a58      	ldr	r2, [pc, #352]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b50      	ldr	r3, [pc, #320]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	494d      	ldr	r1, [pc, #308]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d040      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b47      	ldr	r3, [pc, #284]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d115      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e073      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3d      	ldr	r3, [pc, #244]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e06b      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b39      	ldr	r3, [pc, #228]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4936      	ldr	r1, [pc, #216]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe f9e4 	bl	8000f50 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe f9e0 	bl	8000f50 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e053      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d210      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 020f 	bic.w	r2, r3, #15
 8002bca:	4922      	ldr	r1, [pc, #136]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4916      	ldr	r1, [pc, #88]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	490e      	ldr	r1, [pc, #56]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c22:	f000 f821 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	490a      	ldr	r1, [pc, #40]	@ (8002c5c <HAL_RCC_ClockConfig+0x1cc>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a09      	ldr	r2, [pc, #36]	@ (8002c60 <HAL_RCC_ClockConfig+0x1d0>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <HAL_RCC_ClockConfig+0x1d4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe f940 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08004a18 	.word	0x08004a18
 8002c60:	20000008 	.word	0x20000008
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c6c:	b090      	sub	sp, #64	@ 0x40
 8002c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c74:	2300      	movs	r3, #0
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c78:	2300      	movs	r3, #0
 8002c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c80:	4b59      	ldr	r3, [pc, #356]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	f200 80a1 	bhi.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x34>
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c9a:	e09b      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b53      	ldr	r3, [pc, #332]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x184>)
 8002c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ca0:	e09b      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca2:	4b53      	ldr	r3, [pc, #332]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ca6:	e098      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d028      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4b47      	ldr	r3, [pc, #284]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd4:	fb03 f201 	mul.w	r2, r3, r1
 8002cd8:	2300      	movs	r3, #0
 8002cda:	fb00 f303 	mul.w	r3, r0, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a43      	ldr	r2, [pc, #268]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ce8:	460a      	mov	r2, r1
 8002cea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cee:	4413      	add	r3, r2
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	61fa      	str	r2, [r7, #28]
 8002cfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d02:	f7fd faf5 	bl	80002f0 <__aeabi_uldivmod>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d0e:	e053      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d10:	4b35      	ldr	r3, [pc, #212]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	2200      	movs	r2, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	617a      	str	r2, [r7, #20]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d22:	f04f 0b00 	mov.w	fp, #0
 8002d26:	4652      	mov	r2, sl
 8002d28:	465b      	mov	r3, fp
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d42:	eb63 090b 	sbc.w	r9, r3, fp
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d5a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d5e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	00eb      	lsls	r3, r5, #3
 8002d6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d70:	00e2      	lsls	r2, r4, #3
 8002d72:	4614      	mov	r4, r2
 8002d74:	461d      	mov	r5, r3
 8002d76:	eb14 030a 	adds.w	r3, r4, sl
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	eb45 030b 	adc.w	r3, r5, fp
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	028b      	lsls	r3, r1, #10
 8002d92:	4621      	mov	r1, r4
 8002d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d98:	4621      	mov	r1, r4
 8002d9a:	028a      	lsls	r2, r1, #10
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da2:	2200      	movs	r2, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	60fa      	str	r2, [r7, #12]
 8002da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dac:	f7fd faa0 	bl	80002f0 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002dc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x184>)
 8002dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3740      	adds	r7, #64	@ 0x40
 8002de0:	46bd      	mov	sp, r7
 8002de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	017d7840 	.word	0x017d7840

08002df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b03      	ldr	r3, [pc, #12]	@ (8002e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000008 	.word	0x20000008

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08004a28 	.word	0x08004a28

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffdc 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	@ (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08004a28 	.word	0x08004a28

08002e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e84:	4b69      	ldr	r3, [pc, #420]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a68      	ldr	r2, [pc, #416]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e8e:	6093      	str	r3, [r2, #8]
 8002e90:	4b66      	ldr	r3, [pc, #408]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e98:	4964      	ldr	r1, [pc, #400]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d017      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ebc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec4:	4959      	ldr	r1, [pc, #356]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed4:	d101      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d017      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	494a      	ldr	r1, [pc, #296]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f10:	d101      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 808b 	beq.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b3a      	ldr	r3, [pc, #232]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	4a39      	ldr	r2, [pc, #228]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4c:	4b37      	ldr	r3, [pc, #220]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f58:	4b35      	ldr	r3, [pc, #212]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a34      	ldr	r2, [pc, #208]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f64:	f7fd fff4 	bl	8000f50 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fd fff0 	bl	8000f50 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	@ 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e38f      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f8a:	4b28      	ldr	r3, [pc, #160]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d035      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d02e      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa8:	4b20      	ldr	r3, [pc, #128]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fca:	4a18      	ldr	r2, [pc, #96]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fd0:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d114      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fd ffb8 	bl	8000f50 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fd ffb4 	bl	8000f50 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e351      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800300e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003012:	d111      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003020:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003022:	400b      	ands	r3, r1
 8003024:	4901      	ldr	r1, [pc, #4]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
 800302a:	e00b      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800302c:	40023800 	.word	0x40023800
 8003030:	40007000 	.word	0x40007000
 8003034:	0ffffcff 	.word	0x0ffffcff
 8003038:	4bac      	ldr	r3, [pc, #688]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4aab      	ldr	r2, [pc, #684]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003042:	6093      	str	r3, [r2, #8]
 8003044:	4ba9      	ldr	r3, [pc, #676]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	49a6      	ldr	r1, [pc, #664]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003052:	4313      	orrs	r3, r2
 8003054:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d010      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003062:	4ba2      	ldr	r3, [pc, #648]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003068:	4aa0      	ldr	r2, [pc, #640]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800306e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003072:	4b9e      	ldr	r3, [pc, #632]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003074:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	499b      	ldr	r1, [pc, #620]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003090:	4b96      	ldr	r3, [pc, #600]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003096:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800309e:	4993      	ldr	r1, [pc, #588]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030b2:	4b8e      	ldr	r3, [pc, #568]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030c0:	498a      	ldr	r1, [pc, #552]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030d4:	4b85      	ldr	r3, [pc, #532]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e2:	4982      	ldr	r1, [pc, #520]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003104:	4979      	ldr	r1, [pc, #484]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003118:	4b74      	ldr	r3, [pc, #464]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	4971      	ldr	r1, [pc, #452]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800313a:	4b6c      	ldr	r3, [pc, #432]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003140:	f023 020c 	bic.w	r2, r3, #12
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	4968      	ldr	r1, [pc, #416]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800315c:	4b63      	ldr	r3, [pc, #396]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316a:	4960      	ldr	r1, [pc, #384]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800317e:	4b5b      	ldr	r3, [pc, #364]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003184:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318c:	4957      	ldr	r1, [pc, #348]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031a0:	4b52      	ldr	r3, [pc, #328]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	494f      	ldr	r1, [pc, #316]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031c2:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d0:	4946      	ldr	r1, [pc, #280]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031e4:	4b41      	ldr	r3, [pc, #260]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f2:	493e      	ldr	r1, [pc, #248]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003206:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003214:	4935      	ldr	r1, [pc, #212]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003228:	4b30      	ldr	r3, [pc, #192]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003236:	492d      	ldr	r1, [pc, #180]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d011      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800324a:	4b28      	ldr	r3, [pc, #160]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003258:	4924      	ldr	r1, [pc, #144]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003268:	d101      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800328a:	4b18      	ldr	r3, [pc, #96]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003290:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003298:	4914      	ldr	r1, [pc, #80]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032ac:	4b0f      	ldr	r3, [pc, #60]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032bc:	490b      	ldr	r1, [pc, #44]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00f      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032d0:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032e0:	4902      	ldr	r1, [pc, #8]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032e8:	e002      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032fc:	4b8a      	ldr	r3, [pc, #552]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003302:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330c:	4986      	ldr	r1, [pc, #536]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003320:	4b81      	ldr	r3, [pc, #516]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003326:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003330:	497d      	ldr	r1, [pc, #500]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d006      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80d6 	beq.w	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800334c:	4b76      	ldr	r3, [pc, #472]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a75      	ldr	r2, [pc, #468]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003352:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003358:	f7fd fdfa 	bl	8000f50 <HAL_GetTick>
 800335c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003360:	f7fd fdf6 	bl	8000f50 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e195      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003372:	4b6d      	ldr	r3, [pc, #436]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d021      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d11d      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003392:	4b65      	ldr	r3, [pc, #404]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033a0:	4b61      	ldr	r3, [pc, #388]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a6:	0e1b      	lsrs	r3, r3, #24
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	019a      	lsls	r2, r3, #6
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	071b      	lsls	r3, r3, #28
 80033c6:	4958      	ldr	r1, [pc, #352]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02e      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f8:	d129      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003408:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800340e:	0f1b      	lsrs	r3, r3, #28
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	019a      	lsls	r2, r3, #6
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	493e      	ldr	r1, [pc, #248]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003436:	4b3c      	ldr	r3, [pc, #240]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800343c:	f023 021f 	bic.w	r2, r3, #31
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	3b01      	subs	r3, #1
 8003446:	4938      	ldr	r1, [pc, #224]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01d      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800345a:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800345c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003460:	0e1b      	lsrs	r3, r3, #24
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003468:	4b2f      	ldr	r3, [pc, #188]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800346e:	0f1b      	lsrs	r3, r3, #28
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	019a      	lsls	r2, r3, #6
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	431a      	orrs	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	071b      	lsls	r3, r3, #28
 800348e:	4926      	ldr	r1, [pc, #152]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d011      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	019a      	lsls	r2, r3, #6
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	071b      	lsls	r3, r3, #28
 80034be:	491a      	ldr	r1, [pc, #104]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034c6:	4b18      	ldr	r3, [pc, #96]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a17      	ldr	r2, [pc, #92]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d2:	f7fd fd3d 	bl	8000f50 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034da:	f7fd fd39 	bl	8000f50 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	@ 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0d8      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	f040 80ce 	bne.w	800369c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003500:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a08      	ldr	r2, [pc, #32]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800350a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350c:	f7fd fd20 	bl	8000f50 <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003512:	e00b      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003514:	f7fd fd1c 	bl	8000f50 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	@ 0x64
 8003520:	d904      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0bb      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800352c:	4b5e      	ldr	r3, [pc, #376]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003538:	d0ec      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02e      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d12a      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003562:	4b51      	ldr	r3, [pc, #324]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003570:	4b4d      	ldr	r3, [pc, #308]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	0f1b      	lsrs	r3, r3, #28
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	019a      	lsls	r2, r3, #6
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	071b      	lsls	r3, r3, #28
 8003596:	4944      	ldr	r1, [pc, #272]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800359e:	4b42      	ldr	r3, [pc, #264]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	493d      	ldr	r1, [pc, #244]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d022      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035cc:	d11d      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035ce:	4b36      	ldr	r3, [pc, #216]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	0e1b      	lsrs	r3, r3, #24
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035dc:	4b32      	ldr	r3, [pc, #200]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	0f1b      	lsrs	r3, r3, #28
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	019a      	lsls	r2, r3, #6
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	431a      	orrs	r2, r3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	061b      	lsls	r3, r3, #24
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	071b      	lsls	r3, r3, #28
 8003602:	4929      	ldr	r1, [pc, #164]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d028      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003616:	4b24      	ldr	r3, [pc, #144]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361c:	0e1b      	lsrs	r3, r3, #24
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003624:	4b20      	ldr	r3, [pc, #128]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	019a      	lsls	r2, r3, #6
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	431a      	orrs	r2, r3
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	071b      	lsls	r3, r3, #28
 800364a:	4917      	ldr	r1, [pc, #92]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003652:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	4911      	ldr	r1, [pc, #68]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003668:	4b0f      	ldr	r3, [pc, #60]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0e      	ldr	r2, [pc, #56]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fd fc6c 	bl	8000f50 <HAL_GetTick>
 8003678:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800367c:	f7fd fc68 	bl	8000f50 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	@ 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e007      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800368e:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800369a:	d1ef      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e040      	b.n	8003740 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fb64 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	@ 0x24
 80036d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8b0 	bl	8003850 <UART_SetConfig>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fb08 	bl	8003d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fb8f 	bl	8003e5c <UART_CheckIdleState>
 800373e:	4603      	mov	r3, r0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	@ 0x28
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800375c:	2b20      	cmp	r3, #32
 800375e:	d171      	bne.n	8003844 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_UART_Transmit+0x24>
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e06a      	b.n	8003846 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2221      	movs	r2, #33	@ 0x21
 800377c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800377e:	f7fd fbe7 	bl	8000f50 <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379c:	d108      	bne.n	80037b0 <HAL_UART_Transmit+0x68>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	e003      	b.n	80037b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037b8:	e02c      	b.n	8003814 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2180      	movs	r1, #128	@ 0x80
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fb96 	bl	8003ef6 <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e038      	b.n	8003846 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	3302      	adds	r3, #2
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	e007      	b.n	8003802 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	3301      	adds	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1cc      	bne.n	80037ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	2140      	movs	r1, #64	@ 0x40
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fb63 	bl	8003ef6 <UART_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e005      	b.n	8003846 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4ba6      	ldr	r3, [pc, #664]	@ (8003b14 <UART_SetConfig+0x2c4>)
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	6979      	ldr	r1, [r7, #20]
 8003884:	430b      	orrs	r3, r1
 8003886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	430a      	orrs	r2, r1
 80038c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a94      	ldr	r2, [pc, #592]	@ (8003b18 <UART_SetConfig+0x2c8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d120      	bne.n	800390e <UART_SetConfig+0xbe>
 80038cc:	4b93      	ldr	r3, [pc, #588]	@ (8003b1c <UART_SetConfig+0x2cc>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d816      	bhi.n	8003908 <UART_SetConfig+0xb8>
 80038da:	a201      	add	r2, pc, #4	@ (adr r2, 80038e0 <UART_SetConfig+0x90>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	080038f1 	.word	0x080038f1
 80038e4:	080038fd 	.word	0x080038fd
 80038e8:	080038f7 	.word	0x080038f7
 80038ec:	08003903 	.word	0x08003903
 80038f0:	2301      	movs	r3, #1
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e150      	b.n	8003b98 <UART_SetConfig+0x348>
 80038f6:	2302      	movs	r3, #2
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e14d      	b.n	8003b98 <UART_SetConfig+0x348>
 80038fc:	2304      	movs	r3, #4
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e14a      	b.n	8003b98 <UART_SetConfig+0x348>
 8003902:	2308      	movs	r3, #8
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e147      	b.n	8003b98 <UART_SetConfig+0x348>
 8003908:	2310      	movs	r3, #16
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e144      	b.n	8003b98 <UART_SetConfig+0x348>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a83      	ldr	r2, [pc, #524]	@ (8003b20 <UART_SetConfig+0x2d0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d132      	bne.n	800397e <UART_SetConfig+0x12e>
 8003918:	4b80      	ldr	r3, [pc, #512]	@ (8003b1c <UART_SetConfig+0x2cc>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d828      	bhi.n	8003978 <UART_SetConfig+0x128>
 8003926:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <UART_SetConfig+0xdc>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	08003961 	.word	0x08003961
 8003930:	08003979 	.word	0x08003979
 8003934:	08003979 	.word	0x08003979
 8003938:	08003979 	.word	0x08003979
 800393c:	0800396d 	.word	0x0800396d
 8003940:	08003979 	.word	0x08003979
 8003944:	08003979 	.word	0x08003979
 8003948:	08003979 	.word	0x08003979
 800394c:	08003967 	.word	0x08003967
 8003950:	08003979 	.word	0x08003979
 8003954:	08003979 	.word	0x08003979
 8003958:	08003979 	.word	0x08003979
 800395c:	08003973 	.word	0x08003973
 8003960:	2300      	movs	r3, #0
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e118      	b.n	8003b98 <UART_SetConfig+0x348>
 8003966:	2302      	movs	r3, #2
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e115      	b.n	8003b98 <UART_SetConfig+0x348>
 800396c:	2304      	movs	r3, #4
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e112      	b.n	8003b98 <UART_SetConfig+0x348>
 8003972:	2308      	movs	r3, #8
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e10f      	b.n	8003b98 <UART_SetConfig+0x348>
 8003978:	2310      	movs	r3, #16
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e10c      	b.n	8003b98 <UART_SetConfig+0x348>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a68      	ldr	r2, [pc, #416]	@ (8003b24 <UART_SetConfig+0x2d4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d120      	bne.n	80039ca <UART_SetConfig+0x17a>
 8003988:	4b64      	ldr	r3, [pc, #400]	@ (8003b1c <UART_SetConfig+0x2cc>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003992:	2b30      	cmp	r3, #48	@ 0x30
 8003994:	d013      	beq.n	80039be <UART_SetConfig+0x16e>
 8003996:	2b30      	cmp	r3, #48	@ 0x30
 8003998:	d814      	bhi.n	80039c4 <UART_SetConfig+0x174>
 800399a:	2b20      	cmp	r3, #32
 800399c:	d009      	beq.n	80039b2 <UART_SetConfig+0x162>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d810      	bhi.n	80039c4 <UART_SetConfig+0x174>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <UART_SetConfig+0x15c>
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d006      	beq.n	80039b8 <UART_SetConfig+0x168>
 80039aa:	e00b      	b.n	80039c4 <UART_SetConfig+0x174>
 80039ac:	2300      	movs	r3, #0
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e0f2      	b.n	8003b98 <UART_SetConfig+0x348>
 80039b2:	2302      	movs	r3, #2
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e0ef      	b.n	8003b98 <UART_SetConfig+0x348>
 80039b8:	2304      	movs	r3, #4
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e0ec      	b.n	8003b98 <UART_SetConfig+0x348>
 80039be:	2308      	movs	r3, #8
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e0e9      	b.n	8003b98 <UART_SetConfig+0x348>
 80039c4:	2310      	movs	r3, #16
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e0e6      	b.n	8003b98 <UART_SetConfig+0x348>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a56      	ldr	r2, [pc, #344]	@ (8003b28 <UART_SetConfig+0x2d8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d120      	bne.n	8003a16 <UART_SetConfig+0x1c6>
 80039d4:	4b51      	ldr	r3, [pc, #324]	@ (8003b1c <UART_SetConfig+0x2cc>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80039de:	2bc0      	cmp	r3, #192	@ 0xc0
 80039e0:	d013      	beq.n	8003a0a <UART_SetConfig+0x1ba>
 80039e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039e4:	d814      	bhi.n	8003a10 <UART_SetConfig+0x1c0>
 80039e6:	2b80      	cmp	r3, #128	@ 0x80
 80039e8:	d009      	beq.n	80039fe <UART_SetConfig+0x1ae>
 80039ea:	2b80      	cmp	r3, #128	@ 0x80
 80039ec:	d810      	bhi.n	8003a10 <UART_SetConfig+0x1c0>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <UART_SetConfig+0x1a8>
 80039f2:	2b40      	cmp	r3, #64	@ 0x40
 80039f4:	d006      	beq.n	8003a04 <UART_SetConfig+0x1b4>
 80039f6:	e00b      	b.n	8003a10 <UART_SetConfig+0x1c0>
 80039f8:	2300      	movs	r3, #0
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e0cc      	b.n	8003b98 <UART_SetConfig+0x348>
 80039fe:	2302      	movs	r3, #2
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e0c9      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a04:	2304      	movs	r3, #4
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e0c6      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e0c3      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a10:	2310      	movs	r3, #16
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e0c0      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a44      	ldr	r2, [pc, #272]	@ (8003b2c <UART_SetConfig+0x2dc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d125      	bne.n	8003a6c <UART_SetConfig+0x21c>
 8003a20:	4b3e      	ldr	r3, [pc, #248]	@ (8003b1c <UART_SetConfig+0x2cc>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a2e:	d017      	beq.n	8003a60 <UART_SetConfig+0x210>
 8003a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a34:	d817      	bhi.n	8003a66 <UART_SetConfig+0x216>
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3a:	d00b      	beq.n	8003a54 <UART_SetConfig+0x204>
 8003a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a40:	d811      	bhi.n	8003a66 <UART_SetConfig+0x216>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <UART_SetConfig+0x1fe>
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4a:	d006      	beq.n	8003a5a <UART_SetConfig+0x20a>
 8003a4c:	e00b      	b.n	8003a66 <UART_SetConfig+0x216>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e0a1      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a54:	2302      	movs	r3, #2
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e09e      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	77fb      	strb	r3, [r7, #31]
 8003a5e:	e09b      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a60:	2308      	movs	r3, #8
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e098      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a66:	2310      	movs	r3, #16
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e095      	b.n	8003b98 <UART_SetConfig+0x348>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <UART_SetConfig+0x2e0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d125      	bne.n	8003ac2 <UART_SetConfig+0x272>
 8003a76:	4b29      	ldr	r3, [pc, #164]	@ (8003b1c <UART_SetConfig+0x2cc>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a84:	d017      	beq.n	8003ab6 <UART_SetConfig+0x266>
 8003a86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a8a:	d817      	bhi.n	8003abc <UART_SetConfig+0x26c>
 8003a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a90:	d00b      	beq.n	8003aaa <UART_SetConfig+0x25a>
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a96:	d811      	bhi.n	8003abc <UART_SetConfig+0x26c>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <UART_SetConfig+0x254>
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa0:	d006      	beq.n	8003ab0 <UART_SetConfig+0x260>
 8003aa2:	e00b      	b.n	8003abc <UART_SetConfig+0x26c>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e076      	b.n	8003b98 <UART_SetConfig+0x348>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e073      	b.n	8003b98 <UART_SetConfig+0x348>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e070      	b.n	8003b98 <UART_SetConfig+0x348>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e06d      	b.n	8003b98 <UART_SetConfig+0x348>
 8003abc:	2310      	movs	r3, #16
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e06a      	b.n	8003b98 <UART_SetConfig+0x348>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <UART_SetConfig+0x2e4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d138      	bne.n	8003b3e <UART_SetConfig+0x2ee>
 8003acc:	4b13      	ldr	r3, [pc, #76]	@ (8003b1c <UART_SetConfig+0x2cc>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ad6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ada:	d017      	beq.n	8003b0c <UART_SetConfig+0x2bc>
 8003adc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ae0:	d82a      	bhi.n	8003b38 <UART_SetConfig+0x2e8>
 8003ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae6:	d00b      	beq.n	8003b00 <UART_SetConfig+0x2b0>
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aec:	d824      	bhi.n	8003b38 <UART_SetConfig+0x2e8>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <UART_SetConfig+0x2aa>
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af6:	d006      	beq.n	8003b06 <UART_SetConfig+0x2b6>
 8003af8:	e01e      	b.n	8003b38 <UART_SetConfig+0x2e8>
 8003afa:	2300      	movs	r3, #0
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e04b      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b00:	2302      	movs	r3, #2
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e048      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b06:	2304      	movs	r3, #4
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e045      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e042      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b12:	bf00      	nop
 8003b14:	efff69f3 	.word	0xefff69f3
 8003b18:	40011000 	.word	0x40011000
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40004400 	.word	0x40004400
 8003b24:	40004800 	.word	0x40004800
 8003b28:	40004c00 	.word	0x40004c00
 8003b2c:	40005000 	.word	0x40005000
 8003b30:	40011400 	.word	0x40011400
 8003b34:	40007800 	.word	0x40007800
 8003b38:	2310      	movs	r3, #16
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e02c      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a72      	ldr	r2, [pc, #456]	@ (8003d0c <UART_SetConfig+0x4bc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d125      	bne.n	8003b94 <UART_SetConfig+0x344>
 8003b48:	4b71      	ldr	r3, [pc, #452]	@ (8003d10 <UART_SetConfig+0x4c0>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b52:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b56:	d017      	beq.n	8003b88 <UART_SetConfig+0x338>
 8003b58:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b5c:	d817      	bhi.n	8003b8e <UART_SetConfig+0x33e>
 8003b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b62:	d00b      	beq.n	8003b7c <UART_SetConfig+0x32c>
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b68:	d811      	bhi.n	8003b8e <UART_SetConfig+0x33e>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <UART_SetConfig+0x326>
 8003b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b72:	d006      	beq.n	8003b82 <UART_SetConfig+0x332>
 8003b74:	e00b      	b.n	8003b8e <UART_SetConfig+0x33e>
 8003b76:	2300      	movs	r3, #0
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e00d      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e00a      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b82:	2304      	movs	r3, #4
 8003b84:	77fb      	strb	r3, [r7, #31]
 8003b86:	e007      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b88:	2308      	movs	r3, #8
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e004      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b8e:	2310      	movs	r3, #16
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e001      	b.n	8003b98 <UART_SetConfig+0x348>
 8003b94:	2310      	movs	r3, #16
 8003b96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba0:	d15b      	bne.n	8003c5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d828      	bhi.n	8003bfa <UART_SetConfig+0x3aa>
 8003ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <UART_SetConfig+0x360>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003bfb 	.word	0x08003bfb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003bfb 	.word	0x08003bfb
 8003bc8:	08003bfb 	.word	0x08003bfb
 8003bcc:	08003bfb 	.word	0x08003bfb
 8003bd0:	08003bf3 	.word	0x08003bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7ff f91a 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8003bd8:	61b8      	str	r0, [r7, #24]
        break;
 8003bda:	e013      	b.n	8003c04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7ff f92a 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8003be0:	61b8      	str	r0, [r7, #24]
        break;
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d14 <UART_SetConfig+0x4c4>)
 8003be6:	61bb      	str	r3, [r7, #24]
        break;
 8003be8:	e00c      	b.n	8003c04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bea:	f7ff f83d 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003bee:	61b8      	str	r0, [r7, #24]
        break;
 8003bf0:	e008      	b.n	8003c04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e004      	b.n	8003c04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	77bb      	strb	r3, [r7, #30]
        break;
 8003c02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d074      	beq.n	8003cf4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	005a      	lsls	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	441a      	add	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	2b0f      	cmp	r3, #15
 8003c24:	d916      	bls.n	8003c54 <UART_SetConfig+0x404>
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c2c:	d212      	bcs.n	8003c54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f023 030f 	bic.w	r3, r3, #15
 8003c36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	89fb      	ldrh	r3, [r7, #14]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	89fa      	ldrh	r2, [r7, #14]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	e04f      	b.n	8003cf4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	77bb      	strb	r3, [r7, #30]
 8003c58:	e04c      	b.n	8003cf4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c5a:	7ffb      	ldrb	r3, [r7, #31]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d828      	bhi.n	8003cb2 <UART_SetConfig+0x462>
 8003c60:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <UART_SetConfig+0x418>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003cb3 	.word	0x08003cb3
 8003c78:	08003ca3 	.word	0x08003ca3
 8003c7c:	08003cb3 	.word	0x08003cb3
 8003c80:	08003cb3 	.word	0x08003cb3
 8003c84:	08003cb3 	.word	0x08003cb3
 8003c88:	08003cab 	.word	0x08003cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7ff f8be 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8003c90:	61b8      	str	r0, [r7, #24]
        break;
 8003c92:	e013      	b.n	8003cbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c94:	f7ff f8ce 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8003c98:	61b8      	str	r0, [r7, #24]
        break;
 8003c9a:	e00f      	b.n	8003cbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <UART_SetConfig+0x4c4>)
 8003c9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ca0:	e00c      	b.n	8003cbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca2:	f7fe ffe1 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003ca6:	61b8      	str	r0, [r7, #24]
        break;
 8003ca8:	e008      	b.n	8003cbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cae:	61bb      	str	r3, [r7, #24]
        break;
 8003cb0:	e004      	b.n	8003cbc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	77bb      	strb	r3, [r7, #30]
        break;
 8003cba:	bf00      	nop
    }

    if (pclk != 0U)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d018      	beq.n	8003cf4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	085a      	lsrs	r2, r3, #1
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	441a      	add	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b0f      	cmp	r3, #15
 8003cda:	d909      	bls.n	8003cf0 <UART_SetConfig+0x4a0>
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce2:	d205      	bcs.n	8003cf0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60da      	str	r2, [r3, #12]
 8003cee:	e001      	b.n	8003cf4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d00:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40007c00 	.word	0x40007c00
 8003d10:	40023800 	.word	0x40023800
 8003d14:	00f42400 	.word	0x00f42400

08003d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e16:	d10a      	bne.n	8003e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e6c:	f7fd f870 	bl	8000f50 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d10e      	bne.n	8003e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f831 	bl	8003ef6 <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e027      	b.n	8003eee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d10e      	bne.n	8003eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f81b 	bl	8003ef6 <UART_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e011      	b.n	8003eee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b09c      	sub	sp, #112	@ 0x70
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	4613      	mov	r3, r2
 8003f04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f06:	e0a7      	b.n	8004058 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f0e:	f000 80a3 	beq.w	8004058 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fd f81d 	bl	8000f50 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d13f      	bne.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f38:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003f3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f48:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003f4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e6      	bne.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f7a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f7c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e5      	bne.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e068      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d050      	beq.n	8004058 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	d148      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003fe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e6      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	613b      	str	r3, [r7, #16]
   return(result);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	66bb      	str	r3, [r7, #104]	@ 0x68
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004022:	623a      	str	r2, [r7, #32]
 8004024:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	69f9      	ldr	r1, [r7, #28]
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e5      	bne.n	8004002 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e010      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4013      	ands	r3, r2
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	429a      	cmp	r2, r3
 8004074:	f43f af48 	beq.w	8003f08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3770      	adds	r7, #112	@ 0x70
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <siprintf>:
 8004084:	b40e      	push	{r1, r2, r3}
 8004086:	b510      	push	{r4, lr}
 8004088:	b09d      	sub	sp, #116	@ 0x74
 800408a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800408c:	9002      	str	r0, [sp, #8]
 800408e:	9006      	str	r0, [sp, #24]
 8004090:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004094:	480a      	ldr	r0, [pc, #40]	@ (80040c0 <siprintf+0x3c>)
 8004096:	9107      	str	r1, [sp, #28]
 8004098:	9104      	str	r1, [sp, #16]
 800409a:	490a      	ldr	r1, [pc, #40]	@ (80040c4 <siprintf+0x40>)
 800409c:	f853 2b04 	ldr.w	r2, [r3], #4
 80040a0:	9105      	str	r1, [sp, #20]
 80040a2:	2400      	movs	r4, #0
 80040a4:	a902      	add	r1, sp, #8
 80040a6:	6800      	ldr	r0, [r0, #0]
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80040ac:	f000 f994 	bl	80043d8 <_svfiprintf_r>
 80040b0:	9b02      	ldr	r3, [sp, #8]
 80040b2:	701c      	strb	r4, [r3, #0]
 80040b4:	b01d      	add	sp, #116	@ 0x74
 80040b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040ba:	b003      	add	sp, #12
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000014 	.word	0x20000014
 80040c4:	ffff0208 	.word	0xffff0208

080040c8 <memset>:
 80040c8:	4402      	add	r2, r0
 80040ca:	4603      	mov	r3, r0
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d100      	bne.n	80040d2 <memset+0xa>
 80040d0:	4770      	bx	lr
 80040d2:	f803 1b01 	strb.w	r1, [r3], #1
 80040d6:	e7f9      	b.n	80040cc <memset+0x4>

080040d8 <__errno>:
 80040d8:	4b01      	ldr	r3, [pc, #4]	@ (80040e0 <__errno+0x8>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000014 	.word	0x20000014

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4d0d      	ldr	r5, [pc, #52]	@ (800411c <__libc_init_array+0x38>)
 80040e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004120 <__libc_init_array+0x3c>)
 80040ea:	1b64      	subs	r4, r4, r5
 80040ec:	10a4      	asrs	r4, r4, #2
 80040ee:	2600      	movs	r6, #0
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004124 <__libc_init_array+0x40>)
 80040f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004128 <__libc_init_array+0x44>)
 80040f8:	f000 fc64 	bl	80049c4 <_init>
 80040fc:	1b64      	subs	r4, r4, r5
 80040fe:	10a4      	asrs	r4, r4, #2
 8004100:	2600      	movs	r6, #0
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	08004a74 	.word	0x08004a74
 8004120:	08004a74 	.word	0x08004a74
 8004124:	08004a74 	.word	0x08004a74
 8004128:	08004a78 	.word	0x08004a78

0800412c <__retarget_lock_acquire_recursive>:
 800412c:	4770      	bx	lr

0800412e <__retarget_lock_release_recursive>:
 800412e:	4770      	bx	lr

08004130 <_free_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4605      	mov	r5, r0
 8004134:	2900      	cmp	r1, #0
 8004136:	d041      	beq.n	80041bc <_free_r+0x8c>
 8004138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800413c:	1f0c      	subs	r4, r1, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	bfb8      	it	lt
 8004142:	18e4      	addlt	r4, r4, r3
 8004144:	f000 f8e0 	bl	8004308 <__malloc_lock>
 8004148:	4a1d      	ldr	r2, [pc, #116]	@ (80041c0 <_free_r+0x90>)
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	b933      	cbnz	r3, 800415c <_free_r+0x2c>
 800414e:	6063      	str	r3, [r4, #4]
 8004150:	6014      	str	r4, [r2, #0]
 8004152:	4628      	mov	r0, r5
 8004154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004158:	f000 b8dc 	b.w	8004314 <__malloc_unlock>
 800415c:	42a3      	cmp	r3, r4
 800415e:	d908      	bls.n	8004172 <_free_r+0x42>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	1821      	adds	r1, r4, r0
 8004164:	428b      	cmp	r3, r1
 8004166:	bf01      	itttt	eq
 8004168:	6819      	ldreq	r1, [r3, #0]
 800416a:	685b      	ldreq	r3, [r3, #4]
 800416c:	1809      	addeq	r1, r1, r0
 800416e:	6021      	streq	r1, [r4, #0]
 8004170:	e7ed      	b.n	800414e <_free_r+0x1e>
 8004172:	461a      	mov	r2, r3
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b10b      	cbz	r3, 800417c <_free_r+0x4c>
 8004178:	42a3      	cmp	r3, r4
 800417a:	d9fa      	bls.n	8004172 <_free_r+0x42>
 800417c:	6811      	ldr	r1, [r2, #0]
 800417e:	1850      	adds	r0, r2, r1
 8004180:	42a0      	cmp	r0, r4
 8004182:	d10b      	bne.n	800419c <_free_r+0x6c>
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	4401      	add	r1, r0
 8004188:	1850      	adds	r0, r2, r1
 800418a:	4283      	cmp	r3, r0
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	d1e0      	bne.n	8004152 <_free_r+0x22>
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	6053      	str	r3, [r2, #4]
 8004196:	4408      	add	r0, r1
 8004198:	6010      	str	r0, [r2, #0]
 800419a:	e7da      	b.n	8004152 <_free_r+0x22>
 800419c:	d902      	bls.n	80041a4 <_free_r+0x74>
 800419e:	230c      	movs	r3, #12
 80041a0:	602b      	str	r3, [r5, #0]
 80041a2:	e7d6      	b.n	8004152 <_free_r+0x22>
 80041a4:	6820      	ldr	r0, [r4, #0]
 80041a6:	1821      	adds	r1, r4, r0
 80041a8:	428b      	cmp	r3, r1
 80041aa:	bf04      	itt	eq
 80041ac:	6819      	ldreq	r1, [r3, #0]
 80041ae:	685b      	ldreq	r3, [r3, #4]
 80041b0:	6063      	str	r3, [r4, #4]
 80041b2:	bf04      	itt	eq
 80041b4:	1809      	addeq	r1, r1, r0
 80041b6:	6021      	streq	r1, [r4, #0]
 80041b8:	6054      	str	r4, [r2, #4]
 80041ba:	e7ca      	b.n	8004152 <_free_r+0x22>
 80041bc:	bd38      	pop	{r3, r4, r5, pc}
 80041be:	bf00      	nop
 80041c0:	2000031c 	.word	0x2000031c

080041c4 <sbrk_aligned>:
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004204 <sbrk_aligned+0x40>)
 80041c8:	460c      	mov	r4, r1
 80041ca:	6831      	ldr	r1, [r6, #0]
 80041cc:	4605      	mov	r5, r0
 80041ce:	b911      	cbnz	r1, 80041d6 <sbrk_aligned+0x12>
 80041d0:	f000 fba4 	bl	800491c <_sbrk_r>
 80041d4:	6030      	str	r0, [r6, #0]
 80041d6:	4621      	mov	r1, r4
 80041d8:	4628      	mov	r0, r5
 80041da:	f000 fb9f 	bl	800491c <_sbrk_r>
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	d103      	bne.n	80041ea <sbrk_aligned+0x26>
 80041e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80041e6:	4620      	mov	r0, r4
 80041e8:	bd70      	pop	{r4, r5, r6, pc}
 80041ea:	1cc4      	adds	r4, r0, #3
 80041ec:	f024 0403 	bic.w	r4, r4, #3
 80041f0:	42a0      	cmp	r0, r4
 80041f2:	d0f8      	beq.n	80041e6 <sbrk_aligned+0x22>
 80041f4:	1a21      	subs	r1, r4, r0
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 fb90 	bl	800491c <_sbrk_r>
 80041fc:	3001      	adds	r0, #1
 80041fe:	d1f2      	bne.n	80041e6 <sbrk_aligned+0x22>
 8004200:	e7ef      	b.n	80041e2 <sbrk_aligned+0x1e>
 8004202:	bf00      	nop
 8004204:	20000318 	.word	0x20000318

08004208 <_malloc_r>:
 8004208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800420c:	1ccd      	adds	r5, r1, #3
 800420e:	f025 0503 	bic.w	r5, r5, #3
 8004212:	3508      	adds	r5, #8
 8004214:	2d0c      	cmp	r5, #12
 8004216:	bf38      	it	cc
 8004218:	250c      	movcc	r5, #12
 800421a:	2d00      	cmp	r5, #0
 800421c:	4606      	mov	r6, r0
 800421e:	db01      	blt.n	8004224 <_malloc_r+0x1c>
 8004220:	42a9      	cmp	r1, r5
 8004222:	d904      	bls.n	800422e <_malloc_r+0x26>
 8004224:	230c      	movs	r3, #12
 8004226:	6033      	str	r3, [r6, #0]
 8004228:	2000      	movs	r0, #0
 800422a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800422e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004304 <_malloc_r+0xfc>
 8004232:	f000 f869 	bl	8004308 <__malloc_lock>
 8004236:	f8d8 3000 	ldr.w	r3, [r8]
 800423a:	461c      	mov	r4, r3
 800423c:	bb44      	cbnz	r4, 8004290 <_malloc_r+0x88>
 800423e:	4629      	mov	r1, r5
 8004240:	4630      	mov	r0, r6
 8004242:	f7ff ffbf 	bl	80041c4 <sbrk_aligned>
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	4604      	mov	r4, r0
 800424a:	d158      	bne.n	80042fe <_malloc_r+0xf6>
 800424c:	f8d8 4000 	ldr.w	r4, [r8]
 8004250:	4627      	mov	r7, r4
 8004252:	2f00      	cmp	r7, #0
 8004254:	d143      	bne.n	80042de <_malloc_r+0xd6>
 8004256:	2c00      	cmp	r4, #0
 8004258:	d04b      	beq.n	80042f2 <_malloc_r+0xea>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	4639      	mov	r1, r7
 800425e:	4630      	mov	r0, r6
 8004260:	eb04 0903 	add.w	r9, r4, r3
 8004264:	f000 fb5a 	bl	800491c <_sbrk_r>
 8004268:	4581      	cmp	r9, r0
 800426a:	d142      	bne.n	80042f2 <_malloc_r+0xea>
 800426c:	6821      	ldr	r1, [r4, #0]
 800426e:	1a6d      	subs	r5, r5, r1
 8004270:	4629      	mov	r1, r5
 8004272:	4630      	mov	r0, r6
 8004274:	f7ff ffa6 	bl	80041c4 <sbrk_aligned>
 8004278:	3001      	adds	r0, #1
 800427a:	d03a      	beq.n	80042f2 <_malloc_r+0xea>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	442b      	add	r3, r5
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	f8d8 3000 	ldr.w	r3, [r8]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	bb62      	cbnz	r2, 80042e4 <_malloc_r+0xdc>
 800428a:	f8c8 7000 	str.w	r7, [r8]
 800428e:	e00f      	b.n	80042b0 <_malloc_r+0xa8>
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	1b52      	subs	r2, r2, r5
 8004294:	d420      	bmi.n	80042d8 <_malloc_r+0xd0>
 8004296:	2a0b      	cmp	r2, #11
 8004298:	d917      	bls.n	80042ca <_malloc_r+0xc2>
 800429a:	1961      	adds	r1, r4, r5
 800429c:	42a3      	cmp	r3, r4
 800429e:	6025      	str	r5, [r4, #0]
 80042a0:	bf18      	it	ne
 80042a2:	6059      	strne	r1, [r3, #4]
 80042a4:	6863      	ldr	r3, [r4, #4]
 80042a6:	bf08      	it	eq
 80042a8:	f8c8 1000 	streq.w	r1, [r8]
 80042ac:	5162      	str	r2, [r4, r5]
 80042ae:	604b      	str	r3, [r1, #4]
 80042b0:	4630      	mov	r0, r6
 80042b2:	f000 f82f 	bl	8004314 <__malloc_unlock>
 80042b6:	f104 000b 	add.w	r0, r4, #11
 80042ba:	1d23      	adds	r3, r4, #4
 80042bc:	f020 0007 	bic.w	r0, r0, #7
 80042c0:	1ac2      	subs	r2, r0, r3
 80042c2:	bf1c      	itt	ne
 80042c4:	1a1b      	subne	r3, r3, r0
 80042c6:	50a3      	strne	r3, [r4, r2]
 80042c8:	e7af      	b.n	800422a <_malloc_r+0x22>
 80042ca:	6862      	ldr	r2, [r4, #4]
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	bf0c      	ite	eq
 80042d0:	f8c8 2000 	streq.w	r2, [r8]
 80042d4:	605a      	strne	r2, [r3, #4]
 80042d6:	e7eb      	b.n	80042b0 <_malloc_r+0xa8>
 80042d8:	4623      	mov	r3, r4
 80042da:	6864      	ldr	r4, [r4, #4]
 80042dc:	e7ae      	b.n	800423c <_malloc_r+0x34>
 80042de:	463c      	mov	r4, r7
 80042e0:	687f      	ldr	r7, [r7, #4]
 80042e2:	e7b6      	b.n	8004252 <_malloc_r+0x4a>
 80042e4:	461a      	mov	r2, r3
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	42a3      	cmp	r3, r4
 80042ea:	d1fb      	bne.n	80042e4 <_malloc_r+0xdc>
 80042ec:	2300      	movs	r3, #0
 80042ee:	6053      	str	r3, [r2, #4]
 80042f0:	e7de      	b.n	80042b0 <_malloc_r+0xa8>
 80042f2:	230c      	movs	r3, #12
 80042f4:	6033      	str	r3, [r6, #0]
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 f80c 	bl	8004314 <__malloc_unlock>
 80042fc:	e794      	b.n	8004228 <_malloc_r+0x20>
 80042fe:	6005      	str	r5, [r0, #0]
 8004300:	e7d6      	b.n	80042b0 <_malloc_r+0xa8>
 8004302:	bf00      	nop
 8004304:	2000031c 	.word	0x2000031c

08004308 <__malloc_lock>:
 8004308:	4801      	ldr	r0, [pc, #4]	@ (8004310 <__malloc_lock+0x8>)
 800430a:	f7ff bf0f 	b.w	800412c <__retarget_lock_acquire_recursive>
 800430e:	bf00      	nop
 8004310:	20000314 	.word	0x20000314

08004314 <__malloc_unlock>:
 8004314:	4801      	ldr	r0, [pc, #4]	@ (800431c <__malloc_unlock+0x8>)
 8004316:	f7ff bf0a 	b.w	800412e <__retarget_lock_release_recursive>
 800431a:	bf00      	nop
 800431c:	20000314 	.word	0x20000314

08004320 <__ssputs_r>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	688e      	ldr	r6, [r1, #8]
 8004326:	461f      	mov	r7, r3
 8004328:	42be      	cmp	r6, r7
 800432a:	680b      	ldr	r3, [r1, #0]
 800432c:	4682      	mov	sl, r0
 800432e:	460c      	mov	r4, r1
 8004330:	4690      	mov	r8, r2
 8004332:	d82d      	bhi.n	8004390 <__ssputs_r+0x70>
 8004334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004338:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800433c:	d026      	beq.n	800438c <__ssputs_r+0x6c>
 800433e:	6965      	ldr	r5, [r4, #20]
 8004340:	6909      	ldr	r1, [r1, #16]
 8004342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004346:	eba3 0901 	sub.w	r9, r3, r1
 800434a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800434e:	1c7b      	adds	r3, r7, #1
 8004350:	444b      	add	r3, r9
 8004352:	106d      	asrs	r5, r5, #1
 8004354:	429d      	cmp	r5, r3
 8004356:	bf38      	it	cc
 8004358:	461d      	movcc	r5, r3
 800435a:	0553      	lsls	r3, r2, #21
 800435c:	d527      	bpl.n	80043ae <__ssputs_r+0x8e>
 800435e:	4629      	mov	r1, r5
 8004360:	f7ff ff52 	bl	8004208 <_malloc_r>
 8004364:	4606      	mov	r6, r0
 8004366:	b360      	cbz	r0, 80043c2 <__ssputs_r+0xa2>
 8004368:	6921      	ldr	r1, [r4, #16]
 800436a:	464a      	mov	r2, r9
 800436c:	f000 fae6 	bl	800493c <memcpy>
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437a:	81a3      	strh	r3, [r4, #12]
 800437c:	6126      	str	r6, [r4, #16]
 800437e:	6165      	str	r5, [r4, #20]
 8004380:	444e      	add	r6, r9
 8004382:	eba5 0509 	sub.w	r5, r5, r9
 8004386:	6026      	str	r6, [r4, #0]
 8004388:	60a5      	str	r5, [r4, #8]
 800438a:	463e      	mov	r6, r7
 800438c:	42be      	cmp	r6, r7
 800438e:	d900      	bls.n	8004392 <__ssputs_r+0x72>
 8004390:	463e      	mov	r6, r7
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	4632      	mov	r2, r6
 8004396:	4641      	mov	r1, r8
 8004398:	f000 faa6 	bl	80048e8 <memmove>
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	1b9b      	subs	r3, r3, r6
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	4433      	add	r3, r6
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	2000      	movs	r0, #0
 80043aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ae:	462a      	mov	r2, r5
 80043b0:	f000 fad2 	bl	8004958 <_realloc_r>
 80043b4:	4606      	mov	r6, r0
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d1e0      	bne.n	800437c <__ssputs_r+0x5c>
 80043ba:	6921      	ldr	r1, [r4, #16]
 80043bc:	4650      	mov	r0, sl
 80043be:	f7ff feb7 	bl	8004130 <_free_r>
 80043c2:	230c      	movs	r3, #12
 80043c4:	f8ca 3000 	str.w	r3, [sl]
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043d4:	e7e9      	b.n	80043aa <__ssputs_r+0x8a>
	...

080043d8 <_svfiprintf_r>:
 80043d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	4698      	mov	r8, r3
 80043de:	898b      	ldrh	r3, [r1, #12]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	b09d      	sub	sp, #116	@ 0x74
 80043e4:	4607      	mov	r7, r0
 80043e6:	460d      	mov	r5, r1
 80043e8:	4614      	mov	r4, r2
 80043ea:	d510      	bpl.n	800440e <_svfiprintf_r+0x36>
 80043ec:	690b      	ldr	r3, [r1, #16]
 80043ee:	b973      	cbnz	r3, 800440e <_svfiprintf_r+0x36>
 80043f0:	2140      	movs	r1, #64	@ 0x40
 80043f2:	f7ff ff09 	bl	8004208 <_malloc_r>
 80043f6:	6028      	str	r0, [r5, #0]
 80043f8:	6128      	str	r0, [r5, #16]
 80043fa:	b930      	cbnz	r0, 800440a <_svfiprintf_r+0x32>
 80043fc:	230c      	movs	r3, #12
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004404:	b01d      	add	sp, #116	@ 0x74
 8004406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440a:	2340      	movs	r3, #64	@ 0x40
 800440c:	616b      	str	r3, [r5, #20]
 800440e:	2300      	movs	r3, #0
 8004410:	9309      	str	r3, [sp, #36]	@ 0x24
 8004412:	2320      	movs	r3, #32
 8004414:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004418:	f8cd 800c 	str.w	r8, [sp, #12]
 800441c:	2330      	movs	r3, #48	@ 0x30
 800441e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045bc <_svfiprintf_r+0x1e4>
 8004422:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004426:	f04f 0901 	mov.w	r9, #1
 800442a:	4623      	mov	r3, r4
 800442c:	469a      	mov	sl, r3
 800442e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004432:	b10a      	cbz	r2, 8004438 <_svfiprintf_r+0x60>
 8004434:	2a25      	cmp	r2, #37	@ 0x25
 8004436:	d1f9      	bne.n	800442c <_svfiprintf_r+0x54>
 8004438:	ebba 0b04 	subs.w	fp, sl, r4
 800443c:	d00b      	beq.n	8004456 <_svfiprintf_r+0x7e>
 800443e:	465b      	mov	r3, fp
 8004440:	4622      	mov	r2, r4
 8004442:	4629      	mov	r1, r5
 8004444:	4638      	mov	r0, r7
 8004446:	f7ff ff6b 	bl	8004320 <__ssputs_r>
 800444a:	3001      	adds	r0, #1
 800444c:	f000 80a7 	beq.w	800459e <_svfiprintf_r+0x1c6>
 8004450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004452:	445a      	add	r2, fp
 8004454:	9209      	str	r2, [sp, #36]	@ 0x24
 8004456:	f89a 3000 	ldrb.w	r3, [sl]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 809f 	beq.w	800459e <_svfiprintf_r+0x1c6>
 8004460:	2300      	movs	r3, #0
 8004462:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800446a:	f10a 0a01 	add.w	sl, sl, #1
 800446e:	9304      	str	r3, [sp, #16]
 8004470:	9307      	str	r3, [sp, #28]
 8004472:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004476:	931a      	str	r3, [sp, #104]	@ 0x68
 8004478:	4654      	mov	r4, sl
 800447a:	2205      	movs	r2, #5
 800447c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004480:	484e      	ldr	r0, [pc, #312]	@ (80045bc <_svfiprintf_r+0x1e4>)
 8004482:	f7fb fee5 	bl	8000250 <memchr>
 8004486:	9a04      	ldr	r2, [sp, #16]
 8004488:	b9d8      	cbnz	r0, 80044c2 <_svfiprintf_r+0xea>
 800448a:	06d0      	lsls	r0, r2, #27
 800448c:	bf44      	itt	mi
 800448e:	2320      	movmi	r3, #32
 8004490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004494:	0711      	lsls	r1, r2, #28
 8004496:	bf44      	itt	mi
 8004498:	232b      	movmi	r3, #43	@ 0x2b
 800449a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800449e:	f89a 3000 	ldrb.w	r3, [sl]
 80044a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80044a4:	d015      	beq.n	80044d2 <_svfiprintf_r+0xfa>
 80044a6:	9a07      	ldr	r2, [sp, #28]
 80044a8:	4654      	mov	r4, sl
 80044aa:	2000      	movs	r0, #0
 80044ac:	f04f 0c0a 	mov.w	ip, #10
 80044b0:	4621      	mov	r1, r4
 80044b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044b6:	3b30      	subs	r3, #48	@ 0x30
 80044b8:	2b09      	cmp	r3, #9
 80044ba:	d94b      	bls.n	8004554 <_svfiprintf_r+0x17c>
 80044bc:	b1b0      	cbz	r0, 80044ec <_svfiprintf_r+0x114>
 80044be:	9207      	str	r2, [sp, #28]
 80044c0:	e014      	b.n	80044ec <_svfiprintf_r+0x114>
 80044c2:	eba0 0308 	sub.w	r3, r0, r8
 80044c6:	fa09 f303 	lsl.w	r3, r9, r3
 80044ca:	4313      	orrs	r3, r2
 80044cc:	9304      	str	r3, [sp, #16]
 80044ce:	46a2      	mov	sl, r4
 80044d0:	e7d2      	b.n	8004478 <_svfiprintf_r+0xa0>
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	1d19      	adds	r1, r3, #4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	9103      	str	r1, [sp, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bfbb      	ittet	lt
 80044de:	425b      	neglt	r3, r3
 80044e0:	f042 0202 	orrlt.w	r2, r2, #2
 80044e4:	9307      	strge	r3, [sp, #28]
 80044e6:	9307      	strlt	r3, [sp, #28]
 80044e8:	bfb8      	it	lt
 80044ea:	9204      	strlt	r2, [sp, #16]
 80044ec:	7823      	ldrb	r3, [r4, #0]
 80044ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80044f0:	d10a      	bne.n	8004508 <_svfiprintf_r+0x130>
 80044f2:	7863      	ldrb	r3, [r4, #1]
 80044f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044f6:	d132      	bne.n	800455e <_svfiprintf_r+0x186>
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	1d1a      	adds	r2, r3, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	9203      	str	r2, [sp, #12]
 8004500:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004504:	3402      	adds	r4, #2
 8004506:	9305      	str	r3, [sp, #20]
 8004508:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80045cc <_svfiprintf_r+0x1f4>
 800450c:	7821      	ldrb	r1, [r4, #0]
 800450e:	2203      	movs	r2, #3
 8004510:	4650      	mov	r0, sl
 8004512:	f7fb fe9d 	bl	8000250 <memchr>
 8004516:	b138      	cbz	r0, 8004528 <_svfiprintf_r+0x150>
 8004518:	9b04      	ldr	r3, [sp, #16]
 800451a:	eba0 000a 	sub.w	r0, r0, sl
 800451e:	2240      	movs	r2, #64	@ 0x40
 8004520:	4082      	lsls	r2, r0
 8004522:	4313      	orrs	r3, r2
 8004524:	3401      	adds	r4, #1
 8004526:	9304      	str	r3, [sp, #16]
 8004528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452c:	4824      	ldr	r0, [pc, #144]	@ (80045c0 <_svfiprintf_r+0x1e8>)
 800452e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004532:	2206      	movs	r2, #6
 8004534:	f7fb fe8c 	bl	8000250 <memchr>
 8004538:	2800      	cmp	r0, #0
 800453a:	d036      	beq.n	80045aa <_svfiprintf_r+0x1d2>
 800453c:	4b21      	ldr	r3, [pc, #132]	@ (80045c4 <_svfiprintf_r+0x1ec>)
 800453e:	bb1b      	cbnz	r3, 8004588 <_svfiprintf_r+0x1b0>
 8004540:	9b03      	ldr	r3, [sp, #12]
 8004542:	3307      	adds	r3, #7
 8004544:	f023 0307 	bic.w	r3, r3, #7
 8004548:	3308      	adds	r3, #8
 800454a:	9303      	str	r3, [sp, #12]
 800454c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800454e:	4433      	add	r3, r6
 8004550:	9309      	str	r3, [sp, #36]	@ 0x24
 8004552:	e76a      	b.n	800442a <_svfiprintf_r+0x52>
 8004554:	fb0c 3202 	mla	r2, ip, r2, r3
 8004558:	460c      	mov	r4, r1
 800455a:	2001      	movs	r0, #1
 800455c:	e7a8      	b.n	80044b0 <_svfiprintf_r+0xd8>
 800455e:	2300      	movs	r3, #0
 8004560:	3401      	adds	r4, #1
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	4619      	mov	r1, r3
 8004566:	f04f 0c0a 	mov.w	ip, #10
 800456a:	4620      	mov	r0, r4
 800456c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004570:	3a30      	subs	r2, #48	@ 0x30
 8004572:	2a09      	cmp	r2, #9
 8004574:	d903      	bls.n	800457e <_svfiprintf_r+0x1a6>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0c6      	beq.n	8004508 <_svfiprintf_r+0x130>
 800457a:	9105      	str	r1, [sp, #20]
 800457c:	e7c4      	b.n	8004508 <_svfiprintf_r+0x130>
 800457e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004582:	4604      	mov	r4, r0
 8004584:	2301      	movs	r3, #1
 8004586:	e7f0      	b.n	800456a <_svfiprintf_r+0x192>
 8004588:	ab03      	add	r3, sp, #12
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	462a      	mov	r2, r5
 800458e:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <_svfiprintf_r+0x1f0>)
 8004590:	a904      	add	r1, sp, #16
 8004592:	4638      	mov	r0, r7
 8004594:	f3af 8000 	nop.w
 8004598:	1c42      	adds	r2, r0, #1
 800459a:	4606      	mov	r6, r0
 800459c:	d1d6      	bne.n	800454c <_svfiprintf_r+0x174>
 800459e:	89ab      	ldrh	r3, [r5, #12]
 80045a0:	065b      	lsls	r3, r3, #25
 80045a2:	f53f af2d 	bmi.w	8004400 <_svfiprintf_r+0x28>
 80045a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045a8:	e72c      	b.n	8004404 <_svfiprintf_r+0x2c>
 80045aa:	ab03      	add	r3, sp, #12
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	462a      	mov	r2, r5
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <_svfiprintf_r+0x1f0>)
 80045b2:	a904      	add	r1, sp, #16
 80045b4:	4638      	mov	r0, r7
 80045b6:	f000 f879 	bl	80046ac <_printf_i>
 80045ba:	e7ed      	b.n	8004598 <_svfiprintf_r+0x1c0>
 80045bc:	08004a38 	.word	0x08004a38
 80045c0:	08004a42 	.word	0x08004a42
 80045c4:	00000000 	.word	0x00000000
 80045c8:	08004321 	.word	0x08004321
 80045cc:	08004a3e 	.word	0x08004a3e

080045d0 <_printf_common>:
 80045d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d4:	4616      	mov	r6, r2
 80045d6:	4698      	mov	r8, r3
 80045d8:	688a      	ldr	r2, [r1, #8]
 80045da:	690b      	ldr	r3, [r1, #16]
 80045dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bfb8      	it	lt
 80045e4:	4613      	movlt	r3, r2
 80045e6:	6033      	str	r3, [r6, #0]
 80045e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045ec:	4607      	mov	r7, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	b10a      	cbz	r2, 80045f6 <_printf_common+0x26>
 80045f2:	3301      	adds	r3, #1
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	0699      	lsls	r1, r3, #26
 80045fa:	bf42      	ittt	mi
 80045fc:	6833      	ldrmi	r3, [r6, #0]
 80045fe:	3302      	addmi	r3, #2
 8004600:	6033      	strmi	r3, [r6, #0]
 8004602:	6825      	ldr	r5, [r4, #0]
 8004604:	f015 0506 	ands.w	r5, r5, #6
 8004608:	d106      	bne.n	8004618 <_printf_common+0x48>
 800460a:	f104 0a19 	add.w	sl, r4, #25
 800460e:	68e3      	ldr	r3, [r4, #12]
 8004610:	6832      	ldr	r2, [r6, #0]
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	42ab      	cmp	r3, r5
 8004616:	dc26      	bgt.n	8004666 <_printf_common+0x96>
 8004618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	3b00      	subs	r3, #0
 8004620:	bf18      	it	ne
 8004622:	2301      	movne	r3, #1
 8004624:	0692      	lsls	r2, r2, #26
 8004626:	d42b      	bmi.n	8004680 <_printf_common+0xb0>
 8004628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800462c:	4641      	mov	r1, r8
 800462e:	4638      	mov	r0, r7
 8004630:	47c8      	blx	r9
 8004632:	3001      	adds	r0, #1
 8004634:	d01e      	beq.n	8004674 <_printf_common+0xa4>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	6922      	ldr	r2, [r4, #16]
 800463a:	f003 0306 	and.w	r3, r3, #6
 800463e:	2b04      	cmp	r3, #4
 8004640:	bf02      	ittt	eq
 8004642:	68e5      	ldreq	r5, [r4, #12]
 8004644:	6833      	ldreq	r3, [r6, #0]
 8004646:	1aed      	subeq	r5, r5, r3
 8004648:	68a3      	ldr	r3, [r4, #8]
 800464a:	bf0c      	ite	eq
 800464c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004650:	2500      	movne	r5, #0
 8004652:	4293      	cmp	r3, r2
 8004654:	bfc4      	itt	gt
 8004656:	1a9b      	subgt	r3, r3, r2
 8004658:	18ed      	addgt	r5, r5, r3
 800465a:	2600      	movs	r6, #0
 800465c:	341a      	adds	r4, #26
 800465e:	42b5      	cmp	r5, r6
 8004660:	d11a      	bne.n	8004698 <_printf_common+0xc8>
 8004662:	2000      	movs	r0, #0
 8004664:	e008      	b.n	8004678 <_printf_common+0xa8>
 8004666:	2301      	movs	r3, #1
 8004668:	4652      	mov	r2, sl
 800466a:	4641      	mov	r1, r8
 800466c:	4638      	mov	r0, r7
 800466e:	47c8      	blx	r9
 8004670:	3001      	adds	r0, #1
 8004672:	d103      	bne.n	800467c <_printf_common+0xac>
 8004674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467c:	3501      	adds	r5, #1
 800467e:	e7c6      	b.n	800460e <_printf_common+0x3e>
 8004680:	18e1      	adds	r1, r4, r3
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	2030      	movs	r0, #48	@ 0x30
 8004686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800468a:	4422      	add	r2, r4
 800468c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004694:	3302      	adds	r3, #2
 8004696:	e7c7      	b.n	8004628 <_printf_common+0x58>
 8004698:	2301      	movs	r3, #1
 800469a:	4622      	mov	r2, r4
 800469c:	4641      	mov	r1, r8
 800469e:	4638      	mov	r0, r7
 80046a0:	47c8      	blx	r9
 80046a2:	3001      	adds	r0, #1
 80046a4:	d0e6      	beq.n	8004674 <_printf_common+0xa4>
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7d9      	b.n	800465e <_printf_common+0x8e>
	...

080046ac <_printf_i>:
 80046ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	7e0f      	ldrb	r7, [r1, #24]
 80046b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046b4:	2f78      	cmp	r7, #120	@ 0x78
 80046b6:	4691      	mov	r9, r2
 80046b8:	4680      	mov	r8, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	469a      	mov	sl, r3
 80046be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046c2:	d807      	bhi.n	80046d4 <_printf_i+0x28>
 80046c4:	2f62      	cmp	r7, #98	@ 0x62
 80046c6:	d80a      	bhi.n	80046de <_printf_i+0x32>
 80046c8:	2f00      	cmp	r7, #0
 80046ca:	f000 80d1 	beq.w	8004870 <_printf_i+0x1c4>
 80046ce:	2f58      	cmp	r7, #88	@ 0x58
 80046d0:	f000 80b8 	beq.w	8004844 <_printf_i+0x198>
 80046d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046dc:	e03a      	b.n	8004754 <_printf_i+0xa8>
 80046de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046e2:	2b15      	cmp	r3, #21
 80046e4:	d8f6      	bhi.n	80046d4 <_printf_i+0x28>
 80046e6:	a101      	add	r1, pc, #4	@ (adr r1, 80046ec <_printf_i+0x40>)
 80046e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046ec:	08004745 	.word	0x08004745
 80046f0:	08004759 	.word	0x08004759
 80046f4:	080046d5 	.word	0x080046d5
 80046f8:	080046d5 	.word	0x080046d5
 80046fc:	080046d5 	.word	0x080046d5
 8004700:	080046d5 	.word	0x080046d5
 8004704:	08004759 	.word	0x08004759
 8004708:	080046d5 	.word	0x080046d5
 800470c:	080046d5 	.word	0x080046d5
 8004710:	080046d5 	.word	0x080046d5
 8004714:	080046d5 	.word	0x080046d5
 8004718:	08004857 	.word	0x08004857
 800471c:	08004783 	.word	0x08004783
 8004720:	08004811 	.word	0x08004811
 8004724:	080046d5 	.word	0x080046d5
 8004728:	080046d5 	.word	0x080046d5
 800472c:	08004879 	.word	0x08004879
 8004730:	080046d5 	.word	0x080046d5
 8004734:	08004783 	.word	0x08004783
 8004738:	080046d5 	.word	0x080046d5
 800473c:	080046d5 	.word	0x080046d5
 8004740:	08004819 	.word	0x08004819
 8004744:	6833      	ldr	r3, [r6, #0]
 8004746:	1d1a      	adds	r2, r3, #4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6032      	str	r2, [r6, #0]
 800474c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004754:	2301      	movs	r3, #1
 8004756:	e09c      	b.n	8004892 <_printf_i+0x1e6>
 8004758:	6833      	ldr	r3, [r6, #0]
 800475a:	6820      	ldr	r0, [r4, #0]
 800475c:	1d19      	adds	r1, r3, #4
 800475e:	6031      	str	r1, [r6, #0]
 8004760:	0606      	lsls	r6, r0, #24
 8004762:	d501      	bpl.n	8004768 <_printf_i+0xbc>
 8004764:	681d      	ldr	r5, [r3, #0]
 8004766:	e003      	b.n	8004770 <_printf_i+0xc4>
 8004768:	0645      	lsls	r5, r0, #25
 800476a:	d5fb      	bpl.n	8004764 <_printf_i+0xb8>
 800476c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004770:	2d00      	cmp	r5, #0
 8004772:	da03      	bge.n	800477c <_printf_i+0xd0>
 8004774:	232d      	movs	r3, #45	@ 0x2d
 8004776:	426d      	negs	r5, r5
 8004778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800477c:	4858      	ldr	r0, [pc, #352]	@ (80048e0 <_printf_i+0x234>)
 800477e:	230a      	movs	r3, #10
 8004780:	e011      	b.n	80047a6 <_printf_i+0xfa>
 8004782:	6821      	ldr	r1, [r4, #0]
 8004784:	6833      	ldr	r3, [r6, #0]
 8004786:	0608      	lsls	r0, r1, #24
 8004788:	f853 5b04 	ldr.w	r5, [r3], #4
 800478c:	d402      	bmi.n	8004794 <_printf_i+0xe8>
 800478e:	0649      	lsls	r1, r1, #25
 8004790:	bf48      	it	mi
 8004792:	b2ad      	uxthmi	r5, r5
 8004794:	2f6f      	cmp	r7, #111	@ 0x6f
 8004796:	4852      	ldr	r0, [pc, #328]	@ (80048e0 <_printf_i+0x234>)
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	bf14      	ite	ne
 800479c:	230a      	movne	r3, #10
 800479e:	2308      	moveq	r3, #8
 80047a0:	2100      	movs	r1, #0
 80047a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047a6:	6866      	ldr	r6, [r4, #4]
 80047a8:	60a6      	str	r6, [r4, #8]
 80047aa:	2e00      	cmp	r6, #0
 80047ac:	db05      	blt.n	80047ba <_printf_i+0x10e>
 80047ae:	6821      	ldr	r1, [r4, #0]
 80047b0:	432e      	orrs	r6, r5
 80047b2:	f021 0104 	bic.w	r1, r1, #4
 80047b6:	6021      	str	r1, [r4, #0]
 80047b8:	d04b      	beq.n	8004852 <_printf_i+0x1a6>
 80047ba:	4616      	mov	r6, r2
 80047bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80047c0:	fb03 5711 	mls	r7, r3, r1, r5
 80047c4:	5dc7      	ldrb	r7, [r0, r7]
 80047c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047ca:	462f      	mov	r7, r5
 80047cc:	42bb      	cmp	r3, r7
 80047ce:	460d      	mov	r5, r1
 80047d0:	d9f4      	bls.n	80047bc <_printf_i+0x110>
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d10b      	bne.n	80047ee <_printf_i+0x142>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	07df      	lsls	r7, r3, #31
 80047da:	d508      	bpl.n	80047ee <_printf_i+0x142>
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	6861      	ldr	r1, [r4, #4]
 80047e0:	4299      	cmp	r1, r3
 80047e2:	bfde      	ittt	le
 80047e4:	2330      	movle	r3, #48	@ 0x30
 80047e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80047ee:	1b92      	subs	r2, r2, r6
 80047f0:	6122      	str	r2, [r4, #16]
 80047f2:	f8cd a000 	str.w	sl, [sp]
 80047f6:	464b      	mov	r3, r9
 80047f8:	aa03      	add	r2, sp, #12
 80047fa:	4621      	mov	r1, r4
 80047fc:	4640      	mov	r0, r8
 80047fe:	f7ff fee7 	bl	80045d0 <_printf_common>
 8004802:	3001      	adds	r0, #1
 8004804:	d14a      	bne.n	800489c <_printf_i+0x1f0>
 8004806:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800480a:	b004      	add	sp, #16
 800480c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	f043 0320 	orr.w	r3, r3, #32
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	4832      	ldr	r0, [pc, #200]	@ (80048e4 <_printf_i+0x238>)
 800481a:	2778      	movs	r7, #120	@ 0x78
 800481c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	6831      	ldr	r1, [r6, #0]
 8004824:	061f      	lsls	r7, r3, #24
 8004826:	f851 5b04 	ldr.w	r5, [r1], #4
 800482a:	d402      	bmi.n	8004832 <_printf_i+0x186>
 800482c:	065f      	lsls	r7, r3, #25
 800482e:	bf48      	it	mi
 8004830:	b2ad      	uxthmi	r5, r5
 8004832:	6031      	str	r1, [r6, #0]
 8004834:	07d9      	lsls	r1, r3, #31
 8004836:	bf44      	itt	mi
 8004838:	f043 0320 	orrmi.w	r3, r3, #32
 800483c:	6023      	strmi	r3, [r4, #0]
 800483e:	b11d      	cbz	r5, 8004848 <_printf_i+0x19c>
 8004840:	2310      	movs	r3, #16
 8004842:	e7ad      	b.n	80047a0 <_printf_i+0xf4>
 8004844:	4826      	ldr	r0, [pc, #152]	@ (80048e0 <_printf_i+0x234>)
 8004846:	e7e9      	b.n	800481c <_printf_i+0x170>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	f023 0320 	bic.w	r3, r3, #32
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	e7f6      	b.n	8004840 <_printf_i+0x194>
 8004852:	4616      	mov	r6, r2
 8004854:	e7bd      	b.n	80047d2 <_printf_i+0x126>
 8004856:	6833      	ldr	r3, [r6, #0]
 8004858:	6825      	ldr	r5, [r4, #0]
 800485a:	6961      	ldr	r1, [r4, #20]
 800485c:	1d18      	adds	r0, r3, #4
 800485e:	6030      	str	r0, [r6, #0]
 8004860:	062e      	lsls	r6, r5, #24
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	d501      	bpl.n	800486a <_printf_i+0x1be>
 8004866:	6019      	str	r1, [r3, #0]
 8004868:	e002      	b.n	8004870 <_printf_i+0x1c4>
 800486a:	0668      	lsls	r0, r5, #25
 800486c:	d5fb      	bpl.n	8004866 <_printf_i+0x1ba>
 800486e:	8019      	strh	r1, [r3, #0]
 8004870:	2300      	movs	r3, #0
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	4616      	mov	r6, r2
 8004876:	e7bc      	b.n	80047f2 <_printf_i+0x146>
 8004878:	6833      	ldr	r3, [r6, #0]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	6032      	str	r2, [r6, #0]
 800487e:	681e      	ldr	r6, [r3, #0]
 8004880:	6862      	ldr	r2, [r4, #4]
 8004882:	2100      	movs	r1, #0
 8004884:	4630      	mov	r0, r6
 8004886:	f7fb fce3 	bl	8000250 <memchr>
 800488a:	b108      	cbz	r0, 8004890 <_printf_i+0x1e4>
 800488c:	1b80      	subs	r0, r0, r6
 800488e:	6060      	str	r0, [r4, #4]
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	2300      	movs	r3, #0
 8004896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800489a:	e7aa      	b.n	80047f2 <_printf_i+0x146>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	4632      	mov	r2, r6
 80048a0:	4649      	mov	r1, r9
 80048a2:	4640      	mov	r0, r8
 80048a4:	47d0      	blx	sl
 80048a6:	3001      	adds	r0, #1
 80048a8:	d0ad      	beq.n	8004806 <_printf_i+0x15a>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	079b      	lsls	r3, r3, #30
 80048ae:	d413      	bmi.n	80048d8 <_printf_i+0x22c>
 80048b0:	68e0      	ldr	r0, [r4, #12]
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	4298      	cmp	r0, r3
 80048b6:	bfb8      	it	lt
 80048b8:	4618      	movlt	r0, r3
 80048ba:	e7a6      	b.n	800480a <_printf_i+0x15e>
 80048bc:	2301      	movs	r3, #1
 80048be:	4632      	mov	r2, r6
 80048c0:	4649      	mov	r1, r9
 80048c2:	4640      	mov	r0, r8
 80048c4:	47d0      	blx	sl
 80048c6:	3001      	adds	r0, #1
 80048c8:	d09d      	beq.n	8004806 <_printf_i+0x15a>
 80048ca:	3501      	adds	r5, #1
 80048cc:	68e3      	ldr	r3, [r4, #12]
 80048ce:	9903      	ldr	r1, [sp, #12]
 80048d0:	1a5b      	subs	r3, r3, r1
 80048d2:	42ab      	cmp	r3, r5
 80048d4:	dcf2      	bgt.n	80048bc <_printf_i+0x210>
 80048d6:	e7eb      	b.n	80048b0 <_printf_i+0x204>
 80048d8:	2500      	movs	r5, #0
 80048da:	f104 0619 	add.w	r6, r4, #25
 80048de:	e7f5      	b.n	80048cc <_printf_i+0x220>
 80048e0:	08004a49 	.word	0x08004a49
 80048e4:	08004a5a 	.word	0x08004a5a

080048e8 <memmove>:
 80048e8:	4288      	cmp	r0, r1
 80048ea:	b510      	push	{r4, lr}
 80048ec:	eb01 0402 	add.w	r4, r1, r2
 80048f0:	d902      	bls.n	80048f8 <memmove+0x10>
 80048f2:	4284      	cmp	r4, r0
 80048f4:	4623      	mov	r3, r4
 80048f6:	d807      	bhi.n	8004908 <memmove+0x20>
 80048f8:	1e43      	subs	r3, r0, #1
 80048fa:	42a1      	cmp	r1, r4
 80048fc:	d008      	beq.n	8004910 <memmove+0x28>
 80048fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004906:	e7f8      	b.n	80048fa <memmove+0x12>
 8004908:	4402      	add	r2, r0
 800490a:	4601      	mov	r1, r0
 800490c:	428a      	cmp	r2, r1
 800490e:	d100      	bne.n	8004912 <memmove+0x2a>
 8004910:	bd10      	pop	{r4, pc}
 8004912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800491a:	e7f7      	b.n	800490c <memmove+0x24>

0800491c <_sbrk_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4d06      	ldr	r5, [pc, #24]	@ (8004938 <_sbrk_r+0x1c>)
 8004920:	2300      	movs	r3, #0
 8004922:	4604      	mov	r4, r0
 8004924:	4608      	mov	r0, r1
 8004926:	602b      	str	r3, [r5, #0]
 8004928:	f7fc f9c0 	bl	8000cac <_sbrk>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_sbrk_r+0x1a>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_sbrk_r+0x1a>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	20000310 	.word	0x20000310

0800493c <memcpy>:
 800493c:	440a      	add	r2, r1
 800493e:	4291      	cmp	r1, r2
 8004940:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004944:	d100      	bne.n	8004948 <memcpy+0xc>
 8004946:	4770      	bx	lr
 8004948:	b510      	push	{r4, lr}
 800494a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800494e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004952:	4291      	cmp	r1, r2
 8004954:	d1f9      	bne.n	800494a <memcpy+0xe>
 8004956:	bd10      	pop	{r4, pc}

08004958 <_realloc_r>:
 8004958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495c:	4607      	mov	r7, r0
 800495e:	4614      	mov	r4, r2
 8004960:	460d      	mov	r5, r1
 8004962:	b921      	cbnz	r1, 800496e <_realloc_r+0x16>
 8004964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004968:	4611      	mov	r1, r2
 800496a:	f7ff bc4d 	b.w	8004208 <_malloc_r>
 800496e:	b92a      	cbnz	r2, 800497c <_realloc_r+0x24>
 8004970:	f7ff fbde 	bl	8004130 <_free_r>
 8004974:	4625      	mov	r5, r4
 8004976:	4628      	mov	r0, r5
 8004978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497c:	f000 f81a 	bl	80049b4 <_malloc_usable_size_r>
 8004980:	4284      	cmp	r4, r0
 8004982:	4606      	mov	r6, r0
 8004984:	d802      	bhi.n	800498c <_realloc_r+0x34>
 8004986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800498a:	d8f4      	bhi.n	8004976 <_realloc_r+0x1e>
 800498c:	4621      	mov	r1, r4
 800498e:	4638      	mov	r0, r7
 8004990:	f7ff fc3a 	bl	8004208 <_malloc_r>
 8004994:	4680      	mov	r8, r0
 8004996:	b908      	cbnz	r0, 800499c <_realloc_r+0x44>
 8004998:	4645      	mov	r5, r8
 800499a:	e7ec      	b.n	8004976 <_realloc_r+0x1e>
 800499c:	42b4      	cmp	r4, r6
 800499e:	4622      	mov	r2, r4
 80049a0:	4629      	mov	r1, r5
 80049a2:	bf28      	it	cs
 80049a4:	4632      	movcs	r2, r6
 80049a6:	f7ff ffc9 	bl	800493c <memcpy>
 80049aa:	4629      	mov	r1, r5
 80049ac:	4638      	mov	r0, r7
 80049ae:	f7ff fbbf 	bl	8004130 <_free_r>
 80049b2:	e7f1      	b.n	8004998 <_realloc_r+0x40>

080049b4 <_malloc_usable_size_r>:
 80049b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b8:	1f18      	subs	r0, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bfbc      	itt	lt
 80049be:	580b      	ldrlt	r3, [r1, r0]
 80049c0:	18c0      	addlt	r0, r0, r3
 80049c2:	4770      	bx	lr

080049c4 <_init>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr

080049d0 <_fini>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr
