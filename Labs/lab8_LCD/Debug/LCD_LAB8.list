
LCD_LAB8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9dc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004b63c  0800abe0  0800abe0  0000bbe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805621c  0805621c  0005832c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0805621c  0805621c  0005721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08056224  08056224  0005832c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08056224  08056224  00057224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08056228  08056228  00057228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0805622c  00058000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001ec  08056418  000581ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000028c  080564b8  0005828c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000918  2000032c  08056558  0005832c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000c44  08056558  00058c44  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0005832c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fd58  00000000  00000000  0005835a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000466f  00000000  00000000  000780b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a70  00000000  00000000  0007c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001490  00000000  00000000  0007e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d0e9  00000000  00000000  0007f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000210d9  00000000  00000000  000ac711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a808  00000000  00000000  000cd7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d7ff2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007ea4  00000000  00000000  001d8038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  001dfedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000032c 	.word	0x2000032c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800abc4 	.word	0x0800abc4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000330 	.word	0x20000330
 800023c:	0800abc4 	.word	0x0800abc4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	@ 0x2c
 8000620:	af00      	add	r7, sp, #0
 8000622:	4604      	mov	r4, r0
 8000624:	4608      	mov	r0, r1
 8000626:	4611      	mov	r1, r2
 8000628:	461a      	mov	r2, r3
 800062a:	4623      	mov	r3, r4
 800062c:	80fb      	strh	r3, [r7, #6]
 800062e:	4603      	mov	r3, r0
 8000630:	80bb      	strh	r3, [r7, #4]
 8000632:	460b      	mov	r3, r1
 8000634:	807b      	strh	r3, [r7, #2]
 8000636:	4613      	mov	r3, r2
 8000638:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	f1c3 0301 	rsb	r3, r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000654:	e061      	b.n	800071a <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000656:	88fa      	ldrh	r2, [r7, #6]
 8000658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	e018      	b.n	8000692 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	b298      	uxth	r0, r3
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	b29a      	uxth	r2, r3
 8000668:	88bb      	ldrh	r3, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	b29b      	uxth	r3, r3
 800066e:	883a      	ldrh	r2, [r7, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f000 fe33 	bl	80012dc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	b298      	uxth	r0, r3
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	b29b      	uxth	r3, r3
 800067e:	88ba      	ldrh	r2, [r7, #4]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	b29b      	uxth	r3, r3
 8000684:	883a      	ldrh	r2, [r7, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	f000 fe28 	bl	80012dc <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	3301      	adds	r3, #1
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	88fa      	ldrh	r2, [r7, #6]
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	4413      	add	r3, r2
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	429a      	cmp	r2, r3
 800069c:	dde0      	ble.n	8000660 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800069e:	88fa      	ldrh	r2, [r7, #6]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	e018      	b.n	80006da <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	b298      	uxth	r0, r3
 80006ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	883a      	ldrh	r2, [r7, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f000 fe0f 	bl	80012dc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	b298      	uxth	r0, r3
 80006c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	883a      	ldrh	r2, [r7, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	f000 fe04 	bl	80012dc <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	88fa      	ldrh	r2, [r7, #6]
 80006dc:	6a3b      	ldr	r3, [r7, #32]
 80006de:	4413      	add	r3, r2
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dde0      	ble.n	80006a8 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	3301      	adds	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	4413      	add	r3, r2
 80006f2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	3302      	adds	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	005a      	lsls	r2, r3, #1
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	4413      	add	r3, r2
 8000702:	2b00      	cmp	r3, #0
 8000704:	dd09      	ble.n	800071a <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	3b01      	subs	r3, #1
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
            radiusError += xChange;
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	4413      	add	r3, r2
 8000712:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	3302      	adds	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800071a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800071c:	6a3b      	ldr	r3, [r7, #32]
 800071e:	429a      	cmp	r2, r3
 8000720:	da99      	bge.n	8000656 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	372c      	adds	r7, #44	@ 0x2c
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b089      	sub	sp, #36	@ 0x24
 8000730:	af02      	add	r7, sp, #8
 8000732:	4604      	mov	r4, r0
 8000734:	4608      	mov	r0, r1
 8000736:	4611      	mov	r1, r2
 8000738:	461a      	mov	r2, r3
 800073a:	4623      	mov	r3, r4
 800073c:	80fb      	strh	r3, [r7, #6]
 800073e:	4603      	mov	r3, r0
 8000740:	80bb      	strh	r3, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	807b      	strh	r3, [r7, #2]
 8000746:	4613      	mov	r3, r2
 8000748:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8000766:	887a      	ldrh	r2, [r7, #2]
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da01      	bge.n	8000778 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8000774:	2301      	movs	r3, #1
 8000776:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 800077c:	883a      	ldrh	r2, [r7, #0]
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 800078a:	2301      	movs	r3, #1
 800078c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d106      	bne.n	80007a2 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8000794:	887a      	ldrh	r2, [r7, #2]
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	823b      	strh	r3, [r7, #16]
 80007a0:	e005      	b.n	80007ae <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80007a2:	88fa      	ldrh	r2, [r7, #6]
 80007a4:	887b      	ldrh	r3, [r7, #2]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80007ae:	7cbb      	ldrb	r3, [r7, #18]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d106      	bne.n	80007c2 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80007b4:	883a      	ldrh	r2, [r7, #0]
 80007b6:	88bb      	ldrh	r3, [r7, #4]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80007bc:	88bb      	ldrh	r3, [r7, #4]
 80007be:	81fb      	strh	r3, [r7, #14]
 80007c0:	e005      	b.n	80007ce <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80007c2:	88ba      	ldrh	r2, [r7, #4]
 80007c4:	883b      	ldrh	r3, [r7, #0]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80007ca:	883b      	ldrh	r3, [r7, #0]
 80007cc:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80007ce:	8abc      	ldrh	r4, [r7, #20]
 80007d0:	8afa      	ldrh	r2, [r7, #22]
 80007d2:	89f9      	ldrh	r1, [r7, #14]
 80007d4:	8a38      	ldrh	r0, [r7, #16]
 80007d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	4623      	mov	r3, r4
 80007dc:	f000 fe58 	bl	8001490 <ILI9341_Draw_Rectangle>
}
 80007e0:	bf00      	nop
 80007e2:	371c      	adds	r7, #28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd90      	pop	{r4, r7, pc}

080007e8 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b089      	sub	sp, #36	@ 0x24
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	4604      	mov	r4, r0
 80007f0:	4608      	mov	r0, r1
 80007f2:	4611      	mov	r1, r2
 80007f4:	461a      	mov	r2, r3
 80007f6:	4623      	mov	r3, r4
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	4603      	mov	r3, r0
 80007fc:	71bb      	strb	r3, [r7, #6]
 80007fe:	460b      	mov	r3, r1
 8000800:	717b      	strb	r3, [r7, #5]
 8000802:	4613      	mov	r3, r2
 8000804:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800080a:	7dfb      	ldrb	r3, [r7, #23]
 800080c:	2b1f      	cmp	r3, #31
 800080e:	d802      	bhi.n	8000816 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	e002      	b.n	800081c <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000816:	7dfb      	ldrb	r3, [r7, #23]
 8000818:	3b20      	subs	r3, #32
 800081a:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800081c:	2300      	movs	r3, #0
 800081e:	753b      	strb	r3, [r7, #20]
 8000820:	e012      	b.n	8000848 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000822:	7dfa      	ldrb	r2, [r7, #23]
 8000824:	7d38      	ldrb	r0, [r7, #20]
 8000826:	7d39      	ldrb	r1, [r7, #20]
 8000828:	4c3b      	ldr	r4, [pc, #236]	@ (8000918 <ILI9341_Draw_Char+0x130>)
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4423      	add	r3, r4
 8000834:	4403      	add	r3, r0
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	f101 0318 	add.w	r3, r1, #24
 800083c:	443b      	add	r3, r7
 800083e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000842:	7d3b      	ldrb	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	753b      	strb	r3, [r7, #20]
 8000848:	7d3b      	ldrb	r3, [r7, #20]
 800084a:	2b05      	cmp	r3, #5
 800084c:	d9e9      	bls.n	8000822 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	b298      	uxth	r0, r3
 8000852:	797b      	ldrb	r3, [r7, #5]
 8000854:	b299      	uxth	r1, r3
 8000856:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000858:	461a      	mov	r2, r3
 800085a:	0052      	lsls	r2, r2, #1
 800085c:	4413      	add	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	b29a      	uxth	r2, r3
 8000862:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	b29c      	uxth	r4, r3
 8000868:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	4623      	mov	r3, r4
 800086e:	f000 fe0f 	bl	8001490 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000872:	2300      	movs	r3, #0
 8000874:	757b      	strb	r3, [r7, #21]
 8000876:	e047      	b.n	8000908 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000878:	2300      	movs	r3, #0
 800087a:	75bb      	strb	r3, [r7, #22]
 800087c:	e03e      	b.n	80008fc <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800087e:	7d7b      	ldrb	r3, [r7, #21]
 8000880:	3318      	adds	r3, #24
 8000882:	443b      	add	r3, r7
 8000884:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000888:	461a      	mov	r2, r3
 800088a:	7dbb      	ldrb	r3, [r7, #22]
 800088c:	fa42 f303 	asr.w	r3, r2, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	2b00      	cmp	r3, #0
 8000896:	d02e      	beq.n	80008f6 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000898:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800089a:	2b01      	cmp	r3, #1
 800089c:	d110      	bne.n	80008c0 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800089e:	79bb      	ldrb	r3, [r7, #6]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	7d7b      	ldrb	r3, [r7, #21]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4413      	add	r3, r2
 80008a8:	b298      	uxth	r0, r3
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	7dbb      	ldrb	r3, [r7, #22]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4413      	add	r3, r2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	887a      	ldrh	r2, [r7, #2]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f000 fd0f 	bl	80012dc <ILI9341_Draw_Pixel>
 80008be:	e01a      	b.n	80008f6 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	7d7b      	ldrb	r3, [r7, #21]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80008ca:	fb11 f303 	smulbb	r3, r1, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4413      	add	r3, r2
 80008d2:	b298      	uxth	r0, r3
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	7dbb      	ldrb	r3, [r7, #22]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80008de:	fb11 f303 	smulbb	r3, r1, r3
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	b299      	uxth	r1, r3
 80008e8:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 80008ea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80008ec:	887b      	ldrh	r3, [r7, #2]
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4623      	mov	r3, r4
 80008f2:	f000 fdcd 	bl	8001490 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80008f6:	7dbb      	ldrb	r3, [r7, #22]
 80008f8:	3301      	adds	r3, #1
 80008fa:	75bb      	strb	r3, [r7, #22]
 80008fc:	7dbb      	ldrb	r3, [r7, #22]
 80008fe:	2b07      	cmp	r3, #7
 8000900:	d9bd      	bls.n	800087e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000902:	7d7b      	ldrb	r3, [r7, #21]
 8000904:	3301      	adds	r3, #1
 8000906:	757b      	strb	r3, [r7, #21]
 8000908:	7d7b      	ldrb	r3, [r7, #21]
 800090a:	2b05      	cmp	r3, #5
 800090c:	d9b4      	bls.n	8000878 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	371c      	adds	r7, #28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	0800ac4c 	.word	0x0800ac4c

0800091c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b085      	sub	sp, #20
 8000920:	af02      	add	r7, sp, #8
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	4608      	mov	r0, r1
 8000926:	4611      	mov	r1, r2
 8000928:	461a      	mov	r2, r3
 800092a:	4603      	mov	r3, r0
 800092c:	70fb      	strb	r3, [r7, #3]
 800092e:	460b      	mov	r3, r1
 8000930:	70bb      	strb	r3, [r7, #2]
 8000932:	4613      	mov	r3, r2
 8000934:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000936:	e017      	b.n	8000968 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	7818      	ldrb	r0, [r3, #0]
 8000940:	883c      	ldrh	r4, [r7, #0]
 8000942:	78ba      	ldrb	r2, [r7, #2]
 8000944:	78f9      	ldrb	r1, [r7, #3]
 8000946:	8bbb      	ldrh	r3, [r7, #28]
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	8b3b      	ldrh	r3, [r7, #24]
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4623      	mov	r3, r4
 8000950:	f7ff ff4a 	bl	80007e8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000954:	8b3b      	ldrh	r3, [r7, #24]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	0052      	lsls	r2, r2, #1
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	4413      	add	r3, r2
 8000966:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1e3      	bne.n	8000938 <ILI9341_Draw_Text+0x1c>
    }
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bd90      	pop	{r4, r7, pc}
	...

0800097c <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8000982:	af00      	add	r7, sp, #0
 8000984:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000988:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800098c:	6018      	str	r0, [r3, #0]
 800098e:	460a      	mov	r2, r1
 8000990:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000994:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8000998:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 800099a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800099e:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d15e      	bne.n	8000a66 <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 fa67 	bl	8000e7c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 80009ae:	23f0      	movs	r3, #240	@ 0xf0
 80009b0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009b4:	2100      	movs	r1, #0
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f9f6 	bl	8000da8 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c2:	48c4      	ldr	r0, [pc, #784]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 80009c4:	f003 fb0c 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ce:	48c1      	ldr	r0, [pc, #772]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 80009d0:	f003 fb06 	bl	8003fe0 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 80009e0:	e035      	b.n	8000a4e <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80009e8:	e019      	b.n	8000a1e <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80009ea:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80009ee:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80009f2:	4413      	add	r3, r2
 80009f4:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80009f8:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 80009fc:	6812      	ldr	r2, [r2, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	7819      	ldrb	r1, [r3, #0]
 8000a02:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a06:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 8000a0a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000a0e:	4413      	add	r3, r2
 8000a10:	460a      	mov	r2, r1
 8000a12:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000a14:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000a18:	3301      	adds	r3, #1
 8000a1a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000a1e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000a22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a26:	d3e0      	bcc.n	80009ea <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8000a28:	f107 010c 	add.w	r1, r7, #12
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a32:	48a9      	ldr	r0, [pc, #676]	@ (8000cd8 <ILI9341_Draw_Image+0x35c>)
 8000a34:	f005 fbbb 	bl	80061ae <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000a38:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000a3c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000a40:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000a44:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8000a48:	3301      	adds	r3, #1
 8000a4a:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8000a4e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8000a52:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8000a56:	d9c4      	bls.n	80009e2 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a5e:	489d      	ldr	r0, [pc, #628]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000a60:	f003 fabe 	bl	8003fe0 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
	}
}
 8000a64:	e130      	b.n	8000cc8 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8000a66:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a6a:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d15e      	bne.n	8000b32 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 fa01 	bl	8000e7c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000a7a:	23f0      	movs	r3, #240	@ 0xf0
 8000a7c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a80:	2100      	movs	r1, #0
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f990 	bl	8000da8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a8e:	4891      	ldr	r0, [pc, #580]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000a90:	f003 faa6 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a9a:	488e      	ldr	r0, [pc, #568]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000a9c:	f003 faa0 	bl	8003fe0 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000aac:	e035      	b.n	8000b1a <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000ab4:	e019      	b.n	8000aea <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8000ab6:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8000aba:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000abe:	4413      	add	r3, r2
 8000ac0:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000ac4:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8000ac8:	6812      	ldr	r2, [r2, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	7819      	ldrb	r1, [r3, #0]
 8000ace:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000ad2:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 8000ad6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000ada:	4413      	add	r3, r2
 8000adc:	460a      	mov	r2, r1
 8000ade:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000ae0:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000aea:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000aee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000af2:	d3e0      	bcc.n	8000ab6 <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8000af4:	f107 010c 	add.w	r1, r7, #12
 8000af8:	230a      	movs	r3, #10
 8000afa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000afe:	4876      	ldr	r0, [pc, #472]	@ (8000cd8 <ILI9341_Draw_Image+0x35c>)
 8000b00:	f005 fb55 	bl	80061ae <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000b04:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000b08:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000b0c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000b10:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000b14:	3301      	adds	r3, #1
 8000b16:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000b1a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000b1e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8000b22:	d9c4      	bls.n	8000aae <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b2a:	486a      	ldr	r0, [pc, #424]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000b2c:	f003 fa58 	bl	8003fe0 <HAL_GPIO_WritePin>
}
 8000b30:	e0ca      	b.n	8000cc8 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8000b32:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000b36:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d15e      	bne.n	8000bfe <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8000b40:	2002      	movs	r0, #2
 8000b42:	f000 f99b 	bl	8000e7c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000b46:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b4a:	22f0      	movs	r2, #240	@ 0xf0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 f92a 	bl	8000da8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5a:	485e      	ldr	r0, [pc, #376]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000b5c:	f003 fa40 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b66:	485b      	ldr	r0, [pc, #364]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000b68:	f003 fa3a 	bl	8003fe0 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8000b78:	e035      	b.n	8000be6 <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000b80:	e019      	b.n	8000bb6 <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8000b82:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8000b86:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000b8a:	4413      	add	r3, r2
 8000b8c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000b90:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	7819      	ldrb	r1, [r3, #0]
 8000b9a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000b9e:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 8000ba2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ba6:	4413      	add	r3, r2
 8000ba8:	460a      	mov	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000bac:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000bb6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000bba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bbe:	d3e0      	bcc.n	8000b82 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8000bc0:	f107 010c 	add.w	r1, r7, #12
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bca:	4843      	ldr	r0, [pc, #268]	@ (8000cd8 <ILI9341_Draw_Image+0x35c>)
 8000bcc:	f005 faef 	bl	80061ae <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000bd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000bd4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000bd8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000bdc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000be0:	3301      	adds	r3, #1
 8000be2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8000be6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000bea:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8000bee:	d9c4      	bls.n	8000b7a <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bf6:	4837      	ldr	r0, [pc, #220]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000bf8:	f003 f9f2 	bl	8003fe0 <HAL_GPIO_WritePin>
}
 8000bfc:	e064      	b.n	8000cc8 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8000bfe:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000c02:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d15d      	bne.n	8000cc8 <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 f935 	bl	8000e7c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000c12:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c16:	22f0      	movs	r2, #240	@ 0xf0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f8c4 	bl	8000da8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(GPIOC, DC_Pin, GPIO_PIN_SET);	
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c26:	482b      	ldr	r0, [pc, #172]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000c28:	f003 f9da 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c32:	4828      	ldr	r0, [pc, #160]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000c34:	f003 f9d4 	bl	8003fe0 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8000c44:	e035      	b.n	8000cb2 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8000c4c:	e019      	b.n	8000c82 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8000c4e:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8000c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c56:	4413      	add	r3, r2
 8000c58:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000c5c:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	7819      	ldrb	r1, [r3, #0]
 8000c66:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000c6a:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 8000c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c72:	4413      	add	r3, r2
 8000c74:	460a      	mov	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8000c82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c8a:	d3e0      	bcc.n	8000c4e <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(&hspi5, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);	
 8000c8c:	f107 010c 	add.w	r1, r7, #12
 8000c90:	230a      	movs	r3, #10
 8000c92:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c96:	4810      	ldr	r0, [pc, #64]	@ (8000cd8 <ILI9341_Draw_Image+0x35c>)
 8000c98:	f005 fa89 	bl	80061ae <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000c9c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000ca0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000ca4:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000ca8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000cac:	3301      	adds	r3, #1
 8000cae:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8000cb2:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000cb6:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8000cba:	d9c4      	bls.n	8000c46 <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(GPIOC, CS_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <ILI9341_Draw_Image+0x358>)
 8000cc4:	f003 f98c 	bl	8003fe0 <HAL_GPIO_WritePin>
}
 8000cc8:	bf00      	nop
 8000cca:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	200004b0 	.word	0x200004b0

08000cdc <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8000ce0:	f001 ff2a 	bl	8002b38 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000ce4:	f000 fe6c 	bl	80019c0 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cee:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <ILI9341_SPI_Init+0x1c>)
 8000cf0:	f003 f976 	bl	8003fe0 <HAL_GPIO_WritePin>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40020800 	.word	0x40020800

08000cfc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000d06:	1df9      	adds	r1, r7, #7
 8000d08:	2301      	movs	r3, #1
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <ILI9341_SPI_Send+0x20>)
 8000d0e:	f005 fa4e 	bl	80061ae <HAL_SPI_Transmit>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200004b0 	.word	0x200004b0

08000d20 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d30:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <ILI9341_Write_Command+0x40>)
 8000d32:	f003 f955 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d3c:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <ILI9341_Write_Command+0x40>)
 8000d3e:	f003 f94f 	bl	8003fe0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ffd9 	bl	8000cfc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <ILI9341_Write_Command+0x40>)
 8000d52:	f003 f945 	bl	8003fe0 <HAL_GPIO_WritePin>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40020800 	.word	0x40020800

08000d64 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d74:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <ILI9341_Write_Data+0x40>)
 8000d76:	f003 f933 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d80:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <ILI9341_Write_Data+0x40>)
 8000d82:	f003 f92d 	bl	8003fe0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ffb7 	bl	8000cfc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <ILI9341_Write_Data+0x40>)
 8000d96:	f003 f923 	bl	8003fe0 <HAL_GPIO_WritePin>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40020800 	.word	0x40020800

08000da8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	4608      	mov	r0, r1
 8000db2:	4611      	mov	r1, r2
 8000db4:	461a      	mov	r2, r3
 8000db6:	4623      	mov	r3, r4
 8000db8:	80fb      	strh	r3, [r7, #6]
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80bb      	strh	r3, [r7, #4]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	807b      	strh	r3, [r7, #2]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000dc6:	202a      	movs	r0, #42	@ 0x2a
 8000dc8:	f7ff ffaa 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ffc5 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ffc0 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ffb9 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffb4 	bl	8000d64 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000dfc:	202b      	movs	r0, #43	@ 0x2b
 8000dfe:	f7ff ff8f 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ffaa 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffa5 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000e1a:	883b      	ldrh	r3, [r7, #0]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff9e 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000e28:	883b      	ldrh	r3, [r7, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff99 	bl	8000d64 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000e32:	202c      	movs	r0, #44	@ 0x2c
 8000e34:	f7ff ff74 	bl	8000d20 <ILI9341_Write_Command>
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd90      	pop	{r4, r7, pc}

08000e40 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e4a:	480b      	ldr	r0, [pc, #44]	@ (8000e78 <ILI9341_Reset+0x38>)
 8000e4c:	f003 f8c8 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000e50:	20c8      	movs	r0, #200	@ 0xc8
 8000e52:	f002 faa5 	bl	80033a0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <ILI9341_Reset+0x38>)
 8000e5e:	f003 f8bf 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000e62:	20c8      	movs	r0, #200	@ 0xc8
 8000e64:	f002 fa9c 	bl	80033a0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e6e:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <ILI9341_Reset+0x38>)
 8000e70:	f003 f8b6 	bl	8003fe0 <HAL_GPIO_WritePin>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020800 	.word	0x40020800

08000e7c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000e8a:	2036      	movs	r0, #54	@ 0x36
 8000e8c:	f7ff ff48 	bl	8000d20 <ILI9341_Write_Command>
HAL_Delay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f002 fa85 	bl	80033a0 <HAL_Delay>
	
switch(screen_rotation) 
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d837      	bhi.n	8000f0c <ILI9341_Set_Rotation+0x90>
 8000e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea4 <ILI9341_Set_Rotation+0x28>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08000ecb 	.word	0x08000ecb
 8000eac:	08000ee1 	.word	0x08000ee1
 8000eb0:	08000ef7 	.word	0x08000ef7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000eb4:	2048      	movs	r0, #72	@ 0x48
 8000eb6:	f7ff ff55 	bl	8000d64 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000eba:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <ILI9341_Set_Rotation+0x9c>)
 8000ebc:	22f0      	movs	r2, #240	@ 0xf0
 8000ebe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <ILI9341_Set_Rotation+0xa0>)
 8000ec2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ec6:	801a      	strh	r2, [r3, #0]
			break;
 8000ec8:	e021      	b.n	8000f0e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000eca:	2028      	movs	r0, #40	@ 0x28
 8000ecc:	f7ff ff4a 	bl	8000d64 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <ILI9341_Set_Rotation+0x9c>)
 8000ed2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ed6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <ILI9341_Set_Rotation+0xa0>)
 8000eda:	22f0      	movs	r2, #240	@ 0xf0
 8000edc:	801a      	strh	r2, [r3, #0]
			break;
 8000ede:	e016      	b.n	8000f0e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000ee0:	2088      	movs	r0, #136	@ 0x88
 8000ee2:	f7ff ff3f 	bl	8000d64 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <ILI9341_Set_Rotation+0x9c>)
 8000ee8:	22f0      	movs	r2, #240	@ 0xf0
 8000eea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <ILI9341_Set_Rotation+0xa0>)
 8000eee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ef2:	801a      	strh	r2, [r3, #0]
			break;
 8000ef4:	e00b      	b.n	8000f0e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000ef6:	20e8      	movs	r0, #232	@ 0xe8
 8000ef8:	f7ff ff34 	bl	8000d64 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <ILI9341_Set_Rotation+0x9c>)
 8000efe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f02:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <ILI9341_Set_Rotation+0xa0>)
 8000f06:	22f0      	movs	r2, #240	@ 0xf0
 8000f08:	801a      	strh	r2, [r3, #0]
			break;
 8000f0a:	e000      	b.n	8000f0e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000f0c:	bf00      	nop
	}
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000002 	.word	0x20000002
 8000f1c:	20000000 	.word	0x20000000

08000f20 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f2a:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <ILI9341_Enable+0x14>)
 8000f2c:	f003 f858 	bl	8003fe0 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020800 	.word	0x40020800

08000f38 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000f3c:	f7ff fff0 	bl	8000f20 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000f40:	f7ff fecc 	bl	8000cdc <ILI9341_SPI_Init>
ILI9341_Reset();
 8000f44:	f7ff ff7c 	bl	8000e40 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fee9 	bl	8000d20 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000f4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f52:	f002 fa25 	bl	80033a0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000f56:	20cb      	movs	r0, #203	@ 0xcb
 8000f58:	f7ff fee2 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000f5c:	2039      	movs	r0, #57	@ 0x39
 8000f5e:	f7ff ff01 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000f62:	202c      	movs	r0, #44	@ 0x2c
 8000f64:	f7ff fefe 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fefb 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000f6e:	2034      	movs	r0, #52	@ 0x34
 8000f70:	f7ff fef8 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000f74:	2002      	movs	r0, #2
 8000f76:	f7ff fef5 	bl	8000d64 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000f7a:	20cf      	movs	r0, #207	@ 0xcf
 8000f7c:	f7ff fed0 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff feef 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000f86:	20c1      	movs	r0, #193	@ 0xc1
 8000f88:	f7ff feec 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000f8c:	2030      	movs	r0, #48	@ 0x30
 8000f8e:	f7ff fee9 	bl	8000d64 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000f92:	20e8      	movs	r0, #232	@ 0xe8
 8000f94:	f7ff fec4 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000f98:	2085      	movs	r0, #133	@ 0x85
 8000f9a:	f7ff fee3 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fee0 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000fa4:	2078      	movs	r0, #120	@ 0x78
 8000fa6:	f7ff fedd 	bl	8000d64 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000faa:	20ea      	movs	r0, #234	@ 0xea
 8000fac:	f7ff feb8 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fed7 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fed4 	bl	8000d64 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000fbc:	20ed      	movs	r0, #237	@ 0xed
 8000fbe:	f7ff feaf 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000fc2:	2064      	movs	r0, #100	@ 0x64
 8000fc4:	f7ff fece 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f7ff fecb 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000fce:	2012      	movs	r0, #18
 8000fd0:	f7ff fec8 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000fd4:	2081      	movs	r0, #129	@ 0x81
 8000fd6:	f7ff fec5 	bl	8000d64 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000fda:	20f7      	movs	r0, #247	@ 0xf7
 8000fdc:	f7ff fea0 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000fe0:	2020      	movs	r0, #32
 8000fe2:	f7ff febf 	bl	8000d64 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000fe6:	20c0      	movs	r0, #192	@ 0xc0
 8000fe8:	f7ff fe9a 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000fec:	2023      	movs	r0, #35	@ 0x23
 8000fee:	f7ff feb9 	bl	8000d64 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000ff2:	20c1      	movs	r0, #193	@ 0xc1
 8000ff4:	f7ff fe94 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f7ff feb3 	bl	8000d64 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000ffe:	20c5      	movs	r0, #197	@ 0xc5
 8001000:	f7ff fe8e 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001004:	203e      	movs	r0, #62	@ 0x3e
 8001006:	f7ff fead 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800100a:	2028      	movs	r0, #40	@ 0x28
 800100c:	f7ff feaa 	bl	8000d64 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001010:	20c7      	movs	r0, #199	@ 0xc7
 8001012:	f7ff fe85 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001016:	2086      	movs	r0, #134	@ 0x86
 8001018:	f7ff fea4 	bl	8000d64 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800101c:	2036      	movs	r0, #54	@ 0x36
 800101e:	f7ff fe7f 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001022:	2048      	movs	r0, #72	@ 0x48
 8001024:	f7ff fe9e 	bl	8000d64 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001028:	203a      	movs	r0, #58	@ 0x3a
 800102a:	f7ff fe79 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800102e:	2055      	movs	r0, #85	@ 0x55
 8001030:	f7ff fe98 	bl	8000d64 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001034:	20b1      	movs	r0, #177	@ 0xb1
 8001036:	f7ff fe73 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fe92 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001040:	2018      	movs	r0, #24
 8001042:	f7ff fe8f 	bl	8000d64 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001046:	20b6      	movs	r0, #182	@ 0xb6
 8001048:	f7ff fe6a 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800104c:	2008      	movs	r0, #8
 800104e:	f7ff fe89 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001052:	2082      	movs	r0, #130	@ 0x82
 8001054:	f7ff fe86 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001058:	2027      	movs	r0, #39	@ 0x27
 800105a:	f7ff fe83 	bl	8000d64 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800105e:	20f2      	movs	r0, #242	@ 0xf2
 8001060:	f7ff fe5e 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fe7d 	bl	8000d64 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800106a:	2026      	movs	r0, #38	@ 0x26
 800106c:	f7ff fe58 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff fe77 	bl	8000d64 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001076:	20e0      	movs	r0, #224	@ 0xe0
 8001078:	f7ff fe52 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800107c:	200f      	movs	r0, #15
 800107e:	f7ff fe71 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001082:	2031      	movs	r0, #49	@ 0x31
 8001084:	f7ff fe6e 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001088:	202b      	movs	r0, #43	@ 0x2b
 800108a:	f7ff fe6b 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800108e:	200c      	movs	r0, #12
 8001090:	f7ff fe68 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001094:	200e      	movs	r0, #14
 8001096:	f7ff fe65 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800109a:	2008      	movs	r0, #8
 800109c:	f7ff fe62 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80010a0:	204e      	movs	r0, #78	@ 0x4e
 80010a2:	f7ff fe5f 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80010a6:	20f1      	movs	r0, #241	@ 0xf1
 80010a8:	f7ff fe5c 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80010ac:	2037      	movs	r0, #55	@ 0x37
 80010ae:	f7ff fe59 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f7ff fe56 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80010b8:	2010      	movs	r0, #16
 80010ba:	f7ff fe53 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff fe50 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80010c4:	200e      	movs	r0, #14
 80010c6:	f7ff fe4d 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80010ca:	2009      	movs	r0, #9
 80010cc:	f7ff fe4a 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fe47 	bl	8000d64 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80010d6:	20e1      	movs	r0, #225	@ 0xe1
 80010d8:	f7ff fe22 	bl	8000d20 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fe41 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80010e2:	200e      	movs	r0, #14
 80010e4:	f7ff fe3e 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80010e8:	2014      	movs	r0, #20
 80010ea:	f7ff fe3b 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f7ff fe38 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80010f4:	2011      	movs	r0, #17
 80010f6:	f7ff fe35 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80010fa:	2007      	movs	r0, #7
 80010fc:	f7ff fe32 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001100:	2031      	movs	r0, #49	@ 0x31
 8001102:	f7ff fe2f 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001106:	20c1      	movs	r0, #193	@ 0xc1
 8001108:	f7ff fe2c 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800110c:	2048      	movs	r0, #72	@ 0x48
 800110e:	f7ff fe29 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001112:	2008      	movs	r0, #8
 8001114:	f7ff fe26 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001118:	200f      	movs	r0, #15
 800111a:	f7ff fe23 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800111e:	200c      	movs	r0, #12
 8001120:	f7ff fe20 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001124:	2031      	movs	r0, #49	@ 0x31
 8001126:	f7ff fe1d 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800112a:	2036      	movs	r0, #54	@ 0x36
 800112c:	f7ff fe1a 	bl	8000d64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001130:	200f      	movs	r0, #15
 8001132:	f7ff fe17 	bl	8000d64 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001136:	2011      	movs	r0, #17
 8001138:	f7ff fdf2 	bl	8000d20 <ILI9341_Write_Command>
HAL_Delay(120);
 800113c:	2078      	movs	r0, #120	@ 0x78
 800113e:	f002 f92f 	bl	80033a0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001142:	2029      	movs	r0, #41	@ 0x29
 8001144:	f7ff fdec 	bl	8000d20 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fe97 	bl	8000e7c <ILI9341_Set_Rotation>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001158:	b08d      	sub	sp, #52	@ 0x34
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	6039      	str	r1, [r7, #0]
 8001160:	80fb      	strh	r3, [r7, #6]
 8001162:	466b      	mov	r3, sp
 8001164:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001172:	d202      	bcs.n	800117a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001178:	e002      	b.n	8001180 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800117a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4840      	ldr	r0, [pc, #256]	@ (8001288 <ILI9341_Draw_Colour_Burst+0x134>)
 8001188:	f002 ff2a 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001192:	483d      	ldr	r0, [pc, #244]	@ (8001288 <ILI9341_Draw_Colour_Burst+0x134>)
 8001194:	f002 ff24 	bl	8003fe0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80011a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011a4:	460b      	mov	r3, r1
 80011a6:	3b01      	subs	r3, #1
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	2300      	movs	r3, #0
 80011ac:	4688      	mov	r8, r1
 80011ae:	4699      	mov	r9, r3
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011c4:	2300      	movs	r3, #0
 80011c6:	460c      	mov	r4, r1
 80011c8:	461d      	mov	r5, r3
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	00eb      	lsls	r3, r5, #3
 80011d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011d8:	00e2      	lsls	r2, r4, #3
 80011da:	1dcb      	adds	r3, r1, #7
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	ebad 0d03 	sub.w	sp, sp, r3
 80011e4:	466b      	mov	r3, sp
 80011e6:	3300      	adds	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011ee:	e00e      	b.n	800120e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f4:	4413      	add	r3, r2
 80011f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80011fa:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80011fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011fe:	3301      	adds	r3, #1
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	b2d1      	uxtb	r1, r2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800120a:	3302      	adds	r3, #2
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800120e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	429a      	cmp	r2, r3
 8001214:	d3ec      	bcc.n	80011f0 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800122a:	fbb3 f2f2 	udiv	r2, r3, r2
 800122e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001230:	fb01 f202 	mul.w	r2, r1, r2
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d010      	beq.n	8001260 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
 8001242:	e009      	b.n	8001258 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001246:	b29a      	uxth	r2, r3
 8001248:	230a      	movs	r3, #10
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	480f      	ldr	r0, [pc, #60]	@ (800128c <ILI9341_Draw_Colour_Burst+0x138>)
 800124e:	f004 ffae 	bl	80061ae <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	3301      	adds	r3, #1
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
 8001258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3f1      	bcc.n	8001244 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	b29a      	uxth	r2, r3
 8001264:	230a      	movs	r3, #10
 8001266:	69b9      	ldr	r1, [r7, #24]
 8001268:	4808      	ldr	r0, [pc, #32]	@ (800128c <ILI9341_Draw_Colour_Burst+0x138>)
 800126a:	f004 ffa0 	bl	80061ae <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001274:	4804      	ldr	r0, [pc, #16]	@ (8001288 <ILI9341_Draw_Colour_Burst+0x134>)
 8001276:	f002 feb3 	bl	8003fe0 <HAL_GPIO_WritePin>
 800127a:	46b5      	mov	sp, r6
}
 800127c:	bf00      	nop
 800127e:	3734      	adds	r7, #52	@ 0x34
 8001280:	46bd      	mov	sp, r7
 8001282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001286:	bf00      	nop
 8001288:	40020800 	.word	0x40020800
 800128c:	200004b0 	.word	0x200004b0

08001290 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <ILI9341_Fill_Screen+0x44>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <ILI9341_Fill_Screen+0x48>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	2100      	movs	r1, #0
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fd7d 	bl	8000da8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <ILI9341_Fill_Screen+0x44>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <ILI9341_Fill_Screen+0x48>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff44 	bl	8001154 <ILI9341_Draw_Colour_Burst>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000002 	.word	0x20000002
 80012d8:	20000000 	.word	0x20000000

080012dc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	460b      	mov	r3, r1
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80012ee:	4b64      	ldr	r3, [pc, #400]	@ (8001480 <ILI9341_Draw_Pixel+0x1a4>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	88fa      	ldrh	r2, [r7, #6]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	f080 80be 	bcs.w	8001478 <ILI9341_Draw_Pixel+0x19c>
 80012fc:	4b61      	ldr	r3, [pc, #388]	@ (8001484 <ILI9341_Draw_Pixel+0x1a8>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	88ba      	ldrh	r2, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	f080 80b7 	bcs.w	8001478 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001310:	485d      	ldr	r0, [pc, #372]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001312:	f002 fe65 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800131c:	485a      	ldr	r0, [pc, #360]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 800131e:	f002 fe5f 	bl	8003fe0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001322:	202a      	movs	r0, #42	@ 0x2a
 8001324:	f7ff fcea 	bl	8000cfc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132e:	4856      	ldr	r0, [pc, #344]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001330:	f002 fe56 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133a:	4853      	ldr	r0, [pc, #332]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 800133c:	f002 fe50 	bl	8003fe0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001346:	4850      	ldr	r0, [pc, #320]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001348:	f002 fe4a 	bl	8003fe0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	753b      	strb	r3, [r7, #20]
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	757b      	strb	r3, [r7, #21]
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	3301      	adds	r3, #1
 8001360:	121b      	asrs	r3, r3, #8
 8001362:	b2db      	uxtb	r3, r3
 8001364:	75bb      	strb	r3, [r7, #22]
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3301      	adds	r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001370:	f107 0114 	add.w	r1, r7, #20
 8001374:	2301      	movs	r3, #1
 8001376:	2204      	movs	r2, #4
 8001378:	4844      	ldr	r0, [pc, #272]	@ (800148c <ILI9341_Draw_Pixel+0x1b0>)
 800137a:	f004 ff18 	bl	80061ae <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800137e:	2201      	movs	r2, #1
 8001380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001384:	4840      	ldr	r0, [pc, #256]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001386:	f002 fe2b 	bl	8003fe0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001390:	483d      	ldr	r0, [pc, #244]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001392:	f002 fe25 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800139c:	483a      	ldr	r0, [pc, #232]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 800139e:	f002 fe1f 	bl	8003fe0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80013a2:	202b      	movs	r0, #43	@ 0x2b
 80013a4:	f7ff fcaa 	bl	8000cfc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ae:	4836      	ldr	r0, [pc, #216]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 80013b0:	f002 fe16 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ba:	4833      	ldr	r0, [pc, #204]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 80013bc:	f002 fe10 	bl	8003fe0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013c6:	4830      	ldr	r0, [pc, #192]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 80013c8:	f002 fe0a 	bl	8003fe0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	743b      	strb	r3, [r7, #16]
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	747b      	strb	r3, [r7, #17]
 80013dc:	88bb      	ldrh	r3, [r7, #4]
 80013de:	3301      	adds	r3, #1
 80013e0:	121b      	asrs	r3, r3, #8
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	74bb      	strb	r3, [r7, #18]
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80013f0:	f107 0110 	add.w	r1, r7, #16
 80013f4:	2301      	movs	r3, #1
 80013f6:	2204      	movs	r2, #4
 80013f8:	4824      	ldr	r0, [pc, #144]	@ (800148c <ILI9341_Draw_Pixel+0x1b0>)
 80013fa:	f004 fed8 	bl	80061ae <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001404:	4820      	ldr	r0, [pc, #128]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001406:	f002 fdeb 	bl	8003fe0 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001410:	481d      	ldr	r0, [pc, #116]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001412:	f002 fde5 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800141c:	481a      	ldr	r0, [pc, #104]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 800141e:	f002 fddf 	bl	8003fe0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001422:	202c      	movs	r0, #44	@ 0x2c
 8001424:	f7ff fc6a 	bl	8000cfc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800142e:	4816      	ldr	r0, [pc, #88]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001430:	f002 fdd6 	bl	8003fe0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143a:	4813      	ldr	r0, [pc, #76]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 800143c:	f002 fdd0 	bl	8003fe0 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001446:	4810      	ldr	r0, [pc, #64]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001448:	f002 fdca 	bl	8003fe0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29b      	uxth	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	733b      	strb	r3, [r7, #12]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800145c:	f107 010c 	add.w	r1, r7, #12
 8001460:	2301      	movs	r3, #1
 8001462:	2202      	movs	r2, #2
 8001464:	4809      	ldr	r0, [pc, #36]	@ (800148c <ILI9341_Draw_Pixel+0x1b0>)
 8001466:	f004 fea2 	bl	80061ae <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <ILI9341_Draw_Pixel+0x1ac>)
 8001472:	f002 fdb5 	bl	8003fe0 <HAL_GPIO_WritePin>
 8001476:	e000      	b.n	800147a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001478:	bf00      	nop
	
}
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000002 	.word	0x20000002
 8001484:	20000000 	.word	0x20000000
 8001488:	40020800 	.word	0x40020800
 800148c:	200004b0 	.word	0x200004b0

08001490 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4604      	mov	r4, r0
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4623      	mov	r3, r4
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4603      	mov	r3, r0
 80014a4:	80bb      	strh	r3, [r7, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	807b      	strh	r3, [r7, #2]
 80014aa:	4613      	mov	r3, r2
 80014ac:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80014ae:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <ILI9341_Draw_Rectangle+0xb0>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d23d      	bcs.n	8001536 <ILI9341_Draw_Rectangle+0xa6>
 80014ba:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <ILI9341_Draw_Rectangle+0xb4>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	88ba      	ldrh	r2, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d237      	bcs.n	8001536 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001540 <ILI9341_Draw_Rectangle+0xb0>)
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	b292      	uxth	r2, r2
 80014d2:	4293      	cmp	r3, r2
 80014d4:	dd05      	ble.n	80014e2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <ILI9341_Draw_Rectangle+0xb0>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80014e2:	88ba      	ldrh	r2, [r7, #4]
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a16      	ldr	r2, [pc, #88]	@ (8001544 <ILI9341_Draw_Rectangle+0xb4>)
 80014ea:	8812      	ldrh	r2, [r2, #0]
 80014ec:	b292      	uxth	r2, r2
 80014ee:	4293      	cmp	r3, r2
 80014f0:	dd05      	ble.n	80014fe <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <ILI9341_Draw_Rectangle+0xb4>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	88bb      	ldrh	r3, [r7, #4]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4413      	add	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b29c      	uxth	r4, r3
 800150a:	88ba      	ldrh	r2, [r7, #4]
 800150c:	883b      	ldrh	r3, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	b29b      	uxth	r3, r3
 8001512:	3b01      	subs	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	88b9      	ldrh	r1, [r7, #4]
 8001518:	88f8      	ldrh	r0, [r7, #6]
 800151a:	4622      	mov	r2, r4
 800151c:	f7ff fc44 	bl	8000da8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001520:	883b      	ldrh	r3, [r7, #0]
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	461a      	mov	r2, r3
 800152a:	8b3b      	ldrh	r3, [r7, #24]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fe10 	bl	8001154 <ILI9341_Draw_Colour_Burst>
 8001534:	e000      	b.n	8001538 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001536:	bf00      	nop
}
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	20000002 	.word	0x20000002
 8001544:	20000000 	.word	0x20000000

08001548 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800154e:	2310      	movs	r3, #16
 8001550:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8001556:	e019      	b.n	800158c <TP_Read+0x44>
    {
        value <<= 1;
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2108      	movs	r1, #8
 8001562:	480e      	ldr	r0, [pc, #56]	@ (800159c <TP_Read+0x54>)
 8001564:	f002 fd3c 	bl	8003fe0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2108      	movs	r1, #8
 800156c:	480b      	ldr	r0, [pc, #44]	@ (800159c <TP_Read+0x54>)
 800156e:	f002 fd37 	bl	8003fe0 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8001572:	2110      	movs	r1, #16
 8001574:	4809      	ldr	r0, [pc, #36]	@ (800159c <TP_Read+0x54>)
 8001576:	f002 fd1b 	bl	8003fb0 <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <TP_Read+0x3e>
        {
            value++;
 8001580:	88bb      	ldrh	r3, [r7, #4]
 8001582:	3301      	adds	r3, #1
 8001584:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	3b01      	subs	r3, #1
 800158a:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1e2      	bne.n	8001558 <TP_Read+0x10>
    };

    return value;
 8001592:	88bb      	ldrh	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000

080015a0 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80015aa:	2308      	movs	r3, #8
 80015ac:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80015ae:	2200      	movs	r2, #0
 80015b0:	2108      	movs	r1, #8
 80015b2:	4815      	ldr	r0, [pc, #84]	@ (8001608 <TP_Write+0x68>)
 80015b4:	f002 fd14 	bl	8003fe0 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80015b8:	e01e      	b.n	80015f8 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da05      	bge.n	80015ce <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	2120      	movs	r1, #32
 80015c6:	4810      	ldr	r0, [pc, #64]	@ (8001608 <TP_Write+0x68>)
 80015c8:	f002 fd0a 	bl	8003fe0 <HAL_GPIO_WritePin>
 80015cc:	e004      	b.n	80015d8 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2120      	movs	r1, #32
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <TP_Write+0x68>)
 80015d4:	f002 fd04 	bl	8003fe0 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2108      	movs	r1, #8
 80015e2:	4809      	ldr	r0, [pc, #36]	@ (8001608 <TP_Write+0x68>)
 80015e4:	f002 fcfc 	bl	8003fe0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 80015e8:	2200      	movs	r2, #0
 80015ea:	2108      	movs	r1, #8
 80015ec:	4806      	ldr	r0, [pc, #24]	@ (8001608 <TP_Write+0x68>)
 80015ee:	f002 fcf7 	bl	8003fe0 <HAL_GPIO_WritePin>
        i--;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1dd      	bne.n	80015ba <TP_Write+0x1a>
    };
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	00000000 	.word	0x00000000

08001610 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8001618:	2201      	movs	r2, #1
 800161a:	2108      	movs	r1, #8
 800161c:	485a      	ldr	r0, [pc, #360]	@ (8001788 <TP_Read_Coordinates+0x178>)
 800161e:	f002 fcdf 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8001622:	2201      	movs	r2, #1
 8001624:	2120      	movs	r1, #32
 8001626:	4858      	ldr	r0, [pc, #352]	@ (8001788 <TP_Read_Coordinates+0x178>)
 8001628:	f002 fcda 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 800162c:	2201      	movs	r2, #1
 800162e:	2140      	movs	r1, #64	@ 0x40
 8001630:	4855      	ldr	r0, [pc, #340]	@ (8001788 <TP_Read_Coordinates+0x178>)
 8001632:	f002 fcd5 	bl	8003fe0 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 800163a:	2300      	movs	r3, #0
 800163c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8001642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001646:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2140      	movs	r1, #64	@ 0x40
 8001650:	484d      	ldr	r0, [pc, #308]	@ (8001788 <TP_Read_Coordinates+0x178>)
 8001652:	f002 fcc5 	bl	8003fe0 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001656:	e023      	b.n	80016a0 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8001658:	2090      	movs	r0, #144	@ 0x90
 800165a:	f7ff ffa1 	bl	80015a0 <TP_Write>

				rawy = TP_Read();	
 800165e:	f7ff ff73 	bl	8001548 <TP_Read>
 8001662:	4603      	mov	r3, r0
 8001664:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	6a3a      	ldr	r2, [r7, #32]
 800166a:	4413      	add	r3, r2
 800166c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4413      	add	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8001676:	20d0      	movs	r0, #208	@ 0xd0
 8001678:	f7ff ff92 	bl	80015a0 <TP_Write>
        rawx = TP_Read();
 800167c:	f7ff ff64 	bl	8001548 <TP_Read>
 8001680:	4603      	mov	r3, r0
 8001682:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8001684:	89bb      	ldrh	r3, [r7, #12]
 8001686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001688:	4413      	add	r3, r2
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
				calculating_x += rawx;
 800168c:	89bb      	ldrh	r3, [r7, #12]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	61fb      	str	r3, [r7, #28]
        samples--;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3b01      	subs	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
				counted_samples++;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	3301      	adds	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <TP_Read_Coordinates+0xa4>
 80016a6:	2104      	movs	r1, #4
 80016a8:	4837      	ldr	r0, [pc, #220]	@ (8001788 <TP_Read_Coordinates+0x178>)
 80016aa:	f002 fc81 	bl	8003fb0 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0d1      	beq.n	8001658 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2140      	movs	r1, #64	@ 0x40
 80016b8:	4833      	ldr	r0, [pc, #204]	@ (8001788 <TP_Read_Coordinates+0x178>)
 80016ba:	f002 fc91 	bl	8003fe0 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016c4:	d14d      	bne.n	8001762 <TP_Read_Coordinates+0x152>
 80016c6:	2104      	movs	r1, #4
 80016c8:	482f      	ldr	r0, [pc, #188]	@ (8001788 <TP_Read_Coordinates+0x178>)
 80016ca:	f002 fc71 	bl	8003fb0 <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d146      	bne.n	8001762 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 80016f0:	89bb      	ldrh	r3, [r7, #12]
 80016f2:	425b      	negs	r3, r3
 80016f4:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	425b      	negs	r3, r3
 80016fa:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80016fc:	89ba      	ldrh	r2, [r7, #12]
 80016fe:	4b23      	ldr	r3, [pc, #140]	@ (800178c <TP_Read_Coordinates+0x17c>)
 8001700:	fba3 1302 	umull	r1, r3, r3, r2
 8001704:	1ad2      	subs	r2, r2, r3
 8001706:	0852      	lsrs	r2, r2, #1
 8001708:	4413      	add	r3, r2
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	b29b      	uxth	r3, r3
 800170e:	f1c3 03e3 	rsb	r3, r3, #227	@ 0xe3
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800171a:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8001780 <TP_Read_Coordinates+0x170>
 800171e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001722:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001726:	ee17 3a90 	vmov	r3, s15
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <TP_Read_Coordinates+0x180>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	09db      	lsrs	r3, r3, #7
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b0f      	subs	r3, #15
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001746:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001780 <TP_Read_Coordinates+0x170>
 800174a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3302      	adds	r3, #2
 8001752:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001756:	ee17 2a90 	vmov	r2, s15
 800175a:	b292      	uxth	r2, r2
 800175c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 800175e:	2301      	movs	r3, #1
 8001760:	e007      	b.n	8001772 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3302      	adds	r3, #2
 800176c:	2200      	movs	r2, #0
 800176e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8001770:	2300      	movs	r3, #0
		}
}
 8001772:	4618      	mov	r0, r3
 8001774:	3728      	adds	r7, #40	@ 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	28f5c28f 	.word	0x28f5c28f
 8001784:	3ff28f5c 	.word	0x3ff28f5c
 8001788:	40021000 	.word	0x40021000
 800178c:	e01e01e1 	.word	0xe01e01e1
 8001790:	a0a0a0a1 	.word	0xa0a0a0a1

08001794 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001798:	2104      	movs	r1, #4
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <TP_Touchpad_Pressed+0x1c>)
 800179c:	f002 fc08 	bl	8003fb0 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80017aa:	2300      	movs	r3, #0
	}
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000

080017b4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_ETH_Init+0x84>)
 80017ba:	4a20      	ldr	r2, [pc, #128]	@ (800183c <MX_ETH_Init+0x88>)
 80017bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <MX_ETH_Init+0x8c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <MX_ETH_Init+0x8c>)
 80017c6:	2280      	movs	r2, #128	@ 0x80
 80017c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <MX_ETH_Init+0x8c>)
 80017cc:	22e1      	movs	r2, #225	@ 0xe1
 80017ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <MX_ETH_Init+0x8c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_ETH_Init+0x8c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_ETH_Init+0x8c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <MX_ETH_Init+0x84>)
 80017e4:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <MX_ETH_Init+0x8c>)
 80017e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <MX_ETH_Init+0x84>)
 80017ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_ETH_Init+0x84>)
 80017f2:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <MX_ETH_Init+0x90>)
 80017f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_ETH_Init+0x84>)
 80017f8:	4a13      	ldr	r2, [pc, #76]	@ (8001848 <MX_ETH_Init+0x94>)
 80017fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_ETH_Init+0x84>)
 80017fe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001802:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <MX_ETH_Init+0x84>)
 8001806:	f001 ff01 	bl	800360c <HAL_ETH_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001810:	f001 f98c 	bl	8002b2c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001814:	2238      	movs	r2, #56	@ 0x38
 8001816:	2100      	movs	r1, #0
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <MX_ETH_Init+0x98>)
 800181a:	f007 f976 	bl	8008b0a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_ETH_Init+0x98>)
 8001820:	2221      	movs	r2, #33	@ 0x21
 8001822:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_ETH_Init+0x98>)
 8001826:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800182a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <MX_ETH_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000380 	.word	0x20000380
 800183c:	40028000 	.word	0x40028000
 8001840:	20000430 	.word	0x20000430
 8001844:	2000028c 	.word	0x2000028c
 8001848:	200001ec 	.word	0x200001ec
 800184c:	20000348 	.word	0x20000348

08001850 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	@ 0x38
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a4e      	ldr	r2, [pc, #312]	@ (80019a8 <HAL_ETH_MspInit+0x158>)
 800186e:	4293      	cmp	r3, r2
 8001870:	f040 8096 	bne.w	80019a0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001874:	4b4d      	ldr	r3, [pc, #308]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	4a4c      	ldr	r2, [pc, #304]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 800187a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800187e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001880:	4b4a      	ldr	r3, [pc, #296]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	4b47      	ldr	r3, [pc, #284]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	4a46      	ldr	r2, [pc, #280]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 8001892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001896:	6313      	str	r3, [r2, #48]	@ 0x30
 8001898:	4b44      	ldr	r3, [pc, #272]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4b41      	ldr	r3, [pc, #260]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	4a40      	ldr	r2, [pc, #256]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b0:	4b3e      	ldr	r3, [pc, #248]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c0:	4a3a      	ldr	r2, [pc, #232]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c8:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	4a34      	ldr	r2, [pc, #208]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e0:	4b32      	ldr	r3, [pc, #200]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	4b2f      	ldr	r3, [pc, #188]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	4a2e      	ldr	r2, [pc, #184]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f8:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001904:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001908:	4a28      	ldr	r2, [pc, #160]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 800190a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800190e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001910:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <HAL_ETH_MspInit+0x15c>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800191c:	2332      	movs	r3, #50	@ 0x32
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800192c:	230b      	movs	r3, #11
 800192e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	481e      	ldr	r0, [pc, #120]	@ (80019b0 <HAL_ETH_MspInit+0x160>)
 8001938:	f002 f98e 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800193c:	2386      	movs	r3, #134	@ 0x86
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800194c:	230b      	movs	r3, #11
 800194e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	4817      	ldr	r0, [pc, #92]	@ (80019b4 <HAL_ETH_MspInit+0x164>)
 8001958:	f002 f97e 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800195c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800196e:	230b      	movs	r3, #11
 8001970:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	480f      	ldr	r0, [pc, #60]	@ (80019b8 <HAL_ETH_MspInit+0x168>)
 800197a:	f002 f96d 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800197e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001990:	230b      	movs	r3, #11
 8001992:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	4808      	ldr	r0, [pc, #32]	@ (80019bc <HAL_ETH_MspInit+0x16c>)
 800199c:	f002 f95c 	bl	8003c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80019a0:	bf00      	nop
 80019a2:	3738      	adds	r7, #56	@ 0x38
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40028000 	.word	0x40028000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40021800 	.word	0x40021800

080019c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08e      	sub	sp, #56	@ 0x38
 80019c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d6:	4b74      	ldr	r3, [pc, #464]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a73      	ldr	r2, [pc, #460]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 80019dc:	f043 0310 	orr.w	r3, r3, #16
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b71      	ldr	r3, [pc, #452]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	623b      	str	r3, [r7, #32]
 80019ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a6d      	ldr	r2, [pc, #436]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a06:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a67      	ldr	r2, [pc, #412]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b65      	ldr	r3, [pc, #404]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1e:	4b62      	ldr	r3, [pc, #392]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a61      	ldr	r2, [pc, #388]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b59      	ldr	r3, [pc, #356]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b56      	ldr	r3, [pc, #344]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a55      	ldr	r2, [pc, #340]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a66:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a49      	ldr	r2, [pc, #292]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <MX_GPIO_Init+0x1e8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2168      	movs	r1, #104	@ 0x68
 8001a9a:	4844      	ldr	r0, [pc, #272]	@ (8001bac <MX_GPIO_Init+0x1ec>)
 8001a9c:	f002 faa0 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001aa6:	4842      	ldr	r0, [pc, #264]	@ (8001bb0 <MX_GPIO_Init+0x1f0>)
 8001aa8:	f002 fa9a 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2140      	movs	r1, #64	@ 0x40
 8001ab0:	4840      	ldr	r0, [pc, #256]	@ (8001bb4 <MX_GPIO_Init+0x1f4>)
 8001ab2:	f002 fa95 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001abc:	483e      	ldr	r0, [pc, #248]	@ (8001bb8 <MX_GPIO_Init+0x1f8>)
 8001abe:	f002 fa8f 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8001ac2:	2314      	movs	r3, #20
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4835      	ldr	r0, [pc, #212]	@ (8001bac <MX_GPIO_Init+0x1ec>)
 8001ad6:	f002 f8bf 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin;
 8001ada:	2328      	movs	r3, #40	@ 0x28
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aee:	4619      	mov	r1, r3
 8001af0:	482e      	ldr	r0, [pc, #184]	@ (8001bac <MX_GPIO_Init+0x1ec>)
 8001af2:	f002 f8b1 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8001af6:	2340      	movs	r3, #64	@ 0x40
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4827      	ldr	r0, [pc, #156]	@ (8001bac <MX_GPIO_Init+0x1ec>)
 8001b0e:	f002 f8a3 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b26:	4619      	mov	r1, r3
 8001b28:	4823      	ldr	r0, [pc, #140]	@ (8001bb8 <MX_GPIO_Init+0x1f8>)
 8001b2a:	f002 f895 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b2e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	481a      	ldr	r0, [pc, #104]	@ (8001bb0 <MX_GPIO_Init+0x1f0>)
 8001b48:	f002 f886 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b4c:	2340      	movs	r3, #64	@ 0x40
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4814      	ldr	r0, [pc, #80]	@ (8001bb4 <MX_GPIO_Init+0x1f4>)
 8001b64:	f002 f878 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480e      	ldr	r0, [pc, #56]	@ (8001bb4 <MX_GPIO_Init+0x1f4>)
 8001b7c:	f002 f86c 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8001b80:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	4807      	ldr	r0, [pc, #28]	@ (8001bb8 <MX_GPIO_Init+0x1f8>)
 8001b9a:	f002 f85d 	bl	8003c58 <HAL_GPIO_Init>

}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	@ 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40020800 	.word	0x40020800

08001bbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c34 <MX_I2C1_Init+0x78>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c38 <MX_I2C1_Init+0x7c>)
 8001bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd2:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd8:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bf6:	480e      	ldr	r0, [pc, #56]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001bf8:	f002 fa0c 	bl	8004014 <HAL_I2C_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c02:	f000 ff93 	bl	8002b2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c06:	2100      	movs	r1, #0
 8001c08:	4809      	ldr	r0, [pc, #36]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001c0a:	f002 fee9 	bl	80049e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c14:	f000 ff8a 	bl	8002b2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <MX_I2C1_Init+0x74>)
 8001c1c:	f002 ff2b 	bl	8004a76 <HAL_I2CEx_ConfigDigitalFilter>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c26:	f000 ff81 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000438 	.word	0x20000438
 8001c34:	40005400 	.word	0x40005400
 8001c38:	20404768 	.word	0x20404768

08001c3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0ae      	sub	sp, #184	@ 0xb8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2290      	movs	r2, #144	@ 0x90
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f006 ff54 	bl	8008b0a <memset>
  if(i2cHandle->Instance==I2C1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a22      	ldr	r2, [pc, #136]	@ (8001cf0 <HAL_I2C_MspInit+0xb4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d13c      	bne.n	8001ce6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 fdc4 	bl	8005808 <HAL_RCCEx_PeriphCLKConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c86:	f000 ff51 	bl	8002b2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_I2C_MspInit+0xb8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_I2C_MspInit+0xb8>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_I2C_MspInit+0xb8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ca2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001caa:	2312      	movs	r3, #18
 8001cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480b      	ldr	r0, [pc, #44]	@ (8001cf8 <HAL_I2C_MspInit+0xbc>)
 8001cca:	f001 ffc5 	bl	8003c58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_I2C_MspInit+0xb8>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <HAL_I2C_MspInit+0xb8>)
 8001cd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_I2C_MspInit+0xb8>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	37b8      	adds	r7, #184	@ 0xb8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40005400 	.word	0x40005400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400

08001cfc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d00:	f3bf 8f4f 	dsb	sy
}
 8001d04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d06:	f3bf 8f6f 	isb	sy
}
 8001d0a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <SCB_EnableICache+0x48>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d14:	f3bf 8f4f 	dsb	sy
}
 8001d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d1a:	f3bf 8f6f 	isb	sy
}
 8001d1e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <SCB_EnableICache+0x48>)
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <SCB_EnableICache+0x48>)
 8001d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2c:	f3bf 8f4f 	dsb	sy
}
 8001d30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d32:	f3bf 8f6f 	isb	sy
}
 8001d36:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <SCB_EnableDCache+0x84>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d56:	f3bf 8f4f 	dsb	sy
}
 8001d5a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <SCB_EnableDCache+0x84>)
 8001d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d62:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	0b5b      	lsrs	r3, r3, #13
 8001d68:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d6c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d76:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001d80:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d86:	4911      	ldr	r1, [pc, #68]	@ (8001dcc <SCB_EnableDCache+0x84>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1e5a      	subs	r2, r3, #1
 8001d92:	60ba      	str	r2, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ef      	bne.n	8001d78 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	60fa      	str	r2, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1e5      	bne.n	8001d6e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001da2:	f3bf 8f4f 	dsb	sy
}
 8001da6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <SCB_EnableDCache+0x84>)
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	4a07      	ldr	r2, [pc, #28]	@ (8001dcc <SCB_EnableDCache+0x84>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001db4:	f3bf 8f4f 	dsb	sy
}
 8001db8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dba:	f3bf 8f6f 	isb	sy
}
 8001dbe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001dd4:	f7ff ff92 	bl	8001cfc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001dd8:	f7ff ffb6 	bl	8001d48 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ddc:	f001 fa74 	bl	80032c8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de0:	f000 f836 	bl	8001e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de4:	f7ff fdec 	bl	80019c0 <MX_GPIO_Init>
  MX_ETH_Init();
 8001de8:	f7ff fce4 	bl	80017b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001dec:	f001 f90a 	bl	8003004 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001df0:	f001 f998 	bl	8003124 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 8001df4:	f000 fea0 	bl	8002b38 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001df8:	f001 f86c 	bl	8002ed4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001dfc:	f7ff fede 	bl	8001bbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001e00:	f7ff f89a 	bl	8000f38 <ILI9341_Init>

  cmdBuffer[0]= 0x03;
 8001e04:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <main+0x70>)
 8001e06:	2203      	movs	r2, #3
 8001e08:	701a      	strb	r2, [r3, #0]
  cmdBuffer[1]= 0x00;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <main+0x70>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	705a      	strb	r2, [r3, #1]
  cmdBuffer[2]= 0x04;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <main+0x70>)
 8001e12:	2204      	movs	r2, #4
 8001e14:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ILI9341_Fill_Screen(WHITE);
 8001e16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e1a:	f7ff fa39 	bl	8001290 <ILI9341_Fill_Screen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (next_screen == 1){
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <main+0x74>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <main+0x62>
		  second_screen();
 8001e26:	f000 f95b 	bl	80020e0 <second_screen>
		  isUpdate = 1;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <main+0x78>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e7f5      	b.n	8001e1e <main+0x4e>
	  }
	  else{
//		  HAL_TIM_Base_Stop_IT(&htim2);
		  main_screen();
 8001e32:	f000 fa8f 	bl	8002354 <main_screen>
		  isUpdateSecondPage = 1;
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <main+0x7c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
	  if (next_screen == 1){
 8001e3c:	e7ef      	b.n	8001e1e <main+0x4e>
 8001e3e:	bf00      	nop
 8001e40:	200004a4 	.word	0x200004a4
 8001e44:	2000049c 	.word	0x2000049c
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	20000008 	.word	0x20000008

08001e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	@ 0x50
 8001e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	2234      	movs	r2, #52	@ 0x34
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f006 fe53 	bl	8008b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e74:	f002 ff94 	bl	8004da0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <SystemClock_Config+0xd8>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <SystemClock_Config+0xd8>)
 8001e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e84:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <SystemClock_Config+0xd8>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <SystemClock_Config+0xdc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a25      	ldr	r2, [pc, #148]	@ (8001f2c <SystemClock_Config+0xdc>)
 8001e96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <SystemClock_Config+0xdc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001eac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001eb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001ec0:	23d8      	movs	r3, #216	@ 0xd8
 8001ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ec8:	2309      	movs	r3, #9
 8001eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 ffc3 	bl	8004e60 <HAL_RCC_OscConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ee0:	f000 fe24 	bl	8002b2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ee4:	f002 ff6c 	bl	8004dc0 <HAL_PWREx_EnableOverDrive>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001eee:	f000 fe1d 	bl	8002b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef2:	230f      	movs	r3, #15
 8001ef4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001efe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	2107      	movs	r1, #7
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 fa53 	bl	80053bc <HAL_RCC_ClockConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001f1c:	f000 fe06 	bl	8002b2c <Error_Handler>
  }
}
 8001f20:	bf00      	nop
 8001f22:	3750      	adds	r7, #80	@ 0x50
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40007000 	.word	0x40007000

08001f30 <draw_sensor_value>:

/* USER CODE BEGIN 4 */

void draw_sensor_value(){
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b0bb      	sub	sp, #236	@ 0xec
 8001f34:	af02      	add	r7, sp, #8

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3,  200);
 8001f36:	23c8      	movs	r3, #200	@ 0xc8
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	4a61      	ldr	r2, [pc, #388]	@ (80020c4 <draw_sensor_value+0x194>)
 8001f3e:	21b8      	movs	r1, #184	@ 0xb8
 8001f40:	4861      	ldr	r0, [pc, #388]	@ (80020c8 <draw_sensor_value+0x198>)
 8001f42:	f002 f8f7 	bl	8004134 <HAL_I2C_Master_Transmit>
	//Send reading cmd
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3,  200);
 8001f46:	23c8      	movs	r3, #200	@ 0xc8
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80020c4 <draw_sensor_value+0x194>)
 8001f4e:	21b8      	movs	r1, #184	@ 0xb8
 8001f50:	485d      	ldr	r0, [pc, #372]	@ (80020c8 <draw_sensor_value+0x198>)
 8001f52:	f002 f8ef 	bl	8004134 <HAL_I2C_Master_Transmit>

	HAL_Delay(1);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f001 fa22 	bl	80033a0 <HAL_Delay>

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1, dataBuffer, 8, 200);
 8001f5c:	23c8      	movs	r3, #200	@ 0xc8
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2308      	movs	r3, #8
 8001f62:	4a5a      	ldr	r2, [pc, #360]	@ (80020cc <draw_sensor_value+0x19c>)
 8001f64:	21b8      	movs	r1, #184	@ 0xb8
 8001f66:	4858      	ldr	r0, [pc, #352]	@ (80020c8 <draw_sensor_value+0x198>)
 8001f68:	f002 f9d8 	bl	800431c <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 8001f6c:	4b57      	ldr	r3, [pc, #348]	@ (80020cc <draw_sensor_value+0x19c>)
 8001f6e:	79db      	ldrb	r3, [r3, #7]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
	Rcrc += dataBuffer[6];
 8001f76:	4b55      	ldr	r3, [pc, #340]	@ (80020cc <draw_sensor_value+0x19c>)
 8001f78:	799b      	ldrb	r3, [r3, #6]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8001f80:	4413      	add	r3, r2
 8001f82:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde

	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8001f86:	2106      	movs	r1, #6
 8001f88:	4850      	ldr	r0, [pc, #320]	@ (80020cc <draw_sensor_value+0x19c>)
 8001f8a:	f000 fc6f 	bl	800286c <CRC16_2>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d144      	bne.n	8002024 <draw_sensor_value+0xf4>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8 ) + dataBuffer[5];
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80020cc <draw_sensor_value+0x19c>)
 8001f9c:	791b      	ldrb	r3, [r3, #4]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4a48      	ldr	r2, [pc, #288]	@ (80020cc <draw_sensor_value+0x19c>)
 8001faa:	7952      	ldrb	r2, [r2, #5]
 8001fac:	4413      	add	r3, r2
 8001fae:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
		t = temperature / 10.0;
 8001fb2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001fbe:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8001fc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fca:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <draw_sensor_value+0x1a0>)
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
		t = (((dataBuffer[4] & 0x80) >> 7 ) == 1) ? (t *(-1)) : t;
 8001fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80020cc <draw_sensor_value+0x19c>)
 8001fd2:	791b      	ldrb	r3, [r3, #4]
 8001fd4:	09db      	lsrs	r3, r3, #7
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <draw_sensor_value+0xb8>
 8001fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80020d0 <draw_sensor_value+0x1a0>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	eef1 7a67 	vneg.f32	s15, s15
 8001fe6:	e002      	b.n	8001fee <draw_sensor_value+0xbe>
 8001fe8:	4b39      	ldr	r3, [pc, #228]	@ (80020d0 <draw_sensor_value+0x1a0>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <draw_sensor_value+0x1a0>)
 8001ff0:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8 ) + dataBuffer[3];
 8001ff4:	4b35      	ldr	r3, [pc, #212]	@ (80020cc <draw_sensor_value+0x19c>)
 8001ff6:	789b      	ldrb	r3, [r3, #2]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4a33      	ldr	r2, [pc, #204]	@ (80020cc <draw_sensor_value+0x19c>)
 8001ffe:	78d2      	ldrb	r2, [r2, #3]
 8002000:	4413      	add	r3, r2
 8002002:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
		h = humidity / 10.0;
 8002006:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002012:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002016:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800201a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800201e:	4b2d      	ldr	r3, [pc, #180]	@ (80020d4 <draw_sensor_value+0x1a4>)
 8002020:	edc3 7a00 	vstr	s15, [r3]
	}

	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002024:	2001      	movs	r0, #1
 8002026:	f7fe ff29 	bl	8000e7c <ILI9341_Set_Rotation>
	char temp[100];

//	*hum = "55.6%%RH";
//	*temp = "27.1C";

	sprintf(hum, "%.1f%%RH", h);
 800202a:	4b2a      	ldr	r3, [pc, #168]	@ (80020d4 <draw_sensor_value+0x1a4>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002034:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8002038:	ec53 2b17 	vmov	r2, r3, d7
 800203c:	4926      	ldr	r1, [pc, #152]	@ (80020d8 <draw_sensor_value+0x1a8>)
 800203e:	f006 fcff 	bl	8008a40 <siprintf>
	sprintf(temp, "%.1fC", t);
 8002042:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <draw_sensor_value+0x1a0>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800204c:	4638      	mov	r0, r7
 800204e:	ec53 2b17 	vmov	r2, r3, d7
 8002052:	4922      	ldr	r1, [pc, #136]	@ (80020dc <draw_sensor_value+0x1ac>)
 8002054:	f006 fcf4 	bl	8008a40 <siprintf>

	int font_size = 2;
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	int text_pos_y = 38;
 800205e:	2326      	movs	r3, #38	@ 0x26
 8002060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	int temp_pos_x = 22-4;
 8002064:	2312      	movs	r3, #18
 8002066:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	int mois_pos_x = 160-4;
 800206a:	239c      	movs	r3, #156	@ 0x9c
 800206c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

	ILI9341_Draw_Text(temp, temp_pos_x, text_pos_y, BLACK, font_size, WHITE);
 8002070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002074:	b2d9      	uxtb	r1, r3
 8002076:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800207a:	b2da      	uxtb	r2, r3
 800207c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002080:	b29b      	uxth	r3, r3
 8002082:	4638      	mov	r0, r7
 8002084:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002088:	9401      	str	r4, [sp, #4]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2300      	movs	r3, #0
 800208e:	f7fe fc45 	bl	800091c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(hum, mois_pos_x, text_pos_y, BLACK, font_size, WHITE);
 8002092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002096:	b2d9      	uxtb	r1, r3
 8002098:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800209c:	b2da      	uxtb	r2, r3
 800209e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80020a8:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80020ac:	9401      	str	r4, [sp, #4]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2300      	movs	r3, #0
 80020b2:	f7fe fc33 	bl	800091c <ILI9341_Draw_Text>

	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7fe fee0 	bl	8000e7c <ILI9341_Set_Rotation>
}
 80020bc:	bf00      	nop
 80020be:	37e4      	adds	r7, #228	@ 0xe4
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	200004a4 	.word	0x200004a4
 80020c8:	20000438 	.word	0x20000438
 80020cc:	200004a8 	.word	0x200004a8
 80020d0:	20000014 	.word	0x20000014
 80020d4:	20000010 	.word	0x20000010
 80020d8:	0800abe0 	.word	0x0800abe0
 80020dc:	0800abec 	.word	0x0800abec

080020e0 <second_screen>:
void second_screen(){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

	if(isUpdateSecondPage == 1){
 80020e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <second_screen+0xb8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10b      	bne.n	8002106 <second_screen+0x26>
		ILI9341_Draw_Image((const char*)image_lcd, SCREEN_HORIZONTAL_1);
 80020ee:	2101      	movs	r1, #1
 80020f0:	482a      	ldr	r0, [pc, #168]	@ (800219c <second_screen+0xbc>)
 80020f2:	f7fe fc43 	bl	800097c <ILI9341_Draw_Image>
		draw_text_character_info();
 80020f6:	f000 f891 	bl	800221c <draw_text_character_info>

		HAL_TIM_Base_Start_IT(&htim2);
 80020fa:	4829      	ldr	r0, [pc, #164]	@ (80021a0 <second_screen+0xc0>)
 80020fc:	f004 fba6 	bl	800684c <HAL_TIM_Base_Start_IT>

		isUpdateSecondPage = 0;
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <second_screen+0xb8>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
	}

	if(count_time == 5){
 8002106:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <second_screen+0xc4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d10f      	bne.n	800212e <second_screen+0x4e>
		ILI9341_Fill_Screen(WHITE);
 800210e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002112:	f7ff f8bd 	bl	8001290 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002116:	2000      	movs	r0, #0
 8002118:	f7fe feb0 	bl	8000e7c <ILI9341_Set_Rotation>
		next_screen = 0;
 800211c:	4b22      	ldr	r3, [pc, #136]	@ (80021a8 <second_screen+0xc8>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
		count_time = 0;
 8002122:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <second_screen+0xc4>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

		HAL_TIM_Base_Stop_IT(&htim2);
 8002128:	481d      	ldr	r0, [pc, #116]	@ (80021a0 <second_screen+0xc0>)
 800212a:	f004 fc07 	bl	800693c <HAL_TIM_Base_Stop_IT>
//	ILI9341_Draw_Filled_Circle(8, 50, 3, RED);
//	ILI9341_Draw_Filled_Circle(121, 50, 3, RED);
//	ILI9341_Draw_Filled_Circle(8, 190, 3, RED);
//	ILI9341_Draw_Filled_Circle(121, 190, 3, RED);

	HAL_Delay(20);
 800212e:	2014      	movs	r0, #20
 8002130:	f001 f936 	bl	80033a0 <HAL_Delay>
	if(TP_Touchpad_Pressed()){
 8002134:	f7ff fb2e 	bl	8001794 <TP_Touchpad_Pressed>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d027      	beq.n	800218e <second_screen+0xae>
	  uint16_t x_pos = 0 ;
 800213e:	2300      	movs	r3, #0
 8002140:	80fb      	strh	r3, [r7, #6]
	  uint16_t y_pos = 0 ;
 8002142:	2300      	movs	r3, #0
 8002144:	80bb      	strh	r3, [r7, #4]

	  uint16_t pos_array[2];

	  if(TP_Read_Coordinates(pos_array) == TOUCHPAD_DATA_OK){
 8002146:	463b      	mov	r3, r7
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fa61 	bl	8001610 <TP_Read_Coordinates>
 800214e:	4603      	mov	r3, r0
 8002150:	2b01      	cmp	r3, #1
 8002152:	d11c      	bne.n	800218e <second_screen+0xae>
		  x_pos = pos_array[0];
 8002154:	883b      	ldrh	r3, [r7, #0]
 8002156:	80fb      	strh	r3, [r7, #6]
		  y_pos = pos_array[1];
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	80bb      	strh	r3, [r7, #4]

//		  back to first screen
		  if(is_detect_picture(x_pos, y_pos) == 1){
 800215c:	88ba      	ldrh	r2, [r7, #4]
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f822 	bl	80021ac <is_detect_picture>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10f      	bne.n	800218e <second_screen+0xae>
			  ILI9341_Fill_Screen(WHITE);
 800216e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002172:	f7ff f88d 	bl	8001290 <ILI9341_Fill_Screen>
			  ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002176:	2000      	movs	r0, #0
 8002178:	f7fe fe80 	bl	8000e7c <ILI9341_Set_Rotation>
			  next_screen = 0;
 800217c:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <second_screen+0xc8>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
			  count_time = 0;
 8002182:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <second_screen+0xc4>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

			  HAL_TIM_Base_Stop_IT(&htim2);
 8002188:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <second_screen+0xc0>)
 800218a:	f004 fbd7 	bl	800693c <HAL_TIM_Base_Stop_IT>

	  }
	}


}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	0800ae8c 	.word	0x0800ae8c
 80021a0:	20000518 	.word	0x20000518
 80021a4:	20000498 	.word	0x20000498
 80021a8:	2000049c 	.word	0x2000049c

080021ac <is_detect_picture>:

int is_detect_picture(uint16_t pos_x, uint16_t pos_y ){
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	460a      	mov	r2, r1
 80021b6:	80fb      	strh	r3, [r7, #6]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80bb      	strh	r3, [r7, #4]
	int picture_x1 = 8;
 80021bc:	2308      	movs	r3, #8
 80021be:	61fb      	str	r3, [r7, #28]
	int picture_x2 = 121;
 80021c0:	2379      	movs	r3, #121	@ 0x79
 80021c2:	61bb      	str	r3, [r7, #24]
	int picture_y1 = 50;
 80021c4:	2332      	movs	r3, #50	@ 0x32
 80021c6:	617b      	str	r3, [r7, #20]
	int picture_y2 = 190;
 80021c8:	23be      	movs	r3, #190	@ 0xbe
 80021ca:	613b      	str	r3, [r7, #16]
//	ILI9341_Draw_Filled_Circle(picture_x1, picture_y1, 2, RED);
//	ILI9341_Draw_Filled_Circle(picture_x1, picture_y2, 2, RED);
//	ILI9341_Draw_Filled_Circle(picture_x2, picture_y1, 2, RED);
//	ILI9341_Draw_Filled_Circle(picture_x2, picture_y2, 2, RED);

	uint8_t in_x = (pos_x > picture_x1) && (pos_x < picture_x2);
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	da05      	bge.n	80021e0 <is_detect_picture+0x34>
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dd01      	ble.n	80021e0 <is_detect_picture+0x34>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <is_detect_picture+0x36>
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
	uint8_t in_y = (pos_y > picture_y1) && (pos_y < picture_y2);
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	da05      	bge.n	80021f8 <is_detect_picture+0x4c>
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dd01      	ble.n	80021f8 <is_detect_picture+0x4c>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <is_detect_picture+0x4e>
 80021f8:	2300      	movs	r3, #0
 80021fa:	73bb      	strb	r3, [r7, #14]

	if(in_x && in_y){
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <is_detect_picture+0x60>
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <is_detect_picture+0x60>
		return 1;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <is_detect_picture+0x62>
	}
	return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <draw_text_character_info>:

void draw_text_character_info(){
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	b09c      	sub	sp, #112	@ 0x70
 8002220:	af02      	add	r7, sp, #8
	char group[]      = "Group No.41";
 8002222:	4a47      	ldr	r2, [pc, #284]	@ (8002340 <draw_text_character_info+0x124>)
 8002224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002228:	ca07      	ldmia	r2, {r0, r1, r2}
 800222a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char first_name[] = "   Jimmy  ";
 800222e:	4a45      	ldr	r2, [pc, #276]	@ (8002344 <draw_text_character_info+0x128>)
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	ca07      	ldmia	r2, {r0, r1, r2}
 8002236:	c303      	stmia	r3!, {r0, r1}
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	3302      	adds	r3, #2
 800223c:	0c12      	lsrs	r2, r2, #16
 800223e:	701a      	strb	r2, [r3, #0]
	char last_name[]  = "   Kudo   ";
 8002240:	4a41      	ldr	r2, [pc, #260]	@ (8002348 <draw_text_character_info+0x12c>)
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	ca07      	ldmia	r2, {r0, r1, r2}
 8002248:	c303      	stmia	r3!, {r0, r1}
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	3302      	adds	r3, #2
 800224e:	0c12      	lsrs	r2, r2, #16
 8002250:	701a      	strb	r2, [r3, #0]
	char student_id[] = " 66010572 ";
 8002252:	4a3e      	ldr	r2, [pc, #248]	@ (800234c <draw_text_character_info+0x130>)
 8002254:	463b      	mov	r3, r7
 8002256:	ca07      	ldmia	r2, {r0, r1, r2}
 8002258:	c303      	stmia	r3!, {r0, r1}
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	3302      	adds	r3, #2
 800225e:	0c12      	lsrs	r2, r2, #16
 8002260:	701a      	strb	r2, [r3, #0]

	int div_text_x = 130;
 8002262:	2382      	movs	r3, #130	@ 0x82
 8002264:	667b      	str	r3, [r7, #100]	@ 0x64
	int shift_y = 32;
 8002266:	2320      	movs	r3, #32
 8002268:	663b      	str	r3, [r7, #96]	@ 0x60
	int div_text_start_y = 62;
 800226a:	233e      	movs	r3, #62	@ 0x3e
 800226c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int font_size = 2;
 800226e:	2302      	movs	r3, #2
 8002270:	65bb      	str	r3, [r7, #88]	@ 0x58
	int text_color = color_big_circle;
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <draw_text_character_info+0x134>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	657b      	str	r3, [r7, #84]	@ 0x54
	int backgorund_color = WHITE;
 8002278:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800227c:	653b      	str	r3, [r7, #80]	@ 0x50

	int group_pos_x = div_text_x;
 800227e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002280:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int group_pos_y = div_text_start_y;
 8002282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002284:	64bb      	str	r3, [r7, #72]	@ 0x48

	int first_pos_x = div_text_x;
 8002286:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002288:	647b      	str	r3, [r7, #68]	@ 0x44
	int first_pos_y = div_text_start_y + shift_y;
 800228a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800228c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800228e:	4413      	add	r3, r2
 8002290:	643b      	str	r3, [r7, #64]	@ 0x40

	int last_pos_x = div_text_x;
 8002292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002294:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int last_pos_y = first_pos_y + shift_y;
 8002296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800229a:	4413      	add	r3, r2
 800229c:	63bb      	str	r3, [r7, #56]	@ 0x38

	int id_pos_x = div_text_x;
 800229e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
	int id_pos_y = last_pos_y + shift_y;
 80022a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022a6:	4413      	add	r3, r2
 80022a8:	633b      	str	r3, [r7, #48]	@ 0x30



//	ILI9341_Draw_Filled_Circle(20, 80, 10, RED);

	ILI9341_Draw_Text(group, group_pos_x, group_pos_y, text_color , font_size, backgorund_color);
 80022aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ac:	b2d9      	uxtb	r1, r3
 80022ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022b0:	b2dc      	uxtb	r4, r3
 80022b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b4:	b29d      	uxth	r5, r3
 80022b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022bc:	b292      	uxth	r2, r2
 80022be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80022c2:	9201      	str	r2, [sp, #4]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	462b      	mov	r3, r5
 80022c8:	4622      	mov	r2, r4
 80022ca:	f7fe fb27 	bl	800091c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(first_name, first_pos_x, first_pos_y, text_color , font_size, backgorund_color);
 80022ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d0:	b2d9      	uxtb	r1, r3
 80022d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d4:	b2dc      	uxtb	r4, r3
 80022d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d8:	b29d      	uxth	r5, r3
 80022da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022dc:	b29b      	uxth	r3, r3
 80022de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022e0:	b292      	uxth	r2, r2
 80022e2:	f107 0018 	add.w	r0, r7, #24
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	462b      	mov	r3, r5
 80022ec:	4622      	mov	r2, r4
 80022ee:	f7fe fb15 	bl	800091c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(last_name, last_pos_x, last_pos_y, text_color , font_size, backgorund_color);
 80022f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f4:	b2d9      	uxtb	r1, r3
 80022f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f8:	b2dc      	uxtb	r4, r3
 80022fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fc:	b29d      	uxth	r5, r3
 80022fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002300:	b29b      	uxth	r3, r3
 8002302:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002304:	b292      	uxth	r2, r2
 8002306:	f107 000c 	add.w	r0, r7, #12
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	462b      	mov	r3, r5
 8002310:	4622      	mov	r2, r4
 8002312:	f7fe fb03 	bl	800091c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(student_id, id_pos_x, id_pos_y, text_color , font_size, backgorund_color);
 8002316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002318:	b2d9      	uxtb	r1, r3
 800231a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231c:	b2dc      	uxtb	r4, r3
 800231e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002320:	b29d      	uxth	r5, r3
 8002322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002324:	b29b      	uxth	r3, r3
 8002326:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002328:	b292      	uxth	r2, r2
 800232a:	4638      	mov	r0, r7
 800232c:	9201      	str	r2, [sp, #4]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	462b      	mov	r3, r5
 8002332:	4622      	mov	r2, r4
 8002334:	f7fe faf2 	bl	800091c <ILI9341_Draw_Text>


}
 8002338:	bf00      	nop
 800233a:	3768      	adds	r7, #104	@ 0x68
 800233c:	46bd      	mov	sp, r7
 800233e:	bdb0      	pop	{r4, r5, r7, pc}
 8002340:	0800abf4 	.word	0x0800abf4
 8002344:	0800ac00 	.word	0x0800ac00
 8002348:	0800ac0c 	.word	0x0800ac0c
 800234c:	0800ac18 	.word	0x0800ac18
 8002350:	200004a0 	.word	0x200004a0

08002354 <main_screen>:

void main_screen(){
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0

	if (isUpdate == 1){
 800235a:	4b52      	ldr	r3, [pc, #328]	@ (80024a4 <main_screen+0x150>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d11a      	bne.n	8002398 <main_screen+0x44>
		  ILI9341_Draw_Image((const char*)conan, SCREEN_HORIZONTAL_1);
 8002362:	2101      	movs	r1, #1
 8002364:	4850      	ldr	r0, [pc, #320]	@ (80024a8 <main_screen+0x154>)
 8002366:	f7fe fb09 	bl	800097c <ILI9341_Draw_Image>
		  ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800236a:	2000      	movs	r0, #0
 800236c:	f7fe fd86 	bl	8000e7c <ILI9341_Set_Rotation>
		  draw_base_progress_bar();
 8002370:	f000 f9d8 	bl	8002724 <draw_base_progress_bar>
		  draw_div_circle();
 8002374:	f000 f980 	bl	8002678 <draw_div_circle>
		  isUpdate = 0;
 8002378:	4b4a      	ldr	r3, [pc, #296]	@ (80024a4 <main_screen+0x150>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
		  color_big_circle = mixedColor(red_value, green_value, blue_value);
 800237e:	4b4b      	ldr	r3, [pc, #300]	@ (80024ac <main_screen+0x158>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a4b      	ldr	r2, [pc, #300]	@ (80024b0 <main_screen+0x15c>)
 8002384:	6811      	ldr	r1, [r2, #0]
 8002386:	4a4b      	ldr	r2, [pc, #300]	@ (80024b4 <main_screen+0x160>)
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fa30 	bl	80027f0 <mixedColor>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	4b48      	ldr	r3, [pc, #288]	@ (80024b8 <main_screen+0x164>)
 8002396:	801a      	strh	r2, [r3, #0]
	  }

	  draw_big_circle();
 8002398:	f000 f9aa 	bl	80026f0 <draw_big_circle>
	  draw_sensor_value();
 800239c:	f7ff fdc8 	bl	8001f30 <draw_sensor_value>

	  HAL_Delay(20);
 80023a0:	2014      	movs	r0, #20
 80023a2:	f000 fffd 	bl	80033a0 <HAL_Delay>
	  if(TP_Touchpad_Pressed()){
 80023a6:	f7ff f9f5 	bl	8001794 <TP_Touchpad_Pressed>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d06b      	beq.n	8002488 <main_screen+0x134>
		  uint16_t x_pos = 0 ;
 80023b0:	2300      	movs	r3, #0
 80023b2:	81fb      	strh	r3, [r7, #14]
		  uint16_t y_pos = 0 ;
 80023b4:	2300      	movs	r3, #0
 80023b6:	81bb      	strh	r3, [r7, #12]

		  uint16_t pos_array[2];

		  if(TP_Read_Coordinates(pos_array) == TOUCHPAD_DATA_OK){
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f928 	bl	8001610 <TP_Read_Coordinates>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d153      	bne.n	800246e <main_screen+0x11a>
			  x_pos = pos_array[0];
 80023c6:	88bb      	ldrh	r3, [r7, #4]
 80023c8:	81fb      	strh	r3, [r7, #14]
			  y_pos = pos_array[1];
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	81bb      	strh	r3, [r7, #12]

			  char *circle_detected = isDetectCircle(x_pos, y_pos);
 80023ce:	89ba      	ldrh	r2, [r7, #12]
 80023d0:	89fb      	ldrh	r3, [r7, #14]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f87d 	bl	80024d4 <isDetectCircle>
 80023da:	60b8      	str	r0, [r7, #8]

			  if(circle_detected == "RED"){
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4a37      	ldr	r2, [pc, #220]	@ (80024bc <main_screen+0x168>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d111      	bne.n	8002408 <main_screen+0xb4>
				  if (red_value == 100){
 80023e4:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <main_screen+0x158>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b64      	cmp	r3, #100	@ 0x64
 80023ea:	d105      	bne.n	80023f8 <main_screen+0xa4>
					  red_value = 0;
 80023ec:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <main_screen+0x158>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
					  draw_base_progress_bar();
 80023f2:	f000 f997 	bl	8002724 <draw_base_progress_bar>
 80023f6:	e03a      	b.n	800246e <main_screen+0x11a>
//					  draw_div_circle();
				  }else{
					  red_value += increase_progress_bar_rate;
 80023f8:	4b2c      	ldr	r3, [pc, #176]	@ (80024ac <main_screen+0x158>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b30      	ldr	r3, [pc, #192]	@ (80024c0 <main_screen+0x16c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4413      	add	r3, r2
 8002402:	4a2a      	ldr	r2, [pc, #168]	@ (80024ac <main_screen+0x158>)
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e032      	b.n	800246e <main_screen+0x11a>
				  }

			  }
			  else if(circle_detected == "GREEN"){
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4a2e      	ldr	r2, [pc, #184]	@ (80024c4 <main_screen+0x170>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d111      	bne.n	8002434 <main_screen+0xe0>
				  if(green_value == 100){
 8002410:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <main_screen+0x15c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b64      	cmp	r3, #100	@ 0x64
 8002416:	d105      	bne.n	8002424 <main_screen+0xd0>
					  green_value = 0;
 8002418:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <main_screen+0x15c>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
					  draw_base_progress_bar();
 800241e:	f000 f981 	bl	8002724 <draw_base_progress_bar>
 8002422:	e024      	b.n	800246e <main_screen+0x11a>
//					  draw_div_circle();
				  }else{
					  green_value += increase_progress_bar_rate;
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <main_screen+0x15c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <main_screen+0x16c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4413      	add	r3, r2
 800242e:	4a20      	ldr	r2, [pc, #128]	@ (80024b0 <main_screen+0x15c>)
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01c      	b.n	800246e <main_screen+0x11a>
				  }

			  }
			  else if(circle_detected == "BLUE"){
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4a24      	ldr	r2, [pc, #144]	@ (80024c8 <main_screen+0x174>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d111      	bne.n	8002460 <main_screen+0x10c>
				  if (blue_value == 100){
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <main_screen+0x160>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b64      	cmp	r3, #100	@ 0x64
 8002442:	d105      	bne.n	8002450 <main_screen+0xfc>
					  blue_value = 0;
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <main_screen+0x160>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
					  draw_base_progress_bar();
 800244a:	f000 f96b 	bl	8002724 <draw_base_progress_bar>
 800244e:	e00e      	b.n	800246e <main_screen+0x11a>
//					  draw_div_circle();
				  }else{
					  blue_value += increase_progress_bar_rate;
 8002450:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <main_screen+0x160>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <main_screen+0x16c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4413      	add	r3, r2
 800245a:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <main_screen+0x160>)
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e006      	b.n	800246e <main_screen+0x11a>
				  }
			  }
			  else if(circle_detected == "BIG"){
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4a1a      	ldr	r2, [pc, #104]	@ (80024cc <main_screen+0x178>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d102      	bne.n	800246e <main_screen+0x11a>
				  next_screen = 1;
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <main_screen+0x17c>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
			  }
			  else if(circle_detected == "NONE"){

			  }
		  }
		  color_big_circle = mixedColor(red_value, green_value, blue_value);
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <main_screen+0x158>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0f      	ldr	r2, [pc, #60]	@ (80024b0 <main_screen+0x15c>)
 8002474:	6811      	ldr	r1, [r2, #0]
 8002476:	4a0f      	ldr	r2, [pc, #60]	@ (80024b4 <main_screen+0x160>)
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f9b8 	bl	80027f0 <mixedColor>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <main_screen+0x164>)
 8002486:	801a      	strh	r2, [r3, #0]
	  }

	  draw_value_prog_bar(red_value, green_value, blue_value);
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <main_screen+0x158>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a08      	ldr	r2, [pc, #32]	@ (80024b0 <main_screen+0x15c>)
 800248e:	6811      	ldr	r1, [r2, #0]
 8002490:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <main_screen+0x160>)
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fa27 	bl	80028e8 <draw_value_prog_bar>

}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000004 	.word	0x20000004
 80024a8:	0803068c 	.word	0x0803068c
 80024ac:	2000048c 	.word	0x2000048c
 80024b0:	20000490 	.word	0x20000490
 80024b4:	20000494 	.word	0x20000494
 80024b8:	200004a0 	.word	0x200004a0
 80024bc:	0800ac24 	.word	0x0800ac24
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	0800ac28 	.word	0x0800ac28
 80024c8:	0800ac30 	.word	0x0800ac30
 80024cc:	0800ac38 	.word	0x0800ac38
 80024d0:	2000049c 	.word	0x2000049c

080024d4 <isDetectCircle>:


char* isDetectCircle(uint16_t pos_x, uint16_t pos_y){
 80024d4:	b480      	push	{r7}
 80024d6:	b08f      	sub	sp, #60	@ 0x3c
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	460a      	mov	r2, r1
 80024de:	80fb      	strh	r3, [r7, #6]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80bb      	strh	r3, [r7, #4]
	int red_circle_pos_x = 130;
 80024e4:	2382      	movs	r3, #130	@ 0x82
 80024e6:	637b      	str	r3, [r7, #52]	@ 0x34
	int green_circle_pos_x = 80;
 80024e8:	2350      	movs	r3, #80	@ 0x50
 80024ea:	633b      	str	r3, [r7, #48]	@ 0x30
	int blue_circle_pos_x = 30;
 80024ec:	231e      	movs	r3, #30
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

	int circle_pos_y = 40;
 80024f0:	2328      	movs	r3, #40	@ 0x28
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	int circle_radius = 20;
 80024f4:	2314      	movs	r3, #20
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24

	uint8_t in_red_circle_x = pos_x > red_circle_pos_x - circle_radius &&  pos_x < red_circle_pos_x + circle_radius;
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	1acb      	subs	r3, r1, r3
 8002500:	429a      	cmp	r2, r3
 8002502:	dd07      	ble.n	8002514 <isDetectCircle+0x40>
 8002504:	88fa      	ldrh	r2, [r7, #6]
 8002506:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	440b      	add	r3, r1
 800250c:	429a      	cmp	r2, r3
 800250e:	da01      	bge.n	8002514 <isDetectCircle+0x40>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <isDetectCircle+0x42>
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t in_red_circle_y =  pos_y > circle_pos_y - circle_radius && pos_y < circle_pos_y + circle_radius;
 800251a:	88ba      	ldrh	r2, [r7, #4]
 800251c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	1acb      	subs	r3, r1, r3
 8002522:	429a      	cmp	r2, r3
 8002524:	dd07      	ble.n	8002536 <isDetectCircle+0x62>
 8002526:	88ba      	ldrh	r2, [r7, #4]
 8002528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	440b      	add	r3, r1
 800252e:	429a      	cmp	r2, r3
 8002530:	da01      	bge.n	8002536 <isDetectCircle+0x62>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <isDetectCircle+0x64>
 8002536:	2300      	movs	r3, #0
 8002538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	uint8_t in_green_circle_x = pos_x > green_circle_pos_x - circle_radius &&  pos_x < green_circle_pos_x + circle_radius;
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	1acb      	subs	r3, r1, r3
 8002544:	429a      	cmp	r2, r3
 8002546:	dd07      	ble.n	8002558 <isDetectCircle+0x84>
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	440b      	add	r3, r1
 8002550:	429a      	cmp	r2, r3
 8002552:	da01      	bge.n	8002558 <isDetectCircle+0x84>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <isDetectCircle+0x86>
 8002558:	2300      	movs	r3, #0
 800255a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t in_green_circle_y =  pos_y > circle_pos_y - circle_radius && pos_y < circle_pos_y + circle_radius;
 800255e:	88ba      	ldrh	r2, [r7, #4]
 8002560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	1acb      	subs	r3, r1, r3
 8002566:	429a      	cmp	r2, r3
 8002568:	dd07      	ble.n	800257a <isDetectCircle+0xa6>
 800256a:	88ba      	ldrh	r2, [r7, #4]
 800256c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	440b      	add	r3, r1
 8002572:	429a      	cmp	r2, r3
 8002574:	da01      	bge.n	800257a <isDetectCircle+0xa6>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <isDetectCircle+0xa8>
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3020 	strb.w	r3, [r7, #32]

	uint8_t in_blue_circle_x = pos_x > blue_circle_pos_x - circle_radius &&  pos_x < blue_circle_pos_x + circle_radius;
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	1acb      	subs	r3, r1, r3
 8002588:	429a      	cmp	r2, r3
 800258a:	dd07      	ble.n	800259c <isDetectCircle+0xc8>
 800258c:	88fa      	ldrh	r2, [r7, #6]
 800258e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	440b      	add	r3, r1
 8002594:	429a      	cmp	r2, r3
 8002596:	da01      	bge.n	800259c <isDetectCircle+0xc8>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <isDetectCircle+0xca>
 800259c:	2300      	movs	r3, #0
 800259e:	77fb      	strb	r3, [r7, #31]
	uint8_t in_blue_circle_y =  pos_y > circle_pos_y - circle_radius && pos_y < circle_pos_y + circle_radius;
 80025a0:	88ba      	ldrh	r2, [r7, #4]
 80025a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	1acb      	subs	r3, r1, r3
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dd07      	ble.n	80025bc <isDetectCircle+0xe8>
 80025ac:	88ba      	ldrh	r2, [r7, #4]
 80025ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	440b      	add	r3, r1
 80025b4:	429a      	cmp	r2, r3
 80025b6:	da01      	bge.n	80025bc <isDetectCircle+0xe8>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <isDetectCircle+0xea>
 80025bc:	2300      	movs	r3, #0
 80025be:	77bb      	strb	r3, [r7, #30]

	int big_circle_pos_x = 196;
 80025c0:	23c4      	movs	r3, #196	@ 0xc4
 80025c2:	61bb      	str	r3, [r7, #24]
	int big_circle_pos_y = 125;
 80025c4:	237d      	movs	r3, #125	@ 0x7d
 80025c6:	617b      	str	r3, [r7, #20]
	int big_radius = 25;
 80025c8:	2319      	movs	r3, #25
 80025ca:	613b      	str	r3, [r7, #16]

	uint8_t in_big_circle_x = pos_x > big_circle_pos_x - big_radius &&  pos_x < big_circle_pos_x + big_radius;
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1acb      	subs	r3, r1, r3
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dd07      	ble.n	80025e8 <isDetectCircle+0x114>
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	440b      	add	r3, r1
 80025e0:	429a      	cmp	r2, r3
 80025e2:	da01      	bge.n	80025e8 <isDetectCircle+0x114>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <isDetectCircle+0x116>
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
	uint8_t in_big_circle_y =  pos_y > big_circle_pos_y - big_radius && pos_y < big_circle_pos_y + big_radius;
 80025ec:	88ba      	ldrh	r2, [r7, #4]
 80025ee:	6979      	ldr	r1, [r7, #20]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1acb      	subs	r3, r1, r3
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dd07      	ble.n	8002608 <isDetectCircle+0x134>
 80025f8:	88ba      	ldrh	r2, [r7, #4]
 80025fa:	6979      	ldr	r1, [r7, #20]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	440b      	add	r3, r1
 8002600:	429a      	cmp	r2, r3
 8002602:	da01      	bge.n	8002608 <isDetectCircle+0x134>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <isDetectCircle+0x136>
 8002608:	2300      	movs	r3, #0
 800260a:	73bb      	strb	r3, [r7, #14]

	if (in_red_circle_x && in_red_circle_y){
 800260c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <isDetectCircle+0x14c>
 8002614:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <isDetectCircle+0x14c>
		return "RED";
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <isDetectCircle+0x190>)
 800261e:	e01a      	b.n	8002656 <isDetectCircle+0x182>
	}
	else if(in_green_circle_x && in_green_circle_y){
 8002620:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <isDetectCircle+0x160>
 8002628:	f897 3020 	ldrb.w	r3, [r7, #32]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <isDetectCircle+0x160>
		return "GREEN";
 8002630:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <isDetectCircle+0x194>)
 8002632:	e010      	b.n	8002656 <isDetectCircle+0x182>
	}
	else if (in_blue_circle_x && in_blue_circle_y){
 8002634:	7ffb      	ldrb	r3, [r7, #31]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <isDetectCircle+0x170>
 800263a:	7fbb      	ldrb	r3, [r7, #30]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <isDetectCircle+0x170>
		return "BLUE";
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <isDetectCircle+0x198>)
 8002642:	e008      	b.n	8002656 <isDetectCircle+0x182>
	}
	else if(in_big_circle_x && in_big_circle_y){
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <isDetectCircle+0x180>
 800264a:	7bbb      	ldrb	r3, [r7, #14]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <isDetectCircle+0x180>
		return "BIG";
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <isDetectCircle+0x19c>)
 8002652:	e000      	b.n	8002656 <isDetectCircle+0x182>
	}
	else{
		return"NONE";
 8002654:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <isDetectCircle+0x1a0>)
	}
}
 8002656:	4618      	mov	r0, r3
 8002658:	373c      	adds	r7, #60	@ 0x3c
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	0800ac24 	.word	0x0800ac24
 8002668:	0800ac28 	.word	0x0800ac28
 800266c:	0800ac30 	.word	0x0800ac30
 8002670:	0800ac38 	.word	0x0800ac38
 8002674:	0800ac3c 	.word	0x0800ac3c

08002678 <draw_div_circle>:

void draw_div_circle(void){
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
	  int div_circle_position_y = 46;
 800267e:	232e      	movs	r3, #46	@ 0x2e
 8002680:	617b      	str	r3, [r7, #20]
	  int circle_red_position_x = 130;
 8002682:	2382      	movs	r3, #130	@ 0x82
 8002684:	613b      	str	r3, [r7, #16]
	  int circle_green_position_x = 80;
 8002686:	2350      	movs	r3, #80	@ 0x50
 8002688:	60fb      	str	r3, [r7, #12]
	  int circle_blue_position_x = 30;
 800268a:	231e      	movs	r3, #30
 800268c:	60bb      	str	r3, [r7, #8]
	  int div_circle_radius = 20;
 800268e:	2314      	movs	r3, #20
 8002690:	607b      	str	r3, [r7, #4]

	  int shift_circle_x = 10;
 8002692:	230a      	movs	r3, #10
 8002694:	603b      	str	r3, [r7, #0]

	  ILI9341_Draw_Filled_Circle(circle_red_position_x + shift_circle_x, div_circle_position_y, div_circle_radius, RED);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	b29a      	uxth	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4413      	add	r3, r2
 80026a0:	b298      	uxth	r0, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	b299      	uxth	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80026ae:	f7fd ffb5 	bl	800061c <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Circle(circle_green_position_x +shift_circle_x,  div_circle_position_y, div_circle_radius, GREEN);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	b298      	uxth	r0, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	b299      	uxth	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80026ca:	f7fd ffa7 	bl	800061c <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Circle(circle_blue_position_x +shift_circle_x,  div_circle_position_y, div_circle_radius, BLUE);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	b298      	uxth	r0, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	b299      	uxth	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	231f      	movs	r3, #31
 80026e4:	f7fd ff9a 	bl	800061c <ILI9341_Draw_Filled_Circle>
}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <draw_big_circle>:

void draw_big_circle(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
	int big_circle_position_x = 196;
 80026f6:	23c4      	movs	r3, #196	@ 0xc4
 80026f8:	60fb      	str	r3, [r7, #12]
	int big_circle_position_y = 116;
 80026fa:	2374      	movs	r3, #116	@ 0x74
 80026fc:	60bb      	str	r3, [r7, #8]
	int big_radius = 25;
 80026fe:	2319      	movs	r3, #25
 8002700:	607b      	str	r3, [r7, #4]
	ILI9341_Draw_Filled_Circle(big_circle_position_x , big_circle_position_y, big_radius, color_big_circle);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	b298      	uxth	r0, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	b299      	uxth	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <draw_big_circle+0x30>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	f7fd ff83 	bl	800061c <ILI9341_Draw_Filled_Circle>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200004a0 	.word	0x200004a0

08002724 <draw_base_progress_bar>:

void draw_base_progress_bar(void){
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b08d      	sub	sp, #52	@ 0x34
 8002728:	af02      	add	r7, sp, #8
	int div_prog_bar_position_y = 70;
 800272a:	2346      	movs	r3, #70	@ 0x46
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
	int div_prog_bar_position_x = 153;
 800272e:	2399      	movs	r3, #153	@ 0x99
 8002730:	623b      	str	r3, [r7, #32]

	int shift_x = 50;
 8002732:	2332      	movs	r3, #50	@ 0x32
 8002734:	61fb      	str	r3, [r7, #28]
	int prog_bar_base_red_x = div_prog_bar_position_x;
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	61bb      	str	r3, [r7, #24]
	int prog_bar_base_green_x = div_prog_bar_position_x - shift_x;
 800273a:	6a3a      	ldr	r2, [r7, #32]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
	int prog_bar_base_blue_x = prog_bar_base_green_x - shift_x;
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	613b      	str	r3, [r7, #16]

	int w_size = 130;
 800274a:	2382      	movs	r3, #130	@ 0x82
 800274c:	60fb      	str	r3, [r7, #12]
	int h_size = 28;
 800274e:	231c      	movs	r3, #28
 8002750:	60bb      	str	r3, [r7, #8]

	const uint16_t prog_bar_base_color_red = 62870;
 8002752:	f24f 5396 	movw	r3, #62870	@ 0xf596
 8002756:	80fb      	strh	r3, [r7, #6]
	const uint16_t prog_bar_base_color_green = 47030;
 8002758:	f24b 73b6 	movw	r3, #47030	@ 0xb7b6
 800275c:	80bb      	strh	r3, [r7, #4]
	const uint16_t prog_bar_base_color_blue = 46590;
 800275e:	f24b 53fe 	movw	r3, #46590	@ 0xb5fe
 8002762:	807b      	strh	r3, [r7, #2]

	ILI9341_Draw_Filled_Rectangle_Coord(prog_bar_base_red_x, div_prog_bar_position_y, prog_bar_base_red_x -h_size , div_prog_bar_position_y + w_size, prog_bar_base_color_red );
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	b298      	uxth	r0, r3
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	b299      	uxth	r1, r3
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	b29a      	uxth	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	b29b      	uxth	r3, r3
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	b29c      	uxth	r4, r3
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b29a      	uxth	r2, r3
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	4622      	mov	r2, r4
 800278c:	f7fd ffce 	bl	800072c <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(prog_bar_base_green_x, div_prog_bar_position_y, prog_bar_base_green_x -h_size , div_prog_bar_position_y + w_size, prog_bar_base_color_green );
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	b298      	uxth	r0, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	b299      	uxth	r1, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	b29a      	uxth	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	b29c      	uxth	r4, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	88bb      	ldrh	r3, [r7, #4]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	4622      	mov	r2, r4
 80027b8:	f7fd ffb8 	bl	800072c <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(prog_bar_base_blue_x, div_prog_bar_position_y, prog_bar_base_blue_x -h_size , div_prog_bar_position_y + w_size, prog_bar_base_color_blue );
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	b298      	uxth	r0, r3
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	b299      	uxth	r1, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	b29c      	uxth	r4, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4413      	add	r3, r2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	4622      	mov	r2, r4
 80027e4:	f7fd ffa2 	bl	800072c <ILI9341_Draw_Filled_Rectangle_Coord>
}
 80027e8:	bf00      	nop
 80027ea:	372c      	adds	r7, #44	@ 0x2c
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}

080027f0 <mixedColor>:

uint16_t mixedColor(int red_value, int green_value, int blue_value){
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	@ 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
	int r = (red_value * 31) / 100;
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	015b      	lsls	r3, r3, #5
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <mixedColor+0x78>)
 8002806:	fb82 1203 	smull	r1, r2, r2, r3
 800280a:	1152      	asrs	r2, r2, #5
 800280c:	17db      	asrs	r3, r3, #31
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	61fb      	str	r3, [r7, #28]
	int g = (green_value * 63) / 100;
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	4613      	mov	r3, r2
 8002816:	019b      	lsls	r3, r3, #6
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	4a13      	ldr	r2, [pc, #76]	@ (8002868 <mixedColor+0x78>)
 800281c:	fb82 1203 	smull	r1, r2, r2, r3
 8002820:	1152      	asrs	r2, r2, #5
 8002822:	17db      	asrs	r3, r3, #31
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	61bb      	str	r3, [r7, #24]
	int b = (blue_value * 31) /100;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	015b      	lsls	r3, r3, #5
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	4a0d      	ldr	r2, [pc, #52]	@ (8002868 <mixedColor+0x78>)
 8002832:	fb82 1203 	smull	r1, r2, r2, r3
 8002836:	1152      	asrs	r2, r2, #5
 8002838:	17db      	asrs	r3, r3, #31
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]

	return (r << 11) | (g << 5) | b;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	b21b      	sxth	r3, r3
 8002842:	02db      	lsls	r3, r3, #11
 8002844:	b21a      	sxth	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	b21b      	sxth	r3, r3
 800284a:	015b      	lsls	r3, r3, #5
 800284c:	b21b      	sxth	r3, r3
 800284e:	4313      	orrs	r3, r2
 8002850:	b21a      	sxth	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b21b      	sxth	r3, r3
 800285a:	b29b      	uxth	r3, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	3724      	adds	r7, #36	@ 0x24
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	51eb851f 	.word	0x51eb851f

0800286c <CRC16_2>:


uint16_t CRC16_2(uint8_t *ptr, uint8_t length ){
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8002878:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800287c:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 800287e:	2300      	movs	r3, #0
 8002880:	737b      	strb	r3, [r7, #13]

	while(length--){
 8002882:	e023      	b.n	80028cc <CRC16_2+0x60>
		crc ^= *ptr++;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	4053      	eors	r3, r2
 8002892:	81fb      	strh	r3, [r7, #14]
		for (s=0;s < 8; s++){
 8002894:	2300      	movs	r3, #0
 8002896:	737b      	strb	r3, [r7, #13]
 8002898:	e015      	b.n	80028c6 <CRC16_2+0x5a>
			if((crc & 0x01) != 0){
 800289a:	89fb      	ldrh	r3, [r7, #14]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <CRC16_2+0x4e>
				crc >>= 1;
 80028a4:	89fb      	ldrh	r3, [r7, #14]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80028b0:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80028b4:	43db      	mvns	r3, r3
 80028b6:	81fb      	strh	r3, [r7, #14]
 80028b8:	e002      	b.n	80028c0 <CRC16_2+0x54>
			}
			else{
				crc >>=1 ;
 80028ba:	89fb      	ldrh	r3, [r7, #14]
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	81fb      	strh	r3, [r7, #14]
		for (s=0;s < 8; s++){
 80028c0:	7b7b      	ldrb	r3, [r7, #13]
 80028c2:	3301      	adds	r3, #1
 80028c4:	737b      	strb	r3, [r7, #13]
 80028c6:	7b7b      	ldrb	r3, [r7, #13]
 80028c8:	2b07      	cmp	r3, #7
 80028ca:	d9e6      	bls.n	800289a <CRC16_2+0x2e>
	while(length--){
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	1e5a      	subs	r2, r3, #1
 80028d0:	70fa      	strb	r2, [r7, #3]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1d6      	bne.n	8002884 <CRC16_2+0x18>
			}
		}
	}

	return crc;
 80028d6:	89fb      	ldrh	r3, [r7, #14]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	0000      	movs	r0, r0
	...

080028e8 <draw_value_prog_bar>:
void draw_value_prog_bar(int red_value, int green_value, int blue_value){
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b0ab      	sub	sp, #172	@ 0xac
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
// fill prog bar
	int w_prog_bar_size = 130;
 80028f4:	2382      	movs	r3, #130	@ 0x82
 80028f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	int h_prog_bar_size = 28;
 80028fa:	231c      	movs	r3, #28
 80028fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	int div_prog_bar_position_y = 70;
 8002900:	2346      	movs	r3, #70	@ 0x46
 8002902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	int div_prog_bar_position_x = 153;
 8002906:	2399      	movs	r3, #153	@ 0x99
 8002908:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	int shift_x = 50;
 800290c:	2332      	movs	r3, #50	@ 0x32
 800290e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	int prog_bar_base_red_x = div_prog_bar_position_x;
 8002912:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002916:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	int prog_bar_base_green_x = prog_bar_base_red_x - shift_x;
 800291a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800291e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	int prog_bar_base_blue_x = prog_bar_base_green_x - shift_x;
 8002928:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800292c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	int w_size = 130;
 8002936:	2382      	movs	r3, #130	@ 0x82
 8002938:	67fb      	str	r3, [r7, #124]	@ 0x7c
	int h_size = 28;
 800293a:	231c      	movs	r3, #28
 800293c:	67bb      	str	r3, [r7, #120]	@ 0x78

	int w_size_red = (red_value/100.0)*130;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002948:	ed9f 5b73 	vldr	d5, [pc, #460]	@ 8002b18 <draw_value_prog_bar+0x230>
 800294c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002950:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8002b20 <draw_value_prog_bar+0x238>
 8002954:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002958:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800295c:	ee17 3a90 	vmov	r3, s15
 8002960:	677b      	str	r3, [r7, #116]	@ 0x74
	int w_size_green = (green_value/100.0)*130;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800296c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8002b18 <draw_value_prog_bar+0x230>
 8002970:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002974:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8002b20 <draw_value_prog_bar+0x238>
 8002978:	ee27 7b06 	vmul.f64	d7, d7, d6
 800297c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002980:	ee17 3a90 	vmov	r3, s15
 8002984:	673b      	str	r3, [r7, #112]	@ 0x70
	int w_size_blue = (blue_value/100.0)*130;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	ee07 3a90 	vmov	s15, r3
 800298c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002990:	ed9f 5b61 	vldr	d5, [pc, #388]	@ 8002b18 <draw_value_prog_bar+0x230>
 8002994:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002998:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8002b20 <draw_value_prog_bar+0x238>
 800299c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80029a4:	ee17 3a90 	vmov	r3, s15
 80029a8:	66fb      	str	r3, [r7, #108]	@ 0x6c

	const uint16_t prog_bar_base_color_red = RED;
 80029aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029ae:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	const uint16_t prog_bar_base_color_green = GREEN;
 80029b2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029b6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
	const uint16_t prog_bar_base_color_blue = BLUE;
 80029ba:	231f      	movs	r3, #31
 80029bc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

	ILI9341_Draw_Filled_Rectangle_Coord(prog_bar_base_red_x, div_prog_bar_position_y, prog_bar_base_red_x -h_size , div_prog_bar_position_y + w_size_red, prog_bar_base_color_red );
 80029c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029c4:	b298      	uxth	r0, r3
 80029c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029ca:	b299      	uxth	r1, r3
 80029cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	b29c      	uxth	r4, r3
 80029da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029de:	b29a      	uxth	r2, r3
 80029e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	4622      	mov	r2, r4
 80029f2:	f7fd fe9b 	bl	800072c <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(prog_bar_base_green_x, div_prog_bar_position_y, prog_bar_base_green_x -h_size , div_prog_bar_position_y + w_size_green, prog_bar_base_color_green );
 80029f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029fa:	b298      	uxth	r0, r3
 80029fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a00:	b299      	uxth	r1, r3
 8002a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	b29c      	uxth	r4, r3
 8002a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	4622      	mov	r2, r4
 8002a28:	f7fd fe80 	bl	800072c <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(prog_bar_base_blue_x, div_prog_bar_position_y, prog_bar_base_blue_x -h_size , div_prog_bar_position_y + w_size_blue, prog_bar_base_color_blue );
 8002a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a30:	b298      	uxth	r0, r3
 8002a32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a36:	b299      	uxth	r1, r3
 8002a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	b29c      	uxth	r4, r3
 8002a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	4622      	mov	r2, r4
 8002a5e:	f7fd fe65 	bl	800072c <ILI9341_Draw_Filled_Rectangle_Coord>
//  print text
	char buf_red[20];
	char buf_green[20];
	char buf_blue[20];

	sprintf(buf_red, "%d%%  ", red_value);
 8002a62:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	492f      	ldr	r1, [pc, #188]	@ (8002b28 <draw_value_prog_bar+0x240>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f005 ffe8 	bl	8008a40 <siprintf>
	sprintf(buf_green, "%d%%  ", green_value);
 8002a70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	492c      	ldr	r1, [pc, #176]	@ (8002b28 <draw_value_prog_bar+0x240>)
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 ffe1 	bl	8008a40 <siprintf>
	sprintf(buf_blue, "%d%%  ", blue_value);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4928      	ldr	r1, [pc, #160]	@ (8002b28 <draw_value_prog_bar+0x240>)
 8002a86:	4618      	mov	r0, r3
 8002a88:	f005 ffda 	bl	8008a40 <siprintf>

	int text_red_position_y = 91;
 8002a8c:	235b      	movs	r3, #91	@ 0x5b
 8002a8e:	663b      	str	r3, [r7, #96]	@ 0x60
	int text_green_position_y = text_red_position_y + 50 ;
 8002a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a92:	3332      	adds	r3, #50	@ 0x32
 8002a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int text_blue_position_y = text_green_position_y + 50;
 8002a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a98:	3332      	adds	r3, #50	@ 0x32
 8002a9a:	65bb      	str	r3, [r7, #88]	@ 0x58

	int size_font = 2;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	657b      	str	r3, [r7, #84]	@ 0x54
	int div_position_x = 205;
 8002aa0:	23cd      	movs	r3, #205	@ 0xcd
 8002aa2:	653b      	str	r3, [r7, #80]	@ 0x50
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f7fe f9e9 	bl	8000e7c <ILI9341_Set_Rotation>
	ILI9341_Draw_Text(buf_red, div_position_x , text_red_position_y , BLACK , size_font, WHITE);
 8002aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aac:	b2d9      	uxtb	r1, r3
 8002aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002aba:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002abe:	9401      	str	r4, [sp, #4]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f7fd ff2a 	bl	800091c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(buf_green, div_position_x , text_green_position_y , BLACK , size_font, WHITE);
 8002ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aca:	b2d9      	uxtb	r1, r3
 8002acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002ad8:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002adc:	9401      	str	r4, [sp, #4]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f7fd ff1b 	bl	800091c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(buf_blue, div_position_x , text_blue_position_y , BLACK , size_font, WHITE);
 8002ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ae8:	b2d9      	uxtb	r1, r3
 8002aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f107 0014 	add.w	r0, r7, #20
 8002af6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002afa:	9401      	str	r4, [sp, #4]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2300      	movs	r3, #0
 8002b00:	f7fd ff0c 	bl	800091c <ILI9341_Draw_Text>
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fe f9b9 	bl	8000e7c <ILI9341_Set_Rotation>
}
 8002b0a:	bf00      	nop
 8002b0c:	37a4      	adds	r7, #164	@ 0xa4
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	bf00      	nop
 8002b14:	f3af 8000 	nop.w
 8002b18:	00000000 	.word	0x00000000
 8002b1c:	40590000 	.word	0x40590000
 8002b20:	00000000 	.word	0x00000000
 8002b24:	40604000 	.word	0x40604000
 8002b28:	0800ac44 	.word	0x0800ac44

08002b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b30:	b672      	cpsid	i
}
 8002b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <Error_Handler+0x8>

08002b38 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <MX_SPI5_Init+0x78>)
 8002b40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002b42:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002b4a:	4b18      	ldr	r3, [pc, #96]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b50:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b52:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b56:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b58:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002b64:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b6a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b86:	2207      	movs	r2, #7
 8002b88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b90:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002b96:	4805      	ldr	r0, [pc, #20]	@ (8002bac <MX_SPI5_Init+0x74>)
 8002b98:	f003 fa5e 	bl	8006058 <HAL_SPI_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002ba2:	f7ff ffc3 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200004b0 	.word	0x200004b0
 8002bb0:	40015000 	.word	0x40015000

08002bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	@ 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <HAL_SPI_MspInit+0x7c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d128      	bne.n	8002c28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002bd6:	4b17      	ldr	r3, [pc, #92]	@ (8002c34 <HAL_SPI_MspInit+0x80>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	4a16      	ldr	r2, [pc, #88]	@ (8002c34 <HAL_SPI_MspInit+0x80>)
 8002bdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be2:	4b14      	ldr	r3, [pc, #80]	@ (8002c34 <HAL_SPI_MspInit+0x80>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bee:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <HAL_SPI_MspInit+0x80>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a10      	ldr	r2, [pc, #64]	@ (8002c34 <HAL_SPI_MspInit+0x80>)
 8002bf4:	f043 0320 	orr.w	r3, r3, #32
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <HAL_SPI_MspInit+0x80>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c06:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c14:	2303      	movs	r3, #3
 8002c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002c18:	2305      	movs	r3, #5
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4619      	mov	r1, r3
 8002c22:	4805      	ldr	r0, [pc, #20]	@ (8002c38 <HAL_SPI_MspInit+0x84>)
 8002c24:	f001 f818 	bl	8003c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002c28:	bf00      	nop
 8002c2a:	3728      	adds	r7, #40	@ 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40015000 	.word	0x40015000
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40021400 	.word	0x40021400

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_MspInit+0x44>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	4a0e      	ldr	r2, [pc, #56]	@ (8002c80 <HAL_MspInit+0x44>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_MspInit+0x44>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_MspInit+0x44>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	4a08      	ldr	r2, [pc, #32]	@ (8002c80 <HAL_MspInit+0x44>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_MspInit+0x44>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002c72:	2005      	movs	r0, #5
 8002c74:	f000 fc88 	bl	8003588 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <NMI_Handler+0x4>

08002c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cda:	f000 fb41 	bl	8003360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ce8:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <TIM2_IRQHandler+0x34>)
 8002cea:	f003 fe56 	bl	800699a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  count_time += 1;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <TIM2_IRQHandler+0x38>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <TIM2_IRQHandler+0x38>)
 8002cf6:	6013      	str	r3, [r2, #0]
  count_time %= 6;
 8002cf8:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <TIM2_IRQHandler+0x38>)
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <TIM2_IRQHandler+0x3c>)
 8002cfe:	fb83 3201 	smull	r3, r2, r3, r1
 8002d02:	17cb      	asrs	r3, r1, #31
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	1aca      	subs	r2, r1, r3
 8002d10:	4b02      	ldr	r3, [pc, #8]	@ (8002d1c <TIM2_IRQHandler+0x38>)
 8002d12:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000518 	.word	0x20000518
 8002d1c:	20000498 	.word	0x20000498
 8002d20:	2aaaaaab 	.word	0x2aaaaaab

08002d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return 1;
 8002d28:	2301      	movs	r3, #1
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_kill>:

int _kill(int pid, int sig)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3e:	f005 ff37 	bl	8008bb0 <__errno>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2216      	movs	r2, #22
 8002d46:	601a      	str	r2, [r3, #0]
  return -1;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_exit>:

void _exit (int status)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe7 	bl	8002d34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d66:	bf00      	nop
 8002d68:	e7fd      	b.n	8002d66 <_exit+0x12>

08002d6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e00a      	b.n	8002d92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d7c:	f3af 8000 	nop.w
 8002d80:	4601      	mov	r1, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	60ba      	str	r2, [r7, #8]
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dbf0      	blt.n	8002d7c <_read+0x12>
  }

  return len;
 8002d9a:	687b      	ldr	r3, [r7, #4]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e009      	b.n	8002dca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	60ba      	str	r2, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	dbf1      	blt.n	8002db6 <_write+0x12>
  }
  return len;
 8002dd2:	687b      	ldr	r3, [r7, #4]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_close>:

int _close(int file)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e04:	605a      	str	r2, [r3, #4]
  return 0;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_isatty>:

int _isatty(int file)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e1c:	2301      	movs	r3, #1
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ea0 <_sbrk+0x5c>)
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <_sbrk+0x60>)
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <_sbrk+0x64>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <_sbrk+0x68>)
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d207      	bcs.n	8002e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e74:	f005 fe9c 	bl	8008bb0 <__errno>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e82:	e009      	b.n	8002e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e84:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <_sbrk+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <_sbrk+0x64>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a05      	ldr	r2, [pc, #20]	@ (8002ea8 <_sbrk+0x64>)
 8002e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20080000 	.word	0x20080000
 8002ea4:	00000400 	.word	0x00000400
 8002ea8:	20000514 	.word	0x20000514
 8002eac:	20000c48 	.word	0x20000c48

08002eb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <SystemInit+0x20>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	4a05      	ldr	r2, [pc, #20]	@ (8002ed0 <SystemInit+0x20>)
 8002ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ef8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8002efa:	4b1b      	ldr	r3, [pc, #108]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002efc:	226b      	movs	r2, #107	@ 0x6b
 8002efe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8002f06:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002f08:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <MX_TIM2_Init+0x98>)
 8002f0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0c:	4b16      	ldr	r3, [pc, #88]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f18:	4813      	ldr	r0, [pc, #76]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002f1a:	f003 fc3f 	bl	800679c <HAL_TIM_Base_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f24:	f7ff fe02 	bl	8002b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	4619      	mov	r1, r3
 8002f34:	480c      	ldr	r0, [pc, #48]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002f36:	f003 fe4f 	bl	8006bd8 <HAL_TIM_ConfigClockSource>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f40:	f7ff fdf4 	bl	8002b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4805      	ldr	r0, [pc, #20]	@ (8002f68 <MX_TIM2_Init+0x94>)
 8002f52:	f004 f877 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f5c:	f7ff fde6 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000518 	.word	0x20000518
 8002f6c:	000f423f 	.word	0x000f423f

08002f70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	@ 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f90:	d130      	bne.n	8002ff4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f92:	4b1a      	ldr	r3, [pc, #104]	@ (8002ffc <HAL_TIM_Base_MspInit+0x8c>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	4a19      	ldr	r2, [pc, #100]	@ (8002ffc <HAL_TIM_Base_MspInit+0x8c>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9e:	4b17      	ldr	r3, [pc, #92]	@ (8002ffc <HAL_TIM_Base_MspInit+0x8c>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	4b14      	ldr	r3, [pc, #80]	@ (8002ffc <HAL_TIM_Base_MspInit+0x8c>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	4a13      	ldr	r2, [pc, #76]	@ (8002ffc <HAL_TIM_Base_MspInit+0x8c>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <HAL_TIM_Base_MspInit+0x8c>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4808      	ldr	r0, [pc, #32]	@ (8003000 <HAL_TIM_Base_MspInit+0x90>)
 8002fe0:	f000 fe3a 	bl	8003c58 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	201c      	movs	r0, #28
 8002fea:	f000 fad8 	bl	800359e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fee:	201c      	movs	r0, #28
 8002ff0:	f000 faf1 	bl	80035d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3728      	adds	r7, #40	@ 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020000 	.word	0x40020000

08003004 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003008:	4b14      	ldr	r3, [pc, #80]	@ (800305c <MX_USART3_UART_Init+0x58>)
 800300a:	4a15      	ldr	r2, [pc, #84]	@ (8003060 <MX_USART3_UART_Init+0x5c>)
 800300c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <MX_USART3_UART_Init+0x58>)
 8003010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <MX_USART3_UART_Init+0x58>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800301c:	4b0f      	ldr	r3, [pc, #60]	@ (800305c <MX_USART3_UART_Init+0x58>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003022:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <MX_USART3_UART_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <MX_USART3_UART_Init+0x58>)
 800302a:	220c      	movs	r2, #12
 800302c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302e:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <MX_USART3_UART_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003034:	4b09      	ldr	r3, [pc, #36]	@ (800305c <MX_USART3_UART_Init+0x58>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800303a:	4b08      	ldr	r3, [pc, #32]	@ (800305c <MX_USART3_UART_Init+0x58>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <MX_USART3_UART_Init+0x58>)
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003046:	4805      	ldr	r0, [pc, #20]	@ (800305c <MX_USART3_UART_Init+0x58>)
 8003048:	f004 f8a8 	bl	800719c <HAL_UART_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003052:	f7ff fd6b 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000564 	.word	0x20000564
 8003060:	40004800 	.word	0x40004800

08003064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0ae      	sub	sp, #184	@ 0xb8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	2290      	movs	r2, #144	@ 0x90
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f005 fd40 	bl	8008b0a <memset>
  if(uartHandle->Instance==USART3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a22      	ldr	r2, [pc, #136]	@ (8003118 <HAL_UART_MspInit+0xb4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d13c      	bne.n	800310e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003094:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003098:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800309a:	2300      	movs	r3, #0
 800309c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 fbb0 	bl	8005808 <HAL_RCCEx_PeriphCLKConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80030ae:	f7ff fd3d 	bl	8002b2c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030b2:	4b1a      	ldr	r3, [pc, #104]	@ (800311c <HAL_UART_MspInit+0xb8>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	4a19      	ldr	r2, [pc, #100]	@ (800311c <HAL_UART_MspInit+0xb8>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030be:	4b17      	ldr	r3, [pc, #92]	@ (800311c <HAL_UART_MspInit+0xb8>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ca:	4b14      	ldr	r3, [pc, #80]	@ (800311c <HAL_UART_MspInit+0xb8>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	4a13      	ldr	r2, [pc, #76]	@ (800311c <HAL_UART_MspInit+0xb8>)
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_UART_MspInit+0xb8>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80030e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ea:	2302      	movs	r3, #2
 80030ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030fc:	2307      	movs	r3, #7
 80030fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003102:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003106:	4619      	mov	r1, r3
 8003108:	4805      	ldr	r0, [pc, #20]	@ (8003120 <HAL_UART_MspInit+0xbc>)
 800310a:	f000 fda5 	bl	8003c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800310e:	bf00      	nop
 8003110:	37b8      	adds	r7, #184	@ 0xb8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40004800 	.word	0x40004800
 800311c:	40023800 	.word	0x40023800
 8003120:	40020c00 	.word	0x40020c00

08003124 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003128:	4b14      	ldr	r3, [pc, #80]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800312a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800312e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003130:	4b12      	ldr	r3, [pc, #72]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003132:	2206      	movs	r2, #6
 8003134:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003138:	2202      	movs	r2, #2
 800313a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800313c:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003144:	2202      	movs	r2, #2
 8003146:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003148:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800314a:	2201      	movs	r2, #1
 800314c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003150:	2200      	movs	r2, #0
 8003152:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003156:	2200      	movs	r2, #0
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800315c:	2201      	movs	r2, #1
 800315e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003166:	4805      	ldr	r0, [pc, #20]	@ (800317c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003168:	f001 fcd1 	bl	8004b0e <HAL_PCD_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003172:	f7ff fcdb 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200005ec 	.word	0x200005ec

08003180 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0ae      	sub	sp, #184	@ 0xb8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	2290      	movs	r2, #144	@ 0x90
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f005 fcb2 	bl	8008b0a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ae:	d159      	bne.n	8003264 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80031b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80031b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4618      	mov	r0, r3
 80031c2:	f002 fb21 	bl	8005808 <HAL_RCCEx_PeriphCLKConfig>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80031cc:	f7ff fcae 	bl	8002b2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d0:	4b26      	ldr	r3, [pc, #152]	@ (800326c <HAL_PCD_MspInit+0xec>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	4a25      	ldr	r2, [pc, #148]	@ (800326c <HAL_PCD_MspInit+0xec>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6313      	str	r3, [r2, #48]	@ 0x30
 80031dc:	4b23      	ldr	r3, [pc, #140]	@ (800326c <HAL_PCD_MspInit+0xec>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 80031e8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80031ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fc:	2303      	movs	r3, #3
 80031fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003202:	230a      	movs	r3, #10
 8003204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800320c:	4619      	mov	r1, r3
 800320e:	4818      	ldr	r0, [pc, #96]	@ (8003270 <HAL_PCD_MspInit+0xf0>)
 8003210:	f000 fd22 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003218:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003228:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800322c:	4619      	mov	r1, r3
 800322e:	4810      	ldr	r0, [pc, #64]	@ (8003270 <HAL_PCD_MspInit+0xf0>)
 8003230:	f000 fd12 	bl	8003c58 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003234:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <HAL_PCD_MspInit+0xec>)
 8003236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003238:	4a0c      	ldr	r2, [pc, #48]	@ (800326c <HAL_PCD_MspInit+0xec>)
 800323a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800323e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <HAL_PCD_MspInit+0xec>)
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4b07      	ldr	r3, [pc, #28]	@ (800326c <HAL_PCD_MspInit+0xec>)
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	4a06      	ldr	r2, [pc, #24]	@ (800326c <HAL_PCD_MspInit+0xec>)
 8003252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003256:	6453      	str	r3, [r2, #68]	@ 0x44
 8003258:	4b04      	ldr	r3, [pc, #16]	@ (800326c <HAL_PCD_MspInit+0xec>)
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003264:	bf00      	nop
 8003266:	37b8      	adds	r7, #184	@ 0xb8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	40020000 	.word	0x40020000

08003274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003278:	480d      	ldr	r0, [pc, #52]	@ (80032b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800327a:	490e      	ldr	r1, [pc, #56]	@ (80032b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800327c:	4a0e      	ldr	r2, [pc, #56]	@ (80032b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003280:	e002      	b.n	8003288 <LoopCopyDataInit>

08003282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003286:	3304      	adds	r3, #4

08003288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800328c:	d3f9      	bcc.n	8003282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328e:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003290:	4c0b      	ldr	r4, [pc, #44]	@ (80032c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003294:	e001      	b.n	800329a <LoopFillZerobss>

08003296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003298:	3204      	adds	r2, #4

0800329a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800329c:	d3fb      	bcc.n	8003296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800329e:	f7ff fe07 	bl	8002eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a2:	f005 fc8b 	bl	8008bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a6:	f7fe fd93 	bl	8001dd0 <main>
  bx  lr    
 80032aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80032b8:	0805622c 	.word	0x0805622c
  ldr r2, =_sbss
 80032bc:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 80032c0:	20000c44 	.word	0x20000c44

080032c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC_IRQHandler>
	...

080032c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_Init+0x34>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <HAL_Init+0x34>)
 80032d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d8:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <HAL_Init+0x34>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a07      	ldr	r2, [pc, #28]	@ (80032fc <HAL_Init+0x34>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e4:	2003      	movs	r0, #3
 80032e6:	f000 f94f 	bl	8003588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ea:	2000      	movs	r0, #0
 80032ec:	f000 f808 	bl	8003300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f0:	f7ff fca4 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00

08003300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003308:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_InitTick+0x54>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <HAL_InitTick+0x58>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003316:	fbb3 f3f1 	udiv	r3, r3, r1
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f967 	bl	80035f2 <HAL_SYSTICK_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e00e      	b.n	800334c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d80a      	bhi.n	800334a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003334:	2200      	movs	r2, #0
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800333c:	f000 f92f 	bl	800359e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003340:	4a06      	ldr	r2, [pc, #24]	@ (800335c <HAL_InitTick+0x5c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000018 	.word	0x20000018
 8003358:	20000020 	.word	0x20000020
 800335c:	2000001c 	.word	0x2000001c

08003360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_IncTick+0x20>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_IncTick+0x24>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4413      	add	r3, r2
 8003370:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_IncTick+0x24>)
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000020 	.word	0x20000020
 8003384:	20000af4 	.word	0x20000af4

08003388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return uwTick;
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <HAL_GetTick+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000af4 	.word	0x20000af4

080033a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a8:	f7ff ffee 	bl	8003388 <HAL_GetTick>
 80033ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b8:	d005      	beq.n	80033c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ba:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <HAL_Delay+0x44>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033c6:	bf00      	nop
 80033c8:	f7ff ffde 	bl	8003388 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d8f7      	bhi.n	80033c8 <HAL_Delay+0x28>
  {
  }
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000020 	.word	0x20000020

080033e8 <__NVIC_SetPriorityGrouping>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <__NVIC_SetPriorityGrouping+0x40>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003404:	4013      	ands	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <__NVIC_SetPriorityGrouping+0x44>)
 8003412:	4313      	orrs	r3, r2
 8003414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003416:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <__NVIC_SetPriorityGrouping+0x40>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00
 800342c:	05fa0000 	.word	0x05fa0000

08003430 <__NVIC_GetPriorityGrouping>:
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <__NVIC_GetPriorityGrouping+0x18>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 0307 	and.w	r3, r3, #7
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_EnableIRQ>:
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db0b      	blt.n	8003476 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4907      	ldr	r1, [pc, #28]	@ (8003484 <__NVIC_EnableIRQ+0x38>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2001      	movs	r0, #1
 800346e:	fa00 f202 	lsl.w	r2, r0, r2
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000e100 	.word	0xe000e100

08003488 <__NVIC_SetPriority>:
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	2b00      	cmp	r3, #0
 800349a:	db0a      	blt.n	80034b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	490c      	ldr	r1, [pc, #48]	@ (80034d4 <__NVIC_SetPriority+0x4c>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	440b      	add	r3, r1
 80034ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034b0:	e00a      	b.n	80034c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4908      	ldr	r1, [pc, #32]	@ (80034d8 <__NVIC_SetPriority+0x50>)
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	3b04      	subs	r3, #4
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	440b      	add	r3, r1
 80034c6:	761a      	strb	r2, [r3, #24]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000e100 	.word	0xe000e100
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <NVIC_EncodePriority>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f1c3 0307 	rsb	r3, r3, #7
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf28      	it	cs
 80034fa:	2304      	movcs	r3, #4
 80034fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3304      	adds	r3, #4
 8003502:	2b06      	cmp	r3, #6
 8003504:	d902      	bls.n	800350c <NVIC_EncodePriority+0x30>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3b03      	subs	r3, #3
 800350a:	e000      	b.n	800350e <NVIC_EncodePriority+0x32>
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	401a      	ands	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003524:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43d9      	mvns	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	4313      	orrs	r3, r2
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	@ 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003554:	d301      	bcc.n	800355a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003556:	2301      	movs	r3, #1
 8003558:	e00f      	b.n	800357a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355a:	4a0a      	ldr	r2, [pc, #40]	@ (8003584 <SysTick_Config+0x40>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003562:	210f      	movs	r1, #15
 8003564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003568:	f7ff ff8e 	bl	8003488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800356c:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <SysTick_Config+0x40>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003572:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <SysTick_Config+0x40>)
 8003574:	2207      	movs	r2, #7
 8003576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	e000e010 	.word	0xe000e010

08003588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff29 	bl	80033e8 <__NVIC_SetPriorityGrouping>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b0:	f7ff ff3e 	bl	8003430 <__NVIC_GetPriorityGrouping>
 80035b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff ff8e 	bl	80034dc <NVIC_EncodePriority>
 80035c0:	4602      	mov	r2, r0
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff5d 	bl	8003488 <__NVIC_SetPriority>
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff31 	bl	800344c <__NVIC_EnableIRQ>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ffa2 	bl	8003544 <SysTick_Config>
 8003600:	4603      	mov	r3, r0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06a      	b.n	80036f4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2223      	movs	r2, #35	@ 0x23
 800362c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fe f90d 	bl	8001850 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <HAL_ETH_Init+0xf0>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	4a30      	ldr	r2, [pc, #192]	@ (80036fc <HAL_ETH_Init+0xf0>)
 800363c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003640:	6453      	str	r3, [r2, #68]	@ 0x44
 8003642:	4b2e      	ldr	r3, [pc, #184]	@ (80036fc <HAL_ETH_Init+0xf0>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800364e:	4b2c      	ldr	r3, [pc, #176]	@ (8003700 <HAL_ETH_Init+0xf4>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4a2b      	ldr	r2, [pc, #172]	@ (8003700 <HAL_ETH_Init+0xf4>)
 8003654:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003658:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800365a:	4b29      	ldr	r3, [pc, #164]	@ (8003700 <HAL_ETH_Init+0xf4>)
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4927      	ldr	r1, [pc, #156]	@ (8003700 <HAL_ETH_Init+0xf4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003668:	4b25      	ldr	r3, [pc, #148]	@ (8003700 <HAL_ETH_Init+0xf4>)
 800366a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003682:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003684:	f7ff fe80 	bl	8003388 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800368a:	e011      	b.n	80036b0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800368c:	f7ff fe7c 	bl	8003388 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800369a:	d909      	bls.n	80036b0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2204      	movs	r2, #4
 80036a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	22e0      	movs	r2, #224	@ 0xe0
 80036a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e021      	b.n	80036f4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e4      	bne.n	800368c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f958 	bl	8003978 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f9ff 	bl	8003acc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa55 	bl	8003b7e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	461a      	mov	r2, r3
 80036da:	2100      	movs	r1, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f9bd 	bl	8003a5c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2210      	movs	r2, #16
 80036ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	40013800 	.word	0x40013800

08003704 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4b51      	ldr	r3, [pc, #324]	@ (8003860 <ETH_SetMACConfig+0x15c>)
 800371a:	4013      	ands	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	7c1b      	ldrb	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <ETH_SetMACConfig+0x28>
 8003726:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800372a:	e000      	b.n	800372e <ETH_SetMACConfig+0x2a>
 800372c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	7c5b      	ldrb	r3, [r3, #17]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <ETH_SetMACConfig+0x38>
 8003736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800373a:	e000      	b.n	800373e <ETH_SetMACConfig+0x3a>
 800373c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800373e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003744:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	7fdb      	ldrb	r3, [r3, #31]
 800374a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800374c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003752:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	7f92      	ldrb	r2, [r2, #30]
 8003758:	2a00      	cmp	r2, #0
 800375a:	d102      	bne.n	8003762 <ETH_SetMACConfig+0x5e>
 800375c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003760:	e000      	b.n	8003764 <ETH_SetMACConfig+0x60>
 8003762:	2200      	movs	r2, #0
                        macconf->Speed |
 8003764:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	7f1b      	ldrb	r3, [r3, #28]
 800376a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800376c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003772:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	791b      	ldrb	r3, [r3, #4]
 8003778:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800377a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003782:	2a00      	cmp	r2, #0
 8003784:	d102      	bne.n	800378c <ETH_SetMACConfig+0x88>
 8003786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800378a:	e000      	b.n	800378e <ETH_SetMACConfig+0x8a>
 800378c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800378e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	7bdb      	ldrb	r3, [r3, #15]
 8003794:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003796:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800379c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037a4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037a6:	4313      	orrs	r3, r2
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037be:	2001      	movs	r0, #1
 80037c0:	f7ff fdee 	bl	80033a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80037da:	4013      	ands	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80037ea:	2a00      	cmp	r2, #0
 80037ec:	d101      	bne.n	80037f2 <ETH_SetMACConfig+0xee>
 80037ee:	2280      	movs	r2, #128	@ 0x80
 80037f0:	e000      	b.n	80037f4 <ETH_SetMACConfig+0xf0>
 80037f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037f4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80037fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003802:	2a01      	cmp	r2, #1
 8003804:	d101      	bne.n	800380a <ETH_SetMACConfig+0x106>
 8003806:	2208      	movs	r2, #8
 8003808:	e000      	b.n	800380c <ETH_SetMACConfig+0x108>
 800380a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800380c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003814:	2a01      	cmp	r2, #1
 8003816:	d101      	bne.n	800381c <ETH_SetMACConfig+0x118>
 8003818:	2204      	movs	r2, #4
 800381a:	e000      	b.n	800381e <ETH_SetMACConfig+0x11a>
 800381c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800381e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003826:	2a01      	cmp	r2, #1
 8003828:	d101      	bne.n	800382e <ETH_SetMACConfig+0x12a>
 800382a:	2202      	movs	r2, #2
 800382c:	e000      	b.n	8003830 <ETH_SetMACConfig+0x12c>
 800382e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003830:	4313      	orrs	r3, r2
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003848:	2001      	movs	r0, #1
 800384a:	f7ff fda9 	bl	80033a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	619a      	str	r2, [r3, #24]
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	ff20810f 	.word	0xff20810f

08003864 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <ETH_SetDMAConfig+0x110>)
 800387e:	4013      	ands	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	7b1b      	ldrb	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <ETH_SetDMAConfig+0x2c>
 800388a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800388e:	e000      	b.n	8003892 <ETH_SetDMAConfig+0x2e>
 8003890:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	7b5b      	ldrb	r3, [r3, #13]
 8003896:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003898:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	7f52      	ldrb	r2, [r2, #29]
 800389e:	2a00      	cmp	r2, #0
 80038a0:	d102      	bne.n	80038a8 <ETH_SetDMAConfig+0x44>
 80038a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80038a6:	e000      	b.n	80038aa <ETH_SetDMAConfig+0x46>
 80038a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80038aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	7b9b      	ldrb	r3, [r3, #14]
 80038b0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80038b2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80038b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	7f1b      	ldrb	r3, [r3, #28]
 80038be:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80038c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	7f9b      	ldrb	r3, [r3, #30]
 80038c6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80038c8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80038ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038d6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80038d8:	4313      	orrs	r3, r2
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038e8:	461a      	mov	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f7ff fd50 	bl	80033a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003908:	461a      	mov	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	791b      	ldrb	r3, [r3, #4]
 8003912:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003918:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800391e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003924:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800392c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800392e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003936:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800393c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003946:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800394a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003958:	2001      	movs	r0, #1
 800395a:	f7ff fd21 	bl	80033a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6013      	str	r3, [r2, #0]
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	f8de3f23 	.word	0xf8de3f23

08003978 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b0a6      	sub	sp, #152	@ 0x98
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800398c:	2300      	movs	r3, #0
 800398e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80039b4:	2300      	movs	r3, #0
 80039b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80039da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039de:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80039e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80039ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fe86 	bl	8003704 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003a28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a2c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003a2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a32:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a38:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003a48:	f107 0308 	add.w	r3, r7, #8
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff ff08 	bl	8003864 <ETH_SetDMAConfig>
}
 8003a54:	bf00      	nop
 8003a56:	3798      	adds	r7, #152	@ 0x98
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3305      	adds	r3, #5
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	3204      	adds	r2, #4
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <ETH_MACAddressConfig+0x68>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	461a      	mov	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3303      	adds	r3, #3
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	061a      	lsls	r2, r3, #24
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3302      	adds	r3, #2
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	7812      	ldrb	r2, [r2, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <ETH_MACAddressConfig+0x6c>)
 8003aae:	4413      	add	r3, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	6013      	str	r3, [r2, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40028040 	.word	0x40028040
 8003ac8:	40028044 	.word	0x40028044

08003acc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e03e      	b.n	8003b58 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68d9      	ldr	r1, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2200      	movs	r2, #0
 8003af6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	3206      	adds	r2, #6
 8003b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d80c      	bhi.n	8003b3c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68d9      	ldr	r1, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	440b      	add	r3, r1
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	e004      	b.n	8003b46 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d9bd      	bls.n	8003ada <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b70:	611a      	str	r2, [r3, #16]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e046      	b.n	8003c1a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6919      	ldr	r1, [r3, #16]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	440b      	add	r3, r1
 8003b9c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003bc8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8003bd0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	3212      	adds	r2, #18
 8003be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d80c      	bhi.n	8003c0a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6919      	ldr	r1, [r3, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	461a      	mov	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	e004      	b.n	8003c14 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d9b5      	bls.n	8003b8c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4a:	60da      	str	r2, [r3, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	@ 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	e175      	b.n	8003f64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c78:	2201      	movs	r2, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	f040 8164 	bne.w	8003f5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d005      	beq.n	8003cae <HAL_GPIO_Init+0x56>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d130      	bne.n	8003d10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	2203      	movs	r2, #3
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 0201 	and.w	r2, r3, #1
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d017      	beq.n	8003d4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d123      	bne.n	8003da0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	08da      	lsrs	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3208      	adds	r2, #8
 8003d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	220f      	movs	r2, #15
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	08da      	lsrs	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3208      	adds	r2, #8
 8003d9a:	69b9      	ldr	r1, [r7, #24]
 8003d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0203 	and.w	r2, r3, #3
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80be 	beq.w	8003f5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de2:	4b66      	ldr	r3, [pc, #408]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	4a65      	ldr	r2, [pc, #404]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dee:	4b63      	ldr	r3, [pc, #396]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003dfa:	4a61      	ldr	r2, [pc, #388]	@ (8003f80 <HAL_GPIO_Init+0x328>)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	3302      	adds	r3, #2
 8003e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a58      	ldr	r2, [pc, #352]	@ (8003f84 <HAL_GPIO_Init+0x32c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d037      	beq.n	8003e96 <HAL_GPIO_Init+0x23e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a57      	ldr	r2, [pc, #348]	@ (8003f88 <HAL_GPIO_Init+0x330>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d031      	beq.n	8003e92 <HAL_GPIO_Init+0x23a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a56      	ldr	r2, [pc, #344]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d02b      	beq.n	8003e8e <HAL_GPIO_Init+0x236>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a55      	ldr	r2, [pc, #340]	@ (8003f90 <HAL_GPIO_Init+0x338>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d025      	beq.n	8003e8a <HAL_GPIO_Init+0x232>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a54      	ldr	r2, [pc, #336]	@ (8003f94 <HAL_GPIO_Init+0x33c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01f      	beq.n	8003e86 <HAL_GPIO_Init+0x22e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a53      	ldr	r2, [pc, #332]	@ (8003f98 <HAL_GPIO_Init+0x340>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d019      	beq.n	8003e82 <HAL_GPIO_Init+0x22a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a52      	ldr	r2, [pc, #328]	@ (8003f9c <HAL_GPIO_Init+0x344>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_GPIO_Init+0x226>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a51      	ldr	r2, [pc, #324]	@ (8003fa0 <HAL_GPIO_Init+0x348>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00d      	beq.n	8003e7a <HAL_GPIO_Init+0x222>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a50      	ldr	r2, [pc, #320]	@ (8003fa4 <HAL_GPIO_Init+0x34c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <HAL_GPIO_Init+0x21e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4f      	ldr	r2, [pc, #316]	@ (8003fa8 <HAL_GPIO_Init+0x350>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_GPIO_Init+0x21a>
 8003e6e:	2309      	movs	r3, #9
 8003e70:	e012      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e72:	230a      	movs	r3, #10
 8003e74:	e010      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e76:	2308      	movs	r3, #8
 8003e78:	e00e      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e7a:	2307      	movs	r3, #7
 8003e7c:	e00c      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e7e:	2306      	movs	r3, #6
 8003e80:	e00a      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e82:	2305      	movs	r3, #5
 8003e84:	e008      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e86:	2304      	movs	r3, #4
 8003e88:	e006      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e004      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e002      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_GPIO_Init+0x240>
 8003e96:	2300      	movs	r3, #0
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f002 0203 	and.w	r2, r2, #3
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	4093      	lsls	r3, r2
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ea8:	4935      	ldr	r1, [pc, #212]	@ (8003f80 <HAL_GPIO_Init+0x328>)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	089b      	lsrs	r3, r3, #2
 8003eae:	3302      	adds	r3, #2
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fac <HAL_GPIO_Init+0x354>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eda:	4a34      	ldr	r2, [pc, #208]	@ (8003fac <HAL_GPIO_Init+0x354>)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ee0:	4b32      	ldr	r3, [pc, #200]	@ (8003fac <HAL_GPIO_Init+0x354>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f04:	4a29      	ldr	r2, [pc, #164]	@ (8003fac <HAL_GPIO_Init+0x354>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <HAL_GPIO_Init+0x354>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fac <HAL_GPIO_Init+0x354>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f34:	4b1d      	ldr	r3, [pc, #116]	@ (8003fac <HAL_GPIO_Init+0x354>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f58:	4a14      	ldr	r2, [pc, #80]	@ (8003fac <HAL_GPIO_Init+0x354>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3301      	adds	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	f67f ae86 	bls.w	8003c78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	3724      	adds	r7, #36	@ 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40013800 	.word	0x40013800
 8003f84:	40020000 	.word	0x40020000
 8003f88:	40020400 	.word	0x40020400
 8003f8c:	40020800 	.word	0x40020800
 8003f90:	40020c00 	.word	0x40020c00
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40021400 	.word	0x40021400
 8003f9c:	40021800 	.word	0x40021800
 8003fa0:	40021c00 	.word	0x40021c00
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40022400 	.word	0x40022400
 8003fac:	40013c00 	.word	0x40013c00

08003fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	887b      	ldrh	r3, [r7, #2]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e001      	b.n	8003fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
 8003fec:	4613      	mov	r3, r2
 8003fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff0:	787b      	ldrb	r3, [r7, #1]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ffc:	e003      	b.n	8004006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	041a      	lsls	r2, r3, #16
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	619a      	str	r2, [r3, #24]
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd fdfe 	bl	8001c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	@ 0x24
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004064:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004074:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d107      	bne.n	800408e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	e006      	b.n	800409c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800409a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d104      	bne.n	80040ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <HAL_I2C_Init+0x11c>)
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69d9      	ldr	r1, [r3, #28]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	02008000 	.word	0x02008000

08004134 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	461a      	mov	r2, r3
 8004140:	460b      	mov	r3, r1
 8004142:	817b      	strh	r3, [r7, #10]
 8004144:	4613      	mov	r3, r2
 8004146:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b20      	cmp	r3, #32
 8004152:	f040 80da 	bne.w	800430a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_I2C_Master_Transmit+0x30>
 8004160:	2302      	movs	r3, #2
 8004162:	e0d3      	b.n	800430c <HAL_I2C_Master_Transmit+0x1d8>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800416c:	f7ff f90c 	bl	8003388 <HAL_GetTick>
 8004170:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	2319      	movs	r3, #25
 8004178:	2201      	movs	r2, #1
 800417a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f9e6 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0be      	b.n	800430c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2221      	movs	r2, #33	@ 0x21
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2210      	movs	r2, #16
 800419a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	893a      	ldrh	r2, [r7, #8]
 80041ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2bff      	cmp	r3, #255	@ 0xff
 80041be:	d90e      	bls.n	80041de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	22ff      	movs	r2, #255	@ 0xff
 80041c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	8979      	ldrh	r1, [r7, #10]
 80041ce:	4b51      	ldr	r3, [pc, #324]	@ (8004314 <HAL_I2C_Master_Transmit+0x1e0>)
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fbd0 	bl	800497c <I2C_TransferConfig>
 80041dc:	e06c      	b.n	80042b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	8979      	ldrh	r1, [r7, #10]
 80041f0:	4b48      	ldr	r3, [pc, #288]	@ (8004314 <HAL_I2C_Master_Transmit+0x1e0>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fbbf 	bl	800497c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041fe:	e05b      	b.n	80042b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	6a39      	ldr	r1, [r7, #32]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f9e3 	bl	80045d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e07b      	b.n	800430c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d034      	beq.n	80042b8 <HAL_I2C_Master_Transmit+0x184>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d130      	bne.n	80042b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	2200      	movs	r2, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f975 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e04d      	b.n	800430c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2bff      	cmp	r3, #255	@ 0xff
 8004278:	d90e      	bls.n	8004298 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	22ff      	movs	r2, #255	@ 0xff
 800427e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	b2da      	uxtb	r2, r3
 8004286:	8979      	ldrh	r1, [r7, #10]
 8004288:	2300      	movs	r3, #0
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fb73 	bl	800497c <I2C_TransferConfig>
 8004296:	e00f      	b.n	80042b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	8979      	ldrh	r1, [r7, #10]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fb62 	bl	800497c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d19e      	bne.n	8004200 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	6a39      	ldr	r1, [r7, #32]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f9c2 	bl	8004650 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e01a      	b.n	800430c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2220      	movs	r2, #32
 80042dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <HAL_I2C_Master_Transmit+0x1e4>)
 80042ea:	400b      	ands	r3, r1
 80042ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	80002000 	.word	0x80002000
 8004318:	fe00e800 	.word	0xfe00e800

0800431c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	461a      	mov	r2, r3
 8004328:	460b      	mov	r3, r1
 800432a:	817b      	strh	r3, [r7, #10]
 800432c:	4613      	mov	r3, r2
 800432e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b20      	cmp	r3, #32
 800433a:	f040 80db 	bne.w	80044f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_I2C_Master_Receive+0x30>
 8004348:	2302      	movs	r3, #2
 800434a:	e0d4      	b.n	80044f6 <HAL_I2C_Master_Receive+0x1da>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004354:	f7ff f818 	bl	8003388 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2319      	movs	r3, #25
 8004360:	2201      	movs	r2, #1
 8004362:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f8f2 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0bf      	b.n	80044f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2222      	movs	r2, #34	@ 0x22
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2210      	movs	r2, #16
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	893a      	ldrh	r2, [r7, #8]
 8004396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2bff      	cmp	r3, #255	@ 0xff
 80043a6:	d90e      	bls.n	80043c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	22ff      	movs	r2, #255	@ 0xff
 80043ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	8979      	ldrh	r1, [r7, #10]
 80043b6:	4b52      	ldr	r3, [pc, #328]	@ (8004500 <HAL_I2C_Master_Receive+0x1e4>)
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fadc 	bl	800497c <I2C_TransferConfig>
 80043c4:	e06d      	b.n	80044a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	8979      	ldrh	r1, [r7, #10]
 80043d8:	4b49      	ldr	r3, [pc, #292]	@ (8004500 <HAL_I2C_Master_Receive+0x1e4>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 facb 	bl	800497c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80043e6:	e05c      	b.n	80044a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	6a39      	ldr	r1, [r7, #32]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f96b 	bl	80046c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e07c      	b.n	80044f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d034      	beq.n	80044a2 <HAL_I2C_Master_Receive+0x186>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d130      	bne.n	80044a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	2200      	movs	r2, #0
 8004448:	2180      	movs	r1, #128	@ 0x80
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f880 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e04d      	b.n	80044f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	2bff      	cmp	r3, #255	@ 0xff
 8004462:	d90e      	bls.n	8004482 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	22ff      	movs	r2, #255	@ 0xff
 8004468:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446e:	b2da      	uxtb	r2, r3
 8004470:	8979      	ldrh	r1, [r7, #10]
 8004472:	2300      	movs	r3, #0
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa7e 	bl	800497c <I2C_TransferConfig>
 8004480:	e00f      	b.n	80044a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004490:	b2da      	uxtb	r2, r3
 8004492:	8979      	ldrh	r1, [r7, #10]
 8004494:	2300      	movs	r3, #0
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fa6d 	bl	800497c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d19d      	bne.n	80043e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	6a39      	ldr	r1, [r7, #32]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f8cd 	bl	8004650 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e01a      	b.n	80044f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2220      	movs	r2, #32
 80044c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <HAL_I2C_Master_Receive+0x1e8>)
 80044d4:	400b      	ands	r3, r1
 80044d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e000      	b.n	80044f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
  }
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	80002400 	.word	0x80002400
 8004504:	fe00e800 	.word	0xfe00e800

08004508 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d103      	bne.n	8004526 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d007      	beq.n	8004544 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	619a      	str	r2, [r3, #24]
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004560:	e022      	b.n	80045a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004568:	d01e      	beq.n	80045a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456a:	f7fe ff0d 	bl	8003388 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d113      	bne.n	80045a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e00f      	b.n	80045c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4013      	ands	r3, r2
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d0cd      	beq.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045dc:	e02c      	b.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f8ea 	bl	80047bc <I2C_IsErrorOccurred>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e02a      	b.n	8004648 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f8:	d01e      	beq.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe fec5 	bl	8003388 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004614:	f043 0220 	orr.w	r2, r3, #32
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d1cb      	bne.n	80045de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800465c:	e028      	b.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f8aa 	bl	80047bc <I2C_IsErrorOccurred>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e026      	b.n	80046c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fe fe89 	bl	8003388 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d113      	bne.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e007      	b.n	80046c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d1cf      	bne.n	800465e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046d4:	e064      	b.n	80047a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f86e 	bl	80047bc <I2C_IsErrorOccurred>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e062      	b.n	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d138      	bne.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d105      	bne.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e04e      	b.n	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b10      	cmp	r3, #16
 800471e:	d107      	bne.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2210      	movs	r2, #16
 8004726:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2204      	movs	r2, #4
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
 800472e:	e002      	b.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2220      	movs	r2, #32
 800473c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800474a:	400b      	ands	r3, r1
 800474c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e022      	b.n	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fe fe0d 	bl	8003388 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10f      	bne.n	80047a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d193      	bne.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	fe00e800 	.word	0xfe00e800

080047bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d068      	beq.n	80048ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2210      	movs	r2, #16
 80047ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047f0:	e049      	b.n	8004886 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047f8:	d045      	beq.n	8004886 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fe fdc5 	bl	8003388 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <I2C_IsErrorOccurred+0x54>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d13a      	bne.n	8004886 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800481a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004822:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800482e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004832:	d121      	bne.n	8004878 <I2C_IsErrorOccurred+0xbc>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800483a:	d01d      	beq.n	8004878 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	2b20      	cmp	r3, #32
 8004840:	d01a      	beq.n	8004878 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004850:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004852:	f7fe fd99 	bl	8003388 <HAL_GetTick>
 8004856:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004858:	e00e      	b.n	8004878 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800485a:	f7fe fd95 	bl	8003388 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b19      	cmp	r3, #25
 8004866:	d907      	bls.n	8004878 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	f043 0320 	orr.w	r3, r3, #32
 800486e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004876:	e006      	b.n	8004886 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b20      	cmp	r3, #32
 8004884:	d1e9      	bne.n	800485a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d003      	beq.n	800489c <I2C_IsErrorOccurred+0xe0>
 8004894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0aa      	beq.n	80047f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800489c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d103      	bne.n	80048ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2220      	movs	r2, #32
 80048aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	f043 0304 	orr.w	r3, r3, #4
 80048b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f043 0308 	orr.w	r3, r3, #8
 80048f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f043 0302 	orr.w	r3, r3, #2
 8004916:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004920:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01c      	beq.n	800496a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fde9 	bl	8004508 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b0d      	ldr	r3, [pc, #52]	@ (8004978 <I2C_IsErrorOccurred+0x1bc>)
 8004942:	400b      	ands	r3, r1
 8004944:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800496a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800496e:	4618      	mov	r0, r3
 8004970:	3728      	adds	r7, #40	@ 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	fe00e800 	.word	0xfe00e800

0800497c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	4613      	mov	r3, r2
 800498c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004994:	7a7b      	ldrb	r3, [r7, #9]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800499c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	0d5b      	lsrs	r3, r3, #21
 80049b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80049ba:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <I2C_TransferConfig+0x60>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	43db      	mvns	r3, r3
 80049c0:	ea02 0103 	and.w	r1, r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	03ff63ff 	.word	0x03ff63ff

080049e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d138      	bne.n	8004a68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e032      	b.n	8004a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	@ 0x24
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6819      	ldr	r1, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d139      	bne.n	8004b00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e033      	b.n	8004b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2224      	movs	r2, #36	@ 0x24
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ac8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b10:	b08f      	sub	sp, #60	@ 0x3c
 8004b12:	af0a      	add	r7, sp, #40	@ 0x28
 8004b14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e116      	b.n	8004d4e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fe fb20 	bl	8003180 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2203      	movs	r2, #3
 8004b44:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f002 ffdc 	bl	8007b1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	687e      	ldr	r6, [r7, #4]
 8004b6c:	466d      	mov	r5, sp
 8004b6e:	f106 0410 	add.w	r4, r6, #16
 8004b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b82:	1d33      	adds	r3, r6, #4
 8004b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b86:	6838      	ldr	r0, [r7, #0]
 8004b88:	f002 ff70 	bl	8007a6c <USB_CoreInit>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0d7      	b.n	8004d4e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f002 ffca 	bl	8007b3e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]
 8004bae:	e04a      	b.n	8004c46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	333d      	adds	r3, #61	@ 0x3d
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bc4:	7bfa      	ldrb	r2, [r7, #15]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	333c      	adds	r3, #60	@ 0x3c
 8004bd4:	7bfa      	ldrb	r2, [r7, #15]
 8004bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	b298      	uxth	r0, r3
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3344      	adds	r3, #68	@ 0x44
 8004bec:	4602      	mov	r2, r0
 8004bee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bf0:	7bfa      	ldrb	r2, [r7, #15]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3340      	adds	r3, #64	@ 0x40
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	3348      	adds	r3, #72	@ 0x48
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c18:	7bfa      	ldrb	r2, [r7, #15]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	334c      	adds	r3, #76	@ 0x4c
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3354      	adds	r3, #84	@ 0x54
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	3301      	adds	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
 8004c46:	7bfa      	ldrb	r2, [r7, #15]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d3af      	bcc.n	8004bb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e044      	b.n	8004ce0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c6c:	7bfa      	ldrb	r2, [r7, #15]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c82:	7bfa      	ldrb	r2, [r7, #15]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c98:	7bfa      	ldrb	r2, [r7, #15]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cc4:	7bfa      	ldrb	r2, [r7, #15]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
 8004ce0:	7bfa      	ldrb	r2, [r7, #15]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d3b5      	bcc.n	8004c56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	687e      	ldr	r6, [r7, #4]
 8004cf2:	466d      	mov	r5, sp
 8004cf4:	f106 0410 	add.w	r4, r6, #16
 8004cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d04:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d08:	1d33      	adds	r3, r6, #4
 8004d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d0c:	6838      	ldr	r0, [r7, #0]
 8004d0e:	f002 ff63 	bl	8007bd8 <USB_DevInit>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e014      	b.n	8004d4e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d102      	bne.n	8004d42 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f80b 	bl	8004d58 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f003 f921 	bl	8007f8e <USB_DevDisconnect>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004d58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d86:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_PCDEx_ActivateLPM+0x44>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	10000003 	.word	0x10000003

08004da0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004da4:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a04      	ldr	r2, [pc, #16]	@ (8004dbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40007000 	.word	0x40007000

08004dc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	4b23      	ldr	r3, [pc, #140]	@ (8004e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	4a22      	ldr	r2, [pc, #136]	@ (8004e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dd6:	4b20      	ldr	r3, [pc, #128]	@ (8004e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004de2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dee:	f7fe facb 	bl	8003388 <HAL_GetTick>
 8004df2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004df4:	e009      	b.n	8004e0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004df6:	f7fe fac7 	bl	8003388 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e04:	d901      	bls.n	8004e0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e022      	b.n	8004e50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e0a:	4b14      	ldr	r3, [pc, #80]	@ (8004e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e16:	d1ee      	bne.n	8004df6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8004e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e24:	f7fe fab0 	bl	8003388 <HAL_GetTick>
 8004e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e2a:	e009      	b.n	8004e40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e2c:	f7fe faac 	bl	8003388 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e3a:	d901      	bls.n	8004e40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e007      	b.n	8004e50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e40:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40007000 	.word	0x40007000

08004e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e29b      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8087 	beq.w	8004f92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e84:	4b96      	ldr	r3, [pc, #600]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d00c      	beq.n	8004eaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e90:	4b93      	ldr	r3, [pc, #588]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d112      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x62>
 8004e9c:	4b90      	ldr	r3, [pc, #576]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea8:	d10b      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d06c      	beq.n	8004f90 <HAL_RCC_OscConfig+0x130>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d168      	bne.n	8004f90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e275      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x7a>
 8004ecc:	4b84      	ldr	r3, [pc, #528]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a83      	ldr	r2, [pc, #524]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e02e      	b.n	8004f38 <HAL_RCC_OscConfig+0xd8>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x9c>
 8004ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	4b7c      	ldr	r3, [pc, #496]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a7b      	ldr	r2, [pc, #492]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e01d      	b.n	8004f38 <HAL_RCC_OscConfig+0xd8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0xc0>
 8004f06:	4b76      	ldr	r3, [pc, #472]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a75      	ldr	r2, [pc, #468]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	4b73      	ldr	r3, [pc, #460]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a72      	ldr	r2, [pc, #456]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0xd8>
 8004f20:	4b6f      	ldr	r3, [pc, #444]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a6e      	ldr	r2, [pc, #440]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a6b      	ldr	r2, [pc, #428]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d013      	beq.n	8004f68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fe fa22 	bl	8003388 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fe fa1e 	bl	8003388 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	@ 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e229      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b61      	ldr	r3, [pc, #388]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0xe8>
 8004f66:	e014      	b.n	8004f92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f68:	f7fe fa0e 	bl	8003388 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f70:	f7fe fa0a 	bl	8003388 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	@ 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e215      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f82:	4b57      	ldr	r3, [pc, #348]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x110>
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d069      	beq.n	8005072 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f9e:	4b50      	ldr	r3, [pc, #320]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004faa:	4b4d      	ldr	r3, [pc, #308]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d11c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x190>
 8004fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d116      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	4b47      	ldr	r3, [pc, #284]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCC_OscConfig+0x17a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e1e9      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fda:	4b41      	ldr	r3, [pc, #260]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	493d      	ldr	r1, [pc, #244]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fee:	e040      	b.n	8005072 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d023      	beq.n	8005040 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff8:	4b39      	ldr	r3, [pc, #228]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a38      	ldr	r2, [pc, #224]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fe f9c0 	bl	8003388 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500c:	f7fe f9bc 	bl	8003388 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e1c7      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501e:	4b30      	ldr	r3, [pc, #192]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502a:	4b2d      	ldr	r3, [pc, #180]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4929      	ldr	r1, [pc, #164]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
 800503e:	e018      	b.n	8005072 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005040:	4b27      	ldr	r3, [pc, #156]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fe f99c 	bl	8003388 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005054:	f7fe f998 	bl	8003388 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1a3      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d038      	beq.n	80050f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d019      	beq.n	80050ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005086:	4b16      	ldr	r3, [pc, #88]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 8005088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508a:	4a15      	ldr	r2, [pc, #84]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005092:	f7fe f979 	bl	8003388 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509a:	f7fe f975 	bl	8003388 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e180      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ac:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 80050ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x23a>
 80050b8:	e01a      	b.n	80050f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ba:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	4a08      	ldr	r2, [pc, #32]	@ (80050e0 <HAL_RCC_OscConfig+0x280>)
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c6:	f7fe f95f 	bl	8003388 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050cc:	e00a      	b.n	80050e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ce:	f7fe f95b 	bl	8003388 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d903      	bls.n	80050e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e166      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
 80050e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e4:	4b92      	ldr	r3, [pc, #584]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80050e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1ee      	bne.n	80050ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80a4 	beq.w	8005246 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fe:	4b8c      	ldr	r3, [pc, #560]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10d      	bne.n	8005126 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800510a:	4b89      	ldr	r3, [pc, #548]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	4a88      	ldr	r2, [pc, #544]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005114:	6413      	str	r3, [r2, #64]	@ 0x40
 8005116:	4b86      	ldr	r3, [pc, #536]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005126:	4b83      	ldr	r3, [pc, #524]	@ (8005334 <HAL_RCC_OscConfig+0x4d4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005132:	4b80      	ldr	r3, [pc, #512]	@ (8005334 <HAL_RCC_OscConfig+0x4d4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a7f      	ldr	r2, [pc, #508]	@ (8005334 <HAL_RCC_OscConfig+0x4d4>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800513c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7fe f923 	bl	8003388 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fe f91f 	bl	8003388 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b64      	cmp	r3, #100	@ 0x64
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e12a      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005158:	4b76      	ldr	r3, [pc, #472]	@ (8005334 <HAL_RCC_OscConfig+0x4d4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <HAL_RCC_OscConfig+0x31a>
 800516c:	4b70      	ldr	r3, [pc, #448]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	4a6f      	ldr	r2, [pc, #444]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
 8005178:	e02d      	b.n	80051d6 <HAL_RCC_OscConfig+0x376>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x33c>
 8005182:	4b6b      	ldr	r3, [pc, #428]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a6a      	ldr	r2, [pc, #424]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	4b68      	ldr	r3, [pc, #416]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005192:	4a67      	ldr	r2, [pc, #412]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005194:	f023 0304 	bic.w	r3, r3, #4
 8005198:	6713      	str	r3, [r2, #112]	@ 0x70
 800519a:	e01c      	b.n	80051d6 <HAL_RCC_OscConfig+0x376>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	d10c      	bne.n	80051be <HAL_RCC_OscConfig+0x35e>
 80051a4:	4b62      	ldr	r3, [pc, #392]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a61      	ldr	r2, [pc, #388]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051aa:	f043 0304 	orr.w	r3, r3, #4
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b0:	4b5f      	ldr	r3, [pc, #380]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b4:	4a5e      	ldr	r2, [pc, #376]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80051bc:	e00b      	b.n	80051d6 <HAL_RCC_OscConfig+0x376>
 80051be:	4b5c      	ldr	r3, [pc, #368]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c2:	4a5b      	ldr	r2, [pc, #364]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ca:	4b59      	ldr	r3, [pc, #356]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	4a58      	ldr	r2, [pc, #352]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051d0:	f023 0304 	bic.w	r3, r3, #4
 80051d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d015      	beq.n	800520a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051de:	f7fe f8d3 	bl	8003388 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e4:	e00a      	b.n	80051fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e6:	f7fe f8cf 	bl	8003388 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e0d8      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0ee      	beq.n	80051e6 <HAL_RCC_OscConfig+0x386>
 8005208:	e014      	b.n	8005234 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520a:	f7fe f8bd 	bl	8003388 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005210:	e00a      	b.n	8005228 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fe f8b9 	bl	8003388 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005220:	4293      	cmp	r3, r2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e0c2      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005228:	4b41      	ldr	r3, [pc, #260]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1ee      	bne.n	8005212 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d105      	bne.n	8005246 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800523a:	4b3d      	ldr	r3, [pc, #244]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	4a3c      	ldr	r2, [pc, #240]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005244:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80ae 	beq.w	80053ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005250:	4b37      	ldr	r3, [pc, #220]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030c 	and.w	r3, r3, #12
 8005258:	2b08      	cmp	r3, #8
 800525a:	d06d      	beq.n	8005338 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d14b      	bne.n	80052fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005264:	4b32      	ldr	r3, [pc, #200]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a31      	ldr	r2, [pc, #196]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 800526a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800526e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fe f88a 	bl	8003388 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005278:	f7fe f886 	bl	8003388 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e091      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	4b29      	ldr	r3, [pc, #164]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	019b      	lsls	r3, r3, #6
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	085b      	lsrs	r3, r3, #1
 80052ae:	3b01      	subs	r3, #1
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	071b      	lsls	r3, r3, #28
 80052c2:	491b      	ldr	r1, [pc, #108]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c8:	4b19      	ldr	r3, [pc, #100]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a18      	ldr	r2, [pc, #96]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80052ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fe f858 	bl	8003388 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fe f854 	bl	8003388 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e05f      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ee:	4b10      	ldr	r3, [pc, #64]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x47c>
 80052fa:	e057      	b.n	80053ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0b      	ldr	r2, [pc, #44]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fe f83e 	bl	8003388 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fe f83a 	bl	8003388 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e045      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005322:	4b03      	ldr	r3, [pc, #12]	@ (8005330 <HAL_RCC_OscConfig+0x4d0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x4b0>
 800532e:	e03d      	b.n	80053ac <HAL_RCC_OscConfig+0x54c>
 8005330:	40023800 	.word	0x40023800
 8005334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005338:	4b1f      	ldr	r3, [pc, #124]	@ (80053b8 <HAL_RCC_OscConfig+0x558>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d030      	beq.n	80053a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d129      	bne.n	80053a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d122      	bne.n	80053a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005368:	4013      	ands	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800536e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005370:	4293      	cmp	r3, r2
 8005372:	d119      	bne.n	80053a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	3b01      	subs	r3, #1
 8005382:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d10f      	bne.n	80053a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d107      	bne.n	80053a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40023800 	.word	0x40023800

080053bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0d0      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d910      	bls.n	8005404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e2:	4b67      	ldr	r3, [pc, #412]	@ (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 020f 	bic.w	r2, r3, #15
 80053ea:	4965      	ldr	r1, [pc, #404]	@ (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	4b63      	ldr	r3, [pc, #396]	@ (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0b8      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d020      	beq.n	8005452 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800541c:	4b59      	ldr	r3, [pc, #356]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	4a58      	ldr	r2, [pc, #352]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 8005422:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005426:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005434:	4b53      	ldr	r3, [pc, #332]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4a52      	ldr	r2, [pc, #328]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 800543a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800543e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005440:	4b50      	ldr	r3, [pc, #320]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	494d      	ldr	r1, [pc, #308]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 800544e:	4313      	orrs	r3, r2
 8005450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d040      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d107      	bne.n	8005476 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b47      	ldr	r3, [pc, #284]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d115      	bne.n	800549e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e07f      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d107      	bne.n	800548e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547e:	4b41      	ldr	r3, [pc, #260]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e073      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548e:	4b3d      	ldr	r3, [pc, #244]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e06b      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800549e:	4b39      	ldr	r3, [pc, #228]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 0203 	bic.w	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4936      	ldr	r1, [pc, #216]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b0:	f7fd ff6a 	bl	8003388 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b8:	f7fd ff66 	bl	8003388 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e053      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 020c 	and.w	r2, r3, #12
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	429a      	cmp	r2, r3
 80054de:	d1eb      	bne.n	80054b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054e0:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d210      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	4b24      	ldr	r3, [pc, #144]	@ (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f023 020f 	bic.w	r2, r3, #15
 80054f6:	4922      	ldr	r1, [pc, #136]	@ (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	4b20      	ldr	r3, [pc, #128]	@ (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e032      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800551c:	4b19      	ldr	r3, [pc, #100]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4916      	ldr	r1, [pc, #88]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800553a:	4b12      	ldr	r3, [pc, #72]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	490e      	ldr	r1, [pc, #56]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800554e:	f000 f821 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005552:	4602      	mov	r2, r0
 8005554:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	490a      	ldr	r1, [pc, #40]	@ (8005588 <HAL_RCC_ClockConfig+0x1cc>)
 8005560:	5ccb      	ldrb	r3, [r1, r3]
 8005562:	fa22 f303 	lsr.w	r3, r2, r3
 8005566:	4a09      	ldr	r2, [pc, #36]	@ (800558c <HAL_RCC_ClockConfig+0x1d0>)
 8005568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800556a:	4b09      	ldr	r3, [pc, #36]	@ (8005590 <HAL_RCC_ClockConfig+0x1d4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7fd fec6 	bl	8003300 <HAL_InitTick>

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40023c00 	.word	0x40023c00
 8005584:	40023800 	.word	0x40023800
 8005588:	08055e8c 	.word	0x08055e8c
 800558c:	20000018 	.word	0x20000018
 8005590:	2000001c 	.word	0x2000001c

08005594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005598:	b094      	sub	sp, #80	@ 0x50
 800559a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a0:	2300      	movs	r3, #0
 80055a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a4:	2300      	movs	r3, #0
 80055a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ac:	4b79      	ldr	r3, [pc, #484]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 030c 	and.w	r3, r3, #12
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d00d      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x40>
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	f200 80e1 	bhi.w	8005780 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x34>
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d003      	beq.n	80055ce <HAL_RCC_GetSysClockFreq+0x3a>
 80055c6:	e0db      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055c8:	4b73      	ldr	r3, [pc, #460]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055cc:	e0db      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ce:	4b73      	ldr	r3, [pc, #460]	@ (800579c <HAL_RCC_GetSysClockFreq+0x208>)
 80055d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055d2:	e0d8      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x200>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80055de:	4b6d      	ldr	r3, [pc, #436]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d063      	beq.n	80056b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	099b      	lsrs	r3, r3, #6
 80055f0:	2200      	movs	r2, #0
 80055f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055fe:	2300      	movs	r3, #0
 8005600:	637b      	str	r3, [r7, #52]	@ 0x34
 8005602:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005606:	4622      	mov	r2, r4
 8005608:	462b      	mov	r3, r5
 800560a:	f04f 0000 	mov.w	r0, #0
 800560e:	f04f 0100 	mov.w	r1, #0
 8005612:	0159      	lsls	r1, r3, #5
 8005614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005618:	0150      	lsls	r0, r2, #5
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4621      	mov	r1, r4
 8005620:	1a51      	subs	r1, r2, r1
 8005622:	6139      	str	r1, [r7, #16]
 8005624:	4629      	mov	r1, r5
 8005626:	eb63 0301 	sbc.w	r3, r3, r1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005638:	4659      	mov	r1, fp
 800563a:	018b      	lsls	r3, r1, #6
 800563c:	4651      	mov	r1, sl
 800563e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005642:	4651      	mov	r1, sl
 8005644:	018a      	lsls	r2, r1, #6
 8005646:	4651      	mov	r1, sl
 8005648:	ebb2 0801 	subs.w	r8, r2, r1
 800564c:	4659      	mov	r1, fp
 800564e:	eb63 0901 	sbc.w	r9, r3, r1
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005666:	4690      	mov	r8, r2
 8005668:	4699      	mov	r9, r3
 800566a:	4623      	mov	r3, r4
 800566c:	eb18 0303 	adds.w	r3, r8, r3
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	462b      	mov	r3, r5
 8005674:	eb49 0303 	adc.w	r3, r9, r3
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005686:	4629      	mov	r1, r5
 8005688:	024b      	lsls	r3, r1, #9
 800568a:	4621      	mov	r1, r4
 800568c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005690:	4621      	mov	r1, r4
 8005692:	024a      	lsls	r2, r1, #9
 8005694:	4610      	mov	r0, r2
 8005696:	4619      	mov	r1, r3
 8005698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800569a:	2200      	movs	r2, #0
 800569c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800569e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056a4:	f7fa fe24 	bl	80002f0 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4613      	mov	r3, r2
 80056ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b0:	e058      	b.n	8005764 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056b2:	4b38      	ldr	r3, [pc, #224]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	099b      	lsrs	r3, r3, #6
 80056b8:	2200      	movs	r2, #0
 80056ba:	4618      	mov	r0, r3
 80056bc:	4611      	mov	r1, r2
 80056be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	2300      	movs	r3, #0
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056cc:	4642      	mov	r2, r8
 80056ce:	464b      	mov	r3, r9
 80056d0:	f04f 0000 	mov.w	r0, #0
 80056d4:	f04f 0100 	mov.w	r1, #0
 80056d8:	0159      	lsls	r1, r3, #5
 80056da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056de:	0150      	lsls	r0, r2, #5
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4641      	mov	r1, r8
 80056e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80056ea:	4649      	mov	r1, r9
 80056ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005700:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005704:	ebb2 040a 	subs.w	r4, r2, sl
 8005708:	eb63 050b 	sbc.w	r5, r3, fp
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	00eb      	lsls	r3, r5, #3
 8005716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800571a:	00e2      	lsls	r2, r4, #3
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	4643      	mov	r3, r8
 8005722:	18e3      	adds	r3, r4, r3
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	464b      	mov	r3, r9
 8005728:	eb45 0303 	adc.w	r3, r5, r3
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800573a:	4629      	mov	r1, r5
 800573c:	028b      	lsls	r3, r1, #10
 800573e:	4621      	mov	r1, r4
 8005740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005744:	4621      	mov	r1, r4
 8005746:	028a      	lsls	r2, r1, #10
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574e:	2200      	movs	r2, #0
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	61fa      	str	r2, [r7, #28]
 8005754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005758:	f7fa fdca 	bl	80002f0 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4613      	mov	r3, r2
 8005762:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005764:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x200>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	3301      	adds	r3, #1
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005774:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800577e:	e002      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005780:	4b05      	ldr	r3, [pc, #20]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x204>)
 8005782:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005788:	4618      	mov	r0, r3
 800578a:	3750      	adds	r7, #80	@ 0x50
 800578c:	46bd      	mov	sp, r7
 800578e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005792:	bf00      	nop
 8005794:	40023800 	.word	0x40023800
 8005798:	00f42400 	.word	0x00f42400
 800579c:	007a1200 	.word	0x007a1200

080057a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a4:	4b03      	ldr	r3, [pc, #12]	@ (80057b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057a6:	681b      	ldr	r3, [r3, #0]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000018 	.word	0x20000018

080057b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057bc:	f7ff fff0 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80057c0:	4602      	mov	r2, r0
 80057c2:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	0a9b      	lsrs	r3, r3, #10
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4903      	ldr	r1, [pc, #12]	@ (80057dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ce:	5ccb      	ldrb	r3, [r1, r3]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40023800 	.word	0x40023800
 80057dc:	08055e9c 	.word	0x08055e9c

080057e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057e4:	f7ff ffdc 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	0b5b      	lsrs	r3, r3, #13
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4903      	ldr	r1, [pc, #12]	@ (8005804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40023800 	.word	0x40023800
 8005804:	08055e9c 	.word	0x08055e9c

08005808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d012      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005830:	4b69      	ldr	r3, [pc, #420]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a68      	ldr	r2, [pc, #416]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005836:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800583a:	6093      	str	r3, [r2, #8]
 800583c:	4b66      	ldr	r3, [pc, #408]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005844:	4964      	ldr	r1, [pc, #400]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005846:	4313      	orrs	r3, r2
 8005848:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005852:	2301      	movs	r3, #1
 8005854:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d017      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005862:	4b5d      	ldr	r3, [pc, #372]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005868:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005870:	4959      	ldr	r1, [pc, #356]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005880:	d101      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005882:	2301      	movs	r3, #1
 8005884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800588e:	2301      	movs	r3, #1
 8005890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d017      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800589e:	4b4e      	ldr	r3, [pc, #312]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	494a      	ldr	r1, [pc, #296]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058bc:	d101      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058be:	2301      	movs	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80058ca:	2301      	movs	r3, #1
 80058cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 808b 	beq.w	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058ec:	4b3a      	ldr	r3, [pc, #232]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f0:	4a39      	ldr	r2, [pc, #228]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80058f8:	4b37      	ldr	r3, [pc, #220]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005904:	4b35      	ldr	r3, [pc, #212]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a34      	ldr	r2, [pc, #208]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800590a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800590e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005910:	f7fd fd3a 	bl	8003388 <HAL_GetTick>
 8005914:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005916:	e008      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005918:	f7fd fd36 	bl	8003388 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	@ 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e38f      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800592a:	4b2c      	ldr	r3, [pc, #176]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005936:	4b28      	ldr	r3, [pc, #160]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800593e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d035      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	429a      	cmp	r2, r3
 8005952:	d02e      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005954:	4b20      	ldr	r3, [pc, #128]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800595e:	4b1e      	ldr	r3, [pc, #120]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005962:	4a1d      	ldr	r2, [pc, #116]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005968:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800596a:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	4a1a      	ldr	r2, [pc, #104]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005974:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005976:	4a18      	ldr	r2, [pc, #96]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800597c:	4b16      	ldr	r3, [pc, #88]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d114      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fd fcfe 	bl	8003388 <HAL_GetTick>
 800598c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598e:	e00a      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7fd fcfa 	bl	8003388 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e351      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a6:	4b0c      	ldr	r3, [pc, #48]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0ee      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059be:	d111      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059c0:	4b05      	ldr	r3, [pc, #20]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059cc:	4b04      	ldr	r3, [pc, #16]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059ce:	400b      	ands	r3, r1
 80059d0:	4901      	ldr	r1, [pc, #4]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
 80059d6:	e00b      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059d8:	40023800 	.word	0x40023800
 80059dc:	40007000 	.word	0x40007000
 80059e0:	0ffffcff 	.word	0x0ffffcff
 80059e4:	4bac      	ldr	r3, [pc, #688]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	4aab      	ldr	r2, [pc, #684]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059ee:	6093      	str	r3, [r2, #8]
 80059f0:	4ba9      	ldr	r3, [pc, #676]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fc:	49a6      	ldr	r1, [pc, #664]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d010      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a0e:	4ba2      	ldr	r3, [pc, #648]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a14:	4aa0      	ldr	r2, [pc, #640]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a20:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	499b      	ldr	r1, [pc, #620]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a3c:	4b96      	ldr	r3, [pc, #600]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a4a:	4993      	ldr	r1, [pc, #588]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a5e:	4b8e      	ldr	r3, [pc, #568]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a6c:	498a      	ldr	r1, [pc, #552]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a80:	4b85      	ldr	r3, [pc, #532]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a8e:	4982      	ldr	r1, [pc, #520]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab0:	4979      	ldr	r1, [pc, #484]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ac4:	4b74      	ldr	r3, [pc, #464]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aca:	f023 0203 	bic.w	r2, r3, #3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad2:	4971      	ldr	r1, [pc, #452]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aec:	f023 020c 	bic.w	r2, r3, #12
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af4:	4968      	ldr	r1, [pc, #416]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b08:	4b63      	ldr	r3, [pc, #396]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b16:	4960      	ldr	r1, [pc, #384]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b30:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b38:	4957      	ldr	r1, [pc, #348]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b4c:	4b52      	ldr	r3, [pc, #328]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	494f      	ldr	r1, [pc, #316]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7c:	4946      	ldr	r1, [pc, #280]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b90:	4b41      	ldr	r3, [pc, #260]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b96:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9e:	493e      	ldr	r1, [pc, #248]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bb2:	4b39      	ldr	r3, [pc, #228]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc0:	4935      	ldr	r1, [pc, #212]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bd4:	4b30      	ldr	r3, [pc, #192]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bda:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005be2:	492d      	ldr	r1, [pc, #180]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bf6:	4b28      	ldr	r3, [pc, #160]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bfc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c04:	4924      	ldr	r1, [pc, #144]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c14:	d101      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c16:	2301      	movs	r3, #1
 8005c18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c26:	2301      	movs	r3, #1
 8005c28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c36:	4b18      	ldr	r3, [pc, #96]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c44:	4914      	ldr	r1, [pc, #80]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c58:	4b0f      	ldr	r3, [pc, #60]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c68:	490b      	ldr	r1, [pc, #44]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00f      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c7c:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c82:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8c:	4902      	ldr	r1, [pc, #8]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ca8:	4b8a      	ldr	r3, [pc, #552]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb8:	4986      	ldr	r1, [pc, #536]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ccc:	4b81      	ldr	r3, [pc, #516]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cdc:	497d      	ldr	r1, [pc, #500]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d006      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80d6 	beq.w	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cf8:	4b76      	ldr	r3, [pc, #472]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a75      	ldr	r2, [pc, #468]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d04:	f7fd fb40 	bl	8003388 <HAL_GetTick>
 8005d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d0c:	f7fd fb3c 	bl	8003388 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	@ 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e195      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d021      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11d      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d3e:	4b65      	ldr	r3, [pc, #404]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d4c:	4b61      	ldr	r3, [pc, #388]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d52:	0e1b      	lsrs	r3, r3, #24
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	019a      	lsls	r2, r3, #6
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	431a      	orrs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	061b      	lsls	r3, r3, #24
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	071b      	lsls	r3, r3, #28
 8005d72:	4958      	ldr	r1, [pc, #352]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d02e      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005da4:	d129      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005da6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005db4:	4b47      	ldr	r3, [pc, #284]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dba:	0f1b      	lsrs	r3, r3, #28
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	019a      	lsls	r2, r3, #6
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	061b      	lsls	r3, r3, #24
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	071b      	lsls	r3, r3, #28
 8005dda:	493e      	ldr	r1, [pc, #248]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005de2:	4b3c      	ldr	r3, [pc, #240]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005de8:	f023 021f 	bic.w	r2, r3, #31
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	3b01      	subs	r3, #1
 8005df2:	4938      	ldr	r1, [pc, #224]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01d      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e06:	4b33      	ldr	r3, [pc, #204]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0c:	0e1b      	lsrs	r3, r3, #24
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e14:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e1a:	0f1b      	lsrs	r3, r3, #28
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	019a      	lsls	r2, r3, #6
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	061b      	lsls	r3, r3, #24
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	071b      	lsls	r3, r3, #28
 8005e3a:	4926      	ldr	r1, [pc, #152]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d011      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	019a      	lsls	r2, r3, #6
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	041b      	lsls	r3, r3, #16
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	061b      	lsls	r3, r3, #24
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	071b      	lsls	r3, r3, #28
 8005e6a:	491a      	ldr	r1, [pc, #104]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e72:	4b18      	ldr	r3, [pc, #96]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a17      	ldr	r2, [pc, #92]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7e:	f7fd fa83 	bl	8003388 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e86:	f7fd fa7f 	bl	8003388 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b64      	cmp	r3, #100	@ 0x64
 8005e92:	d901      	bls.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e0d8      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e98:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	f040 80ce 	bne.w	8006048 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005eac:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a08      	ldr	r2, [pc, #32]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb8:	f7fd fa66 	bl	8003388 <HAL_GetTick>
 8005ebc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ec0:	f7fd fa62 	bl	8003388 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	@ 0x64
 8005ecc:	d904      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e0bb      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee4:	d0ec      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02e      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d12a      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f0e:	4b51      	ldr	r3, [pc, #324]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f22:	0f1b      	lsrs	r3, r3, #28
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	019a      	lsls	r2, r3, #6
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	071b      	lsls	r3, r3, #28
 8005f42:	4944      	ldr	r1, [pc, #272]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f4a:	4b42      	ldr	r3, [pc, #264]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	493d      	ldr	r1, [pc, #244]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d022      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f78:	d11d      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f7a:	4b36      	ldr	r3, [pc, #216]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f80:	0e1b      	lsrs	r3, r3, #24
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f88:	4b32      	ldr	r3, [pc, #200]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	0f1b      	lsrs	r3, r3, #28
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	019a      	lsls	r2, r3, #6
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	061b      	lsls	r3, r3, #24
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	071b      	lsls	r3, r3, #28
 8005fae:	4929      	ldr	r1, [pc, #164]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d028      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fc2:	4b24      	ldr	r3, [pc, #144]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	0e1b      	lsrs	r3, r3, #24
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fd0:	4b20      	ldr	r3, [pc, #128]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	019a      	lsls	r2, r3, #6
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	061b      	lsls	r3, r3, #24
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	071b      	lsls	r3, r3, #28
 8005ff6:	4917      	ldr	r1, [pc, #92]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ffe:	4b15      	ldr	r3, [pc, #84]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006004:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	4911      	ldr	r1, [pc, #68]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006014:	4b0f      	ldr	r3, [pc, #60]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0e      	ldr	r2, [pc, #56]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800601a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006020:	f7fd f9b2 	bl	8003388 <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006028:	f7fd f9ae 	bl	8003388 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e007      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800603a:	4b06      	ldr	r3, [pc, #24]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006046:	d1ef      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40023800 	.word	0x40023800

08006058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e09d      	b.n	80061a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d108      	bne.n	8006084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800607a:	d009      	beq.n	8006090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	61da      	str	r2, [r3, #28]
 8006082:	e005      	b.n	8006090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fc fd82 	bl	8002bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060d0:	d902      	bls.n	80060d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e002      	b.n	80060de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80060e6:	d007      	beq.n	80060f8 <HAL_SPI_Init+0xa0>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060f0:	d002      	beq.n	80060f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613a:	ea42 0103 	orr.w	r1, r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	0c1b      	lsrs	r3, r3, #16
 8006154:	f003 0204 	and.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006174:	ea42 0103 	orr.w	r1, r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_SPI_Transmit+0x22>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e158      	b.n	8006482 <HAL_SPI_Transmit+0x2d4>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d8:	f7fd f8d6 	bl	8003388 <HAL_GetTick>
 80061dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d002      	beq.n	80061f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
 80061f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061f2:	e13d      	b.n	8006470 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_SPI_Transmit+0x52>
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006204:	e134      	b.n	8006470 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2203      	movs	r2, #3
 800620a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	88fa      	ldrh	r2, [r7, #6]
 8006224:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006250:	d10f      	bne.n	8006272 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006270:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d007      	beq.n	8006290 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800628e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006298:	d94b      	bls.n	8006332 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Transmit+0xfa>
 80062a2:	8afb      	ldrh	r3, [r7, #22]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d13e      	bne.n	8006326 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	881a      	ldrh	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b8:	1c9a      	adds	r2, r3, #2
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062cc:	e02b      	b.n	8006326 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d112      	bne.n	8006302 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ec:	1c9a      	adds	r2, r3, #2
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006300:	e011      	b.n	8006326 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006302:	f7fd f841 	bl	8003388 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d803      	bhi.n	800631a <HAL_SPI_Transmit+0x16c>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006318:	d102      	bne.n	8006320 <HAL_SPI_Transmit+0x172>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006324:	e0a4      	b.n	8006470 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ce      	bne.n	80062ce <HAL_SPI_Transmit+0x120>
 8006330:	e07c      	b.n	800642c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_SPI_Transmit+0x192>
 800633a:	8afb      	ldrh	r3, [r7, #22]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d170      	bne.n	8006422 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d912      	bls.n	8006370 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634e:	881a      	ldrh	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b02      	subs	r3, #2
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800636e:	e058      	b.n	8006422 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	7812      	ldrb	r2, [r2, #0]
 800637c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006396:	e044      	b.n	8006422 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d12b      	bne.n	80063fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d912      	bls.n	80063d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b4:	881a      	ldrh	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	1c9a      	adds	r2, r3, #2
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b02      	subs	r3, #2
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063d4:	e025      	b.n	8006422 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	7812      	ldrb	r2, [r2, #0]
 80063e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063fc:	e011      	b.n	8006422 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063fe:	f7fc ffc3 	bl	8003388 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d803      	bhi.n	8006416 <HAL_SPI_Transmit+0x268>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006414:	d102      	bne.n	800641c <HAL_SPI_Transmit+0x26e>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006420:	e026      	b.n	8006470 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1b5      	bne.n	8006398 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f949 	bl	80066c8 <SPI_EndRxTxTransaction>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800644a:	2300      	movs	r3, #0
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e000      	b.n	8006470 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800646e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006480:	7ffb      	ldrb	r3, [r7, #31]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800649c:	f7fc ff74 	bl	8003388 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	4413      	add	r3, r2
 80064aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064ac:	f7fc ff6c 	bl	8003388 <HAL_GetTick>
 80064b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064b2:	4b39      	ldr	r3, [pc, #228]	@ (8006598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	015b      	lsls	r3, r3, #5
 80064b8:	0d1b      	lsrs	r3, r3, #20
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064c2:	e054      	b.n	800656e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ca:	d050      	beq.n	800656e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064cc:	f7fc ff5c 	bl	8003388 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d902      	bls.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d13d      	bne.n	800655e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064fa:	d111      	bne.n	8006520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006504:	d004      	beq.n	8006510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800650e:	d107      	bne.n	8006520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800651e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006528:	d10f      	bne.n	800654a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e017      	b.n	800658e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	3b01      	subs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4013      	ands	r3, r2
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	429a      	cmp	r2, r3
 800657c:	bf0c      	ite	eq
 800657e:	2301      	moveq	r3, #1
 8006580:	2300      	movne	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	429a      	cmp	r2, r3
 800658a:	d19b      	bne.n	80064c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000018 	.word	0x20000018

0800659c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	@ 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065ae:	f7fc feeb 	bl	8003388 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	4413      	add	r3, r2
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80065be:	f7fc fee3 	bl	8003388 <HAL_GetTick>
 80065c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065cc:	4b3d      	ldr	r3, [pc, #244]	@ (80066c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	00da      	lsls	r2, r3, #3
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	0d1b      	lsrs	r3, r3, #20
 80065dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065de:	fb02 f303 	mul.w	r3, r2, r3
 80065e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065e4:	e060      	b.n	80066a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065ec:	d107      	bne.n	80065fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006604:	d050      	beq.n	80066a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006606:	f7fc febf 	bl	8003388 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006612:	429a      	cmp	r2, r3
 8006614:	d902      	bls.n	800661c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d13d      	bne.n	8006698 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800662a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006634:	d111      	bne.n	800665a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800663e:	d004      	beq.n	800664a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006648:	d107      	bne.n	800665a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006658:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006662:	d10f      	bne.n	8006684 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006682:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e010      	b.n	80066ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4013      	ands	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d196      	bne.n	80065e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3728      	adds	r7, #40	@ 0x28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000018 	.word	0x20000018

080066c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2200      	movs	r2, #0
 80066dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff ff5b 	bl	800659c <SPI_WaitFifoStateUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f0:	f043 0220 	orr.w	r2, r3, #32
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e046      	b.n	800678a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066fc:	4b25      	ldr	r3, [pc, #148]	@ (8006794 <SPI_EndRxTxTransaction+0xcc>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a25      	ldr	r2, [pc, #148]	@ (8006798 <SPI_EndRxTxTransaction+0xd0>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	0d5b      	lsrs	r3, r3, #21
 8006708:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800670c:	fb02 f303 	mul.w	r3, r2, r3
 8006710:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800671a:	d112      	bne.n	8006742 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	2180      	movs	r1, #128	@ 0x80
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff feb0 	bl	800648c <SPI_WaitFlagStateUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d016      	beq.n	8006760 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e023      	b.n	800678a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3b01      	subs	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006758:	2b80      	cmp	r3, #128	@ 0x80
 800675a:	d0f2      	beq.n	8006742 <SPI_EndRxTxTransaction+0x7a>
 800675c:	e000      	b.n	8006760 <SPI_EndRxTxTransaction+0x98>
        break;
 800675e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff ff15 	bl	800659c <SPI_WaitFifoStateUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e000      	b.n	800678a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000018 	.word	0x20000018
 8006798:	165e9f81 	.word	0x165e9f81

0800679c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e049      	b.n	8006842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc fbd4 	bl	8002f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f000 faf8 	bl	8006dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	d001      	beq.n	8006864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e054      	b.n	800690e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0201 	orr.w	r2, r2, #1
 800687a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a26      	ldr	r2, [pc, #152]	@ (800691c <HAL_TIM_Base_Start_IT+0xd0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d022      	beq.n	80068cc <HAL_TIM_Base_Start_IT+0x80>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688e:	d01d      	beq.n	80068cc <HAL_TIM_Base_Start_IT+0x80>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a22      	ldr	r2, [pc, #136]	@ (8006920 <HAL_TIM_Base_Start_IT+0xd4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d018      	beq.n	80068cc <HAL_TIM_Base_Start_IT+0x80>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a21      	ldr	r2, [pc, #132]	@ (8006924 <HAL_TIM_Base_Start_IT+0xd8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <HAL_TIM_Base_Start_IT+0x80>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006928 <HAL_TIM_Base_Start_IT+0xdc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00e      	beq.n	80068cc <HAL_TIM_Base_Start_IT+0x80>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1e      	ldr	r2, [pc, #120]	@ (800692c <HAL_TIM_Base_Start_IT+0xe0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d009      	beq.n	80068cc <HAL_TIM_Base_Start_IT+0x80>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006930 <HAL_TIM_Base_Start_IT+0xe4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d004      	beq.n	80068cc <HAL_TIM_Base_Start_IT+0x80>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006934 <HAL_TIM_Base_Start_IT+0xe8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d115      	bne.n	80068f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	4b19      	ldr	r3, [pc, #100]	@ (8006938 <HAL_TIM_Base_Start_IT+0xec>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b06      	cmp	r3, #6
 80068dc:	d015      	beq.n	800690a <HAL_TIM_Base_Start_IT+0xbe>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e4:	d011      	beq.n	800690a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 0201 	orr.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f6:	e008      	b.n	800690a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	e000      	b.n	800690c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40010000 	.word	0x40010000
 8006920:	40000400 	.word	0x40000400
 8006924:	40000800 	.word	0x40000800
 8006928:	40000c00 	.word	0x40000c00
 800692c:	40010400 	.word	0x40010400
 8006930:	40014000 	.word	0x40014000
 8006934:	40001800 	.word	0x40001800
 8006938:	00010007 	.word	0x00010007

0800693c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6a1a      	ldr	r2, [r3, #32]
 800695a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800695e:	4013      	ands	r3, r2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10f      	bne.n	8006984 <HAL_TIM_Base_Stop_IT+0x48>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a1a      	ldr	r2, [r3, #32]
 800696a:	f240 4344 	movw	r3, #1092	@ 0x444
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d107      	bne.n	8006984 <HAL_TIM_Base_Stop_IT+0x48>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0201 	bic.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d122      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d11b      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f06f 0202 	mvn.w	r2, #2
 80069c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f9d9 	bl	8006d94 <HAL_TIM_IC_CaptureCallback>
 80069e2:	e005      	b.n	80069f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9cb 	bl	8006d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9dc 	bl	8006da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d122      	bne.n	8006a4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d11b      	bne.n	8006a4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0204 	mvn.w	r2, #4
 8006a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9af 	bl	8006d94 <HAL_TIM_IC_CaptureCallback>
 8006a36:	e005      	b.n	8006a44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f9a1 	bl	8006d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9b2 	bl	8006da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d122      	bne.n	8006a9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d11b      	bne.n	8006a9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f06f 0208 	mvn.w	r2, #8
 8006a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2204      	movs	r2, #4
 8006a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f985 	bl	8006d94 <HAL_TIM_IC_CaptureCallback>
 8006a8a:	e005      	b.n	8006a98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f977 	bl	8006d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f988 	bl	8006da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d122      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d11b      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f06f 0210 	mvn.w	r2, #16
 8006ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f95b 	bl	8006d94 <HAL_TIM_IC_CaptureCallback>
 8006ade:	e005      	b.n	8006aec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f94d 	bl	8006d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f95e 	bl	8006da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10e      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d107      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f06f 0201 	mvn.w	r2, #1
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f927 	bl	8006d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b28:	2b80      	cmp	r3, #128	@ 0x80
 8006b2a:	d10e      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b80      	cmp	r3, #128	@ 0x80
 8006b38:	d107      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fb15 	bl	8007174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b58:	d10e      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b64:	2b80      	cmp	r3, #128	@ 0x80
 8006b66:	d107      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fb08 	bl	8007188 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d10e      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b90:	2b40      	cmp	r3, #64	@ 0x40
 8006b92:	d107      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f90c 	bl	8006dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d107      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0220 	mvn.w	r2, #32
 8006bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fac8 	bl	8007160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e0b4      	b.n	8006d5e <HAL_TIM_ConfigClockSource+0x186>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	4b56      	ldr	r3, [pc, #344]	@ (8006d68 <HAL_TIM_ConfigClockSource+0x190>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c2c:	d03e      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0xd4>
 8006c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c32:	f200 8087 	bhi.w	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c3a:	f000 8086 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x172>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c42:	d87f      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c44:	2b70      	cmp	r3, #112	@ 0x70
 8006c46:	d01a      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0xa6>
 8006c48:	2b70      	cmp	r3, #112	@ 0x70
 8006c4a:	d87b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c4c:	2b60      	cmp	r3, #96	@ 0x60
 8006c4e:	d050      	beq.n	8006cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8006c50:	2b60      	cmp	r3, #96	@ 0x60
 8006c52:	d877      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c54:	2b50      	cmp	r3, #80	@ 0x50
 8006c56:	d03c      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8006c58:	2b50      	cmp	r3, #80	@ 0x50
 8006c5a:	d873      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c5c:	2b40      	cmp	r3, #64	@ 0x40
 8006c5e:	d058      	beq.n	8006d12 <HAL_TIM_ConfigClockSource+0x13a>
 8006c60:	2b40      	cmp	r3, #64	@ 0x40
 8006c62:	d86f      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c64:	2b30      	cmp	r3, #48	@ 0x30
 8006c66:	d064      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c68:	2b30      	cmp	r3, #48	@ 0x30
 8006c6a:	d86b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d060      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d867      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d05c      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d05a      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c7c:	e062      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c8e:	f000 f9b9 	bl	8007004 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
      break;
 8006caa:	e04f      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cbc:	f000 f9a2 	bl	8007004 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cce:	609a      	str	r2, [r3, #8]
      break;
 8006cd0:	e03c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f000 f916 	bl	8006f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2150      	movs	r1, #80	@ 0x50
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 f96f 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006cf0:	e02c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f000 f935 	bl	8006f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2160      	movs	r1, #96	@ 0x60
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f95f 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006d10:	e01c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f000 f8f6 	bl	8006f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2140      	movs	r1, #64	@ 0x40
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f94f 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006d30:	e00c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f000 f946 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006d42:	e003      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      break;
 8006d48:	e000      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	fffeff88 	.word	0xfffeff88

08006d6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a40      	ldr	r2, [pc, #256]	@ (8006ee4 <TIM_Base_SetConfig+0x114>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dee:	d00f      	beq.n	8006e10 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a3d      	ldr	r2, [pc, #244]	@ (8006ee8 <TIM_Base_SetConfig+0x118>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00b      	beq.n	8006e10 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8006eec <TIM_Base_SetConfig+0x11c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d007      	beq.n	8006e10 <TIM_Base_SetConfig+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a3b      	ldr	r2, [pc, #236]	@ (8006ef0 <TIM_Base_SetConfig+0x120>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_Base_SetConfig+0x40>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a3a      	ldr	r2, [pc, #232]	@ (8006ef4 <TIM_Base_SetConfig+0x124>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d108      	bne.n	8006e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a2f      	ldr	r2, [pc, #188]	@ (8006ee4 <TIM_Base_SetConfig+0x114>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d02b      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e30:	d027      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee8 <TIM_Base_SetConfig+0x118>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d023      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006eec <TIM_Base_SetConfig+0x11c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d01f      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a2a      	ldr	r2, [pc, #168]	@ (8006ef0 <TIM_Base_SetConfig+0x120>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01b      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a29      	ldr	r2, [pc, #164]	@ (8006ef4 <TIM_Base_SetConfig+0x124>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d017      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a28      	ldr	r2, [pc, #160]	@ (8006ef8 <TIM_Base_SetConfig+0x128>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a27      	ldr	r2, [pc, #156]	@ (8006efc <TIM_Base_SetConfig+0x12c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00f      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a26      	ldr	r2, [pc, #152]	@ (8006f00 <TIM_Base_SetConfig+0x130>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00b      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a25      	ldr	r2, [pc, #148]	@ (8006f04 <TIM_Base_SetConfig+0x134>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a24      	ldr	r2, [pc, #144]	@ (8006f08 <TIM_Base_SetConfig+0x138>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a23      	ldr	r2, [pc, #140]	@ (8006f0c <TIM_Base_SetConfig+0x13c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d108      	bne.n	8006e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee4 <TIM_Base_SetConfig+0x114>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d003      	beq.n	8006ec8 <TIM_Base_SetConfig+0xf8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef4 <TIM_Base_SetConfig+0x124>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d103      	bne.n	8006ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	615a      	str	r2, [r3, #20]
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40000800 	.word	0x40000800
 8006ef0:	40000c00 	.word	0x40000c00
 8006ef4:	40010400 	.word	0x40010400
 8006ef8:	40014000 	.word	0x40014000
 8006efc:	40014400 	.word	0x40014400
 8006f00:	40014800 	.word	0x40014800
 8006f04:	40001800 	.word	0x40001800
 8006f08:	40001c00 	.word	0x40001c00
 8006f0c:	40002000 	.word	0x40002000

08006f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f023 0201 	bic.w	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f023 030a 	bic.w	r3, r3, #10
 8006f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	621a      	str	r2, [r3, #32]
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b087      	sub	sp, #28
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0210 	bic.w	r2, r3, #16
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	031b      	lsls	r3, r3, #12
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006faa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f043 0307 	orr.w	r3, r3, #7
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	609a      	str	r2, [r3, #8]
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800701e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	021a      	lsls	r2, r3, #8
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	431a      	orrs	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4313      	orrs	r3, r2
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	609a      	str	r2, [r3, #8]
}
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007058:	2302      	movs	r3, #2
 800705a:	e06d      	b.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a30      	ldr	r2, [pc, #192]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2f      	ldr	r2, [pc, #188]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d108      	bne.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007096:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a20      	ldr	r2, [pc, #128]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d022      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ce:	d01d      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1d      	ldr	r2, [pc, #116]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d018      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1c      	ldr	r2, [pc, #112]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d013      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007154 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00e      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d009      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a16      	ldr	r2, [pc, #88]	@ (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d004      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a15      	ldr	r2, [pc, #84]	@ (800715c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d10c      	bne.n	8007126 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	4313      	orrs	r3, r2
 800711c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	40010000 	.word	0x40010000
 8007148:	40010400 	.word	0x40010400
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40014000 	.word	0x40014000
 800715c:	40001800 	.word	0x40001800

08007160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e040      	b.n	8007230 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fb ff50 	bl	8003064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	@ 0x24
 80071c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f82c 	bl	8007238 <UART_SetConfig>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e022      	b.n	8007230 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa84 	bl	8007700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fb0b 	bl	8007844 <UART_CheckIdleState>
 800722e:	4603      	mov	r3, r0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4ba6      	ldr	r3, [pc, #664]	@ (80074fc <UART_SetConfig+0x2c4>)
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	430b      	orrs	r3, r1
 800726e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a94      	ldr	r2, [pc, #592]	@ (8007500 <UART_SetConfig+0x2c8>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d120      	bne.n	80072f6 <UART_SetConfig+0xbe>
 80072b4:	4b93      	ldr	r3, [pc, #588]	@ (8007504 <UART_SetConfig+0x2cc>)
 80072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d816      	bhi.n	80072f0 <UART_SetConfig+0xb8>
 80072c2:	a201      	add	r2, pc, #4	@ (adr r2, 80072c8 <UART_SetConfig+0x90>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	080072e5 	.word	0x080072e5
 80072d0:	080072df 	.word	0x080072df
 80072d4:	080072eb 	.word	0x080072eb
 80072d8:	2301      	movs	r3, #1
 80072da:	77fb      	strb	r3, [r7, #31]
 80072dc:	e150      	b.n	8007580 <UART_SetConfig+0x348>
 80072de:	2302      	movs	r3, #2
 80072e0:	77fb      	strb	r3, [r7, #31]
 80072e2:	e14d      	b.n	8007580 <UART_SetConfig+0x348>
 80072e4:	2304      	movs	r3, #4
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e14a      	b.n	8007580 <UART_SetConfig+0x348>
 80072ea:	2308      	movs	r3, #8
 80072ec:	77fb      	strb	r3, [r7, #31]
 80072ee:	e147      	b.n	8007580 <UART_SetConfig+0x348>
 80072f0:	2310      	movs	r3, #16
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e144      	b.n	8007580 <UART_SetConfig+0x348>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a83      	ldr	r2, [pc, #524]	@ (8007508 <UART_SetConfig+0x2d0>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d132      	bne.n	8007366 <UART_SetConfig+0x12e>
 8007300:	4b80      	ldr	r3, [pc, #512]	@ (8007504 <UART_SetConfig+0x2cc>)
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007306:	f003 030c 	and.w	r3, r3, #12
 800730a:	2b0c      	cmp	r3, #12
 800730c:	d828      	bhi.n	8007360 <UART_SetConfig+0x128>
 800730e:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <UART_SetConfig+0xdc>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007349 	.word	0x08007349
 8007318:	08007361 	.word	0x08007361
 800731c:	08007361 	.word	0x08007361
 8007320:	08007361 	.word	0x08007361
 8007324:	08007355 	.word	0x08007355
 8007328:	08007361 	.word	0x08007361
 800732c:	08007361 	.word	0x08007361
 8007330:	08007361 	.word	0x08007361
 8007334:	0800734f 	.word	0x0800734f
 8007338:	08007361 	.word	0x08007361
 800733c:	08007361 	.word	0x08007361
 8007340:	08007361 	.word	0x08007361
 8007344:	0800735b 	.word	0x0800735b
 8007348:	2300      	movs	r3, #0
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e118      	b.n	8007580 <UART_SetConfig+0x348>
 800734e:	2302      	movs	r3, #2
 8007350:	77fb      	strb	r3, [r7, #31]
 8007352:	e115      	b.n	8007580 <UART_SetConfig+0x348>
 8007354:	2304      	movs	r3, #4
 8007356:	77fb      	strb	r3, [r7, #31]
 8007358:	e112      	b.n	8007580 <UART_SetConfig+0x348>
 800735a:	2308      	movs	r3, #8
 800735c:	77fb      	strb	r3, [r7, #31]
 800735e:	e10f      	b.n	8007580 <UART_SetConfig+0x348>
 8007360:	2310      	movs	r3, #16
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e10c      	b.n	8007580 <UART_SetConfig+0x348>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a68      	ldr	r2, [pc, #416]	@ (800750c <UART_SetConfig+0x2d4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d120      	bne.n	80073b2 <UART_SetConfig+0x17a>
 8007370:	4b64      	ldr	r3, [pc, #400]	@ (8007504 <UART_SetConfig+0x2cc>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007376:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800737a:	2b30      	cmp	r3, #48	@ 0x30
 800737c:	d013      	beq.n	80073a6 <UART_SetConfig+0x16e>
 800737e:	2b30      	cmp	r3, #48	@ 0x30
 8007380:	d814      	bhi.n	80073ac <UART_SetConfig+0x174>
 8007382:	2b20      	cmp	r3, #32
 8007384:	d009      	beq.n	800739a <UART_SetConfig+0x162>
 8007386:	2b20      	cmp	r3, #32
 8007388:	d810      	bhi.n	80073ac <UART_SetConfig+0x174>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <UART_SetConfig+0x15c>
 800738e:	2b10      	cmp	r3, #16
 8007390:	d006      	beq.n	80073a0 <UART_SetConfig+0x168>
 8007392:	e00b      	b.n	80073ac <UART_SetConfig+0x174>
 8007394:	2300      	movs	r3, #0
 8007396:	77fb      	strb	r3, [r7, #31]
 8007398:	e0f2      	b.n	8007580 <UART_SetConfig+0x348>
 800739a:	2302      	movs	r3, #2
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e0ef      	b.n	8007580 <UART_SetConfig+0x348>
 80073a0:	2304      	movs	r3, #4
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	e0ec      	b.n	8007580 <UART_SetConfig+0x348>
 80073a6:	2308      	movs	r3, #8
 80073a8:	77fb      	strb	r3, [r7, #31]
 80073aa:	e0e9      	b.n	8007580 <UART_SetConfig+0x348>
 80073ac:	2310      	movs	r3, #16
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e0e6      	b.n	8007580 <UART_SetConfig+0x348>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a56      	ldr	r2, [pc, #344]	@ (8007510 <UART_SetConfig+0x2d8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d120      	bne.n	80073fe <UART_SetConfig+0x1c6>
 80073bc:	4b51      	ldr	r3, [pc, #324]	@ (8007504 <UART_SetConfig+0x2cc>)
 80073be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80073c8:	d013      	beq.n	80073f2 <UART_SetConfig+0x1ba>
 80073ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80073cc:	d814      	bhi.n	80073f8 <UART_SetConfig+0x1c0>
 80073ce:	2b80      	cmp	r3, #128	@ 0x80
 80073d0:	d009      	beq.n	80073e6 <UART_SetConfig+0x1ae>
 80073d2:	2b80      	cmp	r3, #128	@ 0x80
 80073d4:	d810      	bhi.n	80073f8 <UART_SetConfig+0x1c0>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <UART_SetConfig+0x1a8>
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d006      	beq.n	80073ec <UART_SetConfig+0x1b4>
 80073de:	e00b      	b.n	80073f8 <UART_SetConfig+0x1c0>
 80073e0:	2300      	movs	r3, #0
 80073e2:	77fb      	strb	r3, [r7, #31]
 80073e4:	e0cc      	b.n	8007580 <UART_SetConfig+0x348>
 80073e6:	2302      	movs	r3, #2
 80073e8:	77fb      	strb	r3, [r7, #31]
 80073ea:	e0c9      	b.n	8007580 <UART_SetConfig+0x348>
 80073ec:	2304      	movs	r3, #4
 80073ee:	77fb      	strb	r3, [r7, #31]
 80073f0:	e0c6      	b.n	8007580 <UART_SetConfig+0x348>
 80073f2:	2308      	movs	r3, #8
 80073f4:	77fb      	strb	r3, [r7, #31]
 80073f6:	e0c3      	b.n	8007580 <UART_SetConfig+0x348>
 80073f8:	2310      	movs	r3, #16
 80073fa:	77fb      	strb	r3, [r7, #31]
 80073fc:	e0c0      	b.n	8007580 <UART_SetConfig+0x348>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a44      	ldr	r2, [pc, #272]	@ (8007514 <UART_SetConfig+0x2dc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d125      	bne.n	8007454 <UART_SetConfig+0x21c>
 8007408:	4b3e      	ldr	r3, [pc, #248]	@ (8007504 <UART_SetConfig+0x2cc>)
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800740e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007416:	d017      	beq.n	8007448 <UART_SetConfig+0x210>
 8007418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800741c:	d817      	bhi.n	800744e <UART_SetConfig+0x216>
 800741e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007422:	d00b      	beq.n	800743c <UART_SetConfig+0x204>
 8007424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007428:	d811      	bhi.n	800744e <UART_SetConfig+0x216>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <UART_SetConfig+0x1fe>
 800742e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007432:	d006      	beq.n	8007442 <UART_SetConfig+0x20a>
 8007434:	e00b      	b.n	800744e <UART_SetConfig+0x216>
 8007436:	2300      	movs	r3, #0
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e0a1      	b.n	8007580 <UART_SetConfig+0x348>
 800743c:	2302      	movs	r3, #2
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e09e      	b.n	8007580 <UART_SetConfig+0x348>
 8007442:	2304      	movs	r3, #4
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e09b      	b.n	8007580 <UART_SetConfig+0x348>
 8007448:	2308      	movs	r3, #8
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e098      	b.n	8007580 <UART_SetConfig+0x348>
 800744e:	2310      	movs	r3, #16
 8007450:	77fb      	strb	r3, [r7, #31]
 8007452:	e095      	b.n	8007580 <UART_SetConfig+0x348>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2f      	ldr	r2, [pc, #188]	@ (8007518 <UART_SetConfig+0x2e0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d125      	bne.n	80074aa <UART_SetConfig+0x272>
 800745e:	4b29      	ldr	r3, [pc, #164]	@ (8007504 <UART_SetConfig+0x2cc>)
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007464:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007468:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800746c:	d017      	beq.n	800749e <UART_SetConfig+0x266>
 800746e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007472:	d817      	bhi.n	80074a4 <UART_SetConfig+0x26c>
 8007474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007478:	d00b      	beq.n	8007492 <UART_SetConfig+0x25a>
 800747a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800747e:	d811      	bhi.n	80074a4 <UART_SetConfig+0x26c>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <UART_SetConfig+0x254>
 8007484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007488:	d006      	beq.n	8007498 <UART_SetConfig+0x260>
 800748a:	e00b      	b.n	80074a4 <UART_SetConfig+0x26c>
 800748c:	2301      	movs	r3, #1
 800748e:	77fb      	strb	r3, [r7, #31]
 8007490:	e076      	b.n	8007580 <UART_SetConfig+0x348>
 8007492:	2302      	movs	r3, #2
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e073      	b.n	8007580 <UART_SetConfig+0x348>
 8007498:	2304      	movs	r3, #4
 800749a:	77fb      	strb	r3, [r7, #31]
 800749c:	e070      	b.n	8007580 <UART_SetConfig+0x348>
 800749e:	2308      	movs	r3, #8
 80074a0:	77fb      	strb	r3, [r7, #31]
 80074a2:	e06d      	b.n	8007580 <UART_SetConfig+0x348>
 80074a4:	2310      	movs	r3, #16
 80074a6:	77fb      	strb	r3, [r7, #31]
 80074a8:	e06a      	b.n	8007580 <UART_SetConfig+0x348>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1b      	ldr	r2, [pc, #108]	@ (800751c <UART_SetConfig+0x2e4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d138      	bne.n	8007526 <UART_SetConfig+0x2ee>
 80074b4:	4b13      	ldr	r3, [pc, #76]	@ (8007504 <UART_SetConfig+0x2cc>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80074be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074c2:	d017      	beq.n	80074f4 <UART_SetConfig+0x2bc>
 80074c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074c8:	d82a      	bhi.n	8007520 <UART_SetConfig+0x2e8>
 80074ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ce:	d00b      	beq.n	80074e8 <UART_SetConfig+0x2b0>
 80074d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074d4:	d824      	bhi.n	8007520 <UART_SetConfig+0x2e8>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <UART_SetConfig+0x2aa>
 80074da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074de:	d006      	beq.n	80074ee <UART_SetConfig+0x2b6>
 80074e0:	e01e      	b.n	8007520 <UART_SetConfig+0x2e8>
 80074e2:	2300      	movs	r3, #0
 80074e4:	77fb      	strb	r3, [r7, #31]
 80074e6:	e04b      	b.n	8007580 <UART_SetConfig+0x348>
 80074e8:	2302      	movs	r3, #2
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e048      	b.n	8007580 <UART_SetConfig+0x348>
 80074ee:	2304      	movs	r3, #4
 80074f0:	77fb      	strb	r3, [r7, #31]
 80074f2:	e045      	b.n	8007580 <UART_SetConfig+0x348>
 80074f4:	2308      	movs	r3, #8
 80074f6:	77fb      	strb	r3, [r7, #31]
 80074f8:	e042      	b.n	8007580 <UART_SetConfig+0x348>
 80074fa:	bf00      	nop
 80074fc:	efff69f3 	.word	0xefff69f3
 8007500:	40011000 	.word	0x40011000
 8007504:	40023800 	.word	0x40023800
 8007508:	40004400 	.word	0x40004400
 800750c:	40004800 	.word	0x40004800
 8007510:	40004c00 	.word	0x40004c00
 8007514:	40005000 	.word	0x40005000
 8007518:	40011400 	.word	0x40011400
 800751c:	40007800 	.word	0x40007800
 8007520:	2310      	movs	r3, #16
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	e02c      	b.n	8007580 <UART_SetConfig+0x348>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a72      	ldr	r2, [pc, #456]	@ (80076f4 <UART_SetConfig+0x4bc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d125      	bne.n	800757c <UART_SetConfig+0x344>
 8007530:	4b71      	ldr	r3, [pc, #452]	@ (80076f8 <UART_SetConfig+0x4c0>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007536:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800753a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800753e:	d017      	beq.n	8007570 <UART_SetConfig+0x338>
 8007540:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007544:	d817      	bhi.n	8007576 <UART_SetConfig+0x33e>
 8007546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800754a:	d00b      	beq.n	8007564 <UART_SetConfig+0x32c>
 800754c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007550:	d811      	bhi.n	8007576 <UART_SetConfig+0x33e>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <UART_SetConfig+0x326>
 8007556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800755a:	d006      	beq.n	800756a <UART_SetConfig+0x332>
 800755c:	e00b      	b.n	8007576 <UART_SetConfig+0x33e>
 800755e:	2300      	movs	r3, #0
 8007560:	77fb      	strb	r3, [r7, #31]
 8007562:	e00d      	b.n	8007580 <UART_SetConfig+0x348>
 8007564:	2302      	movs	r3, #2
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e00a      	b.n	8007580 <UART_SetConfig+0x348>
 800756a:	2304      	movs	r3, #4
 800756c:	77fb      	strb	r3, [r7, #31]
 800756e:	e007      	b.n	8007580 <UART_SetConfig+0x348>
 8007570:	2308      	movs	r3, #8
 8007572:	77fb      	strb	r3, [r7, #31]
 8007574:	e004      	b.n	8007580 <UART_SetConfig+0x348>
 8007576:	2310      	movs	r3, #16
 8007578:	77fb      	strb	r3, [r7, #31]
 800757a:	e001      	b.n	8007580 <UART_SetConfig+0x348>
 800757c:	2310      	movs	r3, #16
 800757e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007588:	d15b      	bne.n	8007642 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800758a:	7ffb      	ldrb	r3, [r7, #31]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d828      	bhi.n	80075e2 <UART_SetConfig+0x3aa>
 8007590:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <UART_SetConfig+0x360>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	080075e3 	.word	0x080075e3
 80075a8:	080075d3 	.word	0x080075d3
 80075ac:	080075e3 	.word	0x080075e3
 80075b0:	080075e3 	.word	0x080075e3
 80075b4:	080075e3 	.word	0x080075e3
 80075b8:	080075db 	.word	0x080075db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075bc:	f7fe f8fc 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 80075c0:	61b8      	str	r0, [r7, #24]
        break;
 80075c2:	e013      	b.n	80075ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c4:	f7fe f90c 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 80075c8:	61b8      	str	r0, [r7, #24]
        break;
 80075ca:	e00f      	b.n	80075ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075cc:	4b4b      	ldr	r3, [pc, #300]	@ (80076fc <UART_SetConfig+0x4c4>)
 80075ce:	61bb      	str	r3, [r7, #24]
        break;
 80075d0:	e00c      	b.n	80075ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075d2:	f7fd ffdf 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 80075d6:	61b8      	str	r0, [r7, #24]
        break;
 80075d8:	e008      	b.n	80075ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075de:	61bb      	str	r3, [r7, #24]
        break;
 80075e0:	e004      	b.n	80075ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	77bb      	strb	r3, [r7, #30]
        break;
 80075ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d074      	beq.n	80076dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	005a      	lsls	r2, r3, #1
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	441a      	add	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	fbb2 f3f3 	udiv	r3, r2, r3
 8007606:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b0f      	cmp	r3, #15
 800760c:	d916      	bls.n	800763c <UART_SetConfig+0x404>
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007614:	d212      	bcs.n	800763c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f023 030f 	bic.w	r3, r3, #15
 800761e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	b29b      	uxth	r3, r3
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	b29a      	uxth	r2, r3
 800762c:	89fb      	ldrh	r3, [r7, #14]
 800762e:	4313      	orrs	r3, r2
 8007630:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	89fa      	ldrh	r2, [r7, #14]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	e04f      	b.n	80076dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	77bb      	strb	r3, [r7, #30]
 8007640:	e04c      	b.n	80076dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007642:	7ffb      	ldrb	r3, [r7, #31]
 8007644:	2b08      	cmp	r3, #8
 8007646:	d828      	bhi.n	800769a <UART_SetConfig+0x462>
 8007648:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <UART_SetConfig+0x418>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007675 	.word	0x08007675
 8007654:	0800767d 	.word	0x0800767d
 8007658:	08007685 	.word	0x08007685
 800765c:	0800769b 	.word	0x0800769b
 8007660:	0800768b 	.word	0x0800768b
 8007664:	0800769b 	.word	0x0800769b
 8007668:	0800769b 	.word	0x0800769b
 800766c:	0800769b 	.word	0x0800769b
 8007670:	08007693 	.word	0x08007693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007674:	f7fe f8a0 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 8007678:	61b8      	str	r0, [r7, #24]
        break;
 800767a:	e013      	b.n	80076a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800767c:	f7fe f8b0 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 8007680:	61b8      	str	r0, [r7, #24]
        break;
 8007682:	e00f      	b.n	80076a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007684:	4b1d      	ldr	r3, [pc, #116]	@ (80076fc <UART_SetConfig+0x4c4>)
 8007686:	61bb      	str	r3, [r7, #24]
        break;
 8007688:	e00c      	b.n	80076a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768a:	f7fd ff83 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 800768e:	61b8      	str	r0, [r7, #24]
        break;
 8007690:	e008      	b.n	80076a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007696:	61bb      	str	r3, [r7, #24]
        break;
 8007698:	e004      	b.n	80076a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	77bb      	strb	r3, [r7, #30]
        break;
 80076a2:	bf00      	nop
    }

    if (pclk != 0U)
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d018      	beq.n	80076dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	085a      	lsrs	r2, r3, #1
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	441a      	add	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2b0f      	cmp	r3, #15
 80076c2:	d909      	bls.n	80076d8 <UART_SetConfig+0x4a0>
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ca:	d205      	bcs.n	80076d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	e001      	b.n	80076dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80076e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3720      	adds	r7, #32
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40007c00 	.word	0x40007c00
 80076f8:	40023800 	.word	0x40023800
 80076fc:	00f42400 	.word	0x00f42400

08007700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01a      	beq.n	8007816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077fe:	d10a      	bne.n	8007816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af02      	add	r7, sp, #8
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007854:	f7fb fd98 	bl	8003388 <HAL_GetTick>
 8007858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b08      	cmp	r3, #8
 8007866:	d10e      	bne.n	8007886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f831 	bl	80078de <UART_WaitOnFlagUntilTimeout>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e027      	b.n	80078d6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b04      	cmp	r3, #4
 8007892:	d10e      	bne.n	80078b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007894:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f81b 	bl	80078de <UART_WaitOnFlagUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e011      	b.n	80078d6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b09c      	sub	sp, #112	@ 0x70
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	4613      	mov	r3, r2
 80078ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ee:	e0a7      	b.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078f6:	f000 80a3 	beq.w	8007a40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fa:	f7fb fd45 	bl	8003388 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007906:	429a      	cmp	r2, r3
 8007908:	d302      	bcc.n	8007910 <UART_WaitOnFlagUntilTimeout+0x32>
 800790a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800790c:	2b00      	cmp	r3, #0
 800790e:	d13f      	bne.n	8007990 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800791e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007920:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007924:	667b      	str	r3, [r7, #100]	@ 0x64
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800792e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007930:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007934:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800793c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e6      	bne.n	8007910 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3308      	adds	r3, #8
 8007948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	663b      	str	r3, [r7, #96]	@ 0x60
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007962:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007964:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007968:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e5      	bne.n	8007942 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2220      	movs	r2, #32
 800797a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2220      	movs	r2, #32
 8007980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e068      	b.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0304 	and.w	r3, r3, #4
 800799a:	2b00      	cmp	r3, #0
 800799c:	d050      	beq.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ac:	d148      	bne.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80079cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	613b      	str	r3, [r7, #16]
   return(result);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a0a:	623a      	str	r2, [r7, #32]
 8007a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	69f9      	ldr	r1, [r7, #28]
 8007a10:	6a3a      	ldr	r2, [r7, #32]
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e010      	b.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69da      	ldr	r2, [r3, #28]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	bf0c      	ite	eq
 8007a50:	2301      	moveq	r3, #1
 8007a52:	2300      	movne	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	f43f af48 	beq.w	80078f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3770      	adds	r7, #112	@ 0x70
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	f107 001c 	add.w	r0, r7, #28
 8007a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d120      	bne.n	8007ac6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	4b20      	ldr	r3, [pc, #128]	@ (8007b18 <USB_CoreInit+0xac>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d105      	bne.n	8007aba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa96 	bl	8007fec <USB_CoreReset>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]
 8007ac4:	e010      	b.n	8007ae8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa8a 	bl	8007fec <USB_CoreReset>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d10b      	bne.n	8007b06 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f043 0206 	orr.w	r2, r3, #6
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f043 0220 	orr.w	r2, r3, #32
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b12:	b004      	add	sp, #16
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	ffbdffbf 	.word	0xffbdffbf

08007b1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f023 0201 	bic.w	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d115      	bne.n	8007b8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f7fb fc17 	bl	80033a0 <HAL_Delay>
      ms++;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fa29 	bl	8007fd0 <USB_GetMode>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d01e      	beq.n	8007bc2 <USB_SetCurrentMode+0x84>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b31      	cmp	r3, #49	@ 0x31
 8007b88:	d9f0      	bls.n	8007b6c <USB_SetCurrentMode+0x2e>
 8007b8a:	e01a      	b.n	8007bc2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d115      	bne.n	8007bbe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f7fb fbfe 	bl	80033a0 <HAL_Delay>
      ms++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa10 	bl	8007fd0 <USB_GetMode>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <USB_SetCurrentMode+0x84>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b31      	cmp	r3, #49	@ 0x31
 8007bba:	d9f0      	bls.n	8007b9e <USB_SetCurrentMode+0x60>
 8007bbc:	e001      	b.n	8007bc2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e005      	b.n	8007bce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b32      	cmp	r3, #50	@ 0x32
 8007bc6:	d101      	bne.n	8007bcc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bd8:	b084      	sub	sp, #16
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	e009      	b.n	8007c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	3340      	adds	r3, #64	@ 0x40
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b0e      	cmp	r3, #14
 8007c10:	d9f2      	bls.n	8007bf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d11c      	bne.n	8007c52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c26:	f043 0302 	orr.w	r3, r3, #2
 8007c2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c30:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	e005      	b.n	8007c5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c64:	461a      	mov	r2, r3
 8007c66:	2300      	movs	r3, #0
 8007c68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c70:	4619      	mov	r1, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c78:	461a      	mov	r2, r3
 8007c7a:	680b      	ldr	r3, [r1, #0]
 8007c7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d10c      	bne.n	8007c9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d104      	bne.n	8007c94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f965 	bl	8007f5c <USB_SetDevSpeed>
 8007c92:	e008      	b.n	8007ca6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c94:	2101      	movs	r1, #1
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f960 	bl	8007f5c <USB_SetDevSpeed>
 8007c9c:	e003      	b.n	8007ca6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c9e:	2103      	movs	r1, #3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f95b 	bl	8007f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ca6:	2110      	movs	r1, #16
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f8f3 	bl	8007e94 <USB_FlushTxFifo>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f91f 	bl	8007efc <USB_FlushRxFifo>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cda:	461a      	mov	r2, r3
 8007cdc:	2300      	movs	r3, #0
 8007cde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cec:	2300      	movs	r3, #0
 8007cee:	613b      	str	r3, [r7, #16]
 8007cf0:	e043      	b.n	8007d7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d08:	d118      	bne.n	8007d3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	e013      	b.n	8007d4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d32:	461a      	mov	r2, r3
 8007d34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	e008      	b.n	8007d4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3301      	adds	r3, #1
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d3b7      	bcc.n	8007cf2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d82:	2300      	movs	r3, #0
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	e043      	b.n	8007e10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d9e:	d118      	bne.n	8007dd2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db2:	461a      	mov	r2, r3
 8007db4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	e013      	b.n	8007de4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc8:	461a      	mov	r2, r3
 8007dca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	e008      	b.n	8007de4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dde:	461a      	mov	r2, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df0:	461a      	mov	r2, r3
 8007df2:	2300      	movs	r3, #0
 8007df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e02:	461a      	mov	r2, r3
 8007e04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d3b7      	bcc.n	8007d88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007e38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d105      	bne.n	8007e4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f043 0210 	orr.w	r2, r3, #16
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699a      	ldr	r2, [r3, #24]
 8007e50:	4b0e      	ldr	r3, [pc, #56]	@ (8007e8c <USB_DevInit+0x2b4>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	f043 0208 	orr.w	r2, r3, #8
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d105      	bne.n	8007e7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	4b06      	ldr	r3, [pc, #24]	@ (8007e90 <USB_DevInit+0x2b8>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e88:	b004      	add	sp, #16
 8007e8a:	4770      	bx	lr
 8007e8c:	803c3800 	.word	0x803c3800
 8007e90:	40000004 	.word	0x40000004

08007e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4a13      	ldr	r2, [pc, #76]	@ (8007ef8 <USB_FlushTxFifo+0x64>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d901      	bls.n	8007eb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e01b      	b.n	8007eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	daf2      	bge.n	8007ea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	019b      	lsls	r3, r3, #6
 8007ec4:	f043 0220 	orr.w	r2, r3, #32
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4a08      	ldr	r2, [pc, #32]	@ (8007ef8 <USB_FlushTxFifo+0x64>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d901      	bls.n	8007ede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e006      	b.n	8007eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d0f0      	beq.n	8007ecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	00030d40 	.word	0x00030d40

08007efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a11      	ldr	r2, [pc, #68]	@ (8007f58 <USB_FlushRxFifo+0x5c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d901      	bls.n	8007f1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e018      	b.n	8007f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	daf2      	bge.n	8007f08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2210      	movs	r2, #16
 8007f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4a08      	ldr	r2, [pc, #32]	@ (8007f58 <USB_FlushRxFifo+0x5c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d901      	bls.n	8007f3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e006      	b.n	8007f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b10      	cmp	r3, #16
 8007f48:	d0f0      	beq.n	8007f2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	00030d40 	.word	0x00030d40

08007f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	68f9      	ldr	r1, [r7, #12]
 8007f78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007fa8:	f023 0303 	bic.w	r3, r3, #3
 8007fac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fbc:	f043 0302 	orr.w	r3, r3, #2
 8007fc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4a13      	ldr	r2, [pc, #76]	@ (8008050 <USB_CoreReset+0x64>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e01b      	b.n	8008042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	daf2      	bge.n	8007ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	f043 0201 	orr.w	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3301      	adds	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4a09      	ldr	r2, [pc, #36]	@ (8008050 <USB_CoreReset+0x64>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d901      	bls.n	8008034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e006      	b.n	8008042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b01      	cmp	r3, #1
 800803e:	d0f0      	beq.n	8008022 <USB_CoreReset+0x36>

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	00030d40 	.word	0x00030d40

08008054 <__cvt>:
 8008054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008056:	ed2d 8b02 	vpush	{d8}
 800805a:	eeb0 8b40 	vmov.f64	d8, d0
 800805e:	b085      	sub	sp, #20
 8008060:	4617      	mov	r7, r2
 8008062:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008064:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008066:	ee18 2a90 	vmov	r2, s17
 800806a:	f025 0520 	bic.w	r5, r5, #32
 800806e:	2a00      	cmp	r2, #0
 8008070:	bfb6      	itet	lt
 8008072:	222d      	movlt	r2, #45	@ 0x2d
 8008074:	2200      	movge	r2, #0
 8008076:	eeb1 8b40 	vneglt.f64	d8, d0
 800807a:	2d46      	cmp	r5, #70	@ 0x46
 800807c:	460c      	mov	r4, r1
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	d004      	beq.n	800808c <__cvt+0x38>
 8008082:	2d45      	cmp	r5, #69	@ 0x45
 8008084:	d100      	bne.n	8008088 <__cvt+0x34>
 8008086:	3401      	adds	r4, #1
 8008088:	2102      	movs	r1, #2
 800808a:	e000      	b.n	800808e <__cvt+0x3a>
 800808c:	2103      	movs	r1, #3
 800808e:	ab03      	add	r3, sp, #12
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	ab02      	add	r3, sp, #8
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4622      	mov	r2, r4
 8008098:	4633      	mov	r3, r6
 800809a:	eeb0 0b48 	vmov.f64	d0, d8
 800809e:	f000 fe3f 	bl	8008d20 <_dtoa_r>
 80080a2:	2d47      	cmp	r5, #71	@ 0x47
 80080a4:	d114      	bne.n	80080d0 <__cvt+0x7c>
 80080a6:	07fb      	lsls	r3, r7, #31
 80080a8:	d50a      	bpl.n	80080c0 <__cvt+0x6c>
 80080aa:	1902      	adds	r2, r0, r4
 80080ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b4:	bf08      	it	eq
 80080b6:	9203      	streq	r2, [sp, #12]
 80080b8:	2130      	movs	r1, #48	@ 0x30
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	4293      	cmp	r3, r2
 80080be:	d319      	bcc.n	80080f4 <__cvt+0xa0>
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080c4:	1a1b      	subs	r3, r3, r0
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	b005      	add	sp, #20
 80080ca:	ecbd 8b02 	vpop	{d8}
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	2d46      	cmp	r5, #70	@ 0x46
 80080d2:	eb00 0204 	add.w	r2, r0, r4
 80080d6:	d1e9      	bne.n	80080ac <__cvt+0x58>
 80080d8:	7803      	ldrb	r3, [r0, #0]
 80080da:	2b30      	cmp	r3, #48	@ 0x30
 80080dc:	d107      	bne.n	80080ee <__cvt+0x9a>
 80080de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e6:	bf1c      	itt	ne
 80080e8:	f1c4 0401 	rsbne	r4, r4, #1
 80080ec:	6034      	strne	r4, [r6, #0]
 80080ee:	6833      	ldr	r3, [r6, #0]
 80080f0:	441a      	add	r2, r3
 80080f2:	e7db      	b.n	80080ac <__cvt+0x58>
 80080f4:	1c5c      	adds	r4, r3, #1
 80080f6:	9403      	str	r4, [sp, #12]
 80080f8:	7019      	strb	r1, [r3, #0]
 80080fa:	e7de      	b.n	80080ba <__cvt+0x66>

080080fc <__exponent>:
 80080fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080fe:	2900      	cmp	r1, #0
 8008100:	bfba      	itte	lt
 8008102:	4249      	neglt	r1, r1
 8008104:	232d      	movlt	r3, #45	@ 0x2d
 8008106:	232b      	movge	r3, #43	@ 0x2b
 8008108:	2909      	cmp	r1, #9
 800810a:	7002      	strb	r2, [r0, #0]
 800810c:	7043      	strb	r3, [r0, #1]
 800810e:	dd29      	ble.n	8008164 <__exponent+0x68>
 8008110:	f10d 0307 	add.w	r3, sp, #7
 8008114:	461d      	mov	r5, r3
 8008116:	270a      	movs	r7, #10
 8008118:	461a      	mov	r2, r3
 800811a:	fbb1 f6f7 	udiv	r6, r1, r7
 800811e:	fb07 1416 	mls	r4, r7, r6, r1
 8008122:	3430      	adds	r4, #48	@ 0x30
 8008124:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008128:	460c      	mov	r4, r1
 800812a:	2c63      	cmp	r4, #99	@ 0x63
 800812c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008130:	4631      	mov	r1, r6
 8008132:	dcf1      	bgt.n	8008118 <__exponent+0x1c>
 8008134:	3130      	adds	r1, #48	@ 0x30
 8008136:	1e94      	subs	r4, r2, #2
 8008138:	f803 1c01 	strb.w	r1, [r3, #-1]
 800813c:	1c41      	adds	r1, r0, #1
 800813e:	4623      	mov	r3, r4
 8008140:	42ab      	cmp	r3, r5
 8008142:	d30a      	bcc.n	800815a <__exponent+0x5e>
 8008144:	f10d 0309 	add.w	r3, sp, #9
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	42ac      	cmp	r4, r5
 800814c:	bf88      	it	hi
 800814e:	2300      	movhi	r3, #0
 8008150:	3302      	adds	r3, #2
 8008152:	4403      	add	r3, r0
 8008154:	1a18      	subs	r0, r3, r0
 8008156:	b003      	add	sp, #12
 8008158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800815a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800815e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008162:	e7ed      	b.n	8008140 <__exponent+0x44>
 8008164:	2330      	movs	r3, #48	@ 0x30
 8008166:	3130      	adds	r1, #48	@ 0x30
 8008168:	7083      	strb	r3, [r0, #2]
 800816a:	70c1      	strb	r1, [r0, #3]
 800816c:	1d03      	adds	r3, r0, #4
 800816e:	e7f1      	b.n	8008154 <__exponent+0x58>

08008170 <_printf_float>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	b08d      	sub	sp, #52	@ 0x34
 8008176:	460c      	mov	r4, r1
 8008178:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800817c:	4616      	mov	r6, r2
 800817e:	461f      	mov	r7, r3
 8008180:	4605      	mov	r5, r0
 8008182:	f000 fccb 	bl	8008b1c <_localeconv_r>
 8008186:	f8d0 b000 	ldr.w	fp, [r0]
 800818a:	4658      	mov	r0, fp
 800818c:	f7f8 f8a8 	bl	80002e0 <strlen>
 8008190:	2300      	movs	r3, #0
 8008192:	930a      	str	r3, [sp, #40]	@ 0x28
 8008194:	f8d8 3000 	ldr.w	r3, [r8]
 8008198:	f894 9018 	ldrb.w	r9, [r4, #24]
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	9005      	str	r0, [sp, #20]
 80081a0:	3307      	adds	r3, #7
 80081a2:	f023 0307 	bic.w	r3, r3, #7
 80081a6:	f103 0108 	add.w	r1, r3, #8
 80081aa:	f8c8 1000 	str.w	r1, [r8]
 80081ae:	ed93 0b00 	vldr	d0, [r3]
 80081b2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008410 <_printf_float+0x2a0>
 80081b6:	eeb0 7bc0 	vabs.f64	d7, d0
 80081ba:	eeb4 7b46 	vcmp.f64	d7, d6
 80081be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80081c6:	dd24      	ble.n	8008212 <_printf_float+0xa2>
 80081c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80081cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d0:	d502      	bpl.n	80081d8 <_printf_float+0x68>
 80081d2:	232d      	movs	r3, #45	@ 0x2d
 80081d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081d8:	498f      	ldr	r1, [pc, #572]	@ (8008418 <_printf_float+0x2a8>)
 80081da:	4b90      	ldr	r3, [pc, #576]	@ (800841c <_printf_float+0x2ac>)
 80081dc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80081e0:	bf8c      	ite	hi
 80081e2:	4688      	movhi	r8, r1
 80081e4:	4698      	movls	r8, r3
 80081e6:	f022 0204 	bic.w	r2, r2, #4
 80081ea:	2303      	movs	r3, #3
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	6022      	str	r2, [r4, #0]
 80081f0:	f04f 0a00 	mov.w	sl, #0
 80081f4:	9700      	str	r7, [sp, #0]
 80081f6:	4633      	mov	r3, r6
 80081f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f9d1 	bl	80085a4 <_printf_common>
 8008202:	3001      	adds	r0, #1
 8008204:	f040 8089 	bne.w	800831a <_printf_float+0x1aa>
 8008208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800820c:	b00d      	add	sp, #52	@ 0x34
 800820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008212:	eeb4 0b40 	vcmp.f64	d0, d0
 8008216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821a:	d709      	bvc.n	8008230 <_printf_float+0xc0>
 800821c:	ee10 3a90 	vmov	r3, s1
 8008220:	2b00      	cmp	r3, #0
 8008222:	bfbc      	itt	lt
 8008224:	232d      	movlt	r3, #45	@ 0x2d
 8008226:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800822a:	497d      	ldr	r1, [pc, #500]	@ (8008420 <_printf_float+0x2b0>)
 800822c:	4b7d      	ldr	r3, [pc, #500]	@ (8008424 <_printf_float+0x2b4>)
 800822e:	e7d5      	b.n	80081dc <_printf_float+0x6c>
 8008230:	6863      	ldr	r3, [r4, #4]
 8008232:	1c59      	adds	r1, r3, #1
 8008234:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008238:	d139      	bne.n	80082ae <_printf_float+0x13e>
 800823a:	2306      	movs	r3, #6
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008242:	2300      	movs	r3, #0
 8008244:	6022      	str	r2, [r4, #0]
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	ab0a      	add	r3, sp, #40	@ 0x28
 800824a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800824e:	ab09      	add	r3, sp, #36	@ 0x24
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	6861      	ldr	r1, [r4, #4]
 8008254:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008258:	4628      	mov	r0, r5
 800825a:	f7ff fefb 	bl	8008054 <__cvt>
 800825e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008262:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008264:	4680      	mov	r8, r0
 8008266:	d129      	bne.n	80082bc <_printf_float+0x14c>
 8008268:	1cc8      	adds	r0, r1, #3
 800826a:	db02      	blt.n	8008272 <_printf_float+0x102>
 800826c:	6863      	ldr	r3, [r4, #4]
 800826e:	4299      	cmp	r1, r3
 8008270:	dd41      	ble.n	80082f6 <_printf_float+0x186>
 8008272:	f1a9 0902 	sub.w	r9, r9, #2
 8008276:	fa5f f989 	uxtb.w	r9, r9
 800827a:	3901      	subs	r1, #1
 800827c:	464a      	mov	r2, r9
 800827e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008282:	9109      	str	r1, [sp, #36]	@ 0x24
 8008284:	f7ff ff3a 	bl	80080fc <__exponent>
 8008288:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800828a:	1813      	adds	r3, r2, r0
 800828c:	2a01      	cmp	r2, #1
 800828e:	4682      	mov	sl, r0
 8008290:	6123      	str	r3, [r4, #16]
 8008292:	dc02      	bgt.n	800829a <_printf_float+0x12a>
 8008294:	6822      	ldr	r2, [r4, #0]
 8008296:	07d2      	lsls	r2, r2, #31
 8008298:	d501      	bpl.n	800829e <_printf_float+0x12e>
 800829a:	3301      	adds	r3, #1
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0a6      	beq.n	80081f4 <_printf_float+0x84>
 80082a6:	232d      	movs	r3, #45	@ 0x2d
 80082a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082ac:	e7a2      	b.n	80081f4 <_printf_float+0x84>
 80082ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082b2:	d1c4      	bne.n	800823e <_printf_float+0xce>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1c2      	bne.n	800823e <_printf_float+0xce>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e7bf      	b.n	800823c <_printf_float+0xcc>
 80082bc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80082c0:	d9db      	bls.n	800827a <_printf_float+0x10a>
 80082c2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80082c6:	d118      	bne.n	80082fa <_printf_float+0x18a>
 80082c8:	2900      	cmp	r1, #0
 80082ca:	6863      	ldr	r3, [r4, #4]
 80082cc:	dd0b      	ble.n	80082e6 <_printf_float+0x176>
 80082ce:	6121      	str	r1, [r4, #16]
 80082d0:	b913      	cbnz	r3, 80082d8 <_printf_float+0x168>
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	07d0      	lsls	r0, r2, #31
 80082d6:	d502      	bpl.n	80082de <_printf_float+0x16e>
 80082d8:	3301      	adds	r3, #1
 80082da:	440b      	add	r3, r1
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80082e0:	f04f 0a00 	mov.w	sl, #0
 80082e4:	e7db      	b.n	800829e <_printf_float+0x12e>
 80082e6:	b913      	cbnz	r3, 80082ee <_printf_float+0x17e>
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	07d2      	lsls	r2, r2, #31
 80082ec:	d501      	bpl.n	80082f2 <_printf_float+0x182>
 80082ee:	3302      	adds	r3, #2
 80082f0:	e7f4      	b.n	80082dc <_printf_float+0x16c>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e7f2      	b.n	80082dc <_printf_float+0x16c>
 80082f6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80082fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082fc:	4299      	cmp	r1, r3
 80082fe:	db05      	blt.n	800830c <_printf_float+0x19c>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	6121      	str	r1, [r4, #16]
 8008304:	07d8      	lsls	r0, r3, #31
 8008306:	d5ea      	bpl.n	80082de <_printf_float+0x16e>
 8008308:	1c4b      	adds	r3, r1, #1
 800830a:	e7e7      	b.n	80082dc <_printf_float+0x16c>
 800830c:	2900      	cmp	r1, #0
 800830e:	bfd4      	ite	le
 8008310:	f1c1 0202 	rsble	r2, r1, #2
 8008314:	2201      	movgt	r2, #1
 8008316:	4413      	add	r3, r2
 8008318:	e7e0      	b.n	80082dc <_printf_float+0x16c>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	055a      	lsls	r2, r3, #21
 800831e:	d407      	bmi.n	8008330 <_printf_float+0x1c0>
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	4642      	mov	r2, r8
 8008324:	4631      	mov	r1, r6
 8008326:	4628      	mov	r0, r5
 8008328:	47b8      	blx	r7
 800832a:	3001      	adds	r0, #1
 800832c:	d12a      	bne.n	8008384 <_printf_float+0x214>
 800832e:	e76b      	b.n	8008208 <_printf_float+0x98>
 8008330:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008334:	f240 80e0 	bls.w	80084f8 <_printf_float+0x388>
 8008338:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800833c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008344:	d133      	bne.n	80083ae <_printf_float+0x23e>
 8008346:	4a38      	ldr	r2, [pc, #224]	@ (8008428 <_printf_float+0x2b8>)
 8008348:	2301      	movs	r3, #1
 800834a:	4631      	mov	r1, r6
 800834c:	4628      	mov	r0, r5
 800834e:	47b8      	blx	r7
 8008350:	3001      	adds	r0, #1
 8008352:	f43f af59 	beq.w	8008208 <_printf_float+0x98>
 8008356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800835a:	4543      	cmp	r3, r8
 800835c:	db02      	blt.n	8008364 <_printf_float+0x1f4>
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	07d8      	lsls	r0, r3, #31
 8008362:	d50f      	bpl.n	8008384 <_printf_float+0x214>
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	465a      	mov	r2, fp
 8008368:	4631      	mov	r1, r6
 800836a:	4628      	mov	r0, r5
 800836c:	47b8      	blx	r7
 800836e:	3001      	adds	r0, #1
 8008370:	f43f af4a 	beq.w	8008208 <_printf_float+0x98>
 8008374:	f04f 0900 	mov.w	r9, #0
 8008378:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800837c:	f104 0a1a 	add.w	sl, r4, #26
 8008380:	45c8      	cmp	r8, r9
 8008382:	dc09      	bgt.n	8008398 <_printf_float+0x228>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	079b      	lsls	r3, r3, #30
 8008388:	f100 8107 	bmi.w	800859a <_printf_float+0x42a>
 800838c:	68e0      	ldr	r0, [r4, #12]
 800838e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008390:	4298      	cmp	r0, r3
 8008392:	bfb8      	it	lt
 8008394:	4618      	movlt	r0, r3
 8008396:	e739      	b.n	800820c <_printf_float+0x9c>
 8008398:	2301      	movs	r3, #1
 800839a:	4652      	mov	r2, sl
 800839c:	4631      	mov	r1, r6
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	f43f af30 	beq.w	8008208 <_printf_float+0x98>
 80083a8:	f109 0901 	add.w	r9, r9, #1
 80083ac:	e7e8      	b.n	8008380 <_printf_float+0x210>
 80083ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dc3b      	bgt.n	800842c <_printf_float+0x2bc>
 80083b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008428 <_printf_float+0x2b8>)
 80083b6:	2301      	movs	r3, #1
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f af22 	beq.w	8008208 <_printf_float+0x98>
 80083c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80083c8:	ea59 0303 	orrs.w	r3, r9, r3
 80083cc:	d102      	bne.n	80083d4 <_printf_float+0x264>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	07d9      	lsls	r1, r3, #31
 80083d2:	d5d7      	bpl.n	8008384 <_printf_float+0x214>
 80083d4:	9b05      	ldr	r3, [sp, #20]
 80083d6:	465a      	mov	r2, fp
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	f43f af12 	beq.w	8008208 <_printf_float+0x98>
 80083e4:	f04f 0a00 	mov.w	sl, #0
 80083e8:	f104 0b1a 	add.w	fp, r4, #26
 80083ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ee:	425b      	negs	r3, r3
 80083f0:	4553      	cmp	r3, sl
 80083f2:	dc01      	bgt.n	80083f8 <_printf_float+0x288>
 80083f4:	464b      	mov	r3, r9
 80083f6:	e794      	b.n	8008322 <_printf_float+0x1b2>
 80083f8:	2301      	movs	r3, #1
 80083fa:	465a      	mov	r2, fp
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f af00 	beq.w	8008208 <_printf_float+0x98>
 8008408:	f10a 0a01 	add.w	sl, sl, #1
 800840c:	e7ee      	b.n	80083ec <_printf_float+0x27c>
 800840e:	bf00      	nop
 8008410:	ffffffff 	.word	0xffffffff
 8008414:	7fefffff 	.word	0x7fefffff
 8008418:	08055ea8 	.word	0x08055ea8
 800841c:	08055ea4 	.word	0x08055ea4
 8008420:	08055eb0 	.word	0x08055eb0
 8008424:	08055eac 	.word	0x08055eac
 8008428:	08055eb4 	.word	0x08055eb4
 800842c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800842e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008432:	4553      	cmp	r3, sl
 8008434:	bfa8      	it	ge
 8008436:	4653      	movge	r3, sl
 8008438:	2b00      	cmp	r3, #0
 800843a:	4699      	mov	r9, r3
 800843c:	dc37      	bgt.n	80084ae <_printf_float+0x33e>
 800843e:	2300      	movs	r3, #0
 8008440:	9307      	str	r3, [sp, #28]
 8008442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008446:	f104 021a 	add.w	r2, r4, #26
 800844a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800844c:	9907      	ldr	r1, [sp, #28]
 800844e:	9306      	str	r3, [sp, #24]
 8008450:	eba3 0309 	sub.w	r3, r3, r9
 8008454:	428b      	cmp	r3, r1
 8008456:	dc31      	bgt.n	80084bc <_printf_float+0x34c>
 8008458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800845a:	459a      	cmp	sl, r3
 800845c:	dc3b      	bgt.n	80084d6 <_printf_float+0x366>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	07da      	lsls	r2, r3, #31
 8008462:	d438      	bmi.n	80084d6 <_printf_float+0x366>
 8008464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008466:	ebaa 0903 	sub.w	r9, sl, r3
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	ebaa 0303 	sub.w	r3, sl, r3
 8008470:	4599      	cmp	r9, r3
 8008472:	bfa8      	it	ge
 8008474:	4699      	movge	r9, r3
 8008476:	f1b9 0f00 	cmp.w	r9, #0
 800847a:	dc34      	bgt.n	80084e6 <_printf_float+0x376>
 800847c:	f04f 0800 	mov.w	r8, #0
 8008480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008484:	f104 0b1a 	add.w	fp, r4, #26
 8008488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800848a:	ebaa 0303 	sub.w	r3, sl, r3
 800848e:	eba3 0309 	sub.w	r3, r3, r9
 8008492:	4543      	cmp	r3, r8
 8008494:	f77f af76 	ble.w	8008384 <_printf_float+0x214>
 8008498:	2301      	movs	r3, #1
 800849a:	465a      	mov	r2, fp
 800849c:	4631      	mov	r1, r6
 800849e:	4628      	mov	r0, r5
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	f43f aeb0 	beq.w	8008208 <_printf_float+0x98>
 80084a8:	f108 0801 	add.w	r8, r8, #1
 80084ac:	e7ec      	b.n	8008488 <_printf_float+0x318>
 80084ae:	4642      	mov	r2, r8
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	d1c1      	bne.n	800843e <_printf_float+0x2ce>
 80084ba:	e6a5      	b.n	8008208 <_printf_float+0x98>
 80084bc:	2301      	movs	r3, #1
 80084be:	4631      	mov	r1, r6
 80084c0:	4628      	mov	r0, r5
 80084c2:	9206      	str	r2, [sp, #24]
 80084c4:	47b8      	blx	r7
 80084c6:	3001      	adds	r0, #1
 80084c8:	f43f ae9e 	beq.w	8008208 <_printf_float+0x98>
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	9a06      	ldr	r2, [sp, #24]
 80084d0:	3301      	adds	r3, #1
 80084d2:	9307      	str	r3, [sp, #28]
 80084d4:	e7b9      	b.n	800844a <_printf_float+0x2da>
 80084d6:	9b05      	ldr	r3, [sp, #20]
 80084d8:	465a      	mov	r2, fp
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	d1bf      	bne.n	8008464 <_printf_float+0x2f4>
 80084e4:	e690      	b.n	8008208 <_printf_float+0x98>
 80084e6:	9a06      	ldr	r2, [sp, #24]
 80084e8:	464b      	mov	r3, r9
 80084ea:	4442      	add	r2, r8
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	d1c2      	bne.n	800847c <_printf_float+0x30c>
 80084f6:	e687      	b.n	8008208 <_printf_float+0x98>
 80084f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80084fc:	f1b9 0f01 	cmp.w	r9, #1
 8008500:	dc01      	bgt.n	8008506 <_printf_float+0x396>
 8008502:	07db      	lsls	r3, r3, #31
 8008504:	d536      	bpl.n	8008574 <_printf_float+0x404>
 8008506:	2301      	movs	r3, #1
 8008508:	4642      	mov	r2, r8
 800850a:	4631      	mov	r1, r6
 800850c:	4628      	mov	r0, r5
 800850e:	47b8      	blx	r7
 8008510:	3001      	adds	r0, #1
 8008512:	f43f ae79 	beq.w	8008208 <_printf_float+0x98>
 8008516:	9b05      	ldr	r3, [sp, #20]
 8008518:	465a      	mov	r2, fp
 800851a:	4631      	mov	r1, r6
 800851c:	4628      	mov	r0, r5
 800851e:	47b8      	blx	r7
 8008520:	3001      	adds	r0, #1
 8008522:	f43f ae71 	beq.w	8008208 <_printf_float+0x98>
 8008526:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800852a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800852e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008532:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008536:	d018      	beq.n	800856a <_printf_float+0x3fa>
 8008538:	464b      	mov	r3, r9
 800853a:	f108 0201 	add.w	r2, r8, #1
 800853e:	4631      	mov	r1, r6
 8008540:	4628      	mov	r0, r5
 8008542:	47b8      	blx	r7
 8008544:	3001      	adds	r0, #1
 8008546:	d10c      	bne.n	8008562 <_printf_float+0x3f2>
 8008548:	e65e      	b.n	8008208 <_printf_float+0x98>
 800854a:	2301      	movs	r3, #1
 800854c:	465a      	mov	r2, fp
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	47b8      	blx	r7
 8008554:	3001      	adds	r0, #1
 8008556:	f43f ae57 	beq.w	8008208 <_printf_float+0x98>
 800855a:	f108 0801 	add.w	r8, r8, #1
 800855e:	45c8      	cmp	r8, r9
 8008560:	dbf3      	blt.n	800854a <_printf_float+0x3da>
 8008562:	4653      	mov	r3, sl
 8008564:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008568:	e6dc      	b.n	8008324 <_printf_float+0x1b4>
 800856a:	f04f 0800 	mov.w	r8, #0
 800856e:	f104 0b1a 	add.w	fp, r4, #26
 8008572:	e7f4      	b.n	800855e <_printf_float+0x3ee>
 8008574:	2301      	movs	r3, #1
 8008576:	4642      	mov	r2, r8
 8008578:	e7e1      	b.n	800853e <_printf_float+0x3ce>
 800857a:	2301      	movs	r3, #1
 800857c:	464a      	mov	r2, r9
 800857e:	4631      	mov	r1, r6
 8008580:	4628      	mov	r0, r5
 8008582:	47b8      	blx	r7
 8008584:	3001      	adds	r0, #1
 8008586:	f43f ae3f 	beq.w	8008208 <_printf_float+0x98>
 800858a:	f108 0801 	add.w	r8, r8, #1
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008592:	1a5b      	subs	r3, r3, r1
 8008594:	4543      	cmp	r3, r8
 8008596:	dcf0      	bgt.n	800857a <_printf_float+0x40a>
 8008598:	e6f8      	b.n	800838c <_printf_float+0x21c>
 800859a:	f04f 0800 	mov.w	r8, #0
 800859e:	f104 0919 	add.w	r9, r4, #25
 80085a2:	e7f4      	b.n	800858e <_printf_float+0x41e>

080085a4 <_printf_common>:
 80085a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a8:	4616      	mov	r6, r2
 80085aa:	4698      	mov	r8, r3
 80085ac:	688a      	ldr	r2, [r1, #8]
 80085ae:	690b      	ldr	r3, [r1, #16]
 80085b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	bfb8      	it	lt
 80085b8:	4613      	movlt	r3, r2
 80085ba:	6033      	str	r3, [r6, #0]
 80085bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085c0:	4607      	mov	r7, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	b10a      	cbz	r2, 80085ca <_printf_common+0x26>
 80085c6:	3301      	adds	r3, #1
 80085c8:	6033      	str	r3, [r6, #0]
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	0699      	lsls	r1, r3, #26
 80085ce:	bf42      	ittt	mi
 80085d0:	6833      	ldrmi	r3, [r6, #0]
 80085d2:	3302      	addmi	r3, #2
 80085d4:	6033      	strmi	r3, [r6, #0]
 80085d6:	6825      	ldr	r5, [r4, #0]
 80085d8:	f015 0506 	ands.w	r5, r5, #6
 80085dc:	d106      	bne.n	80085ec <_printf_common+0x48>
 80085de:	f104 0a19 	add.w	sl, r4, #25
 80085e2:	68e3      	ldr	r3, [r4, #12]
 80085e4:	6832      	ldr	r2, [r6, #0]
 80085e6:	1a9b      	subs	r3, r3, r2
 80085e8:	42ab      	cmp	r3, r5
 80085ea:	dc26      	bgt.n	800863a <_printf_common+0x96>
 80085ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	3b00      	subs	r3, #0
 80085f4:	bf18      	it	ne
 80085f6:	2301      	movne	r3, #1
 80085f8:	0692      	lsls	r2, r2, #26
 80085fa:	d42b      	bmi.n	8008654 <_printf_common+0xb0>
 80085fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008600:	4641      	mov	r1, r8
 8008602:	4638      	mov	r0, r7
 8008604:	47c8      	blx	r9
 8008606:	3001      	adds	r0, #1
 8008608:	d01e      	beq.n	8008648 <_printf_common+0xa4>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	6922      	ldr	r2, [r4, #16]
 800860e:	f003 0306 	and.w	r3, r3, #6
 8008612:	2b04      	cmp	r3, #4
 8008614:	bf02      	ittt	eq
 8008616:	68e5      	ldreq	r5, [r4, #12]
 8008618:	6833      	ldreq	r3, [r6, #0]
 800861a:	1aed      	subeq	r5, r5, r3
 800861c:	68a3      	ldr	r3, [r4, #8]
 800861e:	bf0c      	ite	eq
 8008620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008624:	2500      	movne	r5, #0
 8008626:	4293      	cmp	r3, r2
 8008628:	bfc4      	itt	gt
 800862a:	1a9b      	subgt	r3, r3, r2
 800862c:	18ed      	addgt	r5, r5, r3
 800862e:	2600      	movs	r6, #0
 8008630:	341a      	adds	r4, #26
 8008632:	42b5      	cmp	r5, r6
 8008634:	d11a      	bne.n	800866c <_printf_common+0xc8>
 8008636:	2000      	movs	r0, #0
 8008638:	e008      	b.n	800864c <_printf_common+0xa8>
 800863a:	2301      	movs	r3, #1
 800863c:	4652      	mov	r2, sl
 800863e:	4641      	mov	r1, r8
 8008640:	4638      	mov	r0, r7
 8008642:	47c8      	blx	r9
 8008644:	3001      	adds	r0, #1
 8008646:	d103      	bne.n	8008650 <_printf_common+0xac>
 8008648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800864c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008650:	3501      	adds	r5, #1
 8008652:	e7c6      	b.n	80085e2 <_printf_common+0x3e>
 8008654:	18e1      	adds	r1, r4, r3
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	2030      	movs	r0, #48	@ 0x30
 800865a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800865e:	4422      	add	r2, r4
 8008660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008668:	3302      	adds	r3, #2
 800866a:	e7c7      	b.n	80085fc <_printf_common+0x58>
 800866c:	2301      	movs	r3, #1
 800866e:	4622      	mov	r2, r4
 8008670:	4641      	mov	r1, r8
 8008672:	4638      	mov	r0, r7
 8008674:	47c8      	blx	r9
 8008676:	3001      	adds	r0, #1
 8008678:	d0e6      	beq.n	8008648 <_printf_common+0xa4>
 800867a:	3601      	adds	r6, #1
 800867c:	e7d9      	b.n	8008632 <_printf_common+0x8e>
	...

08008680 <_printf_i>:
 8008680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008684:	7e0f      	ldrb	r7, [r1, #24]
 8008686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008688:	2f78      	cmp	r7, #120	@ 0x78
 800868a:	4691      	mov	r9, r2
 800868c:	4680      	mov	r8, r0
 800868e:	460c      	mov	r4, r1
 8008690:	469a      	mov	sl, r3
 8008692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008696:	d807      	bhi.n	80086a8 <_printf_i+0x28>
 8008698:	2f62      	cmp	r7, #98	@ 0x62
 800869a:	d80a      	bhi.n	80086b2 <_printf_i+0x32>
 800869c:	2f00      	cmp	r7, #0
 800869e:	f000 80d1 	beq.w	8008844 <_printf_i+0x1c4>
 80086a2:	2f58      	cmp	r7, #88	@ 0x58
 80086a4:	f000 80b8 	beq.w	8008818 <_printf_i+0x198>
 80086a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086b0:	e03a      	b.n	8008728 <_printf_i+0xa8>
 80086b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086b6:	2b15      	cmp	r3, #21
 80086b8:	d8f6      	bhi.n	80086a8 <_printf_i+0x28>
 80086ba:	a101      	add	r1, pc, #4	@ (adr r1, 80086c0 <_printf_i+0x40>)
 80086bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086c0:	08008719 	.word	0x08008719
 80086c4:	0800872d 	.word	0x0800872d
 80086c8:	080086a9 	.word	0x080086a9
 80086cc:	080086a9 	.word	0x080086a9
 80086d0:	080086a9 	.word	0x080086a9
 80086d4:	080086a9 	.word	0x080086a9
 80086d8:	0800872d 	.word	0x0800872d
 80086dc:	080086a9 	.word	0x080086a9
 80086e0:	080086a9 	.word	0x080086a9
 80086e4:	080086a9 	.word	0x080086a9
 80086e8:	080086a9 	.word	0x080086a9
 80086ec:	0800882b 	.word	0x0800882b
 80086f0:	08008757 	.word	0x08008757
 80086f4:	080087e5 	.word	0x080087e5
 80086f8:	080086a9 	.word	0x080086a9
 80086fc:	080086a9 	.word	0x080086a9
 8008700:	0800884d 	.word	0x0800884d
 8008704:	080086a9 	.word	0x080086a9
 8008708:	08008757 	.word	0x08008757
 800870c:	080086a9 	.word	0x080086a9
 8008710:	080086a9 	.word	0x080086a9
 8008714:	080087ed 	.word	0x080087ed
 8008718:	6833      	ldr	r3, [r6, #0]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6032      	str	r2, [r6, #0]
 8008720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008728:	2301      	movs	r3, #1
 800872a:	e09c      	b.n	8008866 <_printf_i+0x1e6>
 800872c:	6833      	ldr	r3, [r6, #0]
 800872e:	6820      	ldr	r0, [r4, #0]
 8008730:	1d19      	adds	r1, r3, #4
 8008732:	6031      	str	r1, [r6, #0]
 8008734:	0606      	lsls	r6, r0, #24
 8008736:	d501      	bpl.n	800873c <_printf_i+0xbc>
 8008738:	681d      	ldr	r5, [r3, #0]
 800873a:	e003      	b.n	8008744 <_printf_i+0xc4>
 800873c:	0645      	lsls	r5, r0, #25
 800873e:	d5fb      	bpl.n	8008738 <_printf_i+0xb8>
 8008740:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008744:	2d00      	cmp	r5, #0
 8008746:	da03      	bge.n	8008750 <_printf_i+0xd0>
 8008748:	232d      	movs	r3, #45	@ 0x2d
 800874a:	426d      	negs	r5, r5
 800874c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008750:	4858      	ldr	r0, [pc, #352]	@ (80088b4 <_printf_i+0x234>)
 8008752:	230a      	movs	r3, #10
 8008754:	e011      	b.n	800877a <_printf_i+0xfa>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	6833      	ldr	r3, [r6, #0]
 800875a:	0608      	lsls	r0, r1, #24
 800875c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008760:	d402      	bmi.n	8008768 <_printf_i+0xe8>
 8008762:	0649      	lsls	r1, r1, #25
 8008764:	bf48      	it	mi
 8008766:	b2ad      	uxthmi	r5, r5
 8008768:	2f6f      	cmp	r7, #111	@ 0x6f
 800876a:	4852      	ldr	r0, [pc, #328]	@ (80088b4 <_printf_i+0x234>)
 800876c:	6033      	str	r3, [r6, #0]
 800876e:	bf14      	ite	ne
 8008770:	230a      	movne	r3, #10
 8008772:	2308      	moveq	r3, #8
 8008774:	2100      	movs	r1, #0
 8008776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800877a:	6866      	ldr	r6, [r4, #4]
 800877c:	60a6      	str	r6, [r4, #8]
 800877e:	2e00      	cmp	r6, #0
 8008780:	db05      	blt.n	800878e <_printf_i+0x10e>
 8008782:	6821      	ldr	r1, [r4, #0]
 8008784:	432e      	orrs	r6, r5
 8008786:	f021 0104 	bic.w	r1, r1, #4
 800878a:	6021      	str	r1, [r4, #0]
 800878c:	d04b      	beq.n	8008826 <_printf_i+0x1a6>
 800878e:	4616      	mov	r6, r2
 8008790:	fbb5 f1f3 	udiv	r1, r5, r3
 8008794:	fb03 5711 	mls	r7, r3, r1, r5
 8008798:	5dc7      	ldrb	r7, [r0, r7]
 800879a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800879e:	462f      	mov	r7, r5
 80087a0:	42bb      	cmp	r3, r7
 80087a2:	460d      	mov	r5, r1
 80087a4:	d9f4      	bls.n	8008790 <_printf_i+0x110>
 80087a6:	2b08      	cmp	r3, #8
 80087a8:	d10b      	bne.n	80087c2 <_printf_i+0x142>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	07df      	lsls	r7, r3, #31
 80087ae:	d508      	bpl.n	80087c2 <_printf_i+0x142>
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	6861      	ldr	r1, [r4, #4]
 80087b4:	4299      	cmp	r1, r3
 80087b6:	bfde      	ittt	le
 80087b8:	2330      	movle	r3, #48	@ 0x30
 80087ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80087c2:	1b92      	subs	r2, r2, r6
 80087c4:	6122      	str	r2, [r4, #16]
 80087c6:	f8cd a000 	str.w	sl, [sp]
 80087ca:	464b      	mov	r3, r9
 80087cc:	aa03      	add	r2, sp, #12
 80087ce:	4621      	mov	r1, r4
 80087d0:	4640      	mov	r0, r8
 80087d2:	f7ff fee7 	bl	80085a4 <_printf_common>
 80087d6:	3001      	adds	r0, #1
 80087d8:	d14a      	bne.n	8008870 <_printf_i+0x1f0>
 80087da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087de:	b004      	add	sp, #16
 80087e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	f043 0320 	orr.w	r3, r3, #32
 80087ea:	6023      	str	r3, [r4, #0]
 80087ec:	4832      	ldr	r0, [pc, #200]	@ (80088b8 <_printf_i+0x238>)
 80087ee:	2778      	movs	r7, #120	@ 0x78
 80087f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	6831      	ldr	r1, [r6, #0]
 80087f8:	061f      	lsls	r7, r3, #24
 80087fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80087fe:	d402      	bmi.n	8008806 <_printf_i+0x186>
 8008800:	065f      	lsls	r7, r3, #25
 8008802:	bf48      	it	mi
 8008804:	b2ad      	uxthmi	r5, r5
 8008806:	6031      	str	r1, [r6, #0]
 8008808:	07d9      	lsls	r1, r3, #31
 800880a:	bf44      	itt	mi
 800880c:	f043 0320 	orrmi.w	r3, r3, #32
 8008810:	6023      	strmi	r3, [r4, #0]
 8008812:	b11d      	cbz	r5, 800881c <_printf_i+0x19c>
 8008814:	2310      	movs	r3, #16
 8008816:	e7ad      	b.n	8008774 <_printf_i+0xf4>
 8008818:	4826      	ldr	r0, [pc, #152]	@ (80088b4 <_printf_i+0x234>)
 800881a:	e7e9      	b.n	80087f0 <_printf_i+0x170>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	f023 0320 	bic.w	r3, r3, #32
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	e7f6      	b.n	8008814 <_printf_i+0x194>
 8008826:	4616      	mov	r6, r2
 8008828:	e7bd      	b.n	80087a6 <_printf_i+0x126>
 800882a:	6833      	ldr	r3, [r6, #0]
 800882c:	6825      	ldr	r5, [r4, #0]
 800882e:	6961      	ldr	r1, [r4, #20]
 8008830:	1d18      	adds	r0, r3, #4
 8008832:	6030      	str	r0, [r6, #0]
 8008834:	062e      	lsls	r6, r5, #24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	d501      	bpl.n	800883e <_printf_i+0x1be>
 800883a:	6019      	str	r1, [r3, #0]
 800883c:	e002      	b.n	8008844 <_printf_i+0x1c4>
 800883e:	0668      	lsls	r0, r5, #25
 8008840:	d5fb      	bpl.n	800883a <_printf_i+0x1ba>
 8008842:	8019      	strh	r1, [r3, #0]
 8008844:	2300      	movs	r3, #0
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	4616      	mov	r6, r2
 800884a:	e7bc      	b.n	80087c6 <_printf_i+0x146>
 800884c:	6833      	ldr	r3, [r6, #0]
 800884e:	1d1a      	adds	r2, r3, #4
 8008850:	6032      	str	r2, [r6, #0]
 8008852:	681e      	ldr	r6, [r3, #0]
 8008854:	6862      	ldr	r2, [r4, #4]
 8008856:	2100      	movs	r1, #0
 8008858:	4630      	mov	r0, r6
 800885a:	f7f7 fcf1 	bl	8000240 <memchr>
 800885e:	b108      	cbz	r0, 8008864 <_printf_i+0x1e4>
 8008860:	1b80      	subs	r0, r0, r6
 8008862:	6060      	str	r0, [r4, #4]
 8008864:	6863      	ldr	r3, [r4, #4]
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	2300      	movs	r3, #0
 800886a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800886e:	e7aa      	b.n	80087c6 <_printf_i+0x146>
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	4632      	mov	r2, r6
 8008874:	4649      	mov	r1, r9
 8008876:	4640      	mov	r0, r8
 8008878:	47d0      	blx	sl
 800887a:	3001      	adds	r0, #1
 800887c:	d0ad      	beq.n	80087da <_printf_i+0x15a>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	079b      	lsls	r3, r3, #30
 8008882:	d413      	bmi.n	80088ac <_printf_i+0x22c>
 8008884:	68e0      	ldr	r0, [r4, #12]
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	4298      	cmp	r0, r3
 800888a:	bfb8      	it	lt
 800888c:	4618      	movlt	r0, r3
 800888e:	e7a6      	b.n	80087de <_printf_i+0x15e>
 8008890:	2301      	movs	r3, #1
 8008892:	4632      	mov	r2, r6
 8008894:	4649      	mov	r1, r9
 8008896:	4640      	mov	r0, r8
 8008898:	47d0      	blx	sl
 800889a:	3001      	adds	r0, #1
 800889c:	d09d      	beq.n	80087da <_printf_i+0x15a>
 800889e:	3501      	adds	r5, #1
 80088a0:	68e3      	ldr	r3, [r4, #12]
 80088a2:	9903      	ldr	r1, [sp, #12]
 80088a4:	1a5b      	subs	r3, r3, r1
 80088a6:	42ab      	cmp	r3, r5
 80088a8:	dcf2      	bgt.n	8008890 <_printf_i+0x210>
 80088aa:	e7eb      	b.n	8008884 <_printf_i+0x204>
 80088ac:	2500      	movs	r5, #0
 80088ae:	f104 0619 	add.w	r6, r4, #25
 80088b2:	e7f5      	b.n	80088a0 <_printf_i+0x220>
 80088b4:	08055eb6 	.word	0x08055eb6
 80088b8:	08055ec7 	.word	0x08055ec7

080088bc <std>:
 80088bc:	2300      	movs	r3, #0
 80088be:	b510      	push	{r4, lr}
 80088c0:	4604      	mov	r4, r0
 80088c2:	e9c0 3300 	strd	r3, r3, [r0]
 80088c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ca:	6083      	str	r3, [r0, #8]
 80088cc:	8181      	strh	r1, [r0, #12]
 80088ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80088d0:	81c2      	strh	r2, [r0, #14]
 80088d2:	6183      	str	r3, [r0, #24]
 80088d4:	4619      	mov	r1, r3
 80088d6:	2208      	movs	r2, #8
 80088d8:	305c      	adds	r0, #92	@ 0x5c
 80088da:	f000 f916 	bl	8008b0a <memset>
 80088de:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <std+0x58>)
 80088e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80088e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008918 <std+0x5c>)
 80088e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088e6:	4b0d      	ldr	r3, [pc, #52]	@ (800891c <std+0x60>)
 80088e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008920 <std+0x64>)
 80088ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80088ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008924 <std+0x68>)
 80088f0:	6224      	str	r4, [r4, #32]
 80088f2:	429c      	cmp	r4, r3
 80088f4:	d006      	beq.n	8008904 <std+0x48>
 80088f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088fa:	4294      	cmp	r4, r2
 80088fc:	d002      	beq.n	8008904 <std+0x48>
 80088fe:	33d0      	adds	r3, #208	@ 0xd0
 8008900:	429c      	cmp	r4, r3
 8008902:	d105      	bne.n	8008910 <std+0x54>
 8008904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800890c:	f000 b97a 	b.w	8008c04 <__retarget_lock_init_recursive>
 8008910:	bd10      	pop	{r4, pc}
 8008912:	bf00      	nop
 8008914:	08008a85 	.word	0x08008a85
 8008918:	08008aa7 	.word	0x08008aa7
 800891c:	08008adf 	.word	0x08008adf
 8008920:	08008b03 	.word	0x08008b03
 8008924:	20000af8 	.word	0x20000af8

08008928 <stdio_exit_handler>:
 8008928:	4a02      	ldr	r2, [pc, #8]	@ (8008934 <stdio_exit_handler+0xc>)
 800892a:	4903      	ldr	r1, [pc, #12]	@ (8008938 <stdio_exit_handler+0x10>)
 800892c:	4803      	ldr	r0, [pc, #12]	@ (800893c <stdio_exit_handler+0x14>)
 800892e:	f000 b869 	b.w	8008a04 <_fwalk_sglue>
 8008932:	bf00      	nop
 8008934:	20000024 	.word	0x20000024
 8008938:	0800a489 	.word	0x0800a489
 800893c:	20000034 	.word	0x20000034

08008940 <cleanup_stdio>:
 8008940:	6841      	ldr	r1, [r0, #4]
 8008942:	4b0c      	ldr	r3, [pc, #48]	@ (8008974 <cleanup_stdio+0x34>)
 8008944:	4299      	cmp	r1, r3
 8008946:	b510      	push	{r4, lr}
 8008948:	4604      	mov	r4, r0
 800894a:	d001      	beq.n	8008950 <cleanup_stdio+0x10>
 800894c:	f001 fd9c 	bl	800a488 <_fflush_r>
 8008950:	68a1      	ldr	r1, [r4, #8]
 8008952:	4b09      	ldr	r3, [pc, #36]	@ (8008978 <cleanup_stdio+0x38>)
 8008954:	4299      	cmp	r1, r3
 8008956:	d002      	beq.n	800895e <cleanup_stdio+0x1e>
 8008958:	4620      	mov	r0, r4
 800895a:	f001 fd95 	bl	800a488 <_fflush_r>
 800895e:	68e1      	ldr	r1, [r4, #12]
 8008960:	4b06      	ldr	r3, [pc, #24]	@ (800897c <cleanup_stdio+0x3c>)
 8008962:	4299      	cmp	r1, r3
 8008964:	d004      	beq.n	8008970 <cleanup_stdio+0x30>
 8008966:	4620      	mov	r0, r4
 8008968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800896c:	f001 bd8c 	b.w	800a488 <_fflush_r>
 8008970:	bd10      	pop	{r4, pc}
 8008972:	bf00      	nop
 8008974:	20000af8 	.word	0x20000af8
 8008978:	20000b60 	.word	0x20000b60
 800897c:	20000bc8 	.word	0x20000bc8

08008980 <global_stdio_init.part.0>:
 8008980:	b510      	push	{r4, lr}
 8008982:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <global_stdio_init.part.0+0x30>)
 8008984:	4c0b      	ldr	r4, [pc, #44]	@ (80089b4 <global_stdio_init.part.0+0x34>)
 8008986:	4a0c      	ldr	r2, [pc, #48]	@ (80089b8 <global_stdio_init.part.0+0x38>)
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	4620      	mov	r0, r4
 800898c:	2200      	movs	r2, #0
 800898e:	2104      	movs	r1, #4
 8008990:	f7ff ff94 	bl	80088bc <std>
 8008994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008998:	2201      	movs	r2, #1
 800899a:	2109      	movs	r1, #9
 800899c:	f7ff ff8e 	bl	80088bc <std>
 80089a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089a4:	2202      	movs	r2, #2
 80089a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089aa:	2112      	movs	r1, #18
 80089ac:	f7ff bf86 	b.w	80088bc <std>
 80089b0:	20000c30 	.word	0x20000c30
 80089b4:	20000af8 	.word	0x20000af8
 80089b8:	08008929 	.word	0x08008929

080089bc <__sfp_lock_acquire>:
 80089bc:	4801      	ldr	r0, [pc, #4]	@ (80089c4 <__sfp_lock_acquire+0x8>)
 80089be:	f000 b922 	b.w	8008c06 <__retarget_lock_acquire_recursive>
 80089c2:	bf00      	nop
 80089c4:	20000c39 	.word	0x20000c39

080089c8 <__sfp_lock_release>:
 80089c8:	4801      	ldr	r0, [pc, #4]	@ (80089d0 <__sfp_lock_release+0x8>)
 80089ca:	f000 b91d 	b.w	8008c08 <__retarget_lock_release_recursive>
 80089ce:	bf00      	nop
 80089d0:	20000c39 	.word	0x20000c39

080089d4 <__sinit>:
 80089d4:	b510      	push	{r4, lr}
 80089d6:	4604      	mov	r4, r0
 80089d8:	f7ff fff0 	bl	80089bc <__sfp_lock_acquire>
 80089dc:	6a23      	ldr	r3, [r4, #32]
 80089de:	b11b      	cbz	r3, 80089e8 <__sinit+0x14>
 80089e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e4:	f7ff bff0 	b.w	80089c8 <__sfp_lock_release>
 80089e8:	4b04      	ldr	r3, [pc, #16]	@ (80089fc <__sinit+0x28>)
 80089ea:	6223      	str	r3, [r4, #32]
 80089ec:	4b04      	ldr	r3, [pc, #16]	@ (8008a00 <__sinit+0x2c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f5      	bne.n	80089e0 <__sinit+0xc>
 80089f4:	f7ff ffc4 	bl	8008980 <global_stdio_init.part.0>
 80089f8:	e7f2      	b.n	80089e0 <__sinit+0xc>
 80089fa:	bf00      	nop
 80089fc:	08008941 	.word	0x08008941
 8008a00:	20000c30 	.word	0x20000c30

08008a04 <_fwalk_sglue>:
 8008a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a08:	4607      	mov	r7, r0
 8008a0a:	4688      	mov	r8, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	2600      	movs	r6, #0
 8008a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a14:	f1b9 0901 	subs.w	r9, r9, #1
 8008a18:	d505      	bpl.n	8008a26 <_fwalk_sglue+0x22>
 8008a1a:	6824      	ldr	r4, [r4, #0]
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	d1f7      	bne.n	8008a10 <_fwalk_sglue+0xc>
 8008a20:	4630      	mov	r0, r6
 8008a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d907      	bls.n	8008a3c <_fwalk_sglue+0x38>
 8008a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a30:	3301      	adds	r3, #1
 8008a32:	d003      	beq.n	8008a3c <_fwalk_sglue+0x38>
 8008a34:	4629      	mov	r1, r5
 8008a36:	4638      	mov	r0, r7
 8008a38:	47c0      	blx	r8
 8008a3a:	4306      	orrs	r6, r0
 8008a3c:	3568      	adds	r5, #104	@ 0x68
 8008a3e:	e7e9      	b.n	8008a14 <_fwalk_sglue+0x10>

08008a40 <siprintf>:
 8008a40:	b40e      	push	{r1, r2, r3}
 8008a42:	b510      	push	{r4, lr}
 8008a44:	b09d      	sub	sp, #116	@ 0x74
 8008a46:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008a48:	9002      	str	r0, [sp, #8]
 8008a4a:	9006      	str	r0, [sp, #24]
 8008a4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a50:	480a      	ldr	r0, [pc, #40]	@ (8008a7c <siprintf+0x3c>)
 8008a52:	9107      	str	r1, [sp, #28]
 8008a54:	9104      	str	r1, [sp, #16]
 8008a56:	490a      	ldr	r1, [pc, #40]	@ (8008a80 <siprintf+0x40>)
 8008a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5c:	9105      	str	r1, [sp, #20]
 8008a5e:	2400      	movs	r4, #0
 8008a60:	a902      	add	r1, sp, #8
 8008a62:	6800      	ldr	r0, [r0, #0]
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008a68:	f001 fb8e 	bl	800a188 <_svfiprintf_r>
 8008a6c:	9b02      	ldr	r3, [sp, #8]
 8008a6e:	701c      	strb	r4, [r3, #0]
 8008a70:	b01d      	add	sp, #116	@ 0x74
 8008a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a76:	b003      	add	sp, #12
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	20000030 	.word	0x20000030
 8008a80:	ffff0208 	.word	0xffff0208

08008a84 <__sread>:
 8008a84:	b510      	push	{r4, lr}
 8008a86:	460c      	mov	r4, r1
 8008a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8c:	f000 f86c 	bl	8008b68 <_read_r>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	bfab      	itete	ge
 8008a94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a96:	89a3      	ldrhlt	r3, [r4, #12]
 8008a98:	181b      	addge	r3, r3, r0
 8008a9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a9e:	bfac      	ite	ge
 8008aa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008aa2:	81a3      	strhlt	r3, [r4, #12]
 8008aa4:	bd10      	pop	{r4, pc}

08008aa6 <__swrite>:
 8008aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aaa:	461f      	mov	r7, r3
 8008aac:	898b      	ldrh	r3, [r1, #12]
 8008aae:	05db      	lsls	r3, r3, #23
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	d505      	bpl.n	8008ac4 <__swrite+0x1e>
 8008ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abc:	2302      	movs	r3, #2
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f000 f840 	bl	8008b44 <_lseek_r>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ace:	81a3      	strh	r3, [r4, #12]
 8008ad0:	4632      	mov	r2, r6
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ada:	f000 b857 	b.w	8008b8c <_write_r>

08008ade <__sseek>:
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae6:	f000 f82d 	bl	8008b44 <_lseek_r>
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	bf15      	itete	ne
 8008af0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008af2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008af6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008afa:	81a3      	strheq	r3, [r4, #12]
 8008afc:	bf18      	it	ne
 8008afe:	81a3      	strhne	r3, [r4, #12]
 8008b00:	bd10      	pop	{r4, pc}

08008b02 <__sclose>:
 8008b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b06:	f000 b80d 	b.w	8008b24 <_close_r>

08008b0a <memset>:
 8008b0a:	4402      	add	r2, r0
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d100      	bne.n	8008b14 <memset+0xa>
 8008b12:	4770      	bx	lr
 8008b14:	f803 1b01 	strb.w	r1, [r3], #1
 8008b18:	e7f9      	b.n	8008b0e <memset+0x4>
	...

08008b1c <_localeconv_r>:
 8008b1c:	4800      	ldr	r0, [pc, #0]	@ (8008b20 <_localeconv_r+0x4>)
 8008b1e:	4770      	bx	lr
 8008b20:	20000170 	.word	0x20000170

08008b24 <_close_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d06      	ldr	r5, [pc, #24]	@ (8008b40 <_close_r+0x1c>)
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	f7fa f954 	bl	8002ddc <_close>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_close_r+0x1a>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_close_r+0x1a>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	20000c34 	.word	0x20000c34

08008b44 <_lseek_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	@ (8008b64 <_lseek_r+0x20>)
 8008b48:	4604      	mov	r4, r0
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	602a      	str	r2, [r5, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	f7fa f969 	bl	8002e2a <_lseek>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_lseek_r+0x1e>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_lseek_r+0x1e>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	20000c34 	.word	0x20000c34

08008b68 <_read_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d07      	ldr	r5, [pc, #28]	@ (8008b88 <_read_r+0x20>)
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	4608      	mov	r0, r1
 8008b70:	4611      	mov	r1, r2
 8008b72:	2200      	movs	r2, #0
 8008b74:	602a      	str	r2, [r5, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f7fa f8f7 	bl	8002d6a <_read>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_read_r+0x1e>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_read_r+0x1e>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	20000c34 	.word	0x20000c34

08008b8c <_write_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d07      	ldr	r5, [pc, #28]	@ (8008bac <_write_r+0x20>)
 8008b90:	4604      	mov	r4, r0
 8008b92:	4608      	mov	r0, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	2200      	movs	r2, #0
 8008b98:	602a      	str	r2, [r5, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f7fa f902 	bl	8002da4 <_write>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_write_r+0x1e>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_write_r+0x1e>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20000c34 	.word	0x20000c34

08008bb0 <__errno>:
 8008bb0:	4b01      	ldr	r3, [pc, #4]	@ (8008bb8 <__errno+0x8>)
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	20000030 	.word	0x20000030

08008bbc <__libc_init_array>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8008bf4 <__libc_init_array+0x38>)
 8008bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8008bf8 <__libc_init_array+0x3c>)
 8008bc2:	1b64      	subs	r4, r4, r5
 8008bc4:	10a4      	asrs	r4, r4, #2
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	42a6      	cmp	r6, r4
 8008bca:	d109      	bne.n	8008be0 <__libc_init_array+0x24>
 8008bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8008bfc <__libc_init_array+0x40>)
 8008bce:	4c0c      	ldr	r4, [pc, #48]	@ (8008c00 <__libc_init_array+0x44>)
 8008bd0:	f001 fff8 	bl	800abc4 <_init>
 8008bd4:	1b64      	subs	r4, r4, r5
 8008bd6:	10a4      	asrs	r4, r4, #2
 8008bd8:	2600      	movs	r6, #0
 8008bda:	42a6      	cmp	r6, r4
 8008bdc:	d105      	bne.n	8008bea <__libc_init_array+0x2e>
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be4:	4798      	blx	r3
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7ee      	b.n	8008bc8 <__libc_init_array+0xc>
 8008bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bee:	4798      	blx	r3
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	e7f2      	b.n	8008bda <__libc_init_array+0x1e>
 8008bf4:	08056224 	.word	0x08056224
 8008bf8:	08056224 	.word	0x08056224
 8008bfc:	08056224 	.word	0x08056224
 8008c00:	08056228 	.word	0x08056228

08008c04 <__retarget_lock_init_recursive>:
 8008c04:	4770      	bx	lr

08008c06 <__retarget_lock_acquire_recursive>:
 8008c06:	4770      	bx	lr

08008c08 <__retarget_lock_release_recursive>:
 8008c08:	4770      	bx	lr

08008c0a <quorem>:
 8008c0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0e:	6903      	ldr	r3, [r0, #16]
 8008c10:	690c      	ldr	r4, [r1, #16]
 8008c12:	42a3      	cmp	r3, r4
 8008c14:	4607      	mov	r7, r0
 8008c16:	db7e      	blt.n	8008d16 <quorem+0x10c>
 8008c18:	3c01      	subs	r4, #1
 8008c1a:	f101 0814 	add.w	r8, r1, #20
 8008c1e:	00a3      	lsls	r3, r4, #2
 8008c20:	f100 0514 	add.w	r5, r0, #20
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c34:	3301      	adds	r3, #1
 8008c36:	429a      	cmp	r2, r3
 8008c38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c40:	d32e      	bcc.n	8008ca0 <quorem+0x96>
 8008c42:	f04f 0a00 	mov.w	sl, #0
 8008c46:	46c4      	mov	ip, r8
 8008c48:	46ae      	mov	lr, r5
 8008c4a:	46d3      	mov	fp, sl
 8008c4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c50:	b298      	uxth	r0, r3
 8008c52:	fb06 a000 	mla	r0, r6, r0, sl
 8008c56:	0c02      	lsrs	r2, r0, #16
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	fb06 2303 	mla	r3, r6, r3, r2
 8008c5e:	f8de 2000 	ldr.w	r2, [lr]
 8008c62:	b280      	uxth	r0, r0
 8008c64:	b292      	uxth	r2, r2
 8008c66:	1a12      	subs	r2, r2, r0
 8008c68:	445a      	add	r2, fp
 8008c6a:	f8de 0000 	ldr.w	r0, [lr]
 8008c6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c7c:	b292      	uxth	r2, r2
 8008c7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c82:	45e1      	cmp	r9, ip
 8008c84:	f84e 2b04 	str.w	r2, [lr], #4
 8008c88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c8c:	d2de      	bcs.n	8008c4c <quorem+0x42>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	58eb      	ldr	r3, [r5, r3]
 8008c92:	b92b      	cbnz	r3, 8008ca0 <quorem+0x96>
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	3b04      	subs	r3, #4
 8008c98:	429d      	cmp	r5, r3
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	d32f      	bcc.n	8008cfe <quorem+0xf4>
 8008c9e:	613c      	str	r4, [r7, #16]
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	f001 f90d 	bl	8009ec0 <__mcmp>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	db25      	blt.n	8008cf6 <quorem+0xec>
 8008caa:	4629      	mov	r1, r5
 8008cac:	2000      	movs	r0, #0
 8008cae:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cb2:	f8d1 c000 	ldr.w	ip, [r1]
 8008cb6:	fa1f fe82 	uxth.w	lr, r2
 8008cba:	fa1f f38c 	uxth.w	r3, ip
 8008cbe:	eba3 030e 	sub.w	r3, r3, lr
 8008cc2:	4403      	add	r3, r0
 8008cc4:	0c12      	lsrs	r2, r2, #16
 8008cc6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008cca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cd4:	45c1      	cmp	r9, r8
 8008cd6:	f841 3b04 	str.w	r3, [r1], #4
 8008cda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cde:	d2e6      	bcs.n	8008cae <quorem+0xa4>
 8008ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ce4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ce8:	b922      	cbnz	r2, 8008cf4 <quorem+0xea>
 8008cea:	3b04      	subs	r3, #4
 8008cec:	429d      	cmp	r5, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	d30b      	bcc.n	8008d0a <quorem+0x100>
 8008cf2:	613c      	str	r4, [r7, #16]
 8008cf4:	3601      	adds	r6, #1
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	b003      	add	sp, #12
 8008cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	3b04      	subs	r3, #4
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	d1cb      	bne.n	8008c9e <quorem+0x94>
 8008d06:	3c01      	subs	r4, #1
 8008d08:	e7c6      	b.n	8008c98 <quorem+0x8e>
 8008d0a:	6812      	ldr	r2, [r2, #0]
 8008d0c:	3b04      	subs	r3, #4
 8008d0e:	2a00      	cmp	r2, #0
 8008d10:	d1ef      	bne.n	8008cf2 <quorem+0xe8>
 8008d12:	3c01      	subs	r4, #1
 8008d14:	e7ea      	b.n	8008cec <quorem+0xe2>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e7ee      	b.n	8008cf8 <quorem+0xee>
 8008d1a:	0000      	movs	r0, r0
 8008d1c:	0000      	movs	r0, r0
	...

08008d20 <_dtoa_r>:
 8008d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	ed2d 8b02 	vpush	{d8}
 8008d28:	69c7      	ldr	r7, [r0, #28]
 8008d2a:	b091      	sub	sp, #68	@ 0x44
 8008d2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d30:	ec55 4b10 	vmov	r4, r5, d0
 8008d34:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008d36:	9107      	str	r1, [sp, #28]
 8008d38:	4681      	mov	r9, r0
 8008d3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d3e:	b97f      	cbnz	r7, 8008d60 <_dtoa_r+0x40>
 8008d40:	2010      	movs	r0, #16
 8008d42:	f000 fd95 	bl	8009870 <malloc>
 8008d46:	4602      	mov	r2, r0
 8008d48:	f8c9 001c 	str.w	r0, [r9, #28]
 8008d4c:	b920      	cbnz	r0, 8008d58 <_dtoa_r+0x38>
 8008d4e:	4ba0      	ldr	r3, [pc, #640]	@ (8008fd0 <_dtoa_r+0x2b0>)
 8008d50:	21ef      	movs	r1, #239	@ 0xef
 8008d52:	48a0      	ldr	r0, [pc, #640]	@ (8008fd4 <_dtoa_r+0x2b4>)
 8008d54:	f001 fbf8 	bl	800a548 <__assert_func>
 8008d58:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d5c:	6007      	str	r7, [r0, #0]
 8008d5e:	60c7      	str	r7, [r0, #12]
 8008d60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d64:	6819      	ldr	r1, [r3, #0]
 8008d66:	b159      	cbz	r1, 8008d80 <_dtoa_r+0x60>
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	604a      	str	r2, [r1, #4]
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4093      	lsls	r3, r2
 8008d70:	608b      	str	r3, [r1, #8]
 8008d72:	4648      	mov	r0, r9
 8008d74:	f000 fe72 	bl	8009a5c <_Bfree>
 8008d78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	1e2b      	subs	r3, r5, #0
 8008d82:	bfbb      	ittet	lt
 8008d84:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d88:	9303      	strlt	r3, [sp, #12]
 8008d8a:	2300      	movge	r3, #0
 8008d8c:	2201      	movlt	r2, #1
 8008d8e:	bfac      	ite	ge
 8008d90:	6033      	strge	r3, [r6, #0]
 8008d92:	6032      	strlt	r2, [r6, #0]
 8008d94:	4b90      	ldr	r3, [pc, #576]	@ (8008fd8 <_dtoa_r+0x2b8>)
 8008d96:	9e03      	ldr	r6, [sp, #12]
 8008d98:	43b3      	bics	r3, r6
 8008d9a:	d110      	bne.n	8008dbe <_dtoa_r+0x9e>
 8008d9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008da8:	4323      	orrs	r3, r4
 8008daa:	f000 84e6 	beq.w	800977a <_dtoa_r+0xa5a>
 8008dae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008db0:	4f8a      	ldr	r7, [pc, #552]	@ (8008fdc <_dtoa_r+0x2bc>)
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 84e8 	beq.w	8009788 <_dtoa_r+0xa68>
 8008db8:	1cfb      	adds	r3, r7, #3
 8008dba:	f000 bce3 	b.w	8009784 <_dtoa_r+0xa64>
 8008dbe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008dc2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dca:	d10a      	bne.n	8008de2 <_dtoa_r+0xc2>
 8008dcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dce:	2301      	movs	r3, #1
 8008dd0:	6013      	str	r3, [r2, #0]
 8008dd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008dd4:	b113      	cbz	r3, 8008ddc <_dtoa_r+0xbc>
 8008dd6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008dd8:	4b81      	ldr	r3, [pc, #516]	@ (8008fe0 <_dtoa_r+0x2c0>)
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	4f81      	ldr	r7, [pc, #516]	@ (8008fe4 <_dtoa_r+0x2c4>)
 8008dde:	f000 bcd3 	b.w	8009788 <_dtoa_r+0xa68>
 8008de2:	aa0e      	add	r2, sp, #56	@ 0x38
 8008de4:	a90f      	add	r1, sp, #60	@ 0x3c
 8008de6:	4648      	mov	r0, r9
 8008de8:	eeb0 0b48 	vmov.f64	d0, d8
 8008dec:	f001 f918 	bl	800a020 <__d2b>
 8008df0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008df6:	9001      	str	r0, [sp, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d045      	beq.n	8008e88 <_dtoa_r+0x168>
 8008dfc:	eeb0 7b48 	vmov.f64	d7, d8
 8008e00:	ee18 1a90 	vmov	r1, s17
 8008e04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008e08:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008e0c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008e10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008e14:	2500      	movs	r5, #0
 8008e16:	ee07 1a90 	vmov	s15, r1
 8008e1a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008e1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008fb8 <_dtoa_r+0x298>
 8008e22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e26:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008fc0 <_dtoa_r+0x2a0>
 8008e2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008e2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008fc8 <_dtoa_r+0x2a8>
 8008e32:	ee07 3a90 	vmov	s15, r3
 8008e36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008e3a:	eeb0 7b46 	vmov.f64	d7, d6
 8008e3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008e42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008e46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4e:	ee16 8a90 	vmov	r8, s13
 8008e52:	d508      	bpl.n	8008e66 <_dtoa_r+0x146>
 8008e54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008e58:	eeb4 6b47 	vcmp.f64	d6, d7
 8008e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e60:	bf18      	it	ne
 8008e62:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8008e66:	f1b8 0f16 	cmp.w	r8, #22
 8008e6a:	d82b      	bhi.n	8008ec4 <_dtoa_r+0x1a4>
 8008e6c:	495e      	ldr	r1, [pc, #376]	@ (8008fe8 <_dtoa_r+0x2c8>)
 8008e6e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008e72:	ed91 7b00 	vldr	d7, [r1]
 8008e76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7e:	d501      	bpl.n	8008e84 <_dtoa_r+0x164>
 8008e80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008e84:	2100      	movs	r1, #0
 8008e86:	e01e      	b.n	8008ec6 <_dtoa_r+0x1a6>
 8008e88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008e90:	2920      	cmp	r1, #32
 8008e92:	bfc1      	itttt	gt
 8008e94:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008e98:	408e      	lslgt	r6, r1
 8008e9a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8008e9e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008ea2:	bfd6      	itet	le
 8008ea4:	f1c1 0120 	rsble	r1, r1, #32
 8008ea8:	4331      	orrgt	r1, r6
 8008eaa:	fa04 f101 	lslle.w	r1, r4, r1
 8008eae:	ee07 1a90 	vmov	s15, r1
 8008eb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	ee17 1a90 	vmov	r1, s15
 8008ebc:	2501      	movs	r5, #1
 8008ebe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008ec2:	e7a8      	b.n	8008e16 <_dtoa_r+0xf6>
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	1e53      	subs	r3, r2, #1
 8008eca:	9306      	str	r3, [sp, #24]
 8008ecc:	bf45      	ittet	mi
 8008ece:	f1c2 0301 	rsbmi	r3, r2, #1
 8008ed2:	9304      	strmi	r3, [sp, #16]
 8008ed4:	2300      	movpl	r3, #0
 8008ed6:	2300      	movmi	r3, #0
 8008ed8:	bf4c      	ite	mi
 8008eda:	9306      	strmi	r3, [sp, #24]
 8008edc:	9304      	strpl	r3, [sp, #16]
 8008ede:	f1b8 0f00 	cmp.w	r8, #0
 8008ee2:	910c      	str	r1, [sp, #48]	@ 0x30
 8008ee4:	db18      	blt.n	8008f18 <_dtoa_r+0x1f8>
 8008ee6:	9b06      	ldr	r3, [sp, #24]
 8008ee8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008eec:	4443      	add	r3, r8
 8008eee:	9306      	str	r3, [sp, #24]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9a07      	ldr	r2, [sp, #28]
 8008ef4:	2a09      	cmp	r2, #9
 8008ef6:	d845      	bhi.n	8008f84 <_dtoa_r+0x264>
 8008ef8:	2a05      	cmp	r2, #5
 8008efa:	bfc4      	itt	gt
 8008efc:	3a04      	subgt	r2, #4
 8008efe:	9207      	strgt	r2, [sp, #28]
 8008f00:	9a07      	ldr	r2, [sp, #28]
 8008f02:	f1a2 0202 	sub.w	r2, r2, #2
 8008f06:	bfcc      	ite	gt
 8008f08:	2400      	movgt	r4, #0
 8008f0a:	2401      	movle	r4, #1
 8008f0c:	2a03      	cmp	r2, #3
 8008f0e:	d844      	bhi.n	8008f9a <_dtoa_r+0x27a>
 8008f10:	e8df f002 	tbb	[pc, r2]
 8008f14:	0b173634 	.word	0x0b173634
 8008f18:	9b04      	ldr	r3, [sp, #16]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	eba3 0308 	sub.w	r3, r3, r8
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	920a      	str	r2, [sp, #40]	@ 0x28
 8008f24:	f1c8 0300 	rsb	r3, r8, #0
 8008f28:	e7e3      	b.n	8008ef2 <_dtoa_r+0x1d2>
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	9208      	str	r2, [sp, #32]
 8008f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f30:	eb08 0b02 	add.w	fp, r8, r2
 8008f34:	f10b 0a01 	add.w	sl, fp, #1
 8008f38:	4652      	mov	r2, sl
 8008f3a:	2a01      	cmp	r2, #1
 8008f3c:	bfb8      	it	lt
 8008f3e:	2201      	movlt	r2, #1
 8008f40:	e006      	b.n	8008f50 <_dtoa_r+0x230>
 8008f42:	2201      	movs	r2, #1
 8008f44:	9208      	str	r2, [sp, #32]
 8008f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	dd29      	ble.n	8008fa0 <_dtoa_r+0x280>
 8008f4c:	4693      	mov	fp, r2
 8008f4e:	4692      	mov	sl, r2
 8008f50:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008f54:	2100      	movs	r1, #0
 8008f56:	2004      	movs	r0, #4
 8008f58:	f100 0614 	add.w	r6, r0, #20
 8008f5c:	4296      	cmp	r6, r2
 8008f5e:	d926      	bls.n	8008fae <_dtoa_r+0x28e>
 8008f60:	6079      	str	r1, [r7, #4]
 8008f62:	4648      	mov	r0, r9
 8008f64:	9305      	str	r3, [sp, #20]
 8008f66:	f000 fd39 	bl	80099dc <_Balloc>
 8008f6a:	9b05      	ldr	r3, [sp, #20]
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d13e      	bne.n	8008ff0 <_dtoa_r+0x2d0>
 8008f72:	4b1e      	ldr	r3, [pc, #120]	@ (8008fec <_dtoa_r+0x2cc>)
 8008f74:	4602      	mov	r2, r0
 8008f76:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f7a:	e6ea      	b.n	8008d52 <_dtoa_r+0x32>
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	e7e1      	b.n	8008f44 <_dtoa_r+0x224>
 8008f80:	2200      	movs	r2, #0
 8008f82:	e7d3      	b.n	8008f2c <_dtoa_r+0x20c>
 8008f84:	2401      	movs	r4, #1
 8008f86:	2200      	movs	r2, #0
 8008f88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008f8c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008f90:	2100      	movs	r1, #0
 8008f92:	46da      	mov	sl, fp
 8008f94:	2212      	movs	r2, #18
 8008f96:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f98:	e7da      	b.n	8008f50 <_dtoa_r+0x230>
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	9208      	str	r2, [sp, #32]
 8008f9e:	e7f5      	b.n	8008f8c <_dtoa_r+0x26c>
 8008fa0:	f04f 0b01 	mov.w	fp, #1
 8008fa4:	46da      	mov	sl, fp
 8008fa6:	465a      	mov	r2, fp
 8008fa8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008fac:	e7d0      	b.n	8008f50 <_dtoa_r+0x230>
 8008fae:	3101      	adds	r1, #1
 8008fb0:	0040      	lsls	r0, r0, #1
 8008fb2:	e7d1      	b.n	8008f58 <_dtoa_r+0x238>
 8008fb4:	f3af 8000 	nop.w
 8008fb8:	636f4361 	.word	0x636f4361
 8008fbc:	3fd287a7 	.word	0x3fd287a7
 8008fc0:	8b60c8b3 	.word	0x8b60c8b3
 8008fc4:	3fc68a28 	.word	0x3fc68a28
 8008fc8:	509f79fb 	.word	0x509f79fb
 8008fcc:	3fd34413 	.word	0x3fd34413
 8008fd0:	08055ee5 	.word	0x08055ee5
 8008fd4:	08055efc 	.word	0x08055efc
 8008fd8:	7ff00000 	.word	0x7ff00000
 8008fdc:	08055ee1 	.word	0x08055ee1
 8008fe0:	08055eb5 	.word	0x08055eb5
 8008fe4:	08055eb4 	.word	0x08055eb4
 8008fe8:	08056050 	.word	0x08056050
 8008fec:	08055f54 	.word	0x08055f54
 8008ff0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008ff4:	f1ba 0f0e 	cmp.w	sl, #14
 8008ff8:	6010      	str	r0, [r2, #0]
 8008ffa:	d86e      	bhi.n	80090da <_dtoa_r+0x3ba>
 8008ffc:	2c00      	cmp	r4, #0
 8008ffe:	d06c      	beq.n	80090da <_dtoa_r+0x3ba>
 8009000:	f1b8 0f00 	cmp.w	r8, #0
 8009004:	f340 80b4 	ble.w	8009170 <_dtoa_r+0x450>
 8009008:	4ac8      	ldr	r2, [pc, #800]	@ (800932c <_dtoa_r+0x60c>)
 800900a:	f008 010f 	and.w	r1, r8, #15
 800900e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009012:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009016:	ed92 7b00 	vldr	d7, [r2]
 800901a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800901e:	f000 809b 	beq.w	8009158 <_dtoa_r+0x438>
 8009022:	4ac3      	ldr	r2, [pc, #780]	@ (8009330 <_dtoa_r+0x610>)
 8009024:	ed92 6b08 	vldr	d6, [r2, #32]
 8009028:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800902c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009030:	f001 010f 	and.w	r1, r1, #15
 8009034:	2203      	movs	r2, #3
 8009036:	48be      	ldr	r0, [pc, #760]	@ (8009330 <_dtoa_r+0x610>)
 8009038:	2900      	cmp	r1, #0
 800903a:	f040 808f 	bne.w	800915c <_dtoa_r+0x43c>
 800903e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009042:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009046:	ed8d 7b02 	vstr	d7, [sp, #8]
 800904a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800904c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009050:	2900      	cmp	r1, #0
 8009052:	f000 80b3 	beq.w	80091bc <_dtoa_r+0x49c>
 8009056:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800905a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800905e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009062:	f140 80ab 	bpl.w	80091bc <_dtoa_r+0x49c>
 8009066:	f1ba 0f00 	cmp.w	sl, #0
 800906a:	f000 80a7 	beq.w	80091bc <_dtoa_r+0x49c>
 800906e:	f1bb 0f00 	cmp.w	fp, #0
 8009072:	dd30      	ble.n	80090d6 <_dtoa_r+0x3b6>
 8009074:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009078:	ee27 7b06 	vmul.f64	d7, d7, d6
 800907c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009080:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8009084:	9105      	str	r1, [sp, #20]
 8009086:	3201      	adds	r2, #1
 8009088:	465c      	mov	r4, fp
 800908a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800908e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009092:	ee07 2a90 	vmov	s15, r2
 8009096:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800909a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800909e:	ee15 2a90 	vmov	r2, s11
 80090a2:	ec51 0b15 	vmov	r0, r1, d5
 80090a6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	f040 808a 	bne.w	80091c4 <_dtoa_r+0x4a4>
 80090b0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80090b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80090b8:	ec41 0b17 	vmov	d7, r0, r1
 80090bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c4:	f300 826a 	bgt.w	800959c <_dtoa_r+0x87c>
 80090c8:	eeb1 7b47 	vneg.f64	d7, d7
 80090cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d4:	d423      	bmi.n	800911e <_dtoa_r+0x3fe>
 80090d6:	ed8d 8b02 	vstr	d8, [sp, #8]
 80090da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f2c0 8129 	blt.w	8009334 <_dtoa_r+0x614>
 80090e2:	f1b8 0f0e 	cmp.w	r8, #14
 80090e6:	f300 8125 	bgt.w	8009334 <_dtoa_r+0x614>
 80090ea:	4b90      	ldr	r3, [pc, #576]	@ (800932c <_dtoa_r+0x60c>)
 80090ec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80090f0:	ed93 6b00 	vldr	d6, [r3]
 80090f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f280 80c8 	bge.w	800928c <_dtoa_r+0x56c>
 80090fc:	f1ba 0f00 	cmp.w	sl, #0
 8009100:	f300 80c4 	bgt.w	800928c <_dtoa_r+0x56c>
 8009104:	d10b      	bne.n	800911e <_dtoa_r+0x3fe>
 8009106:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800910a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800910e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009112:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911a:	f2c0 823c 	blt.w	8009596 <_dtoa_r+0x876>
 800911e:	2400      	movs	r4, #0
 8009120:	4625      	mov	r5, r4
 8009122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009124:	43db      	mvns	r3, r3
 8009126:	9305      	str	r3, [sp, #20]
 8009128:	463e      	mov	r6, r7
 800912a:	f04f 0800 	mov.w	r8, #0
 800912e:	4621      	mov	r1, r4
 8009130:	4648      	mov	r0, r9
 8009132:	f000 fc93 	bl	8009a5c <_Bfree>
 8009136:	2d00      	cmp	r5, #0
 8009138:	f000 80a2 	beq.w	8009280 <_dtoa_r+0x560>
 800913c:	f1b8 0f00 	cmp.w	r8, #0
 8009140:	d005      	beq.n	800914e <_dtoa_r+0x42e>
 8009142:	45a8      	cmp	r8, r5
 8009144:	d003      	beq.n	800914e <_dtoa_r+0x42e>
 8009146:	4641      	mov	r1, r8
 8009148:	4648      	mov	r0, r9
 800914a:	f000 fc87 	bl	8009a5c <_Bfree>
 800914e:	4629      	mov	r1, r5
 8009150:	4648      	mov	r0, r9
 8009152:	f000 fc83 	bl	8009a5c <_Bfree>
 8009156:	e093      	b.n	8009280 <_dtoa_r+0x560>
 8009158:	2202      	movs	r2, #2
 800915a:	e76c      	b.n	8009036 <_dtoa_r+0x316>
 800915c:	07cc      	lsls	r4, r1, #31
 800915e:	d504      	bpl.n	800916a <_dtoa_r+0x44a>
 8009160:	ed90 6b00 	vldr	d6, [r0]
 8009164:	3201      	adds	r2, #1
 8009166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800916a:	1049      	asrs	r1, r1, #1
 800916c:	3008      	adds	r0, #8
 800916e:	e763      	b.n	8009038 <_dtoa_r+0x318>
 8009170:	d022      	beq.n	80091b8 <_dtoa_r+0x498>
 8009172:	f1c8 0100 	rsb	r1, r8, #0
 8009176:	4a6d      	ldr	r2, [pc, #436]	@ (800932c <_dtoa_r+0x60c>)
 8009178:	f001 000f 	and.w	r0, r1, #15
 800917c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009180:	ed92 7b00 	vldr	d7, [r2]
 8009184:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800918c:	4868      	ldr	r0, [pc, #416]	@ (8009330 <_dtoa_r+0x610>)
 800918e:	1109      	asrs	r1, r1, #4
 8009190:	2400      	movs	r4, #0
 8009192:	2202      	movs	r2, #2
 8009194:	b929      	cbnz	r1, 80091a2 <_dtoa_r+0x482>
 8009196:	2c00      	cmp	r4, #0
 8009198:	f43f af57 	beq.w	800904a <_dtoa_r+0x32a>
 800919c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80091a0:	e753      	b.n	800904a <_dtoa_r+0x32a>
 80091a2:	07ce      	lsls	r6, r1, #31
 80091a4:	d505      	bpl.n	80091b2 <_dtoa_r+0x492>
 80091a6:	ed90 6b00 	vldr	d6, [r0]
 80091aa:	3201      	adds	r2, #1
 80091ac:	2401      	movs	r4, #1
 80091ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091b2:	1049      	asrs	r1, r1, #1
 80091b4:	3008      	adds	r0, #8
 80091b6:	e7ed      	b.n	8009194 <_dtoa_r+0x474>
 80091b8:	2202      	movs	r2, #2
 80091ba:	e746      	b.n	800904a <_dtoa_r+0x32a>
 80091bc:	f8cd 8014 	str.w	r8, [sp, #20]
 80091c0:	4654      	mov	r4, sl
 80091c2:	e762      	b.n	800908a <_dtoa_r+0x36a>
 80091c4:	4a59      	ldr	r2, [pc, #356]	@ (800932c <_dtoa_r+0x60c>)
 80091c6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80091ca:	ed12 4b02 	vldr	d4, [r2, #-8]
 80091ce:	9a08      	ldr	r2, [sp, #32]
 80091d0:	ec41 0b17 	vmov	d7, r0, r1
 80091d4:	443c      	add	r4, r7
 80091d6:	b34a      	cbz	r2, 800922c <_dtoa_r+0x50c>
 80091d8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80091dc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80091e0:	463e      	mov	r6, r7
 80091e2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80091e6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80091ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80091ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80091f2:	ee14 2a90 	vmov	r2, s9
 80091f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80091fa:	3230      	adds	r2, #48	@ 0x30
 80091fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009200:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009208:	f806 2b01 	strb.w	r2, [r6], #1
 800920c:	d438      	bmi.n	8009280 <_dtoa_r+0x560>
 800920e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009212:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921a:	d46e      	bmi.n	80092fa <_dtoa_r+0x5da>
 800921c:	42a6      	cmp	r6, r4
 800921e:	f43f af5a 	beq.w	80090d6 <_dtoa_r+0x3b6>
 8009222:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009226:	ee26 6b03 	vmul.f64	d6, d6, d3
 800922a:	e7e0      	b.n	80091ee <_dtoa_r+0x4ce>
 800922c:	4621      	mov	r1, r4
 800922e:	463e      	mov	r6, r7
 8009230:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009234:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009238:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800923c:	ee14 2a90 	vmov	r2, s9
 8009240:	3230      	adds	r2, #48	@ 0x30
 8009242:	f806 2b01 	strb.w	r2, [r6], #1
 8009246:	42a6      	cmp	r6, r4
 8009248:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800924c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009250:	d119      	bne.n	8009286 <_dtoa_r+0x566>
 8009252:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009256:	ee37 4b05 	vadd.f64	d4, d7, d5
 800925a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800925e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009262:	dc4a      	bgt.n	80092fa <_dtoa_r+0x5da>
 8009264:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009268:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800926c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009270:	f57f af31 	bpl.w	80090d6 <_dtoa_r+0x3b6>
 8009274:	460e      	mov	r6, r1
 8009276:	3901      	subs	r1, #1
 8009278:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800927c:	2b30      	cmp	r3, #48	@ 0x30
 800927e:	d0f9      	beq.n	8009274 <_dtoa_r+0x554>
 8009280:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009284:	e027      	b.n	80092d6 <_dtoa_r+0x5b6>
 8009286:	ee26 6b03 	vmul.f64	d6, d6, d3
 800928a:	e7d5      	b.n	8009238 <_dtoa_r+0x518>
 800928c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009290:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009294:	463e      	mov	r6, r7
 8009296:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800929a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800929e:	ee15 3a10 	vmov	r3, s10
 80092a2:	3330      	adds	r3, #48	@ 0x30
 80092a4:	f806 3b01 	strb.w	r3, [r6], #1
 80092a8:	1bf3      	subs	r3, r6, r7
 80092aa:	459a      	cmp	sl, r3
 80092ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80092b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80092b4:	d132      	bne.n	800931c <_dtoa_r+0x5fc>
 80092b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80092ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80092be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c2:	dc18      	bgt.n	80092f6 <_dtoa_r+0x5d6>
 80092c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80092c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092cc:	d103      	bne.n	80092d6 <_dtoa_r+0x5b6>
 80092ce:	ee15 3a10 	vmov	r3, s10
 80092d2:	07db      	lsls	r3, r3, #31
 80092d4:	d40f      	bmi.n	80092f6 <_dtoa_r+0x5d6>
 80092d6:	9901      	ldr	r1, [sp, #4]
 80092d8:	4648      	mov	r0, r9
 80092da:	f000 fbbf 	bl	8009a5c <_Bfree>
 80092de:	2300      	movs	r3, #0
 80092e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092e2:	7033      	strb	r3, [r6, #0]
 80092e4:	f108 0301 	add.w	r3, r8, #1
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 824b 	beq.w	8009788 <_dtoa_r+0xa68>
 80092f2:	601e      	str	r6, [r3, #0]
 80092f4:	e248      	b.n	8009788 <_dtoa_r+0xa68>
 80092f6:	f8cd 8014 	str.w	r8, [sp, #20]
 80092fa:	4633      	mov	r3, r6
 80092fc:	461e      	mov	r6, r3
 80092fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009302:	2a39      	cmp	r2, #57	@ 0x39
 8009304:	d106      	bne.n	8009314 <_dtoa_r+0x5f4>
 8009306:	429f      	cmp	r7, r3
 8009308:	d1f8      	bne.n	80092fc <_dtoa_r+0x5dc>
 800930a:	9a05      	ldr	r2, [sp, #20]
 800930c:	3201      	adds	r2, #1
 800930e:	9205      	str	r2, [sp, #20]
 8009310:	2230      	movs	r2, #48	@ 0x30
 8009312:	703a      	strb	r2, [r7, #0]
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	3201      	adds	r2, #1
 8009318:	701a      	strb	r2, [r3, #0]
 800931a:	e7b1      	b.n	8009280 <_dtoa_r+0x560>
 800931c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009320:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009328:	d1b5      	bne.n	8009296 <_dtoa_r+0x576>
 800932a:	e7d4      	b.n	80092d6 <_dtoa_r+0x5b6>
 800932c:	08056050 	.word	0x08056050
 8009330:	08056028 	.word	0x08056028
 8009334:	9908      	ldr	r1, [sp, #32]
 8009336:	2900      	cmp	r1, #0
 8009338:	f000 80e9 	beq.w	800950e <_dtoa_r+0x7ee>
 800933c:	9907      	ldr	r1, [sp, #28]
 800933e:	2901      	cmp	r1, #1
 8009340:	f300 80cb 	bgt.w	80094da <_dtoa_r+0x7ba>
 8009344:	2d00      	cmp	r5, #0
 8009346:	f000 80c4 	beq.w	80094d2 <_dtoa_r+0x7b2>
 800934a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800934e:	9e04      	ldr	r6, [sp, #16]
 8009350:	461c      	mov	r4, r3
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	4413      	add	r3, r2
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	9b06      	ldr	r3, [sp, #24]
 800935c:	2101      	movs	r1, #1
 800935e:	4413      	add	r3, r2
 8009360:	4648      	mov	r0, r9
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	f000 fc2e 	bl	8009bc4 <__i2b>
 8009368:	9b05      	ldr	r3, [sp, #20]
 800936a:	4605      	mov	r5, r0
 800936c:	b166      	cbz	r6, 8009388 <_dtoa_r+0x668>
 800936e:	9a06      	ldr	r2, [sp, #24]
 8009370:	2a00      	cmp	r2, #0
 8009372:	dd09      	ble.n	8009388 <_dtoa_r+0x668>
 8009374:	42b2      	cmp	r2, r6
 8009376:	9904      	ldr	r1, [sp, #16]
 8009378:	bfa8      	it	ge
 800937a:	4632      	movge	r2, r6
 800937c:	1a89      	subs	r1, r1, r2
 800937e:	9104      	str	r1, [sp, #16]
 8009380:	9906      	ldr	r1, [sp, #24]
 8009382:	1ab6      	subs	r6, r6, r2
 8009384:	1a8a      	subs	r2, r1, r2
 8009386:	9206      	str	r2, [sp, #24]
 8009388:	b30b      	cbz	r3, 80093ce <_dtoa_r+0x6ae>
 800938a:	9a08      	ldr	r2, [sp, #32]
 800938c:	2a00      	cmp	r2, #0
 800938e:	f000 80c5 	beq.w	800951c <_dtoa_r+0x7fc>
 8009392:	2c00      	cmp	r4, #0
 8009394:	f000 80bf 	beq.w	8009516 <_dtoa_r+0x7f6>
 8009398:	4629      	mov	r1, r5
 800939a:	4622      	mov	r2, r4
 800939c:	4648      	mov	r0, r9
 800939e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093a0:	f000 fcc8 	bl	8009d34 <__pow5mult>
 80093a4:	9a01      	ldr	r2, [sp, #4]
 80093a6:	4601      	mov	r1, r0
 80093a8:	4605      	mov	r5, r0
 80093aa:	4648      	mov	r0, r9
 80093ac:	f000 fc20 	bl	8009bf0 <__multiply>
 80093b0:	9901      	ldr	r1, [sp, #4]
 80093b2:	9005      	str	r0, [sp, #20]
 80093b4:	4648      	mov	r0, r9
 80093b6:	f000 fb51 	bl	8009a5c <_Bfree>
 80093ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093bc:	1b1b      	subs	r3, r3, r4
 80093be:	f000 80b0 	beq.w	8009522 <_dtoa_r+0x802>
 80093c2:	9905      	ldr	r1, [sp, #20]
 80093c4:	461a      	mov	r2, r3
 80093c6:	4648      	mov	r0, r9
 80093c8:	f000 fcb4 	bl	8009d34 <__pow5mult>
 80093cc:	9001      	str	r0, [sp, #4]
 80093ce:	2101      	movs	r1, #1
 80093d0:	4648      	mov	r0, r9
 80093d2:	f000 fbf7 	bl	8009bc4 <__i2b>
 80093d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093d8:	4604      	mov	r4, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 81da 	beq.w	8009794 <_dtoa_r+0xa74>
 80093e0:	461a      	mov	r2, r3
 80093e2:	4601      	mov	r1, r0
 80093e4:	4648      	mov	r0, r9
 80093e6:	f000 fca5 	bl	8009d34 <__pow5mult>
 80093ea:	9b07      	ldr	r3, [sp, #28]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	4604      	mov	r4, r0
 80093f0:	f300 80a0 	bgt.w	8009534 <_dtoa_r+0x814>
 80093f4:	9b02      	ldr	r3, [sp, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f040 8096 	bne.w	8009528 <_dtoa_r+0x808>
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009402:	2a00      	cmp	r2, #0
 8009404:	f040 8092 	bne.w	800952c <_dtoa_r+0x80c>
 8009408:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800940c:	0d12      	lsrs	r2, r2, #20
 800940e:	0512      	lsls	r2, r2, #20
 8009410:	2a00      	cmp	r2, #0
 8009412:	f000 808d 	beq.w	8009530 <_dtoa_r+0x810>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	3301      	adds	r3, #1
 8009420:	9306      	str	r3, [sp, #24]
 8009422:	2301      	movs	r3, #1
 8009424:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009426:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 81b9 	beq.w	80097a0 <_dtoa_r+0xa80>
 800942e:	6922      	ldr	r2, [r4, #16]
 8009430:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009434:	6910      	ldr	r0, [r2, #16]
 8009436:	f000 fb79 	bl	8009b2c <__hi0bits>
 800943a:	f1c0 0020 	rsb	r0, r0, #32
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	4418      	add	r0, r3
 8009442:	f010 001f 	ands.w	r0, r0, #31
 8009446:	f000 8081 	beq.w	800954c <_dtoa_r+0x82c>
 800944a:	f1c0 0220 	rsb	r2, r0, #32
 800944e:	2a04      	cmp	r2, #4
 8009450:	dd73      	ble.n	800953a <_dtoa_r+0x81a>
 8009452:	9b04      	ldr	r3, [sp, #16]
 8009454:	f1c0 001c 	rsb	r0, r0, #28
 8009458:	4403      	add	r3, r0
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	4406      	add	r6, r0
 8009460:	4403      	add	r3, r0
 8009462:	9306      	str	r3, [sp, #24]
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	dd05      	ble.n	8009476 <_dtoa_r+0x756>
 800946a:	9901      	ldr	r1, [sp, #4]
 800946c:	461a      	mov	r2, r3
 800946e:	4648      	mov	r0, r9
 8009470:	f000 fcba 	bl	8009de8 <__lshift>
 8009474:	9001      	str	r0, [sp, #4]
 8009476:	9b06      	ldr	r3, [sp, #24]
 8009478:	2b00      	cmp	r3, #0
 800947a:	dd05      	ble.n	8009488 <_dtoa_r+0x768>
 800947c:	4621      	mov	r1, r4
 800947e:	461a      	mov	r2, r3
 8009480:	4648      	mov	r0, r9
 8009482:	f000 fcb1 	bl	8009de8 <__lshift>
 8009486:	4604      	mov	r4, r0
 8009488:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800948a:	2b00      	cmp	r3, #0
 800948c:	d060      	beq.n	8009550 <_dtoa_r+0x830>
 800948e:	9801      	ldr	r0, [sp, #4]
 8009490:	4621      	mov	r1, r4
 8009492:	f000 fd15 	bl	8009ec0 <__mcmp>
 8009496:	2800      	cmp	r0, #0
 8009498:	da5a      	bge.n	8009550 <_dtoa_r+0x830>
 800949a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800949e:	9305      	str	r3, [sp, #20]
 80094a0:	9901      	ldr	r1, [sp, #4]
 80094a2:	2300      	movs	r3, #0
 80094a4:	220a      	movs	r2, #10
 80094a6:	4648      	mov	r0, r9
 80094a8:	f000 fafa 	bl	8009aa0 <__multadd>
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	9001      	str	r0, [sp, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 8177 	beq.w	80097a4 <_dtoa_r+0xa84>
 80094b6:	4629      	mov	r1, r5
 80094b8:	2300      	movs	r3, #0
 80094ba:	220a      	movs	r2, #10
 80094bc:	4648      	mov	r0, r9
 80094be:	f000 faef 	bl	8009aa0 <__multadd>
 80094c2:	f1bb 0f00 	cmp.w	fp, #0
 80094c6:	4605      	mov	r5, r0
 80094c8:	dc6e      	bgt.n	80095a8 <_dtoa_r+0x888>
 80094ca:	9b07      	ldr	r3, [sp, #28]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	dc48      	bgt.n	8009562 <_dtoa_r+0x842>
 80094d0:	e06a      	b.n	80095a8 <_dtoa_r+0x888>
 80094d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80094d8:	e739      	b.n	800934e <_dtoa_r+0x62e>
 80094da:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80094de:	42a3      	cmp	r3, r4
 80094e0:	db07      	blt.n	80094f2 <_dtoa_r+0x7d2>
 80094e2:	f1ba 0f00 	cmp.w	sl, #0
 80094e6:	eba3 0404 	sub.w	r4, r3, r4
 80094ea:	db0b      	blt.n	8009504 <_dtoa_r+0x7e4>
 80094ec:	9e04      	ldr	r6, [sp, #16]
 80094ee:	4652      	mov	r2, sl
 80094f0:	e72f      	b.n	8009352 <_dtoa_r+0x632>
 80094f2:	1ae2      	subs	r2, r4, r3
 80094f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094f6:	9e04      	ldr	r6, [sp, #16]
 80094f8:	4413      	add	r3, r2
 80094fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80094fc:	4652      	mov	r2, sl
 80094fe:	4623      	mov	r3, r4
 8009500:	2400      	movs	r4, #0
 8009502:	e726      	b.n	8009352 <_dtoa_r+0x632>
 8009504:	9a04      	ldr	r2, [sp, #16]
 8009506:	eba2 060a 	sub.w	r6, r2, sl
 800950a:	2200      	movs	r2, #0
 800950c:	e721      	b.n	8009352 <_dtoa_r+0x632>
 800950e:	9e04      	ldr	r6, [sp, #16]
 8009510:	9d08      	ldr	r5, [sp, #32]
 8009512:	461c      	mov	r4, r3
 8009514:	e72a      	b.n	800936c <_dtoa_r+0x64c>
 8009516:	9a01      	ldr	r2, [sp, #4]
 8009518:	9205      	str	r2, [sp, #20]
 800951a:	e752      	b.n	80093c2 <_dtoa_r+0x6a2>
 800951c:	9901      	ldr	r1, [sp, #4]
 800951e:	461a      	mov	r2, r3
 8009520:	e751      	b.n	80093c6 <_dtoa_r+0x6a6>
 8009522:	9b05      	ldr	r3, [sp, #20]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	e752      	b.n	80093ce <_dtoa_r+0x6ae>
 8009528:	2300      	movs	r3, #0
 800952a:	e77b      	b.n	8009424 <_dtoa_r+0x704>
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	e779      	b.n	8009424 <_dtoa_r+0x704>
 8009530:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009532:	e778      	b.n	8009426 <_dtoa_r+0x706>
 8009534:	2300      	movs	r3, #0
 8009536:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009538:	e779      	b.n	800942e <_dtoa_r+0x70e>
 800953a:	d093      	beq.n	8009464 <_dtoa_r+0x744>
 800953c:	9b04      	ldr	r3, [sp, #16]
 800953e:	321c      	adds	r2, #28
 8009540:	4413      	add	r3, r2
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	9b06      	ldr	r3, [sp, #24]
 8009546:	4416      	add	r6, r2
 8009548:	4413      	add	r3, r2
 800954a:	e78a      	b.n	8009462 <_dtoa_r+0x742>
 800954c:	4602      	mov	r2, r0
 800954e:	e7f5      	b.n	800953c <_dtoa_r+0x81c>
 8009550:	f1ba 0f00 	cmp.w	sl, #0
 8009554:	f8cd 8014 	str.w	r8, [sp, #20]
 8009558:	46d3      	mov	fp, sl
 800955a:	dc21      	bgt.n	80095a0 <_dtoa_r+0x880>
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	2b02      	cmp	r3, #2
 8009560:	dd1e      	ble.n	80095a0 <_dtoa_r+0x880>
 8009562:	f1bb 0f00 	cmp.w	fp, #0
 8009566:	f47f addc 	bne.w	8009122 <_dtoa_r+0x402>
 800956a:	4621      	mov	r1, r4
 800956c:	465b      	mov	r3, fp
 800956e:	2205      	movs	r2, #5
 8009570:	4648      	mov	r0, r9
 8009572:	f000 fa95 	bl	8009aa0 <__multadd>
 8009576:	4601      	mov	r1, r0
 8009578:	4604      	mov	r4, r0
 800957a:	9801      	ldr	r0, [sp, #4]
 800957c:	f000 fca0 	bl	8009ec0 <__mcmp>
 8009580:	2800      	cmp	r0, #0
 8009582:	f77f adce 	ble.w	8009122 <_dtoa_r+0x402>
 8009586:	463e      	mov	r6, r7
 8009588:	2331      	movs	r3, #49	@ 0x31
 800958a:	f806 3b01 	strb.w	r3, [r6], #1
 800958e:	9b05      	ldr	r3, [sp, #20]
 8009590:	3301      	adds	r3, #1
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	e5c9      	b.n	800912a <_dtoa_r+0x40a>
 8009596:	f8cd 8014 	str.w	r8, [sp, #20]
 800959a:	4654      	mov	r4, sl
 800959c:	4625      	mov	r5, r4
 800959e:	e7f2      	b.n	8009586 <_dtoa_r+0x866>
 80095a0:	9b08      	ldr	r3, [sp, #32]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8102 	beq.w	80097ac <_dtoa_r+0xa8c>
 80095a8:	2e00      	cmp	r6, #0
 80095aa:	dd05      	ble.n	80095b8 <_dtoa_r+0x898>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4632      	mov	r2, r6
 80095b0:	4648      	mov	r0, r9
 80095b2:	f000 fc19 	bl	8009de8 <__lshift>
 80095b6:	4605      	mov	r5, r0
 80095b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d058      	beq.n	8009670 <_dtoa_r+0x950>
 80095be:	6869      	ldr	r1, [r5, #4]
 80095c0:	4648      	mov	r0, r9
 80095c2:	f000 fa0b 	bl	80099dc <_Balloc>
 80095c6:	4606      	mov	r6, r0
 80095c8:	b928      	cbnz	r0, 80095d6 <_dtoa_r+0x8b6>
 80095ca:	4b82      	ldr	r3, [pc, #520]	@ (80097d4 <_dtoa_r+0xab4>)
 80095cc:	4602      	mov	r2, r0
 80095ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80095d2:	f7ff bbbe 	b.w	8008d52 <_dtoa_r+0x32>
 80095d6:	692a      	ldr	r2, [r5, #16]
 80095d8:	3202      	adds	r2, #2
 80095da:	0092      	lsls	r2, r2, #2
 80095dc:	f105 010c 	add.w	r1, r5, #12
 80095e0:	300c      	adds	r0, #12
 80095e2:	f000 ffa3 	bl	800a52c <memcpy>
 80095e6:	2201      	movs	r2, #1
 80095e8:	4631      	mov	r1, r6
 80095ea:	4648      	mov	r0, r9
 80095ec:	f000 fbfc 	bl	8009de8 <__lshift>
 80095f0:	1c7b      	adds	r3, r7, #1
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	eb07 030b 	add.w	r3, r7, fp
 80095f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095fa:	9b02      	ldr	r3, [sp, #8]
 80095fc:	f003 0301 	and.w	r3, r3, #1
 8009600:	46a8      	mov	r8, r5
 8009602:	9308      	str	r3, [sp, #32]
 8009604:	4605      	mov	r5, r0
 8009606:	9b04      	ldr	r3, [sp, #16]
 8009608:	9801      	ldr	r0, [sp, #4]
 800960a:	4621      	mov	r1, r4
 800960c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009610:	f7ff fafb 	bl	8008c0a <quorem>
 8009614:	4641      	mov	r1, r8
 8009616:	9002      	str	r0, [sp, #8]
 8009618:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800961c:	9801      	ldr	r0, [sp, #4]
 800961e:	f000 fc4f 	bl	8009ec0 <__mcmp>
 8009622:	462a      	mov	r2, r5
 8009624:	9006      	str	r0, [sp, #24]
 8009626:	4621      	mov	r1, r4
 8009628:	4648      	mov	r0, r9
 800962a:	f000 fc65 	bl	8009ef8 <__mdiff>
 800962e:	68c2      	ldr	r2, [r0, #12]
 8009630:	4606      	mov	r6, r0
 8009632:	b9fa      	cbnz	r2, 8009674 <_dtoa_r+0x954>
 8009634:	4601      	mov	r1, r0
 8009636:	9801      	ldr	r0, [sp, #4]
 8009638:	f000 fc42 	bl	8009ec0 <__mcmp>
 800963c:	4602      	mov	r2, r0
 800963e:	4631      	mov	r1, r6
 8009640:	4648      	mov	r0, r9
 8009642:	920a      	str	r2, [sp, #40]	@ 0x28
 8009644:	f000 fa0a 	bl	8009a5c <_Bfree>
 8009648:	9b07      	ldr	r3, [sp, #28]
 800964a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800964c:	9e04      	ldr	r6, [sp, #16]
 800964e:	ea42 0103 	orr.w	r1, r2, r3
 8009652:	9b08      	ldr	r3, [sp, #32]
 8009654:	4319      	orrs	r1, r3
 8009656:	d10f      	bne.n	8009678 <_dtoa_r+0x958>
 8009658:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800965c:	d028      	beq.n	80096b0 <_dtoa_r+0x990>
 800965e:	9b06      	ldr	r3, [sp, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	dd02      	ble.n	800966a <_dtoa_r+0x94a>
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800966a:	f88b a000 	strb.w	sl, [fp]
 800966e:	e55e      	b.n	800912e <_dtoa_r+0x40e>
 8009670:	4628      	mov	r0, r5
 8009672:	e7bd      	b.n	80095f0 <_dtoa_r+0x8d0>
 8009674:	2201      	movs	r2, #1
 8009676:	e7e2      	b.n	800963e <_dtoa_r+0x91e>
 8009678:	9b06      	ldr	r3, [sp, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	db04      	blt.n	8009688 <_dtoa_r+0x968>
 800967e:	9907      	ldr	r1, [sp, #28]
 8009680:	430b      	orrs	r3, r1
 8009682:	9908      	ldr	r1, [sp, #32]
 8009684:	430b      	orrs	r3, r1
 8009686:	d120      	bne.n	80096ca <_dtoa_r+0x9aa>
 8009688:	2a00      	cmp	r2, #0
 800968a:	ddee      	ble.n	800966a <_dtoa_r+0x94a>
 800968c:	9901      	ldr	r1, [sp, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	4648      	mov	r0, r9
 8009692:	f000 fba9 	bl	8009de8 <__lshift>
 8009696:	4621      	mov	r1, r4
 8009698:	9001      	str	r0, [sp, #4]
 800969a:	f000 fc11 	bl	8009ec0 <__mcmp>
 800969e:	2800      	cmp	r0, #0
 80096a0:	dc03      	bgt.n	80096aa <_dtoa_r+0x98a>
 80096a2:	d1e2      	bne.n	800966a <_dtoa_r+0x94a>
 80096a4:	f01a 0f01 	tst.w	sl, #1
 80096a8:	d0df      	beq.n	800966a <_dtoa_r+0x94a>
 80096aa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80096ae:	d1d9      	bne.n	8009664 <_dtoa_r+0x944>
 80096b0:	2339      	movs	r3, #57	@ 0x39
 80096b2:	f88b 3000 	strb.w	r3, [fp]
 80096b6:	4633      	mov	r3, r6
 80096b8:	461e      	mov	r6, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80096c0:	2a39      	cmp	r2, #57	@ 0x39
 80096c2:	d052      	beq.n	800976a <_dtoa_r+0xa4a>
 80096c4:	3201      	adds	r2, #1
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	e531      	b.n	800912e <_dtoa_r+0x40e>
 80096ca:	2a00      	cmp	r2, #0
 80096cc:	dd07      	ble.n	80096de <_dtoa_r+0x9be>
 80096ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80096d2:	d0ed      	beq.n	80096b0 <_dtoa_r+0x990>
 80096d4:	f10a 0301 	add.w	r3, sl, #1
 80096d8:	f88b 3000 	strb.w	r3, [fp]
 80096dc:	e527      	b.n	800912e <_dtoa_r+0x40e>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096e2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d029      	beq.n	800973e <_dtoa_r+0xa1e>
 80096ea:	9901      	ldr	r1, [sp, #4]
 80096ec:	2300      	movs	r3, #0
 80096ee:	220a      	movs	r2, #10
 80096f0:	4648      	mov	r0, r9
 80096f2:	f000 f9d5 	bl	8009aa0 <__multadd>
 80096f6:	45a8      	cmp	r8, r5
 80096f8:	9001      	str	r0, [sp, #4]
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	f04f 020a 	mov.w	r2, #10
 8009702:	4641      	mov	r1, r8
 8009704:	4648      	mov	r0, r9
 8009706:	d107      	bne.n	8009718 <_dtoa_r+0x9f8>
 8009708:	f000 f9ca 	bl	8009aa0 <__multadd>
 800970c:	4680      	mov	r8, r0
 800970e:	4605      	mov	r5, r0
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	3301      	adds	r3, #1
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	e776      	b.n	8009606 <_dtoa_r+0x8e6>
 8009718:	f000 f9c2 	bl	8009aa0 <__multadd>
 800971c:	4629      	mov	r1, r5
 800971e:	4680      	mov	r8, r0
 8009720:	2300      	movs	r3, #0
 8009722:	220a      	movs	r2, #10
 8009724:	4648      	mov	r0, r9
 8009726:	f000 f9bb 	bl	8009aa0 <__multadd>
 800972a:	4605      	mov	r5, r0
 800972c:	e7f0      	b.n	8009710 <_dtoa_r+0x9f0>
 800972e:	f1bb 0f00 	cmp.w	fp, #0
 8009732:	bfcc      	ite	gt
 8009734:	465e      	movgt	r6, fp
 8009736:	2601      	movle	r6, #1
 8009738:	443e      	add	r6, r7
 800973a:	f04f 0800 	mov.w	r8, #0
 800973e:	9901      	ldr	r1, [sp, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	4648      	mov	r0, r9
 8009744:	f000 fb50 	bl	8009de8 <__lshift>
 8009748:	4621      	mov	r1, r4
 800974a:	9001      	str	r0, [sp, #4]
 800974c:	f000 fbb8 	bl	8009ec0 <__mcmp>
 8009750:	2800      	cmp	r0, #0
 8009752:	dcb0      	bgt.n	80096b6 <_dtoa_r+0x996>
 8009754:	d102      	bne.n	800975c <_dtoa_r+0xa3c>
 8009756:	f01a 0f01 	tst.w	sl, #1
 800975a:	d1ac      	bne.n	80096b6 <_dtoa_r+0x996>
 800975c:	4633      	mov	r3, r6
 800975e:	461e      	mov	r6, r3
 8009760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009764:	2a30      	cmp	r2, #48	@ 0x30
 8009766:	d0fa      	beq.n	800975e <_dtoa_r+0xa3e>
 8009768:	e4e1      	b.n	800912e <_dtoa_r+0x40e>
 800976a:	429f      	cmp	r7, r3
 800976c:	d1a4      	bne.n	80096b8 <_dtoa_r+0x998>
 800976e:	9b05      	ldr	r3, [sp, #20]
 8009770:	3301      	adds	r3, #1
 8009772:	9305      	str	r3, [sp, #20]
 8009774:	2331      	movs	r3, #49	@ 0x31
 8009776:	703b      	strb	r3, [r7, #0]
 8009778:	e4d9      	b.n	800912e <_dtoa_r+0x40e>
 800977a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800977c:	4f16      	ldr	r7, [pc, #88]	@ (80097d8 <_dtoa_r+0xab8>)
 800977e:	b11b      	cbz	r3, 8009788 <_dtoa_r+0xa68>
 8009780:	f107 0308 	add.w	r3, r7, #8
 8009784:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	4638      	mov	r0, r7
 800978a:	b011      	add	sp, #68	@ 0x44
 800978c:	ecbd 8b02 	vpop	{d8}
 8009790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	2b01      	cmp	r3, #1
 8009798:	f77f ae2c 	ble.w	80093f4 <_dtoa_r+0x6d4>
 800979c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800979e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097a0:	2001      	movs	r0, #1
 80097a2:	e64c      	b.n	800943e <_dtoa_r+0x71e>
 80097a4:	f1bb 0f00 	cmp.w	fp, #0
 80097a8:	f77f aed8 	ble.w	800955c <_dtoa_r+0x83c>
 80097ac:	463e      	mov	r6, r7
 80097ae:	9801      	ldr	r0, [sp, #4]
 80097b0:	4621      	mov	r1, r4
 80097b2:	f7ff fa2a 	bl	8008c0a <quorem>
 80097b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80097ba:	f806 ab01 	strb.w	sl, [r6], #1
 80097be:	1bf2      	subs	r2, r6, r7
 80097c0:	4593      	cmp	fp, r2
 80097c2:	ddb4      	ble.n	800972e <_dtoa_r+0xa0e>
 80097c4:	9901      	ldr	r1, [sp, #4]
 80097c6:	2300      	movs	r3, #0
 80097c8:	220a      	movs	r2, #10
 80097ca:	4648      	mov	r0, r9
 80097cc:	f000 f968 	bl	8009aa0 <__multadd>
 80097d0:	9001      	str	r0, [sp, #4]
 80097d2:	e7ec      	b.n	80097ae <_dtoa_r+0xa8e>
 80097d4:	08055f54 	.word	0x08055f54
 80097d8:	08055ed8 	.word	0x08055ed8

080097dc <_free_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4605      	mov	r5, r0
 80097e0:	2900      	cmp	r1, #0
 80097e2:	d041      	beq.n	8009868 <_free_r+0x8c>
 80097e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097e8:	1f0c      	subs	r4, r1, #4
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bfb8      	it	lt
 80097ee:	18e4      	addlt	r4, r4, r3
 80097f0:	f000 f8e8 	bl	80099c4 <__malloc_lock>
 80097f4:	4a1d      	ldr	r2, [pc, #116]	@ (800986c <_free_r+0x90>)
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	b933      	cbnz	r3, 8009808 <_free_r+0x2c>
 80097fa:	6063      	str	r3, [r4, #4]
 80097fc:	6014      	str	r4, [r2, #0]
 80097fe:	4628      	mov	r0, r5
 8009800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009804:	f000 b8e4 	b.w	80099d0 <__malloc_unlock>
 8009808:	42a3      	cmp	r3, r4
 800980a:	d908      	bls.n	800981e <_free_r+0x42>
 800980c:	6820      	ldr	r0, [r4, #0]
 800980e:	1821      	adds	r1, r4, r0
 8009810:	428b      	cmp	r3, r1
 8009812:	bf01      	itttt	eq
 8009814:	6819      	ldreq	r1, [r3, #0]
 8009816:	685b      	ldreq	r3, [r3, #4]
 8009818:	1809      	addeq	r1, r1, r0
 800981a:	6021      	streq	r1, [r4, #0]
 800981c:	e7ed      	b.n	80097fa <_free_r+0x1e>
 800981e:	461a      	mov	r2, r3
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	b10b      	cbz	r3, 8009828 <_free_r+0x4c>
 8009824:	42a3      	cmp	r3, r4
 8009826:	d9fa      	bls.n	800981e <_free_r+0x42>
 8009828:	6811      	ldr	r1, [r2, #0]
 800982a:	1850      	adds	r0, r2, r1
 800982c:	42a0      	cmp	r0, r4
 800982e:	d10b      	bne.n	8009848 <_free_r+0x6c>
 8009830:	6820      	ldr	r0, [r4, #0]
 8009832:	4401      	add	r1, r0
 8009834:	1850      	adds	r0, r2, r1
 8009836:	4283      	cmp	r3, r0
 8009838:	6011      	str	r1, [r2, #0]
 800983a:	d1e0      	bne.n	80097fe <_free_r+0x22>
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	6053      	str	r3, [r2, #4]
 8009842:	4408      	add	r0, r1
 8009844:	6010      	str	r0, [r2, #0]
 8009846:	e7da      	b.n	80097fe <_free_r+0x22>
 8009848:	d902      	bls.n	8009850 <_free_r+0x74>
 800984a:	230c      	movs	r3, #12
 800984c:	602b      	str	r3, [r5, #0]
 800984e:	e7d6      	b.n	80097fe <_free_r+0x22>
 8009850:	6820      	ldr	r0, [r4, #0]
 8009852:	1821      	adds	r1, r4, r0
 8009854:	428b      	cmp	r3, r1
 8009856:	bf04      	itt	eq
 8009858:	6819      	ldreq	r1, [r3, #0]
 800985a:	685b      	ldreq	r3, [r3, #4]
 800985c:	6063      	str	r3, [r4, #4]
 800985e:	bf04      	itt	eq
 8009860:	1809      	addeq	r1, r1, r0
 8009862:	6021      	streq	r1, [r4, #0]
 8009864:	6054      	str	r4, [r2, #4]
 8009866:	e7ca      	b.n	80097fe <_free_r+0x22>
 8009868:	bd38      	pop	{r3, r4, r5, pc}
 800986a:	bf00      	nop
 800986c:	20000c40 	.word	0x20000c40

08009870 <malloc>:
 8009870:	4b02      	ldr	r3, [pc, #8]	@ (800987c <malloc+0xc>)
 8009872:	4601      	mov	r1, r0
 8009874:	6818      	ldr	r0, [r3, #0]
 8009876:	f000 b825 	b.w	80098c4 <_malloc_r>
 800987a:	bf00      	nop
 800987c:	20000030 	.word	0x20000030

08009880 <sbrk_aligned>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	4e0f      	ldr	r6, [pc, #60]	@ (80098c0 <sbrk_aligned+0x40>)
 8009884:	460c      	mov	r4, r1
 8009886:	6831      	ldr	r1, [r6, #0]
 8009888:	4605      	mov	r5, r0
 800988a:	b911      	cbnz	r1, 8009892 <sbrk_aligned+0x12>
 800988c:	f000 fe3e 	bl	800a50c <_sbrk_r>
 8009890:	6030      	str	r0, [r6, #0]
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f000 fe39 	bl	800a50c <_sbrk_r>
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	d103      	bne.n	80098a6 <sbrk_aligned+0x26>
 800989e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80098a2:	4620      	mov	r0, r4
 80098a4:	bd70      	pop	{r4, r5, r6, pc}
 80098a6:	1cc4      	adds	r4, r0, #3
 80098a8:	f024 0403 	bic.w	r4, r4, #3
 80098ac:	42a0      	cmp	r0, r4
 80098ae:	d0f8      	beq.n	80098a2 <sbrk_aligned+0x22>
 80098b0:	1a21      	subs	r1, r4, r0
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 fe2a 	bl	800a50c <_sbrk_r>
 80098b8:	3001      	adds	r0, #1
 80098ba:	d1f2      	bne.n	80098a2 <sbrk_aligned+0x22>
 80098bc:	e7ef      	b.n	800989e <sbrk_aligned+0x1e>
 80098be:	bf00      	nop
 80098c0:	20000c3c 	.word	0x20000c3c

080098c4 <_malloc_r>:
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c8:	1ccd      	adds	r5, r1, #3
 80098ca:	f025 0503 	bic.w	r5, r5, #3
 80098ce:	3508      	adds	r5, #8
 80098d0:	2d0c      	cmp	r5, #12
 80098d2:	bf38      	it	cc
 80098d4:	250c      	movcc	r5, #12
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	4606      	mov	r6, r0
 80098da:	db01      	blt.n	80098e0 <_malloc_r+0x1c>
 80098dc:	42a9      	cmp	r1, r5
 80098de:	d904      	bls.n	80098ea <_malloc_r+0x26>
 80098e0:	230c      	movs	r3, #12
 80098e2:	6033      	str	r3, [r6, #0]
 80098e4:	2000      	movs	r0, #0
 80098e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099c0 <_malloc_r+0xfc>
 80098ee:	f000 f869 	bl	80099c4 <__malloc_lock>
 80098f2:	f8d8 3000 	ldr.w	r3, [r8]
 80098f6:	461c      	mov	r4, r3
 80098f8:	bb44      	cbnz	r4, 800994c <_malloc_r+0x88>
 80098fa:	4629      	mov	r1, r5
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff ffbf 	bl	8009880 <sbrk_aligned>
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	4604      	mov	r4, r0
 8009906:	d158      	bne.n	80099ba <_malloc_r+0xf6>
 8009908:	f8d8 4000 	ldr.w	r4, [r8]
 800990c:	4627      	mov	r7, r4
 800990e:	2f00      	cmp	r7, #0
 8009910:	d143      	bne.n	800999a <_malloc_r+0xd6>
 8009912:	2c00      	cmp	r4, #0
 8009914:	d04b      	beq.n	80099ae <_malloc_r+0xea>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	4639      	mov	r1, r7
 800991a:	4630      	mov	r0, r6
 800991c:	eb04 0903 	add.w	r9, r4, r3
 8009920:	f000 fdf4 	bl	800a50c <_sbrk_r>
 8009924:	4581      	cmp	r9, r0
 8009926:	d142      	bne.n	80099ae <_malloc_r+0xea>
 8009928:	6821      	ldr	r1, [r4, #0]
 800992a:	1a6d      	subs	r5, r5, r1
 800992c:	4629      	mov	r1, r5
 800992e:	4630      	mov	r0, r6
 8009930:	f7ff ffa6 	bl	8009880 <sbrk_aligned>
 8009934:	3001      	adds	r0, #1
 8009936:	d03a      	beq.n	80099ae <_malloc_r+0xea>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	442b      	add	r3, r5
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	f8d8 3000 	ldr.w	r3, [r8]
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	bb62      	cbnz	r2, 80099a0 <_malloc_r+0xdc>
 8009946:	f8c8 7000 	str.w	r7, [r8]
 800994a:	e00f      	b.n	800996c <_malloc_r+0xa8>
 800994c:	6822      	ldr	r2, [r4, #0]
 800994e:	1b52      	subs	r2, r2, r5
 8009950:	d420      	bmi.n	8009994 <_malloc_r+0xd0>
 8009952:	2a0b      	cmp	r2, #11
 8009954:	d917      	bls.n	8009986 <_malloc_r+0xc2>
 8009956:	1961      	adds	r1, r4, r5
 8009958:	42a3      	cmp	r3, r4
 800995a:	6025      	str	r5, [r4, #0]
 800995c:	bf18      	it	ne
 800995e:	6059      	strne	r1, [r3, #4]
 8009960:	6863      	ldr	r3, [r4, #4]
 8009962:	bf08      	it	eq
 8009964:	f8c8 1000 	streq.w	r1, [r8]
 8009968:	5162      	str	r2, [r4, r5]
 800996a:	604b      	str	r3, [r1, #4]
 800996c:	4630      	mov	r0, r6
 800996e:	f000 f82f 	bl	80099d0 <__malloc_unlock>
 8009972:	f104 000b 	add.w	r0, r4, #11
 8009976:	1d23      	adds	r3, r4, #4
 8009978:	f020 0007 	bic.w	r0, r0, #7
 800997c:	1ac2      	subs	r2, r0, r3
 800997e:	bf1c      	itt	ne
 8009980:	1a1b      	subne	r3, r3, r0
 8009982:	50a3      	strne	r3, [r4, r2]
 8009984:	e7af      	b.n	80098e6 <_malloc_r+0x22>
 8009986:	6862      	ldr	r2, [r4, #4]
 8009988:	42a3      	cmp	r3, r4
 800998a:	bf0c      	ite	eq
 800998c:	f8c8 2000 	streq.w	r2, [r8]
 8009990:	605a      	strne	r2, [r3, #4]
 8009992:	e7eb      	b.n	800996c <_malloc_r+0xa8>
 8009994:	4623      	mov	r3, r4
 8009996:	6864      	ldr	r4, [r4, #4]
 8009998:	e7ae      	b.n	80098f8 <_malloc_r+0x34>
 800999a:	463c      	mov	r4, r7
 800999c:	687f      	ldr	r7, [r7, #4]
 800999e:	e7b6      	b.n	800990e <_malloc_r+0x4a>
 80099a0:	461a      	mov	r2, r3
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	d1fb      	bne.n	80099a0 <_malloc_r+0xdc>
 80099a8:	2300      	movs	r3, #0
 80099aa:	6053      	str	r3, [r2, #4]
 80099ac:	e7de      	b.n	800996c <_malloc_r+0xa8>
 80099ae:	230c      	movs	r3, #12
 80099b0:	6033      	str	r3, [r6, #0]
 80099b2:	4630      	mov	r0, r6
 80099b4:	f000 f80c 	bl	80099d0 <__malloc_unlock>
 80099b8:	e794      	b.n	80098e4 <_malloc_r+0x20>
 80099ba:	6005      	str	r5, [r0, #0]
 80099bc:	e7d6      	b.n	800996c <_malloc_r+0xa8>
 80099be:	bf00      	nop
 80099c0:	20000c40 	.word	0x20000c40

080099c4 <__malloc_lock>:
 80099c4:	4801      	ldr	r0, [pc, #4]	@ (80099cc <__malloc_lock+0x8>)
 80099c6:	f7ff b91e 	b.w	8008c06 <__retarget_lock_acquire_recursive>
 80099ca:	bf00      	nop
 80099cc:	20000c38 	.word	0x20000c38

080099d0 <__malloc_unlock>:
 80099d0:	4801      	ldr	r0, [pc, #4]	@ (80099d8 <__malloc_unlock+0x8>)
 80099d2:	f7ff b919 	b.w	8008c08 <__retarget_lock_release_recursive>
 80099d6:	bf00      	nop
 80099d8:	20000c38 	.word	0x20000c38

080099dc <_Balloc>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	69c6      	ldr	r6, [r0, #28]
 80099e0:	4604      	mov	r4, r0
 80099e2:	460d      	mov	r5, r1
 80099e4:	b976      	cbnz	r6, 8009a04 <_Balloc+0x28>
 80099e6:	2010      	movs	r0, #16
 80099e8:	f7ff ff42 	bl	8009870 <malloc>
 80099ec:	4602      	mov	r2, r0
 80099ee:	61e0      	str	r0, [r4, #28]
 80099f0:	b920      	cbnz	r0, 80099fc <_Balloc+0x20>
 80099f2:	4b18      	ldr	r3, [pc, #96]	@ (8009a54 <_Balloc+0x78>)
 80099f4:	4818      	ldr	r0, [pc, #96]	@ (8009a58 <_Balloc+0x7c>)
 80099f6:	216b      	movs	r1, #107	@ 0x6b
 80099f8:	f000 fda6 	bl	800a548 <__assert_func>
 80099fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a00:	6006      	str	r6, [r0, #0]
 8009a02:	60c6      	str	r6, [r0, #12]
 8009a04:	69e6      	ldr	r6, [r4, #28]
 8009a06:	68f3      	ldr	r3, [r6, #12]
 8009a08:	b183      	cbz	r3, 8009a2c <_Balloc+0x50>
 8009a0a:	69e3      	ldr	r3, [r4, #28]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a12:	b9b8      	cbnz	r0, 8009a44 <_Balloc+0x68>
 8009a14:	2101      	movs	r1, #1
 8009a16:	fa01 f605 	lsl.w	r6, r1, r5
 8009a1a:	1d72      	adds	r2, r6, #5
 8009a1c:	0092      	lsls	r2, r2, #2
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f000 fdb0 	bl	800a584 <_calloc_r>
 8009a24:	b160      	cbz	r0, 8009a40 <_Balloc+0x64>
 8009a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a2a:	e00e      	b.n	8009a4a <_Balloc+0x6e>
 8009a2c:	2221      	movs	r2, #33	@ 0x21
 8009a2e:	2104      	movs	r1, #4
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 fda7 	bl	800a584 <_calloc_r>
 8009a36:	69e3      	ldr	r3, [r4, #28]
 8009a38:	60f0      	str	r0, [r6, #12]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e4      	bne.n	8009a0a <_Balloc+0x2e>
 8009a40:	2000      	movs	r0, #0
 8009a42:	bd70      	pop	{r4, r5, r6, pc}
 8009a44:	6802      	ldr	r2, [r0, #0]
 8009a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a50:	e7f7      	b.n	8009a42 <_Balloc+0x66>
 8009a52:	bf00      	nop
 8009a54:	08055ee5 	.word	0x08055ee5
 8009a58:	08055f65 	.word	0x08055f65

08009a5c <_Bfree>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	69c6      	ldr	r6, [r0, #28]
 8009a60:	4605      	mov	r5, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	b976      	cbnz	r6, 8009a84 <_Bfree+0x28>
 8009a66:	2010      	movs	r0, #16
 8009a68:	f7ff ff02 	bl	8009870 <malloc>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	61e8      	str	r0, [r5, #28]
 8009a70:	b920      	cbnz	r0, 8009a7c <_Bfree+0x20>
 8009a72:	4b09      	ldr	r3, [pc, #36]	@ (8009a98 <_Bfree+0x3c>)
 8009a74:	4809      	ldr	r0, [pc, #36]	@ (8009a9c <_Bfree+0x40>)
 8009a76:	218f      	movs	r1, #143	@ 0x8f
 8009a78:	f000 fd66 	bl	800a548 <__assert_func>
 8009a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a80:	6006      	str	r6, [r0, #0]
 8009a82:	60c6      	str	r6, [r0, #12]
 8009a84:	b13c      	cbz	r4, 8009a96 <_Bfree+0x3a>
 8009a86:	69eb      	ldr	r3, [r5, #28]
 8009a88:	6862      	ldr	r2, [r4, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a90:	6021      	str	r1, [r4, #0]
 8009a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	08055ee5 	.word	0x08055ee5
 8009a9c:	08055f65 	.word	0x08055f65

08009aa0 <__multadd>:
 8009aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa4:	690d      	ldr	r5, [r1, #16]
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	461e      	mov	r6, r3
 8009aac:	f101 0c14 	add.w	ip, r1, #20
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ab6:	b299      	uxth	r1, r3
 8009ab8:	fb02 6101 	mla	r1, r2, r1, r6
 8009abc:	0c1e      	lsrs	r6, r3, #16
 8009abe:	0c0b      	lsrs	r3, r1, #16
 8009ac0:	fb02 3306 	mla	r3, r2, r6, r3
 8009ac4:	b289      	uxth	r1, r1
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009acc:	4285      	cmp	r5, r0
 8009ace:	f84c 1b04 	str.w	r1, [ip], #4
 8009ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ad6:	dcec      	bgt.n	8009ab2 <__multadd+0x12>
 8009ad8:	b30e      	cbz	r6, 8009b1e <__multadd+0x7e>
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	42ab      	cmp	r3, r5
 8009ade:	dc19      	bgt.n	8009b14 <__multadd+0x74>
 8009ae0:	6861      	ldr	r1, [r4, #4]
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	f7ff ff79 	bl	80099dc <_Balloc>
 8009aea:	4680      	mov	r8, r0
 8009aec:	b928      	cbnz	r0, 8009afa <__multadd+0x5a>
 8009aee:	4602      	mov	r2, r0
 8009af0:	4b0c      	ldr	r3, [pc, #48]	@ (8009b24 <__multadd+0x84>)
 8009af2:	480d      	ldr	r0, [pc, #52]	@ (8009b28 <__multadd+0x88>)
 8009af4:	21ba      	movs	r1, #186	@ 0xba
 8009af6:	f000 fd27 	bl	800a548 <__assert_func>
 8009afa:	6922      	ldr	r2, [r4, #16]
 8009afc:	3202      	adds	r2, #2
 8009afe:	f104 010c 	add.w	r1, r4, #12
 8009b02:	0092      	lsls	r2, r2, #2
 8009b04:	300c      	adds	r0, #12
 8009b06:	f000 fd11 	bl	800a52c <memcpy>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f7ff ffa5 	bl	8009a5c <_Bfree>
 8009b12:	4644      	mov	r4, r8
 8009b14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b18:	3501      	adds	r5, #1
 8009b1a:	615e      	str	r6, [r3, #20]
 8009b1c:	6125      	str	r5, [r4, #16]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b24:	08055f54 	.word	0x08055f54
 8009b28:	08055f65 	.word	0x08055f65

08009b2c <__hi0bits>:
 8009b2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b30:	4603      	mov	r3, r0
 8009b32:	bf36      	itet	cc
 8009b34:	0403      	lslcc	r3, r0, #16
 8009b36:	2000      	movcs	r0, #0
 8009b38:	2010      	movcc	r0, #16
 8009b3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b3e:	bf3c      	itt	cc
 8009b40:	021b      	lslcc	r3, r3, #8
 8009b42:	3008      	addcc	r0, #8
 8009b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b48:	bf3c      	itt	cc
 8009b4a:	011b      	lslcc	r3, r3, #4
 8009b4c:	3004      	addcc	r0, #4
 8009b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b52:	bf3c      	itt	cc
 8009b54:	009b      	lslcc	r3, r3, #2
 8009b56:	3002      	addcc	r0, #2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	db05      	blt.n	8009b68 <__hi0bits+0x3c>
 8009b5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b60:	f100 0001 	add.w	r0, r0, #1
 8009b64:	bf08      	it	eq
 8009b66:	2020      	moveq	r0, #32
 8009b68:	4770      	bx	lr

08009b6a <__lo0bits>:
 8009b6a:	6803      	ldr	r3, [r0, #0]
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	f013 0007 	ands.w	r0, r3, #7
 8009b72:	d00b      	beq.n	8009b8c <__lo0bits+0x22>
 8009b74:	07d9      	lsls	r1, r3, #31
 8009b76:	d421      	bmi.n	8009bbc <__lo0bits+0x52>
 8009b78:	0798      	lsls	r0, r3, #30
 8009b7a:	bf49      	itett	mi
 8009b7c:	085b      	lsrmi	r3, r3, #1
 8009b7e:	089b      	lsrpl	r3, r3, #2
 8009b80:	2001      	movmi	r0, #1
 8009b82:	6013      	strmi	r3, [r2, #0]
 8009b84:	bf5c      	itt	pl
 8009b86:	6013      	strpl	r3, [r2, #0]
 8009b88:	2002      	movpl	r0, #2
 8009b8a:	4770      	bx	lr
 8009b8c:	b299      	uxth	r1, r3
 8009b8e:	b909      	cbnz	r1, 8009b94 <__lo0bits+0x2a>
 8009b90:	0c1b      	lsrs	r3, r3, #16
 8009b92:	2010      	movs	r0, #16
 8009b94:	b2d9      	uxtb	r1, r3
 8009b96:	b909      	cbnz	r1, 8009b9c <__lo0bits+0x32>
 8009b98:	3008      	adds	r0, #8
 8009b9a:	0a1b      	lsrs	r3, r3, #8
 8009b9c:	0719      	lsls	r1, r3, #28
 8009b9e:	bf04      	itt	eq
 8009ba0:	091b      	lsreq	r3, r3, #4
 8009ba2:	3004      	addeq	r0, #4
 8009ba4:	0799      	lsls	r1, r3, #30
 8009ba6:	bf04      	itt	eq
 8009ba8:	089b      	lsreq	r3, r3, #2
 8009baa:	3002      	addeq	r0, #2
 8009bac:	07d9      	lsls	r1, r3, #31
 8009bae:	d403      	bmi.n	8009bb8 <__lo0bits+0x4e>
 8009bb0:	085b      	lsrs	r3, r3, #1
 8009bb2:	f100 0001 	add.w	r0, r0, #1
 8009bb6:	d003      	beq.n	8009bc0 <__lo0bits+0x56>
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	4770      	bx	lr
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	4770      	bx	lr
 8009bc0:	2020      	movs	r0, #32
 8009bc2:	4770      	bx	lr

08009bc4 <__i2b>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	2101      	movs	r1, #1
 8009bca:	f7ff ff07 	bl	80099dc <_Balloc>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	b928      	cbnz	r0, 8009bde <__i2b+0x1a>
 8009bd2:	4b05      	ldr	r3, [pc, #20]	@ (8009be8 <__i2b+0x24>)
 8009bd4:	4805      	ldr	r0, [pc, #20]	@ (8009bec <__i2b+0x28>)
 8009bd6:	f240 1145 	movw	r1, #325	@ 0x145
 8009bda:	f000 fcb5 	bl	800a548 <__assert_func>
 8009bde:	2301      	movs	r3, #1
 8009be0:	6144      	str	r4, [r0, #20]
 8009be2:	6103      	str	r3, [r0, #16]
 8009be4:	bd10      	pop	{r4, pc}
 8009be6:	bf00      	nop
 8009be8:	08055f54 	.word	0x08055f54
 8009bec:	08055f65 	.word	0x08055f65

08009bf0 <__multiply>:
 8009bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	4617      	mov	r7, r2
 8009bf6:	690a      	ldr	r2, [r1, #16]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	bfa8      	it	ge
 8009bfe:	463b      	movge	r3, r7
 8009c00:	4689      	mov	r9, r1
 8009c02:	bfa4      	itt	ge
 8009c04:	460f      	movge	r7, r1
 8009c06:	4699      	movge	r9, r3
 8009c08:	693d      	ldr	r5, [r7, #16]
 8009c0a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	eb05 060a 	add.w	r6, r5, sl
 8009c16:	42b3      	cmp	r3, r6
 8009c18:	b085      	sub	sp, #20
 8009c1a:	bfb8      	it	lt
 8009c1c:	3101      	addlt	r1, #1
 8009c1e:	f7ff fedd 	bl	80099dc <_Balloc>
 8009c22:	b930      	cbnz	r0, 8009c32 <__multiply+0x42>
 8009c24:	4602      	mov	r2, r0
 8009c26:	4b41      	ldr	r3, [pc, #260]	@ (8009d2c <__multiply+0x13c>)
 8009c28:	4841      	ldr	r0, [pc, #260]	@ (8009d30 <__multiply+0x140>)
 8009c2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c2e:	f000 fc8b 	bl	800a548 <__assert_func>
 8009c32:	f100 0414 	add.w	r4, r0, #20
 8009c36:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009c3a:	4623      	mov	r3, r4
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4573      	cmp	r3, lr
 8009c40:	d320      	bcc.n	8009c84 <__multiply+0x94>
 8009c42:	f107 0814 	add.w	r8, r7, #20
 8009c46:	f109 0114 	add.w	r1, r9, #20
 8009c4a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009c4e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009c52:	9302      	str	r3, [sp, #8]
 8009c54:	1beb      	subs	r3, r5, r7
 8009c56:	3b15      	subs	r3, #21
 8009c58:	f023 0303 	bic.w	r3, r3, #3
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	3715      	adds	r7, #21
 8009c60:	42bd      	cmp	r5, r7
 8009c62:	bf38      	it	cc
 8009c64:	2304      	movcc	r3, #4
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	9b02      	ldr	r3, [sp, #8]
 8009c6a:	9103      	str	r1, [sp, #12]
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	d80c      	bhi.n	8009c8a <__multiply+0x9a>
 8009c70:	2e00      	cmp	r6, #0
 8009c72:	dd03      	ble.n	8009c7c <__multiply+0x8c>
 8009c74:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d055      	beq.n	8009d28 <__multiply+0x138>
 8009c7c:	6106      	str	r6, [r0, #16]
 8009c7e:	b005      	add	sp, #20
 8009c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c84:	f843 2b04 	str.w	r2, [r3], #4
 8009c88:	e7d9      	b.n	8009c3e <__multiply+0x4e>
 8009c8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009c8e:	f1ba 0f00 	cmp.w	sl, #0
 8009c92:	d01f      	beq.n	8009cd4 <__multiply+0xe4>
 8009c94:	46c4      	mov	ip, r8
 8009c96:	46a1      	mov	r9, r4
 8009c98:	2700      	movs	r7, #0
 8009c9a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c9e:	f8d9 3000 	ldr.w	r3, [r9]
 8009ca2:	fa1f fb82 	uxth.w	fp, r2
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009cac:	443b      	add	r3, r7
 8009cae:	f8d9 7000 	ldr.w	r7, [r9]
 8009cb2:	0c12      	lsrs	r2, r2, #16
 8009cb4:	0c3f      	lsrs	r7, r7, #16
 8009cb6:	fb0a 7202 	mla	r2, sl, r2, r7
 8009cba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cc4:	4565      	cmp	r5, ip
 8009cc6:	f849 3b04 	str.w	r3, [r9], #4
 8009cca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009cce:	d8e4      	bhi.n	8009c9a <__multiply+0xaa>
 8009cd0:	9b01      	ldr	r3, [sp, #4]
 8009cd2:	50e7      	str	r7, [r4, r3]
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009cda:	3104      	adds	r1, #4
 8009cdc:	f1b9 0f00 	cmp.w	r9, #0
 8009ce0:	d020      	beq.n	8009d24 <__multiply+0x134>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	4647      	mov	r7, r8
 8009ce6:	46a4      	mov	ip, r4
 8009ce8:	f04f 0a00 	mov.w	sl, #0
 8009cec:	f8b7 b000 	ldrh.w	fp, [r7]
 8009cf0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009cf4:	fb09 220b 	mla	r2, r9, fp, r2
 8009cf8:	4452      	add	r2, sl
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d00:	f84c 3b04 	str.w	r3, [ip], #4
 8009d04:	f857 3b04 	ldr.w	r3, [r7], #4
 8009d08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d0c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009d10:	fb09 330a 	mla	r3, r9, sl, r3
 8009d14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009d18:	42bd      	cmp	r5, r7
 8009d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d1e:	d8e5      	bhi.n	8009cec <__multiply+0xfc>
 8009d20:	9a01      	ldr	r2, [sp, #4]
 8009d22:	50a3      	str	r3, [r4, r2]
 8009d24:	3404      	adds	r4, #4
 8009d26:	e79f      	b.n	8009c68 <__multiply+0x78>
 8009d28:	3e01      	subs	r6, #1
 8009d2a:	e7a1      	b.n	8009c70 <__multiply+0x80>
 8009d2c:	08055f54 	.word	0x08055f54
 8009d30:	08055f65 	.word	0x08055f65

08009d34 <__pow5mult>:
 8009d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d38:	4615      	mov	r5, r2
 8009d3a:	f012 0203 	ands.w	r2, r2, #3
 8009d3e:	4607      	mov	r7, r0
 8009d40:	460e      	mov	r6, r1
 8009d42:	d007      	beq.n	8009d54 <__pow5mult+0x20>
 8009d44:	4c25      	ldr	r4, [pc, #148]	@ (8009ddc <__pow5mult+0xa8>)
 8009d46:	3a01      	subs	r2, #1
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d4e:	f7ff fea7 	bl	8009aa0 <__multadd>
 8009d52:	4606      	mov	r6, r0
 8009d54:	10ad      	asrs	r5, r5, #2
 8009d56:	d03d      	beq.n	8009dd4 <__pow5mult+0xa0>
 8009d58:	69fc      	ldr	r4, [r7, #28]
 8009d5a:	b97c      	cbnz	r4, 8009d7c <__pow5mult+0x48>
 8009d5c:	2010      	movs	r0, #16
 8009d5e:	f7ff fd87 	bl	8009870 <malloc>
 8009d62:	4602      	mov	r2, r0
 8009d64:	61f8      	str	r0, [r7, #28]
 8009d66:	b928      	cbnz	r0, 8009d74 <__pow5mult+0x40>
 8009d68:	4b1d      	ldr	r3, [pc, #116]	@ (8009de0 <__pow5mult+0xac>)
 8009d6a:	481e      	ldr	r0, [pc, #120]	@ (8009de4 <__pow5mult+0xb0>)
 8009d6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009d70:	f000 fbea 	bl	800a548 <__assert_func>
 8009d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d78:	6004      	str	r4, [r0, #0]
 8009d7a:	60c4      	str	r4, [r0, #12]
 8009d7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d84:	b94c      	cbnz	r4, 8009d9a <__pow5mult+0x66>
 8009d86:	f240 2171 	movw	r1, #625	@ 0x271
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	f7ff ff1a 	bl	8009bc4 <__i2b>
 8009d90:	2300      	movs	r3, #0
 8009d92:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d96:	4604      	mov	r4, r0
 8009d98:	6003      	str	r3, [r0, #0]
 8009d9a:	f04f 0900 	mov.w	r9, #0
 8009d9e:	07eb      	lsls	r3, r5, #31
 8009da0:	d50a      	bpl.n	8009db8 <__pow5mult+0x84>
 8009da2:	4631      	mov	r1, r6
 8009da4:	4622      	mov	r2, r4
 8009da6:	4638      	mov	r0, r7
 8009da8:	f7ff ff22 	bl	8009bf0 <__multiply>
 8009dac:	4631      	mov	r1, r6
 8009dae:	4680      	mov	r8, r0
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7ff fe53 	bl	8009a5c <_Bfree>
 8009db6:	4646      	mov	r6, r8
 8009db8:	106d      	asrs	r5, r5, #1
 8009dba:	d00b      	beq.n	8009dd4 <__pow5mult+0xa0>
 8009dbc:	6820      	ldr	r0, [r4, #0]
 8009dbe:	b938      	cbnz	r0, 8009dd0 <__pow5mult+0x9c>
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f7ff ff13 	bl	8009bf0 <__multiply>
 8009dca:	6020      	str	r0, [r4, #0]
 8009dcc:	f8c0 9000 	str.w	r9, [r0]
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	e7e4      	b.n	8009d9e <__pow5mult+0x6a>
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dda:	bf00      	nop
 8009ddc:	08056018 	.word	0x08056018
 8009de0:	08055ee5 	.word	0x08055ee5
 8009de4:	08055f65 	.word	0x08055f65

08009de8 <__lshift>:
 8009de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	460c      	mov	r4, r1
 8009dee:	6849      	ldr	r1, [r1, #4]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	4607      	mov	r7, r0
 8009dfa:	4691      	mov	r9, r2
 8009dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e00:	f108 0601 	add.w	r6, r8, #1
 8009e04:	42b3      	cmp	r3, r6
 8009e06:	db0b      	blt.n	8009e20 <__lshift+0x38>
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff fde7 	bl	80099dc <_Balloc>
 8009e0e:	4605      	mov	r5, r0
 8009e10:	b948      	cbnz	r0, 8009e26 <__lshift+0x3e>
 8009e12:	4602      	mov	r2, r0
 8009e14:	4b28      	ldr	r3, [pc, #160]	@ (8009eb8 <__lshift+0xd0>)
 8009e16:	4829      	ldr	r0, [pc, #164]	@ (8009ebc <__lshift+0xd4>)
 8009e18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e1c:	f000 fb94 	bl	800a548 <__assert_func>
 8009e20:	3101      	adds	r1, #1
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	e7ee      	b.n	8009e04 <__lshift+0x1c>
 8009e26:	2300      	movs	r3, #0
 8009e28:	f100 0114 	add.w	r1, r0, #20
 8009e2c:	f100 0210 	add.w	r2, r0, #16
 8009e30:	4618      	mov	r0, r3
 8009e32:	4553      	cmp	r3, sl
 8009e34:	db33      	blt.n	8009e9e <__lshift+0xb6>
 8009e36:	6920      	ldr	r0, [r4, #16]
 8009e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e3c:	f104 0314 	add.w	r3, r4, #20
 8009e40:	f019 091f 	ands.w	r9, r9, #31
 8009e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e4c:	d02b      	beq.n	8009ea6 <__lshift+0xbe>
 8009e4e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e52:	468a      	mov	sl, r1
 8009e54:	2200      	movs	r2, #0
 8009e56:	6818      	ldr	r0, [r3, #0]
 8009e58:	fa00 f009 	lsl.w	r0, r0, r9
 8009e5c:	4310      	orrs	r0, r2
 8009e5e:	f84a 0b04 	str.w	r0, [sl], #4
 8009e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e66:	459c      	cmp	ip, r3
 8009e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e6c:	d8f3      	bhi.n	8009e56 <__lshift+0x6e>
 8009e6e:	ebac 0304 	sub.w	r3, ip, r4
 8009e72:	3b15      	subs	r3, #21
 8009e74:	f023 0303 	bic.w	r3, r3, #3
 8009e78:	3304      	adds	r3, #4
 8009e7a:	f104 0015 	add.w	r0, r4, #21
 8009e7e:	4560      	cmp	r0, ip
 8009e80:	bf88      	it	hi
 8009e82:	2304      	movhi	r3, #4
 8009e84:	50ca      	str	r2, [r1, r3]
 8009e86:	b10a      	cbz	r2, 8009e8c <__lshift+0xa4>
 8009e88:	f108 0602 	add.w	r6, r8, #2
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	4638      	mov	r0, r7
 8009e90:	612e      	str	r6, [r5, #16]
 8009e92:	4621      	mov	r1, r4
 8009e94:	f7ff fde2 	bl	8009a5c <_Bfree>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	e7c5      	b.n	8009e32 <__lshift+0x4a>
 8009ea6:	3904      	subs	r1, #4
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eb0:	459c      	cmp	ip, r3
 8009eb2:	d8f9      	bhi.n	8009ea8 <__lshift+0xc0>
 8009eb4:	e7ea      	b.n	8009e8c <__lshift+0xa4>
 8009eb6:	bf00      	nop
 8009eb8:	08055f54 	.word	0x08055f54
 8009ebc:	08055f65 	.word	0x08055f65

08009ec0 <__mcmp>:
 8009ec0:	690a      	ldr	r2, [r1, #16]
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	6900      	ldr	r0, [r0, #16]
 8009ec6:	1a80      	subs	r0, r0, r2
 8009ec8:	b530      	push	{r4, r5, lr}
 8009eca:	d10e      	bne.n	8009eea <__mcmp+0x2a>
 8009ecc:	3314      	adds	r3, #20
 8009ece:	3114      	adds	r1, #20
 8009ed0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009edc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ee0:	4295      	cmp	r5, r2
 8009ee2:	d003      	beq.n	8009eec <__mcmp+0x2c>
 8009ee4:	d205      	bcs.n	8009ef2 <__mcmp+0x32>
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eea:	bd30      	pop	{r4, r5, pc}
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	d3f3      	bcc.n	8009ed8 <__mcmp+0x18>
 8009ef0:	e7fb      	b.n	8009eea <__mcmp+0x2a>
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	e7f9      	b.n	8009eea <__mcmp+0x2a>
	...

08009ef8 <__mdiff>:
 8009ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	4689      	mov	r9, r1
 8009efe:	4606      	mov	r6, r0
 8009f00:	4611      	mov	r1, r2
 8009f02:	4648      	mov	r0, r9
 8009f04:	4614      	mov	r4, r2
 8009f06:	f7ff ffdb 	bl	8009ec0 <__mcmp>
 8009f0a:	1e05      	subs	r5, r0, #0
 8009f0c:	d112      	bne.n	8009f34 <__mdiff+0x3c>
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff fd63 	bl	80099dc <_Balloc>
 8009f16:	4602      	mov	r2, r0
 8009f18:	b928      	cbnz	r0, 8009f26 <__mdiff+0x2e>
 8009f1a:	4b3f      	ldr	r3, [pc, #252]	@ (800a018 <__mdiff+0x120>)
 8009f1c:	f240 2137 	movw	r1, #567	@ 0x237
 8009f20:	483e      	ldr	r0, [pc, #248]	@ (800a01c <__mdiff+0x124>)
 8009f22:	f000 fb11 	bl	800a548 <__assert_func>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	b003      	add	sp, #12
 8009f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	bfbc      	itt	lt
 8009f36:	464b      	movlt	r3, r9
 8009f38:	46a1      	movlt	r9, r4
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f40:	bfba      	itte	lt
 8009f42:	461c      	movlt	r4, r3
 8009f44:	2501      	movlt	r5, #1
 8009f46:	2500      	movge	r5, #0
 8009f48:	f7ff fd48 	bl	80099dc <_Balloc>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	b918      	cbnz	r0, 8009f58 <__mdiff+0x60>
 8009f50:	4b31      	ldr	r3, [pc, #196]	@ (800a018 <__mdiff+0x120>)
 8009f52:	f240 2145 	movw	r1, #581	@ 0x245
 8009f56:	e7e3      	b.n	8009f20 <__mdiff+0x28>
 8009f58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f5c:	6926      	ldr	r6, [r4, #16]
 8009f5e:	60c5      	str	r5, [r0, #12]
 8009f60:	f109 0310 	add.w	r3, r9, #16
 8009f64:	f109 0514 	add.w	r5, r9, #20
 8009f68:	f104 0e14 	add.w	lr, r4, #20
 8009f6c:	f100 0b14 	add.w	fp, r0, #20
 8009f70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009f74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	46d9      	mov	r9, fp
 8009f7c:	f04f 0c00 	mov.w	ip, #0
 8009f80:	9b01      	ldr	r3, [sp, #4]
 8009f82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009f86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	fa1f f38a 	uxth.w	r3, sl
 8009f90:	4619      	mov	r1, r3
 8009f92:	b283      	uxth	r3, r0
 8009f94:	1acb      	subs	r3, r1, r3
 8009f96:	0c00      	lsrs	r0, r0, #16
 8009f98:	4463      	add	r3, ip
 8009f9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009fa8:	4576      	cmp	r6, lr
 8009faa:	f849 3b04 	str.w	r3, [r9], #4
 8009fae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fb2:	d8e5      	bhi.n	8009f80 <__mdiff+0x88>
 8009fb4:	1b33      	subs	r3, r6, r4
 8009fb6:	3b15      	subs	r3, #21
 8009fb8:	f023 0303 	bic.w	r3, r3, #3
 8009fbc:	3415      	adds	r4, #21
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	42a6      	cmp	r6, r4
 8009fc2:	bf38      	it	cc
 8009fc4:	2304      	movcc	r3, #4
 8009fc6:	441d      	add	r5, r3
 8009fc8:	445b      	add	r3, fp
 8009fca:	461e      	mov	r6, r3
 8009fcc:	462c      	mov	r4, r5
 8009fce:	4544      	cmp	r4, r8
 8009fd0:	d30e      	bcc.n	8009ff0 <__mdiff+0xf8>
 8009fd2:	f108 0103 	add.w	r1, r8, #3
 8009fd6:	1b49      	subs	r1, r1, r5
 8009fd8:	f021 0103 	bic.w	r1, r1, #3
 8009fdc:	3d03      	subs	r5, #3
 8009fde:	45a8      	cmp	r8, r5
 8009fe0:	bf38      	it	cc
 8009fe2:	2100      	movcc	r1, #0
 8009fe4:	440b      	add	r3, r1
 8009fe6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fea:	b191      	cbz	r1, 800a012 <__mdiff+0x11a>
 8009fec:	6117      	str	r7, [r2, #16]
 8009fee:	e79d      	b.n	8009f2c <__mdiff+0x34>
 8009ff0:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ff4:	46e6      	mov	lr, ip
 8009ff6:	0c08      	lsrs	r0, r1, #16
 8009ff8:	fa1c fc81 	uxtah	ip, ip, r1
 8009ffc:	4471      	add	r1, lr
 8009ffe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a002:	b289      	uxth	r1, r1
 800a004:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a008:	f846 1b04 	str.w	r1, [r6], #4
 800a00c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a010:	e7dd      	b.n	8009fce <__mdiff+0xd6>
 800a012:	3f01      	subs	r7, #1
 800a014:	e7e7      	b.n	8009fe6 <__mdiff+0xee>
 800a016:	bf00      	nop
 800a018:	08055f54 	.word	0x08055f54
 800a01c:	08055f65 	.word	0x08055f65

0800a020 <__d2b>:
 800a020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a024:	460f      	mov	r7, r1
 800a026:	2101      	movs	r1, #1
 800a028:	ec59 8b10 	vmov	r8, r9, d0
 800a02c:	4616      	mov	r6, r2
 800a02e:	f7ff fcd5 	bl	80099dc <_Balloc>
 800a032:	4604      	mov	r4, r0
 800a034:	b930      	cbnz	r0, 800a044 <__d2b+0x24>
 800a036:	4602      	mov	r2, r0
 800a038:	4b23      	ldr	r3, [pc, #140]	@ (800a0c8 <__d2b+0xa8>)
 800a03a:	4824      	ldr	r0, [pc, #144]	@ (800a0cc <__d2b+0xac>)
 800a03c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a040:	f000 fa82 	bl	800a548 <__assert_func>
 800a044:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a04c:	b10d      	cbz	r5, 800a052 <__d2b+0x32>
 800a04e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	f1b8 0300 	subs.w	r3, r8, #0
 800a058:	d023      	beq.n	800a0a2 <__d2b+0x82>
 800a05a:	4668      	mov	r0, sp
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	f7ff fd84 	bl	8009b6a <__lo0bits>
 800a062:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a066:	b1d0      	cbz	r0, 800a09e <__d2b+0x7e>
 800a068:	f1c0 0320 	rsb	r3, r0, #32
 800a06c:	fa02 f303 	lsl.w	r3, r2, r3
 800a070:	430b      	orrs	r3, r1
 800a072:	40c2      	lsrs	r2, r0
 800a074:	6163      	str	r3, [r4, #20]
 800a076:	9201      	str	r2, [sp, #4]
 800a078:	9b01      	ldr	r3, [sp, #4]
 800a07a:	61a3      	str	r3, [r4, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	bf0c      	ite	eq
 800a080:	2201      	moveq	r2, #1
 800a082:	2202      	movne	r2, #2
 800a084:	6122      	str	r2, [r4, #16]
 800a086:	b1a5      	cbz	r5, 800a0b2 <__d2b+0x92>
 800a088:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a08c:	4405      	add	r5, r0
 800a08e:	603d      	str	r5, [r7, #0]
 800a090:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a094:	6030      	str	r0, [r6, #0]
 800a096:	4620      	mov	r0, r4
 800a098:	b003      	add	sp, #12
 800a09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a09e:	6161      	str	r1, [r4, #20]
 800a0a0:	e7ea      	b.n	800a078 <__d2b+0x58>
 800a0a2:	a801      	add	r0, sp, #4
 800a0a4:	f7ff fd61 	bl	8009b6a <__lo0bits>
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	6163      	str	r3, [r4, #20]
 800a0ac:	3020      	adds	r0, #32
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	e7e8      	b.n	800a084 <__d2b+0x64>
 800a0b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0ba:	6038      	str	r0, [r7, #0]
 800a0bc:	6918      	ldr	r0, [r3, #16]
 800a0be:	f7ff fd35 	bl	8009b2c <__hi0bits>
 800a0c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0c6:	e7e5      	b.n	800a094 <__d2b+0x74>
 800a0c8:	08055f54 	.word	0x08055f54
 800a0cc:	08055f65 	.word	0x08055f65

0800a0d0 <__ssputs_r>:
 800a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	688e      	ldr	r6, [r1, #8]
 800a0d6:	461f      	mov	r7, r3
 800a0d8:	42be      	cmp	r6, r7
 800a0da:	680b      	ldr	r3, [r1, #0]
 800a0dc:	4682      	mov	sl, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	4690      	mov	r8, r2
 800a0e2:	d82d      	bhi.n	800a140 <__ssputs_r+0x70>
 800a0e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0ec:	d026      	beq.n	800a13c <__ssputs_r+0x6c>
 800a0ee:	6965      	ldr	r5, [r4, #20]
 800a0f0:	6909      	ldr	r1, [r1, #16]
 800a0f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0f6:	eba3 0901 	sub.w	r9, r3, r1
 800a0fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0fe:	1c7b      	adds	r3, r7, #1
 800a100:	444b      	add	r3, r9
 800a102:	106d      	asrs	r5, r5, #1
 800a104:	429d      	cmp	r5, r3
 800a106:	bf38      	it	cc
 800a108:	461d      	movcc	r5, r3
 800a10a:	0553      	lsls	r3, r2, #21
 800a10c:	d527      	bpl.n	800a15e <__ssputs_r+0x8e>
 800a10e:	4629      	mov	r1, r5
 800a110:	f7ff fbd8 	bl	80098c4 <_malloc_r>
 800a114:	4606      	mov	r6, r0
 800a116:	b360      	cbz	r0, 800a172 <__ssputs_r+0xa2>
 800a118:	6921      	ldr	r1, [r4, #16]
 800a11a:	464a      	mov	r2, r9
 800a11c:	f000 fa06 	bl	800a52c <memcpy>
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	6126      	str	r6, [r4, #16]
 800a12e:	6165      	str	r5, [r4, #20]
 800a130:	444e      	add	r6, r9
 800a132:	eba5 0509 	sub.w	r5, r5, r9
 800a136:	6026      	str	r6, [r4, #0]
 800a138:	60a5      	str	r5, [r4, #8]
 800a13a:	463e      	mov	r6, r7
 800a13c:	42be      	cmp	r6, r7
 800a13e:	d900      	bls.n	800a142 <__ssputs_r+0x72>
 800a140:	463e      	mov	r6, r7
 800a142:	6820      	ldr	r0, [r4, #0]
 800a144:	4632      	mov	r2, r6
 800a146:	4641      	mov	r1, r8
 800a148:	f000 f9c6 	bl	800a4d8 <memmove>
 800a14c:	68a3      	ldr	r3, [r4, #8]
 800a14e:	1b9b      	subs	r3, r3, r6
 800a150:	60a3      	str	r3, [r4, #8]
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	4433      	add	r3, r6
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	2000      	movs	r0, #0
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	462a      	mov	r2, r5
 800a160:	f000 fa36 	bl	800a5d0 <_realloc_r>
 800a164:	4606      	mov	r6, r0
 800a166:	2800      	cmp	r0, #0
 800a168:	d1e0      	bne.n	800a12c <__ssputs_r+0x5c>
 800a16a:	6921      	ldr	r1, [r4, #16]
 800a16c:	4650      	mov	r0, sl
 800a16e:	f7ff fb35 	bl	80097dc <_free_r>
 800a172:	230c      	movs	r3, #12
 800a174:	f8ca 3000 	str.w	r3, [sl]
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a184:	e7e9      	b.n	800a15a <__ssputs_r+0x8a>
	...

0800a188 <_svfiprintf_r>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	4698      	mov	r8, r3
 800a18e:	898b      	ldrh	r3, [r1, #12]
 800a190:	061b      	lsls	r3, r3, #24
 800a192:	b09d      	sub	sp, #116	@ 0x74
 800a194:	4607      	mov	r7, r0
 800a196:	460d      	mov	r5, r1
 800a198:	4614      	mov	r4, r2
 800a19a:	d510      	bpl.n	800a1be <_svfiprintf_r+0x36>
 800a19c:	690b      	ldr	r3, [r1, #16]
 800a19e:	b973      	cbnz	r3, 800a1be <_svfiprintf_r+0x36>
 800a1a0:	2140      	movs	r1, #64	@ 0x40
 800a1a2:	f7ff fb8f 	bl	80098c4 <_malloc_r>
 800a1a6:	6028      	str	r0, [r5, #0]
 800a1a8:	6128      	str	r0, [r5, #16]
 800a1aa:	b930      	cbnz	r0, 800a1ba <_svfiprintf_r+0x32>
 800a1ac:	230c      	movs	r3, #12
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1b4:	b01d      	add	sp, #116	@ 0x74
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ba:	2340      	movs	r3, #64	@ 0x40
 800a1bc:	616b      	str	r3, [r5, #20]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1c2:	2320      	movs	r3, #32
 800a1c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1cc:	2330      	movs	r3, #48	@ 0x30
 800a1ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a36c <_svfiprintf_r+0x1e4>
 800a1d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1d6:	f04f 0901 	mov.w	r9, #1
 800a1da:	4623      	mov	r3, r4
 800a1dc:	469a      	mov	sl, r3
 800a1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e2:	b10a      	cbz	r2, 800a1e8 <_svfiprintf_r+0x60>
 800a1e4:	2a25      	cmp	r2, #37	@ 0x25
 800a1e6:	d1f9      	bne.n	800a1dc <_svfiprintf_r+0x54>
 800a1e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ec:	d00b      	beq.n	800a206 <_svfiprintf_r+0x7e>
 800a1ee:	465b      	mov	r3, fp
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7ff ff6b 	bl	800a0d0 <__ssputs_r>
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	f000 80a7 	beq.w	800a34e <_svfiprintf_r+0x1c6>
 800a200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a202:	445a      	add	r2, fp
 800a204:	9209      	str	r2, [sp, #36]	@ 0x24
 800a206:	f89a 3000 	ldrb.w	r3, [sl]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f000 809f 	beq.w	800a34e <_svfiprintf_r+0x1c6>
 800a210:	2300      	movs	r3, #0
 800a212:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a21a:	f10a 0a01 	add.w	sl, sl, #1
 800a21e:	9304      	str	r3, [sp, #16]
 800a220:	9307      	str	r3, [sp, #28]
 800a222:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a226:	931a      	str	r3, [sp, #104]	@ 0x68
 800a228:	4654      	mov	r4, sl
 800a22a:	2205      	movs	r2, #5
 800a22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a230:	484e      	ldr	r0, [pc, #312]	@ (800a36c <_svfiprintf_r+0x1e4>)
 800a232:	f7f6 f805 	bl	8000240 <memchr>
 800a236:	9a04      	ldr	r2, [sp, #16]
 800a238:	b9d8      	cbnz	r0, 800a272 <_svfiprintf_r+0xea>
 800a23a:	06d0      	lsls	r0, r2, #27
 800a23c:	bf44      	itt	mi
 800a23e:	2320      	movmi	r3, #32
 800a240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a244:	0711      	lsls	r1, r2, #28
 800a246:	bf44      	itt	mi
 800a248:	232b      	movmi	r3, #43	@ 0x2b
 800a24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a24e:	f89a 3000 	ldrb.w	r3, [sl]
 800a252:	2b2a      	cmp	r3, #42	@ 0x2a
 800a254:	d015      	beq.n	800a282 <_svfiprintf_r+0xfa>
 800a256:	9a07      	ldr	r2, [sp, #28]
 800a258:	4654      	mov	r4, sl
 800a25a:	2000      	movs	r0, #0
 800a25c:	f04f 0c0a 	mov.w	ip, #10
 800a260:	4621      	mov	r1, r4
 800a262:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a266:	3b30      	subs	r3, #48	@ 0x30
 800a268:	2b09      	cmp	r3, #9
 800a26a:	d94b      	bls.n	800a304 <_svfiprintf_r+0x17c>
 800a26c:	b1b0      	cbz	r0, 800a29c <_svfiprintf_r+0x114>
 800a26e:	9207      	str	r2, [sp, #28]
 800a270:	e014      	b.n	800a29c <_svfiprintf_r+0x114>
 800a272:	eba0 0308 	sub.w	r3, r0, r8
 800a276:	fa09 f303 	lsl.w	r3, r9, r3
 800a27a:	4313      	orrs	r3, r2
 800a27c:	9304      	str	r3, [sp, #16]
 800a27e:	46a2      	mov	sl, r4
 800a280:	e7d2      	b.n	800a228 <_svfiprintf_r+0xa0>
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	1d19      	adds	r1, r3, #4
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	9103      	str	r1, [sp, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	bfbb      	ittet	lt
 800a28e:	425b      	neglt	r3, r3
 800a290:	f042 0202 	orrlt.w	r2, r2, #2
 800a294:	9307      	strge	r3, [sp, #28]
 800a296:	9307      	strlt	r3, [sp, #28]
 800a298:	bfb8      	it	lt
 800a29a:	9204      	strlt	r2, [sp, #16]
 800a29c:	7823      	ldrb	r3, [r4, #0]
 800a29e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2a0:	d10a      	bne.n	800a2b8 <_svfiprintf_r+0x130>
 800a2a2:	7863      	ldrb	r3, [r4, #1]
 800a2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2a6:	d132      	bne.n	800a30e <_svfiprintf_r+0x186>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	1d1a      	adds	r2, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	9203      	str	r2, [sp, #12]
 800a2b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2b4:	3402      	adds	r4, #2
 800a2b6:	9305      	str	r3, [sp, #20]
 800a2b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a37c <_svfiprintf_r+0x1f4>
 800a2bc:	7821      	ldrb	r1, [r4, #0]
 800a2be:	2203      	movs	r2, #3
 800a2c0:	4650      	mov	r0, sl
 800a2c2:	f7f5 ffbd 	bl	8000240 <memchr>
 800a2c6:	b138      	cbz	r0, 800a2d8 <_svfiprintf_r+0x150>
 800a2c8:	9b04      	ldr	r3, [sp, #16]
 800a2ca:	eba0 000a 	sub.w	r0, r0, sl
 800a2ce:	2240      	movs	r2, #64	@ 0x40
 800a2d0:	4082      	lsls	r2, r0
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	3401      	adds	r4, #1
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2dc:	4824      	ldr	r0, [pc, #144]	@ (800a370 <_svfiprintf_r+0x1e8>)
 800a2de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2e2:	2206      	movs	r2, #6
 800a2e4:	f7f5 ffac 	bl	8000240 <memchr>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d036      	beq.n	800a35a <_svfiprintf_r+0x1d2>
 800a2ec:	4b21      	ldr	r3, [pc, #132]	@ (800a374 <_svfiprintf_r+0x1ec>)
 800a2ee:	bb1b      	cbnz	r3, 800a338 <_svfiprintf_r+0x1b0>
 800a2f0:	9b03      	ldr	r3, [sp, #12]
 800a2f2:	3307      	adds	r3, #7
 800a2f4:	f023 0307 	bic.w	r3, r3, #7
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	9303      	str	r3, [sp, #12]
 800a2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fe:	4433      	add	r3, r6
 800a300:	9309      	str	r3, [sp, #36]	@ 0x24
 800a302:	e76a      	b.n	800a1da <_svfiprintf_r+0x52>
 800a304:	fb0c 3202 	mla	r2, ip, r2, r3
 800a308:	460c      	mov	r4, r1
 800a30a:	2001      	movs	r0, #1
 800a30c:	e7a8      	b.n	800a260 <_svfiprintf_r+0xd8>
 800a30e:	2300      	movs	r3, #0
 800a310:	3401      	adds	r4, #1
 800a312:	9305      	str	r3, [sp, #20]
 800a314:	4619      	mov	r1, r3
 800a316:	f04f 0c0a 	mov.w	ip, #10
 800a31a:	4620      	mov	r0, r4
 800a31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a320:	3a30      	subs	r2, #48	@ 0x30
 800a322:	2a09      	cmp	r2, #9
 800a324:	d903      	bls.n	800a32e <_svfiprintf_r+0x1a6>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d0c6      	beq.n	800a2b8 <_svfiprintf_r+0x130>
 800a32a:	9105      	str	r1, [sp, #20]
 800a32c:	e7c4      	b.n	800a2b8 <_svfiprintf_r+0x130>
 800a32e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a332:	4604      	mov	r4, r0
 800a334:	2301      	movs	r3, #1
 800a336:	e7f0      	b.n	800a31a <_svfiprintf_r+0x192>
 800a338:	ab03      	add	r3, sp, #12
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	462a      	mov	r2, r5
 800a33e:	4b0e      	ldr	r3, [pc, #56]	@ (800a378 <_svfiprintf_r+0x1f0>)
 800a340:	a904      	add	r1, sp, #16
 800a342:	4638      	mov	r0, r7
 800a344:	f7fd ff14 	bl	8008170 <_printf_float>
 800a348:	1c42      	adds	r2, r0, #1
 800a34a:	4606      	mov	r6, r0
 800a34c:	d1d6      	bne.n	800a2fc <_svfiprintf_r+0x174>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	065b      	lsls	r3, r3, #25
 800a352:	f53f af2d 	bmi.w	800a1b0 <_svfiprintf_r+0x28>
 800a356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a358:	e72c      	b.n	800a1b4 <_svfiprintf_r+0x2c>
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	462a      	mov	r2, r5
 800a360:	4b05      	ldr	r3, [pc, #20]	@ (800a378 <_svfiprintf_r+0x1f0>)
 800a362:	a904      	add	r1, sp, #16
 800a364:	4638      	mov	r0, r7
 800a366:	f7fe f98b 	bl	8008680 <_printf_i>
 800a36a:	e7ed      	b.n	800a348 <_svfiprintf_r+0x1c0>
 800a36c:	08055fbe 	.word	0x08055fbe
 800a370:	08055fc8 	.word	0x08055fc8
 800a374:	08008171 	.word	0x08008171
 800a378:	0800a0d1 	.word	0x0800a0d1
 800a37c:	08055fc4 	.word	0x08055fc4

0800a380 <__sflush_r>:
 800a380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a388:	0716      	lsls	r6, r2, #28
 800a38a:	4605      	mov	r5, r0
 800a38c:	460c      	mov	r4, r1
 800a38e:	d454      	bmi.n	800a43a <__sflush_r+0xba>
 800a390:	684b      	ldr	r3, [r1, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	dc02      	bgt.n	800a39c <__sflush_r+0x1c>
 800a396:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a398:	2b00      	cmp	r3, #0
 800a39a:	dd48      	ble.n	800a42e <__sflush_r+0xae>
 800a39c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a39e:	2e00      	cmp	r6, #0
 800a3a0:	d045      	beq.n	800a42e <__sflush_r+0xae>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3a8:	682f      	ldr	r7, [r5, #0]
 800a3aa:	6a21      	ldr	r1, [r4, #32]
 800a3ac:	602b      	str	r3, [r5, #0]
 800a3ae:	d030      	beq.n	800a412 <__sflush_r+0x92>
 800a3b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	0759      	lsls	r1, r3, #29
 800a3b6:	d505      	bpl.n	800a3c4 <__sflush_r+0x44>
 800a3b8:	6863      	ldr	r3, [r4, #4]
 800a3ba:	1ad2      	subs	r2, r2, r3
 800a3bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3be:	b10b      	cbz	r3, 800a3c4 <__sflush_r+0x44>
 800a3c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3c2:	1ad2      	subs	r2, r2, r3
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3c8:	6a21      	ldr	r1, [r4, #32]
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b0      	blx	r6
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	d106      	bne.n	800a3e2 <__sflush_r+0x62>
 800a3d4:	6829      	ldr	r1, [r5, #0]
 800a3d6:	291d      	cmp	r1, #29
 800a3d8:	d82b      	bhi.n	800a432 <__sflush_r+0xb2>
 800a3da:	4a2a      	ldr	r2, [pc, #168]	@ (800a484 <__sflush_r+0x104>)
 800a3dc:	40ca      	lsrs	r2, r1
 800a3de:	07d6      	lsls	r6, r2, #31
 800a3e0:	d527      	bpl.n	800a432 <__sflush_r+0xb2>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	6062      	str	r2, [r4, #4]
 800a3e6:	04d9      	lsls	r1, r3, #19
 800a3e8:	6922      	ldr	r2, [r4, #16]
 800a3ea:	6022      	str	r2, [r4, #0]
 800a3ec:	d504      	bpl.n	800a3f8 <__sflush_r+0x78>
 800a3ee:	1c42      	adds	r2, r0, #1
 800a3f0:	d101      	bne.n	800a3f6 <__sflush_r+0x76>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	b903      	cbnz	r3, 800a3f8 <__sflush_r+0x78>
 800a3f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a3f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3fa:	602f      	str	r7, [r5, #0]
 800a3fc:	b1b9      	cbz	r1, 800a42e <__sflush_r+0xae>
 800a3fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a402:	4299      	cmp	r1, r3
 800a404:	d002      	beq.n	800a40c <__sflush_r+0x8c>
 800a406:	4628      	mov	r0, r5
 800a408:	f7ff f9e8 	bl	80097dc <_free_r>
 800a40c:	2300      	movs	r3, #0
 800a40e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a410:	e00d      	b.n	800a42e <__sflush_r+0xae>
 800a412:	2301      	movs	r3, #1
 800a414:	4628      	mov	r0, r5
 800a416:	47b0      	blx	r6
 800a418:	4602      	mov	r2, r0
 800a41a:	1c50      	adds	r0, r2, #1
 800a41c:	d1c9      	bne.n	800a3b2 <__sflush_r+0x32>
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0c6      	beq.n	800a3b2 <__sflush_r+0x32>
 800a424:	2b1d      	cmp	r3, #29
 800a426:	d001      	beq.n	800a42c <__sflush_r+0xac>
 800a428:	2b16      	cmp	r3, #22
 800a42a:	d11e      	bne.n	800a46a <__sflush_r+0xea>
 800a42c:	602f      	str	r7, [r5, #0]
 800a42e:	2000      	movs	r0, #0
 800a430:	e022      	b.n	800a478 <__sflush_r+0xf8>
 800a432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a436:	b21b      	sxth	r3, r3
 800a438:	e01b      	b.n	800a472 <__sflush_r+0xf2>
 800a43a:	690f      	ldr	r7, [r1, #16]
 800a43c:	2f00      	cmp	r7, #0
 800a43e:	d0f6      	beq.n	800a42e <__sflush_r+0xae>
 800a440:	0793      	lsls	r3, r2, #30
 800a442:	680e      	ldr	r6, [r1, #0]
 800a444:	bf08      	it	eq
 800a446:	694b      	ldreq	r3, [r1, #20]
 800a448:	600f      	str	r7, [r1, #0]
 800a44a:	bf18      	it	ne
 800a44c:	2300      	movne	r3, #0
 800a44e:	eba6 0807 	sub.w	r8, r6, r7
 800a452:	608b      	str	r3, [r1, #8]
 800a454:	f1b8 0f00 	cmp.w	r8, #0
 800a458:	dde9      	ble.n	800a42e <__sflush_r+0xae>
 800a45a:	6a21      	ldr	r1, [r4, #32]
 800a45c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a45e:	4643      	mov	r3, r8
 800a460:	463a      	mov	r2, r7
 800a462:	4628      	mov	r0, r5
 800a464:	47b0      	blx	r6
 800a466:	2800      	cmp	r0, #0
 800a468:	dc08      	bgt.n	800a47c <__sflush_r+0xfc>
 800a46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a47c:	4407      	add	r7, r0
 800a47e:	eba8 0800 	sub.w	r8, r8, r0
 800a482:	e7e7      	b.n	800a454 <__sflush_r+0xd4>
 800a484:	20400001 	.word	0x20400001

0800a488 <_fflush_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	690b      	ldr	r3, [r1, #16]
 800a48c:	4605      	mov	r5, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	b913      	cbnz	r3, 800a498 <_fflush_r+0x10>
 800a492:	2500      	movs	r5, #0
 800a494:	4628      	mov	r0, r5
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	b118      	cbz	r0, 800a4a2 <_fflush_r+0x1a>
 800a49a:	6a03      	ldr	r3, [r0, #32]
 800a49c:	b90b      	cbnz	r3, 800a4a2 <_fflush_r+0x1a>
 800a49e:	f7fe fa99 	bl	80089d4 <__sinit>
 800a4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0f3      	beq.n	800a492 <_fflush_r+0xa>
 800a4aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4ac:	07d0      	lsls	r0, r2, #31
 800a4ae:	d404      	bmi.n	800a4ba <_fflush_r+0x32>
 800a4b0:	0599      	lsls	r1, r3, #22
 800a4b2:	d402      	bmi.n	800a4ba <_fflush_r+0x32>
 800a4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4b6:	f7fe fba6 	bl	8008c06 <__retarget_lock_acquire_recursive>
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	4621      	mov	r1, r4
 800a4be:	f7ff ff5f 	bl	800a380 <__sflush_r>
 800a4c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4c4:	07da      	lsls	r2, r3, #31
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	d4e4      	bmi.n	800a494 <_fflush_r+0xc>
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	059b      	lsls	r3, r3, #22
 800a4ce:	d4e1      	bmi.n	800a494 <_fflush_r+0xc>
 800a4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4d2:	f7fe fb99 	bl	8008c08 <__retarget_lock_release_recursive>
 800a4d6:	e7dd      	b.n	800a494 <_fflush_r+0xc>

0800a4d8 <memmove>:
 800a4d8:	4288      	cmp	r0, r1
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	eb01 0402 	add.w	r4, r1, r2
 800a4e0:	d902      	bls.n	800a4e8 <memmove+0x10>
 800a4e2:	4284      	cmp	r4, r0
 800a4e4:	4623      	mov	r3, r4
 800a4e6:	d807      	bhi.n	800a4f8 <memmove+0x20>
 800a4e8:	1e43      	subs	r3, r0, #1
 800a4ea:	42a1      	cmp	r1, r4
 800a4ec:	d008      	beq.n	800a500 <memmove+0x28>
 800a4ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4f6:	e7f8      	b.n	800a4ea <memmove+0x12>
 800a4f8:	4402      	add	r2, r0
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	428a      	cmp	r2, r1
 800a4fe:	d100      	bne.n	800a502 <memmove+0x2a>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a50a:	e7f7      	b.n	800a4fc <memmove+0x24>

0800a50c <_sbrk_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d06      	ldr	r5, [pc, #24]	@ (800a528 <_sbrk_r+0x1c>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	602b      	str	r3, [r5, #0]
 800a518:	f7f8 fc94 	bl	8002e44 <_sbrk>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_sbrk_r+0x1a>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_sbrk_r+0x1a>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20000c34 	.word	0x20000c34

0800a52c <memcpy>:
 800a52c:	440a      	add	r2, r1
 800a52e:	4291      	cmp	r1, r2
 800a530:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a534:	d100      	bne.n	800a538 <memcpy+0xc>
 800a536:	4770      	bx	lr
 800a538:	b510      	push	{r4, lr}
 800a53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a53e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a542:	4291      	cmp	r1, r2
 800a544:	d1f9      	bne.n	800a53a <memcpy+0xe>
 800a546:	bd10      	pop	{r4, pc}

0800a548 <__assert_func>:
 800a548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a54a:	4614      	mov	r4, r2
 800a54c:	461a      	mov	r2, r3
 800a54e:	4b09      	ldr	r3, [pc, #36]	@ (800a574 <__assert_func+0x2c>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4605      	mov	r5, r0
 800a554:	68d8      	ldr	r0, [r3, #12]
 800a556:	b14c      	cbz	r4, 800a56c <__assert_func+0x24>
 800a558:	4b07      	ldr	r3, [pc, #28]	@ (800a578 <__assert_func+0x30>)
 800a55a:	9100      	str	r1, [sp, #0]
 800a55c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a560:	4906      	ldr	r1, [pc, #24]	@ (800a57c <__assert_func+0x34>)
 800a562:	462b      	mov	r3, r5
 800a564:	f000 f870 	bl	800a648 <fiprintf>
 800a568:	f000 f880 	bl	800a66c <abort>
 800a56c:	4b04      	ldr	r3, [pc, #16]	@ (800a580 <__assert_func+0x38>)
 800a56e:	461c      	mov	r4, r3
 800a570:	e7f3      	b.n	800a55a <__assert_func+0x12>
 800a572:	bf00      	nop
 800a574:	20000030 	.word	0x20000030
 800a578:	08055fd9 	.word	0x08055fd9
 800a57c:	08055fe6 	.word	0x08055fe6
 800a580:	08056014 	.word	0x08056014

0800a584 <_calloc_r>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	fba1 5402 	umull	r5, r4, r1, r2
 800a58a:	b934      	cbnz	r4, 800a59a <_calloc_r+0x16>
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7ff f999 	bl	80098c4 <_malloc_r>
 800a592:	4606      	mov	r6, r0
 800a594:	b928      	cbnz	r0, 800a5a2 <_calloc_r+0x1e>
 800a596:	4630      	mov	r0, r6
 800a598:	bd70      	pop	{r4, r5, r6, pc}
 800a59a:	220c      	movs	r2, #12
 800a59c:	6002      	str	r2, [r0, #0]
 800a59e:	2600      	movs	r6, #0
 800a5a0:	e7f9      	b.n	800a596 <_calloc_r+0x12>
 800a5a2:	462a      	mov	r2, r5
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	f7fe fab0 	bl	8008b0a <memset>
 800a5aa:	e7f4      	b.n	800a596 <_calloc_r+0x12>

0800a5ac <__ascii_mbtowc>:
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	b901      	cbnz	r1, 800a5b2 <__ascii_mbtowc+0x6>
 800a5b0:	a901      	add	r1, sp, #4
 800a5b2:	b142      	cbz	r2, 800a5c6 <__ascii_mbtowc+0x1a>
 800a5b4:	b14b      	cbz	r3, 800a5ca <__ascii_mbtowc+0x1e>
 800a5b6:	7813      	ldrb	r3, [r2, #0]
 800a5b8:	600b      	str	r3, [r1, #0]
 800a5ba:	7812      	ldrb	r2, [r2, #0]
 800a5bc:	1e10      	subs	r0, r2, #0
 800a5be:	bf18      	it	ne
 800a5c0:	2001      	movne	r0, #1
 800a5c2:	b002      	add	sp, #8
 800a5c4:	4770      	bx	lr
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	e7fb      	b.n	800a5c2 <__ascii_mbtowc+0x16>
 800a5ca:	f06f 0001 	mvn.w	r0, #1
 800a5ce:	e7f8      	b.n	800a5c2 <__ascii_mbtowc+0x16>

0800a5d0 <_realloc_r>:
 800a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	4614      	mov	r4, r2
 800a5d8:	460d      	mov	r5, r1
 800a5da:	b921      	cbnz	r1, 800a5e6 <_realloc_r+0x16>
 800a5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	f7ff b96f 	b.w	80098c4 <_malloc_r>
 800a5e6:	b92a      	cbnz	r2, 800a5f4 <_realloc_r+0x24>
 800a5e8:	f7ff f8f8 	bl	80097dc <_free_r>
 800a5ec:	4625      	mov	r5, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	f000 f841 	bl	800a67a <_malloc_usable_size_r>
 800a5f8:	4284      	cmp	r4, r0
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	d802      	bhi.n	800a604 <_realloc_r+0x34>
 800a5fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a602:	d8f4      	bhi.n	800a5ee <_realloc_r+0x1e>
 800a604:	4621      	mov	r1, r4
 800a606:	4638      	mov	r0, r7
 800a608:	f7ff f95c 	bl	80098c4 <_malloc_r>
 800a60c:	4680      	mov	r8, r0
 800a60e:	b908      	cbnz	r0, 800a614 <_realloc_r+0x44>
 800a610:	4645      	mov	r5, r8
 800a612:	e7ec      	b.n	800a5ee <_realloc_r+0x1e>
 800a614:	42b4      	cmp	r4, r6
 800a616:	4622      	mov	r2, r4
 800a618:	4629      	mov	r1, r5
 800a61a:	bf28      	it	cs
 800a61c:	4632      	movcs	r2, r6
 800a61e:	f7ff ff85 	bl	800a52c <memcpy>
 800a622:	4629      	mov	r1, r5
 800a624:	4638      	mov	r0, r7
 800a626:	f7ff f8d9 	bl	80097dc <_free_r>
 800a62a:	e7f1      	b.n	800a610 <_realloc_r+0x40>

0800a62c <__ascii_wctomb>:
 800a62c:	4603      	mov	r3, r0
 800a62e:	4608      	mov	r0, r1
 800a630:	b141      	cbz	r1, 800a644 <__ascii_wctomb+0x18>
 800a632:	2aff      	cmp	r2, #255	@ 0xff
 800a634:	d904      	bls.n	800a640 <__ascii_wctomb+0x14>
 800a636:	228a      	movs	r2, #138	@ 0x8a
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a63e:	4770      	bx	lr
 800a640:	700a      	strb	r2, [r1, #0]
 800a642:	2001      	movs	r0, #1
 800a644:	4770      	bx	lr
	...

0800a648 <fiprintf>:
 800a648:	b40e      	push	{r1, r2, r3}
 800a64a:	b503      	push	{r0, r1, lr}
 800a64c:	4601      	mov	r1, r0
 800a64e:	ab03      	add	r3, sp, #12
 800a650:	4805      	ldr	r0, [pc, #20]	@ (800a668 <fiprintf+0x20>)
 800a652:	f853 2b04 	ldr.w	r2, [r3], #4
 800a656:	6800      	ldr	r0, [r0, #0]
 800a658:	9301      	str	r3, [sp, #4]
 800a65a:	f000 f83f 	bl	800a6dc <_vfiprintf_r>
 800a65e:	b002      	add	sp, #8
 800a660:	f85d eb04 	ldr.w	lr, [sp], #4
 800a664:	b003      	add	sp, #12
 800a666:	4770      	bx	lr
 800a668:	20000030 	.word	0x20000030

0800a66c <abort>:
 800a66c:	b508      	push	{r3, lr}
 800a66e:	2006      	movs	r0, #6
 800a670:	f000 fa08 	bl	800aa84 <raise>
 800a674:	2001      	movs	r0, #1
 800a676:	f7f8 fb6d 	bl	8002d54 <_exit>

0800a67a <_malloc_usable_size_r>:
 800a67a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67e:	1f18      	subs	r0, r3, #4
 800a680:	2b00      	cmp	r3, #0
 800a682:	bfbc      	itt	lt
 800a684:	580b      	ldrlt	r3, [r1, r0]
 800a686:	18c0      	addlt	r0, r0, r3
 800a688:	4770      	bx	lr

0800a68a <__sfputc_r>:
 800a68a:	6893      	ldr	r3, [r2, #8]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	b410      	push	{r4}
 800a692:	6093      	str	r3, [r2, #8]
 800a694:	da08      	bge.n	800a6a8 <__sfputc_r+0x1e>
 800a696:	6994      	ldr	r4, [r2, #24]
 800a698:	42a3      	cmp	r3, r4
 800a69a:	db01      	blt.n	800a6a0 <__sfputc_r+0x16>
 800a69c:	290a      	cmp	r1, #10
 800a69e:	d103      	bne.n	800a6a8 <__sfputc_r+0x1e>
 800a6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a4:	f000 b932 	b.w	800a90c <__swbuf_r>
 800a6a8:	6813      	ldr	r3, [r2, #0]
 800a6aa:	1c58      	adds	r0, r3, #1
 800a6ac:	6010      	str	r0, [r2, #0]
 800a6ae:	7019      	strb	r1, [r3, #0]
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <__sfputs_r>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	4614      	mov	r4, r2
 800a6c0:	18d5      	adds	r5, r2, r3
 800a6c2:	42ac      	cmp	r4, r5
 800a6c4:	d101      	bne.n	800a6ca <__sfputs_r+0x12>
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	e007      	b.n	800a6da <__sfputs_r+0x22>
 800a6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ce:	463a      	mov	r2, r7
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff ffda 	bl	800a68a <__sfputc_r>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d1f3      	bne.n	800a6c2 <__sfputs_r+0xa>
 800a6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6dc <_vfiprintf_r>:
 800a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	460d      	mov	r5, r1
 800a6e2:	b09d      	sub	sp, #116	@ 0x74
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	4698      	mov	r8, r3
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	b118      	cbz	r0, 800a6f4 <_vfiprintf_r+0x18>
 800a6ec:	6a03      	ldr	r3, [r0, #32]
 800a6ee:	b90b      	cbnz	r3, 800a6f4 <_vfiprintf_r+0x18>
 800a6f0:	f7fe f970 	bl	80089d4 <__sinit>
 800a6f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6f6:	07d9      	lsls	r1, r3, #31
 800a6f8:	d405      	bmi.n	800a706 <_vfiprintf_r+0x2a>
 800a6fa:	89ab      	ldrh	r3, [r5, #12]
 800a6fc:	059a      	lsls	r2, r3, #22
 800a6fe:	d402      	bmi.n	800a706 <_vfiprintf_r+0x2a>
 800a700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a702:	f7fe fa80 	bl	8008c06 <__retarget_lock_acquire_recursive>
 800a706:	89ab      	ldrh	r3, [r5, #12]
 800a708:	071b      	lsls	r3, r3, #28
 800a70a:	d501      	bpl.n	800a710 <_vfiprintf_r+0x34>
 800a70c:	692b      	ldr	r3, [r5, #16]
 800a70e:	b99b      	cbnz	r3, 800a738 <_vfiprintf_r+0x5c>
 800a710:	4629      	mov	r1, r5
 800a712:	4630      	mov	r0, r6
 800a714:	f000 f938 	bl	800a988 <__swsetup_r>
 800a718:	b170      	cbz	r0, 800a738 <_vfiprintf_r+0x5c>
 800a71a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a71c:	07dc      	lsls	r4, r3, #31
 800a71e:	d504      	bpl.n	800a72a <_vfiprintf_r+0x4e>
 800a720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a724:	b01d      	add	sp, #116	@ 0x74
 800a726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72a:	89ab      	ldrh	r3, [r5, #12]
 800a72c:	0598      	lsls	r0, r3, #22
 800a72e:	d4f7      	bmi.n	800a720 <_vfiprintf_r+0x44>
 800a730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a732:	f7fe fa69 	bl	8008c08 <__retarget_lock_release_recursive>
 800a736:	e7f3      	b.n	800a720 <_vfiprintf_r+0x44>
 800a738:	2300      	movs	r3, #0
 800a73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73c:	2320      	movs	r3, #32
 800a73e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a742:	f8cd 800c 	str.w	r8, [sp, #12]
 800a746:	2330      	movs	r3, #48	@ 0x30
 800a748:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8f8 <_vfiprintf_r+0x21c>
 800a74c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a750:	f04f 0901 	mov.w	r9, #1
 800a754:	4623      	mov	r3, r4
 800a756:	469a      	mov	sl, r3
 800a758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75c:	b10a      	cbz	r2, 800a762 <_vfiprintf_r+0x86>
 800a75e:	2a25      	cmp	r2, #37	@ 0x25
 800a760:	d1f9      	bne.n	800a756 <_vfiprintf_r+0x7a>
 800a762:	ebba 0b04 	subs.w	fp, sl, r4
 800a766:	d00b      	beq.n	800a780 <_vfiprintf_r+0xa4>
 800a768:	465b      	mov	r3, fp
 800a76a:	4622      	mov	r2, r4
 800a76c:	4629      	mov	r1, r5
 800a76e:	4630      	mov	r0, r6
 800a770:	f7ff ffa2 	bl	800a6b8 <__sfputs_r>
 800a774:	3001      	adds	r0, #1
 800a776:	f000 80a7 	beq.w	800a8c8 <_vfiprintf_r+0x1ec>
 800a77a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a77c:	445a      	add	r2, fp
 800a77e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a780:	f89a 3000 	ldrb.w	r3, [sl]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 809f 	beq.w	800a8c8 <_vfiprintf_r+0x1ec>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a794:	f10a 0a01 	add.w	sl, sl, #1
 800a798:	9304      	str	r3, [sp, #16]
 800a79a:	9307      	str	r3, [sp, #28]
 800a79c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7a2:	4654      	mov	r4, sl
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7aa:	4853      	ldr	r0, [pc, #332]	@ (800a8f8 <_vfiprintf_r+0x21c>)
 800a7ac:	f7f5 fd48 	bl	8000240 <memchr>
 800a7b0:	9a04      	ldr	r2, [sp, #16]
 800a7b2:	b9d8      	cbnz	r0, 800a7ec <_vfiprintf_r+0x110>
 800a7b4:	06d1      	lsls	r1, r2, #27
 800a7b6:	bf44      	itt	mi
 800a7b8:	2320      	movmi	r3, #32
 800a7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7be:	0713      	lsls	r3, r2, #28
 800a7c0:	bf44      	itt	mi
 800a7c2:	232b      	movmi	r3, #43	@ 0x2b
 800a7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7ce:	d015      	beq.n	800a7fc <_vfiprintf_r+0x120>
 800a7d0:	9a07      	ldr	r2, [sp, #28]
 800a7d2:	4654      	mov	r4, sl
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	f04f 0c0a 	mov.w	ip, #10
 800a7da:	4621      	mov	r1, r4
 800a7dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e0:	3b30      	subs	r3, #48	@ 0x30
 800a7e2:	2b09      	cmp	r3, #9
 800a7e4:	d94b      	bls.n	800a87e <_vfiprintf_r+0x1a2>
 800a7e6:	b1b0      	cbz	r0, 800a816 <_vfiprintf_r+0x13a>
 800a7e8:	9207      	str	r2, [sp, #28]
 800a7ea:	e014      	b.n	800a816 <_vfiprintf_r+0x13a>
 800a7ec:	eba0 0308 	sub.w	r3, r0, r8
 800a7f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	46a2      	mov	sl, r4
 800a7fa:	e7d2      	b.n	800a7a2 <_vfiprintf_r+0xc6>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	1d19      	adds	r1, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	9103      	str	r1, [sp, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	bfbb      	ittet	lt
 800a808:	425b      	neglt	r3, r3
 800a80a:	f042 0202 	orrlt.w	r2, r2, #2
 800a80e:	9307      	strge	r3, [sp, #28]
 800a810:	9307      	strlt	r3, [sp, #28]
 800a812:	bfb8      	it	lt
 800a814:	9204      	strlt	r2, [sp, #16]
 800a816:	7823      	ldrb	r3, [r4, #0]
 800a818:	2b2e      	cmp	r3, #46	@ 0x2e
 800a81a:	d10a      	bne.n	800a832 <_vfiprintf_r+0x156>
 800a81c:	7863      	ldrb	r3, [r4, #1]
 800a81e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a820:	d132      	bne.n	800a888 <_vfiprintf_r+0x1ac>
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	1d1a      	adds	r2, r3, #4
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	9203      	str	r2, [sp, #12]
 800a82a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a82e:	3402      	adds	r4, #2
 800a830:	9305      	str	r3, [sp, #20]
 800a832:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a908 <_vfiprintf_r+0x22c>
 800a836:	7821      	ldrb	r1, [r4, #0]
 800a838:	2203      	movs	r2, #3
 800a83a:	4650      	mov	r0, sl
 800a83c:	f7f5 fd00 	bl	8000240 <memchr>
 800a840:	b138      	cbz	r0, 800a852 <_vfiprintf_r+0x176>
 800a842:	9b04      	ldr	r3, [sp, #16]
 800a844:	eba0 000a 	sub.w	r0, r0, sl
 800a848:	2240      	movs	r2, #64	@ 0x40
 800a84a:	4082      	lsls	r2, r0
 800a84c:	4313      	orrs	r3, r2
 800a84e:	3401      	adds	r4, #1
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a856:	4829      	ldr	r0, [pc, #164]	@ (800a8fc <_vfiprintf_r+0x220>)
 800a858:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a85c:	2206      	movs	r2, #6
 800a85e:	f7f5 fcef 	bl	8000240 <memchr>
 800a862:	2800      	cmp	r0, #0
 800a864:	d03f      	beq.n	800a8e6 <_vfiprintf_r+0x20a>
 800a866:	4b26      	ldr	r3, [pc, #152]	@ (800a900 <_vfiprintf_r+0x224>)
 800a868:	bb1b      	cbnz	r3, 800a8b2 <_vfiprintf_r+0x1d6>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	3307      	adds	r3, #7
 800a86e:	f023 0307 	bic.w	r3, r3, #7
 800a872:	3308      	adds	r3, #8
 800a874:	9303      	str	r3, [sp, #12]
 800a876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a878:	443b      	add	r3, r7
 800a87a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a87c:	e76a      	b.n	800a754 <_vfiprintf_r+0x78>
 800a87e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a882:	460c      	mov	r4, r1
 800a884:	2001      	movs	r0, #1
 800a886:	e7a8      	b.n	800a7da <_vfiprintf_r+0xfe>
 800a888:	2300      	movs	r3, #0
 800a88a:	3401      	adds	r4, #1
 800a88c:	9305      	str	r3, [sp, #20]
 800a88e:	4619      	mov	r1, r3
 800a890:	f04f 0c0a 	mov.w	ip, #10
 800a894:	4620      	mov	r0, r4
 800a896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89a:	3a30      	subs	r2, #48	@ 0x30
 800a89c:	2a09      	cmp	r2, #9
 800a89e:	d903      	bls.n	800a8a8 <_vfiprintf_r+0x1cc>
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0c6      	beq.n	800a832 <_vfiprintf_r+0x156>
 800a8a4:	9105      	str	r1, [sp, #20]
 800a8a6:	e7c4      	b.n	800a832 <_vfiprintf_r+0x156>
 800a8a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e7f0      	b.n	800a894 <_vfiprintf_r+0x1b8>
 800a8b2:	ab03      	add	r3, sp, #12
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	4b12      	ldr	r3, [pc, #72]	@ (800a904 <_vfiprintf_r+0x228>)
 800a8ba:	a904      	add	r1, sp, #16
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7fd fc57 	bl	8008170 <_printf_float>
 800a8c2:	4607      	mov	r7, r0
 800a8c4:	1c78      	adds	r0, r7, #1
 800a8c6:	d1d6      	bne.n	800a876 <_vfiprintf_r+0x19a>
 800a8c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8ca:	07d9      	lsls	r1, r3, #31
 800a8cc:	d405      	bmi.n	800a8da <_vfiprintf_r+0x1fe>
 800a8ce:	89ab      	ldrh	r3, [r5, #12]
 800a8d0:	059a      	lsls	r2, r3, #22
 800a8d2:	d402      	bmi.n	800a8da <_vfiprintf_r+0x1fe>
 800a8d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8d6:	f7fe f997 	bl	8008c08 <__retarget_lock_release_recursive>
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	065b      	lsls	r3, r3, #25
 800a8de:	f53f af1f 	bmi.w	800a720 <_vfiprintf_r+0x44>
 800a8e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8e4:	e71e      	b.n	800a724 <_vfiprintf_r+0x48>
 800a8e6:	ab03      	add	r3, sp, #12
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	462a      	mov	r2, r5
 800a8ec:	4b05      	ldr	r3, [pc, #20]	@ (800a904 <_vfiprintf_r+0x228>)
 800a8ee:	a904      	add	r1, sp, #16
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f7fd fec5 	bl	8008680 <_printf_i>
 800a8f6:	e7e4      	b.n	800a8c2 <_vfiprintf_r+0x1e6>
 800a8f8:	08055fbe 	.word	0x08055fbe
 800a8fc:	08055fc8 	.word	0x08055fc8
 800a900:	08008171 	.word	0x08008171
 800a904:	0800a6b9 	.word	0x0800a6b9
 800a908:	08055fc4 	.word	0x08055fc4

0800a90c <__swbuf_r>:
 800a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90e:	460e      	mov	r6, r1
 800a910:	4614      	mov	r4, r2
 800a912:	4605      	mov	r5, r0
 800a914:	b118      	cbz	r0, 800a91e <__swbuf_r+0x12>
 800a916:	6a03      	ldr	r3, [r0, #32]
 800a918:	b90b      	cbnz	r3, 800a91e <__swbuf_r+0x12>
 800a91a:	f7fe f85b 	bl	80089d4 <__sinit>
 800a91e:	69a3      	ldr	r3, [r4, #24]
 800a920:	60a3      	str	r3, [r4, #8]
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	071a      	lsls	r2, r3, #28
 800a926:	d501      	bpl.n	800a92c <__swbuf_r+0x20>
 800a928:	6923      	ldr	r3, [r4, #16]
 800a92a:	b943      	cbnz	r3, 800a93e <__swbuf_r+0x32>
 800a92c:	4621      	mov	r1, r4
 800a92e:	4628      	mov	r0, r5
 800a930:	f000 f82a 	bl	800a988 <__swsetup_r>
 800a934:	b118      	cbz	r0, 800a93e <__swbuf_r+0x32>
 800a936:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a93a:	4638      	mov	r0, r7
 800a93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	1a98      	subs	r0, r3, r2
 800a944:	6963      	ldr	r3, [r4, #20]
 800a946:	b2f6      	uxtb	r6, r6
 800a948:	4283      	cmp	r3, r0
 800a94a:	4637      	mov	r7, r6
 800a94c:	dc05      	bgt.n	800a95a <__swbuf_r+0x4e>
 800a94e:	4621      	mov	r1, r4
 800a950:	4628      	mov	r0, r5
 800a952:	f7ff fd99 	bl	800a488 <_fflush_r>
 800a956:	2800      	cmp	r0, #0
 800a958:	d1ed      	bne.n	800a936 <__swbuf_r+0x2a>
 800a95a:	68a3      	ldr	r3, [r4, #8]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	60a3      	str	r3, [r4, #8]
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	6022      	str	r2, [r4, #0]
 800a966:	701e      	strb	r6, [r3, #0]
 800a968:	6962      	ldr	r2, [r4, #20]
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d004      	beq.n	800a97a <__swbuf_r+0x6e>
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	07db      	lsls	r3, r3, #31
 800a974:	d5e1      	bpl.n	800a93a <__swbuf_r+0x2e>
 800a976:	2e0a      	cmp	r6, #10
 800a978:	d1df      	bne.n	800a93a <__swbuf_r+0x2e>
 800a97a:	4621      	mov	r1, r4
 800a97c:	4628      	mov	r0, r5
 800a97e:	f7ff fd83 	bl	800a488 <_fflush_r>
 800a982:	2800      	cmp	r0, #0
 800a984:	d0d9      	beq.n	800a93a <__swbuf_r+0x2e>
 800a986:	e7d6      	b.n	800a936 <__swbuf_r+0x2a>

0800a988 <__swsetup_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4b29      	ldr	r3, [pc, #164]	@ (800aa30 <__swsetup_r+0xa8>)
 800a98c:	4605      	mov	r5, r0
 800a98e:	6818      	ldr	r0, [r3, #0]
 800a990:	460c      	mov	r4, r1
 800a992:	b118      	cbz	r0, 800a99c <__swsetup_r+0x14>
 800a994:	6a03      	ldr	r3, [r0, #32]
 800a996:	b90b      	cbnz	r3, 800a99c <__swsetup_r+0x14>
 800a998:	f7fe f81c 	bl	80089d4 <__sinit>
 800a99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9a0:	0719      	lsls	r1, r3, #28
 800a9a2:	d422      	bmi.n	800a9ea <__swsetup_r+0x62>
 800a9a4:	06da      	lsls	r2, r3, #27
 800a9a6:	d407      	bmi.n	800a9b8 <__swsetup_r+0x30>
 800a9a8:	2209      	movs	r2, #9
 800a9aa:	602a      	str	r2, [r5, #0]
 800a9ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9b6:	e033      	b.n	800aa20 <__swsetup_r+0x98>
 800a9b8:	0758      	lsls	r0, r3, #29
 800a9ba:	d512      	bpl.n	800a9e2 <__swsetup_r+0x5a>
 800a9bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9be:	b141      	cbz	r1, 800a9d2 <__swsetup_r+0x4a>
 800a9c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9c4:	4299      	cmp	r1, r3
 800a9c6:	d002      	beq.n	800a9ce <__swsetup_r+0x46>
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f7fe ff07 	bl	80097dc <_free_r>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	6063      	str	r3, [r4, #4]
 800a9de:	6923      	ldr	r3, [r4, #16]
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	f043 0308 	orr.w	r3, r3, #8
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	6923      	ldr	r3, [r4, #16]
 800a9ec:	b94b      	cbnz	r3, 800aa02 <__swsetup_r+0x7a>
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9f8:	d003      	beq.n	800aa02 <__swsetup_r+0x7a>
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	f000 f883 	bl	800ab08 <__smakebuf_r>
 800aa02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa06:	f013 0201 	ands.w	r2, r3, #1
 800aa0a:	d00a      	beq.n	800aa22 <__swsetup_r+0x9a>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	60a2      	str	r2, [r4, #8]
 800aa10:	6962      	ldr	r2, [r4, #20]
 800aa12:	4252      	negs	r2, r2
 800aa14:	61a2      	str	r2, [r4, #24]
 800aa16:	6922      	ldr	r2, [r4, #16]
 800aa18:	b942      	cbnz	r2, 800aa2c <__swsetup_r+0xa4>
 800aa1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa1e:	d1c5      	bne.n	800a9ac <__swsetup_r+0x24>
 800aa20:	bd38      	pop	{r3, r4, r5, pc}
 800aa22:	0799      	lsls	r1, r3, #30
 800aa24:	bf58      	it	pl
 800aa26:	6962      	ldrpl	r2, [r4, #20]
 800aa28:	60a2      	str	r2, [r4, #8]
 800aa2a:	e7f4      	b.n	800aa16 <__swsetup_r+0x8e>
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	e7f7      	b.n	800aa20 <__swsetup_r+0x98>
 800aa30:	20000030 	.word	0x20000030

0800aa34 <_raise_r>:
 800aa34:	291f      	cmp	r1, #31
 800aa36:	b538      	push	{r3, r4, r5, lr}
 800aa38:	4605      	mov	r5, r0
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	d904      	bls.n	800aa48 <_raise_r+0x14>
 800aa3e:	2316      	movs	r3, #22
 800aa40:	6003      	str	r3, [r0, #0]
 800aa42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa4a:	b112      	cbz	r2, 800aa52 <_raise_r+0x1e>
 800aa4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa50:	b94b      	cbnz	r3, 800aa66 <_raise_r+0x32>
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 f830 	bl	800aab8 <_getpid_r>
 800aa58:	4622      	mov	r2, r4
 800aa5a:	4601      	mov	r1, r0
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa62:	f000 b817 	b.w	800aa94 <_kill_r>
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d00a      	beq.n	800aa80 <_raise_r+0x4c>
 800aa6a:	1c59      	adds	r1, r3, #1
 800aa6c:	d103      	bne.n	800aa76 <_raise_r+0x42>
 800aa6e:	2316      	movs	r3, #22
 800aa70:	6003      	str	r3, [r0, #0]
 800aa72:	2001      	movs	r0, #1
 800aa74:	e7e7      	b.n	800aa46 <_raise_r+0x12>
 800aa76:	2100      	movs	r1, #0
 800aa78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4798      	blx	r3
 800aa80:	2000      	movs	r0, #0
 800aa82:	e7e0      	b.n	800aa46 <_raise_r+0x12>

0800aa84 <raise>:
 800aa84:	4b02      	ldr	r3, [pc, #8]	@ (800aa90 <raise+0xc>)
 800aa86:	4601      	mov	r1, r0
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	f7ff bfd3 	b.w	800aa34 <_raise_r>
 800aa8e:	bf00      	nop
 800aa90:	20000030 	.word	0x20000030

0800aa94 <_kill_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	@ (800aab4 <_kill_r+0x20>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	f7f8 f947 	bl	8002d34 <_kill>
 800aaa6:	1c43      	adds	r3, r0, #1
 800aaa8:	d102      	bne.n	800aab0 <_kill_r+0x1c>
 800aaaa:	682b      	ldr	r3, [r5, #0]
 800aaac:	b103      	cbz	r3, 800aab0 <_kill_r+0x1c>
 800aaae:	6023      	str	r3, [r4, #0]
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
 800aab2:	bf00      	nop
 800aab4:	20000c34 	.word	0x20000c34

0800aab8 <_getpid_r>:
 800aab8:	f7f8 b934 	b.w	8002d24 <_getpid>

0800aabc <__swhatbuf_r>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	460c      	mov	r4, r1
 800aac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac4:	2900      	cmp	r1, #0
 800aac6:	b096      	sub	sp, #88	@ 0x58
 800aac8:	4615      	mov	r5, r2
 800aaca:	461e      	mov	r6, r3
 800aacc:	da0d      	bge.n	800aaea <__swhatbuf_r+0x2e>
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aad4:	f04f 0100 	mov.w	r1, #0
 800aad8:	bf14      	ite	ne
 800aada:	2340      	movne	r3, #64	@ 0x40
 800aadc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aae0:	2000      	movs	r0, #0
 800aae2:	6031      	str	r1, [r6, #0]
 800aae4:	602b      	str	r3, [r5, #0]
 800aae6:	b016      	add	sp, #88	@ 0x58
 800aae8:	bd70      	pop	{r4, r5, r6, pc}
 800aaea:	466a      	mov	r2, sp
 800aaec:	f000 f848 	bl	800ab80 <_fstat_r>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	dbec      	blt.n	800aace <__swhatbuf_r+0x12>
 800aaf4:	9901      	ldr	r1, [sp, #4]
 800aaf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aafa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aafe:	4259      	negs	r1, r3
 800ab00:	4159      	adcs	r1, r3
 800ab02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab06:	e7eb      	b.n	800aae0 <__swhatbuf_r+0x24>

0800ab08 <__smakebuf_r>:
 800ab08:	898b      	ldrh	r3, [r1, #12]
 800ab0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab0c:	079d      	lsls	r5, r3, #30
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460c      	mov	r4, r1
 800ab12:	d507      	bpl.n	800ab24 <__smakebuf_r+0x1c>
 800ab14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	6123      	str	r3, [r4, #16]
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	6163      	str	r3, [r4, #20]
 800ab20:	b003      	add	sp, #12
 800ab22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab24:	ab01      	add	r3, sp, #4
 800ab26:	466a      	mov	r2, sp
 800ab28:	f7ff ffc8 	bl	800aabc <__swhatbuf_r>
 800ab2c:	9f00      	ldr	r7, [sp, #0]
 800ab2e:	4605      	mov	r5, r0
 800ab30:	4639      	mov	r1, r7
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7fe fec6 	bl	80098c4 <_malloc_r>
 800ab38:	b948      	cbnz	r0, 800ab4e <__smakebuf_r+0x46>
 800ab3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab3e:	059a      	lsls	r2, r3, #22
 800ab40:	d4ee      	bmi.n	800ab20 <__smakebuf_r+0x18>
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	f043 0302 	orr.w	r3, r3, #2
 800ab4a:	81a3      	strh	r3, [r4, #12]
 800ab4c:	e7e2      	b.n	800ab14 <__smakebuf_r+0xc>
 800ab4e:	89a3      	ldrh	r3, [r4, #12]
 800ab50:	6020      	str	r0, [r4, #0]
 800ab52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab56:	81a3      	strh	r3, [r4, #12]
 800ab58:	9b01      	ldr	r3, [sp, #4]
 800ab5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab5e:	b15b      	cbz	r3, 800ab78 <__smakebuf_r+0x70>
 800ab60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab64:	4630      	mov	r0, r6
 800ab66:	f000 f81d 	bl	800aba4 <_isatty_r>
 800ab6a:	b128      	cbz	r0, 800ab78 <__smakebuf_r+0x70>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f023 0303 	bic.w	r3, r3, #3
 800ab72:	f043 0301 	orr.w	r3, r3, #1
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	431d      	orrs	r5, r3
 800ab7c:	81a5      	strh	r5, [r4, #12]
 800ab7e:	e7cf      	b.n	800ab20 <__smakebuf_r+0x18>

0800ab80 <_fstat_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d07      	ldr	r5, [pc, #28]	@ (800aba0 <_fstat_r+0x20>)
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	f7f8 f931 	bl	8002df4 <_fstat>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d102      	bne.n	800ab9c <_fstat_r+0x1c>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	b103      	cbz	r3, 800ab9c <_fstat_r+0x1c>
 800ab9a:	6023      	str	r3, [r4, #0]
 800ab9c:	bd38      	pop	{r3, r4, r5, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000c34 	.word	0x20000c34

0800aba4 <_isatty_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d06      	ldr	r5, [pc, #24]	@ (800abc0 <_isatty_r+0x1c>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	602b      	str	r3, [r5, #0]
 800abb0:	f7f8 f930 	bl	8002e14 <_isatty>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_isatty_r+0x1a>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_isatty_r+0x1a>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	20000c34 	.word	0x20000c34

0800abc4 <_init>:
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	bf00      	nop
 800abc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abca:	bc08      	pop	{r3}
 800abcc:	469e      	mov	lr, r3
 800abce:	4770      	bx	lr

0800abd0 <_fini>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	bf00      	nop
 800abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd6:	bc08      	pop	{r3}
 800abd8:	469e      	mov	lr, r3
 800abda:	4770      	bx	lr
