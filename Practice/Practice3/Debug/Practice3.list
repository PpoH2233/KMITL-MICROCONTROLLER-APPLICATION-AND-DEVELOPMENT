
Practice3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006270  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08006470  08006470  00007470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c4  080064c4  000081a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080064c4  080064c4  000074c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064cc  080064cc  000081a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064cc  080064cc  000074cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064d0  080064d0  000074d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080064d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08006534  00008060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  080065d4  00008100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000884  200001a0  08006674  000081a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a24  08006674  00008a24  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000081a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017994  00000000  00000000  000081ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000332c  00000000  00000000  0001fb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001358  00000000  00000000  00022e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f01  00000000  00000000  000241e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a4cc  00000000  00000000  000250e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017402  00000000  00000000  0004f5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010424b  00000000  00000000  000669b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016ac02  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005624  00000000  00000000  0016ac48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  0017026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08006458 	.word	0x08006458

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08006458 	.word	0x08006458

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_ETH_Init+0x84>)
 8000622:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <MX_ETH_Init+0x88>)
 8000624:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <MX_ETH_Init+0x8c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800062c:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <MX_ETH_Init+0x8c>)
 800062e:	2280      	movs	r2, #128	@ 0x80
 8000630:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <MX_ETH_Init+0x8c>)
 8000634:	22e1      	movs	r2, #225	@ 0xe1
 8000636:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_ETH_Init+0x8c>)
 800063a:	2200      	movs	r2, #0
 800063c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800063e:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <MX_ETH_Init+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_ETH_Init+0x8c>)
 8000646:	2200      	movs	r2, #0
 8000648:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_ETH_Init+0x84>)
 800064c:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <MX_ETH_Init+0x8c>)
 800064e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_ETH_Init+0x84>)
 8000652:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000656:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_ETH_Init+0x84>)
 800065a:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <MX_ETH_Init+0x90>)
 800065c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_ETH_Init+0x84>)
 8000660:	4a13      	ldr	r2, [pc, #76]	@ (80006b0 <MX_ETH_Init+0x94>)
 8000662:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_ETH_Init+0x84>)
 8000666:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800066a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <MX_ETH_Init+0x84>)
 800066e:	f001 f84d 	bl	800170c <HAL_ETH_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000678:	f000 fa2e 	bl	8000ad8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800067c:	2238      	movs	r2, #56	@ 0x38
 800067e:	2100      	movs	r1, #0
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <MX_ETH_Init+0x98>)
 8000682:	f005 fa6b 	bl	8005b5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_ETH_Init+0x98>)
 8000688:	2221      	movs	r2, #33	@ 0x21
 800068a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_ETH_Init+0x98>)
 800068e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000692:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <MX_ETH_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001f4 	.word	0x200001f4
 80006a4:	40028000 	.word	0x40028000
 80006a8:	200002a4 	.word	0x200002a4
 80006ac:	20000100 	.word	0x20000100
 80006b0:	20000060 	.word	0x20000060
 80006b4:	200001bc 	.word	0x200001bc

080006b8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	@ 0x38
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a4e      	ldr	r2, [pc, #312]	@ (8000810 <HAL_ETH_MspInit+0x158>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	f040 8096 	bne.w	8000808 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e0:	4a4c      	ldr	r2, [pc, #304]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006f0:	623b      	str	r3, [r7, #32]
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	4b47      	ldr	r3, [pc, #284]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	4a46      	ldr	r2, [pc, #280]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000700:	4b44      	ldr	r3, [pc, #272]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	4b41      	ldr	r3, [pc, #260]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a40      	ldr	r2, [pc, #256]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000712:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
 8000718:	4b3e      	ldr	r3, [pc, #248]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b3b      	ldr	r3, [pc, #236]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000728:	4a3a      	ldr	r2, [pc, #232]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000730:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a34      	ldr	r2, [pc, #208]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
 8000748:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000758:	4a2e      	ldr	r2, [pc, #184]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000760:	4b2c      	ldr	r3, [pc, #176]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800076c:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000770:	4a28      	ldr	r2, [pc, #160]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000776:	6313      	str	r3, [r2, #48]	@ 0x30
 8000778:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000784:	2332      	movs	r3, #50	@ 0x32
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000794:	230b      	movs	r3, #11
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	481e      	ldr	r0, [pc, #120]	@ (8000818 <HAL_ETH_MspInit+0x160>)
 80007a0:	f001 fada 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007a4:	2386      	movs	r3, #134	@ 0x86
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b4:	230b      	movs	r3, #11
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007bc:	4619      	mov	r1, r3
 80007be:	4817      	ldr	r0, [pc, #92]	@ (800081c <HAL_ETH_MspInit+0x164>)
 80007c0:	f001 faca 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	4619      	mov	r1, r3
 80007e0:	480f      	ldr	r0, [pc, #60]	@ (8000820 <HAL_ETH_MspInit+0x168>)
 80007e2:	f001 fab9 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007e6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000800:	4619      	mov	r1, r3
 8000802:	4808      	ldr	r0, [pc, #32]	@ (8000824 <HAL_ETH_MspInit+0x16c>)
 8000804:	f001 faa8 	bl	8001d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000808:	bf00      	nop
 800080a:	3738      	adds	r7, #56	@ 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40028000 	.word	0x40028000
 8000814:	40023800 	.word	0x40023800
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020400 	.word	0x40020400
 8000824:	40021800 	.word	0x40021800

08000828 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	@ 0x38
 800082c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b57      	ldr	r3, [pc, #348]	@ (800099c <MX_GPIO_Init+0x174>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a56      	ldr	r2, [pc, #344]	@ (800099c <MX_GPIO_Init+0x174>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b54      	ldr	r3, [pc, #336]	@ (800099c <MX_GPIO_Init+0x174>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	623b      	str	r3, [r7, #32]
 8000854:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b51      	ldr	r3, [pc, #324]	@ (800099c <MX_GPIO_Init+0x174>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a50      	ldr	r2, [pc, #320]	@ (800099c <MX_GPIO_Init+0x174>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b4e      	ldr	r3, [pc, #312]	@ (800099c <MX_GPIO_Init+0x174>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <MX_GPIO_Init+0x174>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a4a      	ldr	r2, [pc, #296]	@ (800099c <MX_GPIO_Init+0x174>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b48      	ldr	r3, [pc, #288]	@ (800099c <MX_GPIO_Init+0x174>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b45      	ldr	r3, [pc, #276]	@ (800099c <MX_GPIO_Init+0x174>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a44      	ldr	r2, [pc, #272]	@ (800099c <MX_GPIO_Init+0x174>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b42      	ldr	r3, [pc, #264]	@ (800099c <MX_GPIO_Init+0x174>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b3f      	ldr	r3, [pc, #252]	@ (800099c <MX_GPIO_Init+0x174>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a3e      	ldr	r2, [pc, #248]	@ (800099c <MX_GPIO_Init+0x174>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <MX_GPIO_Init+0x174>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	4b39      	ldr	r3, [pc, #228]	@ (800099c <MX_GPIO_Init+0x174>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a38      	ldr	r2, [pc, #224]	@ (800099c <MX_GPIO_Init+0x174>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b36      	ldr	r3, [pc, #216]	@ (800099c <MX_GPIO_Init+0x174>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b33      	ldr	r3, [pc, #204]	@ (800099c <MX_GPIO_Init+0x174>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a32      	ldr	r2, [pc, #200]	@ (800099c <MX_GPIO_Init+0x174>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b30      	ldr	r3, [pc, #192]	@ (800099c <MX_GPIO_Init+0x174>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <MX_GPIO_Init+0x174>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a2c      	ldr	r2, [pc, #176]	@ (800099c <MX_GPIO_Init+0x174>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <MX_GPIO_Init+0x174>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000904:	4826      	ldr	r0, [pc, #152]	@ (80009a0 <MX_GPIO_Init+0x178>)
 8000906:	f001 fbd3 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	4825      	ldr	r0, [pc, #148]	@ (80009a4 <MX_GPIO_Init+0x17c>)
 8000910:	f001 fbce 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000914:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	481c      	ldr	r0, [pc, #112]	@ (80009a0 <MX_GPIO_Init+0x178>)
 800092e:	f001 fa13 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000932:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000938:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	4619      	mov	r1, r3
 8000948:	4817      	ldr	r0, [pc, #92]	@ (80009a8 <MX_GPIO_Init+0x180>)
 800094a:	f001 fa05 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <MX_GPIO_Init+0x17c>)
 8000966:	f001 f9f7 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <MX_GPIO_Init+0x17c>)
 800097e:	f001 f9eb 	bl	8001d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2101      	movs	r1, #1
 8000986:	2028      	movs	r0, #40	@ 0x28
 8000988:	f000 fe89 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098c:	2028      	movs	r0, #40	@ 0x28
 800098e:	f000 fea2 	bl	80016d6 <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3738      	adds	r7, #56	@ 0x38
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40021800 	.word	0x40021800
 80009a8:	40021400 	.word	0x40021400

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fd19 	bl	80013e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f81e 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f7ff ff36 	bl	8000828 <MX_GPIO_Init>
  MX_ETH_Init();
 80009bc:	f7ff fe2e 	bl	800061c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c0:	f000 fbb0 	bl	8001124 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009c4:	f000 fc3e 	bl	8001244 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80009c8:	f000 f9b4 	bl	8000d34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009cc:	f000 fa5e 	bl	8000e8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80009d0:	4806      	ldr	r0, [pc, #24]	@ (80009ec <main+0x40>)
 80009d2:	f002 fea7 	bl	8003724 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80009d6:	2108      	movs	r1, #8
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <main+0x40>)
 80009da:	f002 ffab 	bl	8003934 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009de:	2100      	movs	r1, #0
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <main+0x44>)
 80009e2:	f002 ffa7 	bl	8003934 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e6:	bf00      	nop
 80009e8:	e7fd      	b.n	80009e6 <main+0x3a>
 80009ea:	bf00      	nop
 80009ec:	200002fc 	.word	0x200002fc
 80009f0:	200002b0 	.word	0x200002b0

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	@ 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f005 f8aa 	bl	8005b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a18:	f001 fcd0 	bl	80023bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a3c:	4a25      	ldr	r2, [pc, #148]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a54:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a68:	2360      	movs	r3, #96	@ 0x60
 8000a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fcfd 	bl	800247c <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a88:	f000 f826 	bl	8000ad8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a8c:	f001 fca6 	bl	80023dc <HAL_PWREx_EnableOverDrive>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a96:	f000 f81f 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 ff8e 	bl	80029d8 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ac2:	f000 f809 	bl	8000ad8 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	@ 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <Error_Handler+0x8>

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_MspInit+0x44>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f000 fdb4 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 fc6d 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b92:	f002 ffc9 	bl	8003b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200002b0 	.word	0x200002b0

08000ba0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000ba6:	f002 ffbf 	bl	8003b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200002b0 	.word	0x200002b0

08000bb4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <TIM1_CC_IRQHandler+0x10>)
 8000bba:	f002 ffb5 	bl	8003b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200002b0 	.word	0x200002b0

08000bc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09a      	sub	sp, #104	@ 0x68
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bce:	4814      	ldr	r0, [pc, #80]	@ (8000c20 <TIM2_IRQHandler+0x58>)
 8000bd0:	f002 ffaa 	bl	8003b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  char buf[100];
  sprintf(buf, "%d\r\n", count);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <TIM2_IRQHandler+0x5c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4913      	ldr	r1, [pc, #76]	@ (8000c28 <TIM2_IRQHandler+0x60>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 ff9b 	bl	8005b18 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 100);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fb2b 	bl	8000240 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	1d39      	adds	r1, r7, #4
 8000bf0:	2364      	movs	r3, #100	@ 0x64
 8000bf2:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <TIM2_IRQHandler+0x64>)
 8000bf4:	f003 fffe 	bl	8004bf4 <HAL_UART_Transmit>

  if (count == 1030){
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <TIM2_IRQHandler+0x5c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f240 4206 	movw	r2, #1030	@ 0x406
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d104      	bne.n	8000c0e <TIM2_IRQHandler+0x46>
	  count = 1002;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <TIM2_IRQHandler+0x5c>)
 8000c06:	f240 32ea 	movw	r2, #1002	@ 0x3ea
 8000c0a:	601a      	str	r2, [r3, #0]
	  count += 2;
  }


  /* USER CODE END TIM2_IRQn 1 */
}
 8000c0c:	e004      	b.n	8000c18 <TIM2_IRQHandler+0x50>
	  count += 2;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <TIM2_IRQHandler+0x5c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3302      	adds	r3, #2
 8000c14:	4a03      	ldr	r2, [pc, #12]	@ (8000c24 <TIM2_IRQHandler+0x5c>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	3768      	adds	r7, #104	@ 0x68
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200002fc 	.word	0x200002fc
 8000c24:	20000000 	.word	0x20000000
 8000c28:	08006470 	.word	0x08006470
 8000c2c:	20000348 	.word	0x20000348

08000c30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c38:	f001 fa54 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  HAL_TIM_Base_Stop_IT(&htim2);
 8000c3c:	4817      	ldr	r0, [pc, #92]	@ (8000c9c <EXTI15_10_IRQHandler+0x6c>)
 8000c3e:	f002 fde9 	bl	8003814 <HAL_TIM_Base_Stop_IT>

  htim1.Instance -> CCR1 = 10000-1 ;
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <EXTI15_10_IRQHandler+0x70>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_Delay(1000);
 8000c4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c50:	f000 fc26 	bl	80014a0 <HAL_Delay>
  htim1.Instance -> CCR1 = 7500-1 ;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <EXTI15_10_IRQHandler+0x70>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 8000c5c:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_Delay(2000);
 8000c5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c62:	f000 fc1d 	bl	80014a0 <HAL_Delay>
  htim1.Instance -> CCR1 = 5000-1 ;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <EXTI15_10_IRQHandler+0x70>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c6e:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_Delay(3000);
 8000c70:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c74:	f000 fc14 	bl	80014a0 <HAL_Delay>
  htim1.Instance -> CCR1 = 2500-1 ;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <EXTI15_10_IRQHandler+0x70>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000c80:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_Delay(4000);
 8000c82:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000c86:	f000 fc0b 	bl	80014a0 <HAL_Delay>
  htim1.Instance -> CCR1 = 0 ;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <EXTI15_10_IRQHandler+0x70>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	635a      	str	r2, [r3, #52]	@ 0x34

//  pwm = (GPIOB->IDR & GPIO_PIN_10) >>10;

  HAL_TIM_Base_Start_IT(&htim2);
 8000c92:	4802      	ldr	r0, [pc, #8]	@ (8000c9c <EXTI15_10_IRQHandler+0x6c>)
 8000c94:	f002 fd46 	bl	8003724 <HAL_TIM_Base_Start_IT>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200002fc 	.word	0x200002fc
 8000ca0:	200002b0 	.word	0x200002b0

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d207      	bcs.n	8000ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd4:	f004 ff4a 	bl	8005b6c <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20080000 	.word	0x20080000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	200002ac 	.word	0x200002ac
 8000d0c:	20000a28 	.word	0x20000a28

08000d10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09a      	sub	sp, #104	@ 0x68
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	222c      	movs	r2, #44	@ 0x2c
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f004 fef4 	bl	8005b5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d74:	4b43      	ldr	r3, [pc, #268]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000d76:	4a44      	ldr	r2, [pc, #272]	@ (8000e88 <MX_TIM1_Init+0x154>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000d7a:	4b42      	ldr	r3, [pc, #264]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000d7c:	22d7      	movs	r2, #215	@ 0xd7
 8000d7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b40      	ldr	r3, [pc, #256]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000d86:	4b3f      	ldr	r3, [pc, #252]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000d88:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d94:	4b3b      	ldr	r3, [pc, #236]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da0:	4838      	ldr	r0, [pc, #224]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000da2:	f002 fc67 	bl	8003674 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f7ff fe94 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4831      	ldr	r0, [pc, #196]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000dbe:	f003 f8e7 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000dc8:	f7ff fe86 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dcc:	482d      	ldr	r0, [pc, #180]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000dce:	f002 fd50 	bl	8003872 <HAL_TIM_PWM_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000dd8:	f7ff fe7e 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4825      	ldr	r0, [pc, #148]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000df0:	f003 fd88 	bl	8004904 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000dfa:	f7ff fe6d 	bl	8000ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dfe:	2360      	movs	r3, #96	@ 0x60
 8000e00:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e06:	2300      	movs	r3, #0
 8000e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4818      	ldr	r0, [pc, #96]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000e24:	f002 ffa0 	bl	8003d68 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e2e:	f7ff fe53 	bl	8000ad8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000e68:	f003 fdda 	bl	8004a20 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e72:	f7ff fe31 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e76:	4803      	ldr	r0, [pc, #12]	@ (8000e84 <MX_TIM1_Init+0x150>)
 8000e78:	f000 f8f6 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000e7c:	bf00      	nop
 8000e7e:	3768      	adds	r7, #104	@ 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200002b0 	.word	0x200002b0
 8000e88:	40010000 	.word	0x40010000

08000e8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	@ 0x38
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	615a      	str	r2, [r3, #20]
 8000ebc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000ec0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000ec8:	226b      	movs	r2, #107	@ 0x6b
 8000eca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8000ed2:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000ed4:	4a28      	ldr	r2, [pc, #160]	@ (8000f78 <MX_TIM2_Init+0xec>)
 8000ed6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee4:	4823      	ldr	r0, [pc, #140]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000ee6:	f002 fbc5 	bl	8003674 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ef0:	f7ff fdf2 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efe:	4619      	mov	r1, r3
 8000f00:	481c      	ldr	r0, [pc, #112]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000f02:	f003 f845 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f0c:	f7ff fde4 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f10:	4818      	ldr	r0, [pc, #96]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000f12:	f002 fcae 	bl	8003872 <HAL_TIM_PWM_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f1c:	f7ff fddc 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4811      	ldr	r0, [pc, #68]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000f30:	f003 fce8 	bl	8004904 <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f3a:	f7ff fdcd 	bl	8000ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3e:	2360      	movs	r3, #96	@ 0x60
 8000f40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000000-1;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <MX_TIM2_Init+0xec>)
 8000f44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2208      	movs	r2, #8
 8000f52:	4619      	mov	r1, r3
 8000f54:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000f56:	f002 ff07 	bl	8003d68 <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f60:	f7ff fdba 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <MX_TIM2_Init+0xe8>)
 8000f66:	f000 f87f 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	@ 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200002fc 	.word	0x200002fc
 8000f78:	000f423f 	.word	0x000f423f

08000f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a30      	ldr	r2, [pc, #192]	@ (800105c <HAL_TIM_Base_MspInit+0xe0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d124      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9e:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2019      	movs	r0, #25
 8000fbc:	f000 fb6f 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fc0:	2019      	movs	r0, #25
 8000fc2:	f000 fb88 	bl	80016d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	201a      	movs	r0, #26
 8000fcc:	f000 fb67 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fd0:	201a      	movs	r0, #26
 8000fd2:	f000 fb80 	bl	80016d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2101      	movs	r1, #1
 8000fda:	201b      	movs	r0, #27
 8000fdc:	f000 fb5f 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fe0:	201b      	movs	r0, #27
 8000fe2:	f000 fb78 	bl	80016d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fe6:	e034      	b.n	8001052 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff0:	d12f      	bne.n	8001052 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffe:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_TIM_Base_MspInit+0xe4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001022:	2320      	movs	r3, #32
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4809      	ldr	r0, [pc, #36]	@ (8001064 <HAL_TIM_Base_MspInit+0xe8>)
 800103e:	f000 fe8b 	bl	8001d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2102      	movs	r1, #2
 8001046:	201c      	movs	r0, #28
 8001048:	f000 fb29 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800104c:	201c      	movs	r0, #28
 800104e:	f000 fb42 	bl	80016d6 <HAL_NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	@ 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40010000 	.word	0x40010000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000

08001068 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a23      	ldr	r2, [pc, #140]	@ (8001114 <HAL_TIM_MspPostInit+0xac>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d11d      	bne.n	80010c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <HAL_TIM_MspPostInit+0xb0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a22      	ldr	r2, [pc, #136]	@ (8001118 <HAL_TIM_MspPostInit+0xb0>)
 8001090:	f043 0310 	orr.w	r3, r3, #16
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <HAL_TIM_MspPostInit+0xb0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4817      	ldr	r0, [pc, #92]	@ (800111c <HAL_TIM_MspPostInit+0xb4>)
 80010c0:	f000 fe4a 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010c4:	e021      	b.n	800110a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ce:	d11c      	bne.n	800110a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HAL_TIM_MspPostInit+0xb0>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d4:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <HAL_TIM_MspPostInit+0xb0>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	6313      	str	r3, [r2, #48]	@ 0x30
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <HAL_TIM_MspPostInit+0xb0>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010fa:	2301      	movs	r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4806      	ldr	r0, [pc, #24]	@ (8001120 <HAL_TIM_MspPostInit+0xb8>)
 8001106:	f000 fe27 	bl	8001d58 <HAL_GPIO_Init>
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40010000 	.word	0x40010000
 8001118:	40023800 	.word	0x40023800
 800111c:	40021000 	.word	0x40021000
 8001120:	40020400 	.word	0x40020400

08001124 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_USART3_UART_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <MX_USART3_UART_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_USART3_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_USART3_UART_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_USART3_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001168:	f003 fcf6 	bl	8004b58 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001172:	f7ff fcb1 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000348 	.word	0x20000348
 8001180:	40004800 	.word	0x40004800

08001184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0ae      	sub	sp, #184	@ 0xb8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2290      	movs	r2, #144	@ 0x90
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fcd9 	bl	8005b5c <memset>
  if(uartHandle->Instance==USART3)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a22      	ldr	r2, [pc, #136]	@ (8001238 <HAL_UART_MspInit+0xb4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d13c      	bne.n	800122e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fe2e 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ce:	f7ff fc83 	bl	8000ad8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <HAL_UART_MspInit+0xb8>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a19      	ldr	r2, [pc, #100]	@ (800123c <HAL_UART_MspInit+0xb8>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <HAL_UART_MspInit+0xb8>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_UART_MspInit+0xb8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a13      	ldr	r2, [pc, #76]	@ (800123c <HAL_UART_MspInit+0xb8>)
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_UART_MspInit+0xb8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001202:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121c:	2307      	movs	r3, #7
 800121e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001222:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <HAL_UART_MspInit+0xbc>)
 800122a:	f000 fd95 	bl	8001d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	37b8      	adds	r7, #184	@ 0xb8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40004800 	.word	0x40004800
 800123c:	40023800 	.word	0x40023800
 8001240:	40020c00 	.word	0x40020c00

08001244 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800124e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2206      	movs	r2, #6
 8001254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2202      	movs	r2, #2
 800125a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	2202      	movs	r2, #2
 8001266:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126a:	2201      	movs	r2, #1
 800126c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127c:	2201      	movs	r2, #1
 800127e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001288:	f000 ff4f 	bl	800212a <HAL_PCD_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001292:	f7ff fc21 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200003d0 	.word	0x200003d0

080012a0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0ae      	sub	sp, #184	@ 0xb8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2290      	movs	r2, #144	@ 0x90
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fc4b 	bl	8005b5c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ce:	d159      	bne.n	8001384 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012d4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fd9f 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012ec:	f7ff fbf4 	bl	8000ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b26      	ldr	r3, [pc, #152]	@ (800138c <HAL_PCD_MspInit+0xec>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	4a25      	ldr	r2, [pc, #148]	@ (800138c <HAL_PCD_MspInit+0xec>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_PCD_MspInit+0xec>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001308:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800130c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001322:	230a      	movs	r3, #10
 8001324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800132c:	4619      	mov	r1, r3
 800132e:	4818      	ldr	r0, [pc, #96]	@ (8001390 <HAL_PCD_MspInit+0xf0>)
 8001330:	f000 fd12 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <HAL_PCD_MspInit+0xf0>)
 8001350:	f000 fd02 	bl	8001d58 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001354:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <HAL_PCD_MspInit+0xec>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001358:	4a0c      	ldr	r2, [pc, #48]	@ (800138c <HAL_PCD_MspInit+0xec>)
 800135a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_PCD_MspInit+0xec>)
 8001362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_PCD_MspInit+0xec>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001370:	4a06      	ldr	r2, [pc, #24]	@ (800138c <HAL_PCD_MspInit+0xec>)
 8001372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001376:	6453      	str	r3, [r2, #68]	@ 0x44
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <HAL_PCD_MspInit+0xec>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	37b8      	adds	r7, #184	@ 0xb8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000

08001394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001398:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800139a:	490e      	ldr	r1, [pc, #56]	@ (80013d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800139c:	4a0e      	ldr	r2, [pc, #56]	@ (80013d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b0:	4c0b      	ldr	r4, [pc, #44]	@ (80013e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013be:	f7ff fca7 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f004 fbd9 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c6:	f7ff faf1 	bl	80009ac <main>
  bx  lr    
 80013ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013d8:	080064d4 	.word	0x080064d4
  ldr r2, =_sbss
 80013dc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80013e0:	20000a24 	.word	0x20000a24

080013e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC_IRQHandler>

080013e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ea:	2003      	movs	r0, #3
 80013ec:	f000 f94c 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 f805 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f6:	f7ff fb75 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f967 	bl	80016f2 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800143c:	f000 f92f 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	@ (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000004 	.word	0x20000004
 8001458:	2000000c 	.word	0x2000000c
 800145c:	20000008 	.word	0x20000008

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000000c 	.word	0x2000000c
 8001484:	200008d8 	.word	0x200008d8

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200008d8 	.word	0x200008d8

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000000c 	.word	0x2000000c

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <__NVIC_SetPriorityGrouping+0x40>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	4313      	orrs	r3, r2
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x40>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00
 800152c:	05fa0000 	.word	0x05fa0000

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	@ (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06a      	b.n	80017f4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001724:	2b00      	cmp	r3, #0
 8001726:	d106      	bne.n	8001736 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2223      	movs	r2, #35	@ 0x23
 800172c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7fe ffc1 	bl	80006b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <HAL_ETH_Init+0xf0>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	4a30      	ldr	r2, [pc, #192]	@ (80017fc <HAL_ETH_Init+0xf0>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001740:	6453      	str	r3, [r2, #68]	@ 0x44
 8001742:	4b2e      	ldr	r3, [pc, #184]	@ (80017fc <HAL_ETH_Init+0xf0>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800174e:	4b2c      	ldr	r3, [pc, #176]	@ (8001800 <HAL_ETH_Init+0xf4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a2b      	ldr	r2, [pc, #172]	@ (8001800 <HAL_ETH_Init+0xf4>)
 8001754:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001758:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <HAL_ETH_Init+0xf4>)
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4927      	ldr	r1, [pc, #156]	@ (8001800 <HAL_ETH_Init+0xf4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <HAL_ETH_Init+0xf4>)
 800176a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001782:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001784:	f7ff fe80 	bl	8001488 <HAL_GetTick>
 8001788:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800178a:	e011      	b.n	80017b0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800178c:	f7ff fe7c 	bl	8001488 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800179a:	d909      	bls.n	80017b0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	22e0      	movs	r2, #224	@ 0xe0
 80017a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e021      	b.n	80017f4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e4      	bne.n	800178c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f958 	bl	8001a78 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f9ff 	bl	8001bcc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa55 	bl	8001c7e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	461a      	mov	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f9bd 	bl	8001b5c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2210      	movs	r2, #16
 80017ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800

08001804 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4b51      	ldr	r3, [pc, #324]	@ (8001960 <ETH_SetMACConfig+0x15c>)
 800181a:	4013      	ands	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	7c1b      	ldrb	r3, [r3, #16]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <ETH_SetMACConfig+0x28>
 8001826:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800182a:	e000      	b.n	800182e <ETH_SetMACConfig+0x2a>
 800182c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	7c5b      	ldrb	r3, [r3, #17]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <ETH_SetMACConfig+0x38>
 8001836:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800183a:	e000      	b.n	800183e <ETH_SetMACConfig+0x3a>
 800183c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800183e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001844:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	7fdb      	ldrb	r3, [r3, #31]
 800184a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800184c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001852:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	7f92      	ldrb	r2, [r2, #30]
 8001858:	2a00      	cmp	r2, #0
 800185a:	d102      	bne.n	8001862 <ETH_SetMACConfig+0x5e>
 800185c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001860:	e000      	b.n	8001864 <ETH_SetMACConfig+0x60>
 8001862:	2200      	movs	r2, #0
                        macconf->Speed |
 8001864:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	7f1b      	ldrb	r3, [r3, #28]
 800186a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800186c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001872:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	791b      	ldrb	r3, [r3, #4]
 8001878:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800187a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001882:	2a00      	cmp	r2, #0
 8001884:	d102      	bne.n	800188c <ETH_SetMACConfig+0x88>
 8001886:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188a:	e000      	b.n	800188e <ETH_SetMACConfig+0x8a>
 800188c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800188e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	7bdb      	ldrb	r3, [r3, #15]
 8001894:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001896:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800189c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80018a4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018a6:	4313      	orrs	r3, r2
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff fdee 	bl	80014a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80018da:	4013      	ands	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d101      	bne.n	80018f2 <ETH_SetMACConfig+0xee>
 80018ee:	2280      	movs	r2, #128	@ 0x80
 80018f0:	e000      	b.n	80018f4 <ETH_SetMACConfig+0xf0>
 80018f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018f4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001902:	2a01      	cmp	r2, #1
 8001904:	d101      	bne.n	800190a <ETH_SetMACConfig+0x106>
 8001906:	2208      	movs	r2, #8
 8001908:	e000      	b.n	800190c <ETH_SetMACConfig+0x108>
 800190a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800190c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001914:	2a01      	cmp	r2, #1
 8001916:	d101      	bne.n	800191c <ETH_SetMACConfig+0x118>
 8001918:	2204      	movs	r2, #4
 800191a:	e000      	b.n	800191e <ETH_SetMACConfig+0x11a>
 800191c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800191e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001926:	2a01      	cmp	r2, #1
 8001928:	d101      	bne.n	800192e <ETH_SetMACConfig+0x12a>
 800192a:	2202      	movs	r2, #2
 800192c:	e000      	b.n	8001930 <ETH_SetMACConfig+0x12c>
 800192e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001930:	4313      	orrs	r3, r2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff fda9 	bl	80014a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	619a      	str	r2, [r3, #24]
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	ff20810f 	.word	0xff20810f

08001964 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a74 <ETH_SetDMAConfig+0x110>)
 800197e:	4013      	ands	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	7b1b      	ldrb	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <ETH_SetDMAConfig+0x2c>
 800198a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800198e:	e000      	b.n	8001992 <ETH_SetDMAConfig+0x2e>
 8001990:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7b5b      	ldrb	r3, [r3, #13]
 8001996:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001998:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	7f52      	ldrb	r2, [r2, #29]
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d102      	bne.n	80019a8 <ETH_SetDMAConfig+0x44>
 80019a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80019a6:	e000      	b.n	80019aa <ETH_SetDMAConfig+0x46>
 80019a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80019aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	7b9b      	ldrb	r3, [r3, #14]
 80019b0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80019b2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80019b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	7f1b      	ldrb	r3, [r3, #28]
 80019be:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80019c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	7f9b      	ldrb	r3, [r3, #30]
 80019c6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80019c8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019d6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019d8:	4313      	orrs	r3, r2
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019e8:	461a      	mov	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff fd50 	bl	80014a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a18:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a1e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a24:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a2c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a2e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a34:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a36:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a3c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a4a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff fd21 	bl	80014a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	f8de3f23 	.word	0xf8de3f23

08001a78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b0a6      	sub	sp, #152	@ 0x98
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ada:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001aec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fe86 	bl	8001804 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b2c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b32:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b38:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff08 	bl	8001964 <ETH_SetDMAConfig>
}
 8001b54:	bf00      	nop
 8001b56:	3798      	adds	r7, #152	@ 0x98
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3305      	adds	r3, #5
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	3204      	adds	r2, #4
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <ETH_MACAddressConfig+0x68>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3303      	adds	r3, #3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	061a      	lsls	r2, r3, #24
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3302      	adds	r3, #2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	041b      	lsls	r3, r3, #16
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <ETH_MACAddressConfig+0x6c>)
 8001bae:	4413      	add	r3, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	6013      	str	r3, [r2, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40028040 	.word	0x40028040
 8001bc8:	40028044 	.word	0x40028044

08001bcc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e03e      	b.n	8001c58 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68d9      	ldr	r1, [r3, #12]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	3206      	adds	r2, #6
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d80c      	bhi.n	8001c3c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68d9      	ldr	r1, [r3, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	461a      	mov	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	e004      	b.n	8001c46 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	461a      	mov	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d9bd      	bls.n	8001bda <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c70:	611a      	str	r2, [r3, #16]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	e046      	b.n	8001d1a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6919      	ldr	r1, [r3, #16]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001cc8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001cd0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	3212      	adds	r2, #18
 8001ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d80c      	bhi.n	8001d0a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6919      	ldr	r1, [r3, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	e004      	b.n	8001d14 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d9b5      	bls.n	8001c8c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d4a:	60da      	str	r2, [r3, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e175      	b.n	8002064 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8164 	bne.w	800205e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d005      	beq.n	8001dae <HAL_GPIO_Init+0x56>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d130      	bne.n	8001e10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d017      	beq.n	8001e4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80be 	beq.w	800205e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	4b66      	ldr	r3, [pc, #408]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a65      	ldr	r2, [pc, #404]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b63      	ldr	r3, [pc, #396]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001efa:	4a61      	ldr	r2, [pc, #388]	@ (8002080 <HAL_GPIO_Init+0x328>)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a58      	ldr	r2, [pc, #352]	@ (8002084 <HAL_GPIO_Init+0x32c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d037      	beq.n	8001f96 <HAL_GPIO_Init+0x23e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <HAL_GPIO_Init+0x330>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d031      	beq.n	8001f92 <HAL_GPIO_Init+0x23a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a56      	ldr	r2, [pc, #344]	@ (800208c <HAL_GPIO_Init+0x334>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d02b      	beq.n	8001f8e <HAL_GPIO_Init+0x236>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a55      	ldr	r2, [pc, #340]	@ (8002090 <HAL_GPIO_Init+0x338>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d025      	beq.n	8001f8a <HAL_GPIO_Init+0x232>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a54      	ldr	r2, [pc, #336]	@ (8002094 <HAL_GPIO_Init+0x33c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <HAL_GPIO_Init+0x22e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a53      	ldr	r2, [pc, #332]	@ (8002098 <HAL_GPIO_Init+0x340>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d019      	beq.n	8001f82 <HAL_GPIO_Init+0x22a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a52      	ldr	r2, [pc, #328]	@ (800209c <HAL_GPIO_Init+0x344>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0x226>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a51      	ldr	r2, [pc, #324]	@ (80020a0 <HAL_GPIO_Init+0x348>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00d      	beq.n	8001f7a <HAL_GPIO_Init+0x222>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a50      	ldr	r2, [pc, #320]	@ (80020a4 <HAL_GPIO_Init+0x34c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <HAL_GPIO_Init+0x21e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4f      	ldr	r2, [pc, #316]	@ (80020a8 <HAL_GPIO_Init+0x350>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f6e:	2309      	movs	r3, #9
 8001f70:	e012      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f72:	230a      	movs	r3, #10
 8001f74:	e010      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f76:	2308      	movs	r3, #8
 8001f78:	e00e      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	e00c      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f7e:	2306      	movs	r3, #6
 8001f80:	e00a      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f82:	2305      	movs	r3, #5
 8001f84:	e008      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f86:	2304      	movs	r3, #4
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e004      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e002      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_GPIO_Init+0x240>
 8001f96:	2300      	movs	r3, #0
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	f002 0203 	and.w	r2, r2, #3
 8001f9e:	0092      	lsls	r2, r2, #2
 8001fa0:	4093      	lsls	r3, r2
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fa8:	4935      	ldr	r1, [pc, #212]	@ (8002080 <HAL_GPIO_Init+0x328>)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <HAL_GPIO_Init+0x354>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fda:	4a34      	ldr	r2, [pc, #208]	@ (80020ac <HAL_GPIO_Init+0x354>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe0:	4b32      	ldr	r3, [pc, #200]	@ (80020ac <HAL_GPIO_Init+0x354>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002004:	4a29      	ldr	r2, [pc, #164]	@ (80020ac <HAL_GPIO_Init+0x354>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800200a:	4b28      	ldr	r3, [pc, #160]	@ (80020ac <HAL_GPIO_Init+0x354>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202e:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_GPIO_Init+0x354>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_GPIO_Init+0x354>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002058:	4a14      	ldr	r2, [pc, #80]	@ (80020ac <HAL_GPIO_Init+0x354>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3301      	adds	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b0f      	cmp	r3, #15
 8002068:	f67f ae86 	bls.w	8001d78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3724      	adds	r7, #36	@ 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	40013800 	.word	0x40013800
 8002084:	40020000 	.word	0x40020000
 8002088:	40020400 	.word	0x40020400
 800208c:	40020800 	.word	0x40020800
 8002090:	40020c00 	.word	0x40020c00
 8002094:	40021000 	.word	0x40021000
 8002098:	40021400 	.word	0x40021400
 800209c:	40021800 	.word	0x40021800
 80020a0:	40021c00 	.word	0x40021c00
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40022400 	.word	0x40022400
 80020ac:	40013c00 	.word	0x40013c00

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020cc:	e003      	b.n	80020d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f806 	bl	8002114 <HAL_GPIO_EXTI_Callback>
  }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40013c00 	.word	0x40013c00

08002114 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800212a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212c:	b08f      	sub	sp, #60	@ 0x3c
 800212e:	af0a      	add	r7, sp, #40	@ 0x28
 8002130:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e116      	b.n	800236a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff f8a2 	bl	80012a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2203      	movs	r2, #3
 8002160:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f003 fa30 	bl	80055e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	687e      	ldr	r6, [r7, #4]
 8002188:	466d      	mov	r5, sp
 800218a:	f106 0410 	add.w	r4, r6, #16
 800218e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002196:	e894 0003 	ldmia.w	r4, {r0, r1}
 800219a:	e885 0003 	stmia.w	r5, {r0, r1}
 800219e:	1d33      	adds	r3, r6, #4
 80021a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a2:	6838      	ldr	r0, [r7, #0]
 80021a4:	f003 f9c4 	bl	8005530 <USB_CoreInit>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0d7      	b.n	800236a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 fa1e 	bl	8005602 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	e04a      	b.n	8002262 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	333d      	adds	r3, #61	@ 0x3d
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	333c      	adds	r3, #60	@ 0x3c
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	b298      	uxth	r0, r3
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3344      	adds	r3, #68	@ 0x44
 8002208:	4602      	mov	r2, r0
 800220a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3340      	adds	r3, #64	@ 0x40
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	3348      	adds	r3, #72	@ 0x48
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	334c      	adds	r3, #76	@ 0x4c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	3354      	adds	r3, #84	@ 0x54
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d3af      	bcc.n	80021cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e044      	b.n	80022fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3301      	adds	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3b5      	bcc.n	8002272 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	687e      	ldr	r6, [r7, #4]
 800230e:	466d      	mov	r5, sp
 8002310:	f106 0410 	add.w	r4, r6, #16
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002320:	e885 0003 	stmia.w	r5, {r0, r1}
 8002324:	1d33      	adds	r3, r6, #4
 8002326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f003 f9b7 	bl	800569c <USB_DevInit>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e014      	b.n	800236a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	2b01      	cmp	r3, #1
 8002356:	d102      	bne.n	800235e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f80b 	bl	8002374 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fb75 	bl	8005a52 <USB_DevDisconnect>

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002374 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023a2:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	10000003 	.word	0x10000003

080023bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b23      	ldr	r3, [pc, #140]	@ (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	4a22      	ldr	r2, [pc, #136]	@ (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f2:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1d      	ldr	r2, [pc, #116]	@ (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002408:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240a:	f7ff f83d 	bl	8001488 <HAL_GetTick>
 800240e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002410:	e009      	b.n	8002426 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002412:	f7ff f839 	bl	8001488 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002420:	d901      	bls.n	8002426 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e022      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002426:	4b14      	ldr	r3, [pc, #80]	@ (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002432:	d1ee      	bne.n	8002412 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0f      	ldr	r2, [pc, #60]	@ (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800243e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7ff f822 	bl	8001488 <HAL_GetTick>
 8002444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002446:	e009      	b.n	800245c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002448:	f7ff f81e 	bl	8001488 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002456:	d901      	bls.n	800245c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e007      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002468:	d1ee      	bne.n	8002448 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	40007000 	.word	0x40007000

0800247c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e29b      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8087 	beq.w	80025ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	4b96      	ldr	r3, [pc, #600]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d00c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ac:	4b93      	ldr	r3, [pc, #588]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d112      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
 80024b8:	4b90      	ldr	r3, [pc, #576]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c4:	d10b      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c6:	4b8d      	ldr	r3, [pc, #564]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06c      	beq.n	80025ac <HAL_RCC_OscConfig+0x130>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d168      	bne.n	80025ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e275      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x7a>
 80024e8:	4b84      	ldr	r3, [pc, #528]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a83      	ldr	r2, [pc, #524]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e02e      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x9c>
 80024fe:	4b7f      	ldr	r3, [pc, #508]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7e      	ldr	r2, [pc, #504]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b7c      	ldr	r3, [pc, #496]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7b      	ldr	r2, [pc, #492]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0xc0>
 8002522:	4b76      	ldr	r3, [pc, #472]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b73      	ldr	r3, [pc, #460]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a72      	ldr	r2, [pc, #456]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 800253c:	4b6f      	ldr	r3, [pc, #444]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6e      	ldr	r2, [pc, #440]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b6c      	ldr	r3, [pc, #432]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6b      	ldr	r2, [pc, #428]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe ff94 	bl	8001488 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe ff90 	bl	8001488 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	@ 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e229      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b61      	ldr	r3, [pc, #388]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe ff80 	bl	8001488 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe ff7c 	bl	8001488 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	@ 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e215      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b57      	ldr	r3, [pc, #348]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x110>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d069      	beq.n	800268e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	4b50      	ldr	r3, [pc, #320]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x190>
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b47      	ldr	r3, [pc, #284]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1e9      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b41      	ldr	r3, [pc, #260]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	493d      	ldr	r1, [pc, #244]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e040      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b39      	ldr	r3, [pc, #228]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a38      	ldr	r2, [pc, #224]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe ff32 	bl	8001488 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002628:	f7fe ff2e 	bl	8001488 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1c7      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4929      	ldr	r1, [pc, #164]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
 800265a:	e018      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a26      	ldr	r2, [pc, #152]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe ff0e 	bl	8001488 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe ff0a 	bl	8001488 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1a3      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d038      	beq.n	800270c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d019      	beq.n	80026d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a6:	4a15      	ldr	r2, [pc, #84]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe feeb 	bl	8001488 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7fe fee7 	bl	8001488 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e180      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x23a>
 80026d4:	e01a      	b.n	800270c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80026d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026da:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe fed1 	bl	8001488 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe fecd 	bl	8001488 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d903      	bls.n	8002700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e166      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
 80026fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	4b92      	ldr	r3, [pc, #584]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ee      	bne.n	80026ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a4 	beq.w	8002862 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b8c      	ldr	r3, [pc, #560]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b89      	ldr	r3, [pc, #548]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	4a88      	ldr	r2, [pc, #544]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	@ 0x40
 8002732:	4b86      	ldr	r3, [pc, #536]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	4b83      	ldr	r3, [pc, #524]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800274e:	4b80      	ldr	r3, [pc, #512]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7f      	ldr	r2, [pc, #508]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fe95 	bl	8001488 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe fe91 	bl	8001488 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	@ 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e12a      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002774:	4b76      	ldr	r3, [pc, #472]	@ (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x31a>
 8002788:	4b70      	ldr	r3, [pc, #448]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	4a6f      	ldr	r2, [pc, #444]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	@ 0x70
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x33c>
 800279e:	4b6b      	ldr	r3, [pc, #428]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	4a6a      	ldr	r2, [pc, #424]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027aa:	4b68      	ldr	r3, [pc, #416]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ae:	4a67      	ldr	r2, [pc, #412]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x35e>
 80027c0:	4b62      	ldr	r3, [pc, #392]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c4:	4a61      	ldr	r2, [pc, #388]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80027cc:	4b5f      	ldr	r3, [pc, #380]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	4a5e      	ldr	r2, [pc, #376]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 80027da:	4b5c      	ldr	r3, [pc, #368]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	4a5b      	ldr	r2, [pc, #364]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e6:	4b59      	ldr	r3, [pc, #356]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	4a58      	ldr	r2, [pc, #352]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe fe45 	bl	8001488 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe fe41 	bl	8001488 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0d8      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b4c      	ldr	r3, [pc, #304]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x386>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe fe2f 	bl	8001488 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe fe2b 	bl	8001488 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0c2      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b41      	ldr	r3, [pc, #260]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b3d      	ldr	r3, [pc, #244]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	4a3c      	ldr	r2, [pc, #240]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80ae 	beq.w	80029c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b37      	ldr	r3, [pc, #220]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d06d      	beq.n	8002954 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d14b      	bne.n	8002918 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b32      	ldr	r3, [pc, #200]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a31      	ldr	r2, [pc, #196]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fdfc 	bl	8001488 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fdf8 	bl	8001488 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e091      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b29      	ldr	r3, [pc, #164]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028dc:	071b      	lsls	r3, r3, #28
 80028de:	491b      	ldr	r1, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fdca 	bl	8001488 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fdc6 	bl	8001488 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e05f      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x47c>
 8002916:	e057      	b.n	80029c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0b      	ldr	r2, [pc, #44]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fdb0 	bl	8001488 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fdac 	bl	8001488 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e045      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x4b0>
 800294a:	e03d      	b.n	80029c8 <HAL_RCC_OscConfig+0x54c>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002954:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <HAL_RCC_OscConfig+0x558>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d030      	beq.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d129      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d122      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800298a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298c:	4293      	cmp	r3, r2
 800298e:	d119      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d10f      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0d0      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d910      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b67      	ldr	r3, [pc, #412]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 020f 	bic.w	r2, r3, #15
 8002a06:	4965      	ldr	r1, [pc, #404]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a38:	4b59      	ldr	r3, [pc, #356]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a50:	4b53      	ldr	r3, [pc, #332]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a52      	ldr	r2, [pc, #328]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	494d      	ldr	r1, [pc, #308]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d040      	beq.n	8002afc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d115      	bne.n	8002aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e073      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e06b      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aba:	4b39      	ldr	r3, [pc, #228]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f023 0203 	bic.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4936      	ldr	r1, [pc, #216]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002acc:	f7fe fcdc 	bl	8001488 <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad4:	f7fe fcd8 	bl	8001488 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e053      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 020c 	and.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d1eb      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4b27      	ldr	r3, [pc, #156]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d210      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b24      	ldr	r3, [pc, #144]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 020f 	bic.w	r2, r3, #15
 8002b12:	4922      	ldr	r1, [pc, #136]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e032      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4916      	ldr	r1, [pc, #88]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b56:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	490e      	ldr	r1, [pc, #56]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b6a:	f000 f821 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	490a      	ldr	r1, [pc, #40]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b7c:	5ccb      	ldrb	r3, [r1, r3]
 8002b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b82:	4a09      	ldr	r2, [pc, #36]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_ClockConfig+0x1d4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fc38 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023c00 	.word	0x40023c00
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08006478 	.word	0x08006478
 8002ba8:	20000004 	.word	0x20000004
 8002bac:	20000008 	.word	0x20000008

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	b094      	sub	sp, #80	@ 0x50
 8002bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc8:	4b79      	ldr	r3, [pc, #484]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	f200 80e1 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x3a>
 8002be2:	e0db      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b73      	ldr	r3, [pc, #460]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002be8:	e0db      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bea:	4b73      	ldr	r3, [pc, #460]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bee:	e0d8      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b6a      	ldr	r3, [pc, #424]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c22:	4622      	mov	r2, r4
 8002c24:	462b      	mov	r3, r5
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	1a51      	subs	r1, r2, r1
 8002c3e:	6139      	str	r1, [r7, #16]
 8002c40:	4629      	mov	r1, r5
 8002c42:	eb63 0301 	sbc.w	r3, r3, r1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c54:	4659      	mov	r1, fp
 8002c56:	018b      	lsls	r3, r1, #6
 8002c58:	4651      	mov	r1, sl
 8002c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5e:	4651      	mov	r1, sl
 8002c60:	018a      	lsls	r2, r1, #6
 8002c62:	4651      	mov	r1, sl
 8002c64:	ebb2 0801 	subs.w	r8, r2, r1
 8002c68:	4659      	mov	r1, fp
 8002c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c82:	4690      	mov	r8, r2
 8002c84:	4699      	mov	r9, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	eb18 0303 	adds.w	r3, r8, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	462b      	mov	r3, r5
 8002c90:	eb49 0303 	adc.w	r3, r9, r3
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	024b      	lsls	r3, r1, #9
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cac:	4621      	mov	r1, r4
 8002cae:	024a      	lsls	r2, r1, #9
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cc0:	f7fd fb16 	bl	80002f0 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ccc:	e058      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cce:	4b38      	ldr	r3, [pc, #224]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	4611      	mov	r1, r2
 8002cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce8:	4642      	mov	r2, r8
 8002cea:	464b      	mov	r3, r9
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	0159      	lsls	r1, r3, #5
 8002cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfa:	0150      	lsls	r0, r2, #5
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4641      	mov	r1, r8
 8002d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d06:	4649      	mov	r1, r9
 8002d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d20:	ebb2 040a 	subs.w	r4, r2, sl
 8002d24:	eb63 050b 	sbc.w	r5, r3, fp
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	00eb      	lsls	r3, r5, #3
 8002d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d36:	00e2      	lsls	r2, r4, #3
 8002d38:	4614      	mov	r4, r2
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	4643      	mov	r3, r8
 8002d3e:	18e3      	adds	r3, r4, r3
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	464b      	mov	r3, r9
 8002d44:	eb45 0303 	adc.w	r3, r5, r3
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d56:	4629      	mov	r1, r5
 8002d58:	028b      	lsls	r3, r1, #10
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d60:	4621      	mov	r1, r4
 8002d62:	028a      	lsls	r2, r1, #10
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	61fa      	str	r2, [r7, #28]
 8002d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d74:	f7fd fabc 	bl	80002f0 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3750      	adds	r7, #80	@ 0x50
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	@ (8002dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd8:	f7ff fff0 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4903      	ldr	r1, [pc, #12]	@ (8002df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	08006488 	.word	0x08006488

08002dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e00:	f7ff ffdc 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0b5b      	lsrs	r3, r3, #13
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	@ (8002e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08006488 	.word	0x08006488

08002e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e4c:	4b69      	ldr	r3, [pc, #420]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a68      	ldr	r2, [pc, #416]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e56:	6093      	str	r3, [r2, #8]
 8002e58:	4b66      	ldr	r3, [pc, #408]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e60:	4964      	ldr	r1, [pc, #400]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d017      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8c:	4959      	ldr	r1, [pc, #356]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d017      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eba:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ec0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	494a      	ldr	r1, [pc, #296]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 808b 	beq.w	800301e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	4a39      	ldr	r2, [pc, #228]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f14:	4b37      	ldr	r3, [pc, #220]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f20:	4b35      	ldr	r3, [pc, #212]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a34      	ldr	r2, [pc, #208]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe faac 	bl	8001488 <HAL_GetTick>
 8002f30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f34:	f7fe faa8 	bl	8001488 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	@ 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e38f      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f46:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f52:	4b28      	ldr	r3, [pc, #160]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d035      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d02e      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f70:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f84:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f90:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f92:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f98:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d114      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fa70 	bl	8001488 <HAL_GetTick>
 8002fa8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fe fa6c 	bl	8001488 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e351      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0ee      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fda:	d111      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fe8:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	4901      	ldr	r1, [pc, #4]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
 8002ff2:	e00b      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	0ffffcff 	.word	0x0ffffcff
 8003000:	4bac      	ldr	r3, [pc, #688]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4aab      	ldr	r2, [pc, #684]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003006:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800300a:	6093      	str	r3, [r2, #8]
 800300c:	4ba9      	ldr	r3, [pc, #676]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	49a6      	ldr	r1, [pc, #664]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301a:	4313      	orrs	r3, r2
 800301c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800302a:	4ba2      	ldr	r3, [pc, #648]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003030:	4aa0      	ldr	r2, [pc, #640]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003036:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800303a:	4b9e      	ldr	r3, [pc, #632]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	499b      	ldr	r1, [pc, #620]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003058:	4b96      	ldr	r3, [pc, #600]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003066:	4993      	ldr	r1, [pc, #588]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307a:	4b8e      	ldr	r3, [pc, #568]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003080:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003088:	498a      	ldr	r1, [pc, #552]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309c:	4b85      	ldr	r3, [pc, #532]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030aa:	4982      	ldr	r1, [pc, #520]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030be:	4b7d      	ldr	r3, [pc, #500]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030cc:	4979      	ldr	r1, [pc, #484]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e0:	4b74      	ldr	r3, [pc, #464]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	4971      	ldr	r1, [pc, #452]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003102:	4b6c      	ldr	r3, [pc, #432]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	f023 020c 	bic.w	r2, r3, #12
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003110:	4968      	ldr	r1, [pc, #416]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003124:	4b63      	ldr	r3, [pc, #396]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003132:	4960      	ldr	r1, [pc, #384]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003146:	4b5b      	ldr	r3, [pc, #364]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003154:	4957      	ldr	r1, [pc, #348]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003168:	4b52      	ldr	r3, [pc, #328]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003176:	494f      	ldr	r1, [pc, #316]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800318a:	4b4a      	ldr	r3, [pc, #296]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003190:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	4946      	ldr	r1, [pc, #280]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031ac:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	493e      	ldr	r1, [pc, #248]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031ce:	4b39      	ldr	r3, [pc, #228]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031dc:	4935      	ldr	r1, [pc, #212]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031f0:	4b30      	ldr	r3, [pc, #192]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031fe:	492d      	ldr	r1, [pc, #180]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d011      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003212:	4b28      	ldr	r3, [pc, #160]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003218:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003220:	4924      	ldr	r1, [pc, #144]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800322c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003242:	2301      	movs	r3, #1
 8003244:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003252:	4b18      	ldr	r3, [pc, #96]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003258:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003260:	4914      	ldr	r1, [pc, #80]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003274:	4b0f      	ldr	r3, [pc, #60]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003284:	490b      	ldr	r1, [pc, #44]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00f      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a8:	4902      	ldr	r1, [pc, #8]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032b0:	e002      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032c4:	4b8a      	ldr	r3, [pc, #552]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d4:	4986      	ldr	r1, [pc, #536]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032e8:	4b81      	ldr	r3, [pc, #516]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032f8:	497d      	ldr	r1, [pc, #500]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d006      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80d6 	beq.w	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003314:	4b76      	ldr	r3, [pc, #472]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a75      	ldr	r2, [pc, #468]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800331e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003320:	f7fe f8b2 	bl	8001488 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003328:	f7fe f8ae 	bl	8001488 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	@ 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e195      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800333a:	4b6d      	ldr	r3, [pc, #436]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d021      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11d      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800335a:	4b65      	ldr	r3, [pc, #404]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003368:	4b61      	ldr	r3, [pc, #388]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800336e:	0e1b      	lsrs	r3, r3, #24
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	019a      	lsls	r2, r3, #6
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	071b      	lsls	r3, r3, #28
 800338e:	4958      	ldr	r1, [pc, #352]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02e      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c0:	d129      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033c2:	4b4b      	ldr	r3, [pc, #300]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033d0:	4b47      	ldr	r3, [pc, #284]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d6:	0f1b      	lsrs	r3, r3, #28
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	019a      	lsls	r2, r3, #6
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	061b      	lsls	r3, r3, #24
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	071b      	lsls	r3, r3, #28
 80033f6:	493e      	ldr	r1, [pc, #248]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033fe:	4b3c      	ldr	r3, [pc, #240]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003404:	f023 021f 	bic.w	r2, r3, #31
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	3b01      	subs	r3, #1
 800340e:	4938      	ldr	r1, [pc, #224]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01d      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003422:	4b33      	ldr	r3, [pc, #204]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003428:	0e1b      	lsrs	r3, r3, #24
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003430:	4b2f      	ldr	r3, [pc, #188]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003436:	0f1b      	lsrs	r3, r3, #28
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	019a      	lsls	r2, r3, #6
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	061b      	lsls	r3, r3, #24
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	071b      	lsls	r3, r3, #28
 8003456:	4926      	ldr	r1, [pc, #152]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d011      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	019a      	lsls	r2, r3, #6
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	491a      	ldr	r1, [pc, #104]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800348e:	4b18      	ldr	r3, [pc, #96]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a17      	ldr	r2, [pc, #92]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003494:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349a:	f7fd fff5 	bl	8001488 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034a2:	f7fd fff1 	bl	8001488 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	@ 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0d8      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034b4:	4b0e      	ldr	r3, [pc, #56]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	f040 80ce 	bne.w	8003664 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a08      	ldr	r2, [pc, #32]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fd ffd8 	bl	8001488 <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034da:	e00b      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034dc:	f7fd ffd4 	bl	8001488 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d904      	bls.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0bb      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003500:	d0ec      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d12a      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800352a:	4b51      	ldr	r3, [pc, #324]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003538:	4b4d      	ldr	r3, [pc, #308]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	0f1b      	lsrs	r3, r3, #28
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	019a      	lsls	r2, r3, #6
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	071b      	lsls	r3, r3, #28
 800355e:	4944      	ldr	r1, [pc, #272]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003566:	4b42      	ldr	r3, [pc, #264]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800356c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	493d      	ldr	r1, [pc, #244]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d022      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003594:	d11d      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003596:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359c:	0e1b      	lsrs	r3, r3, #24
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035a4:	4b32      	ldr	r3, [pc, #200]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035aa:	0f1b      	lsrs	r3, r3, #28
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	019a      	lsls	r2, r3, #6
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	071b      	lsls	r3, r3, #28
 80035ca:	4929      	ldr	r1, [pc, #164]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d028      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	0e1b      	lsrs	r3, r3, #24
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035ec:	4b20      	ldr	r3, [pc, #128]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	019a      	lsls	r2, r3, #6
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	431a      	orrs	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	071b      	lsls	r3, r3, #28
 8003612:	4917      	ldr	r1, [pc, #92]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800361a:	4b15      	ldr	r3, [pc, #84]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	4911      	ldr	r1, [pc, #68]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0e      	ldr	r2, [pc, #56]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363c:	f7fd ff24 	bl	8001488 <HAL_GetTick>
 8003640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003644:	f7fd ff20 	bl	8001488 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e007      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800365e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003662:	d1ef      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800

08003674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e049      	b.n	800371a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd fc6e 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 fd68 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d001      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e054      	b.n	80037e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a26      	ldr	r2, [pc, #152]	@ (80037f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d022      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003766:	d01d      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d018      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a21      	ldr	r2, [pc, #132]	@ (80037fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1f      	ldr	r2, [pc, #124]	@ (8003800 <HAL_TIM_Base_Start_IT+0xdc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1e      	ldr	r2, [pc, #120]	@ (8003804 <HAL_TIM_Base_Start_IT+0xe0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <HAL_TIM_Base_Start_IT+0xe4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1b      	ldr	r2, [pc, #108]	@ (800380c <HAL_TIM_Base_Start_IT+0xe8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d115      	bne.n	80037d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	4b19      	ldr	r3, [pc, #100]	@ (8003810 <HAL_TIM_Base_Start_IT+0xec>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d015      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0xbe>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037bc:	d011      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	e008      	b.n	80037e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e000      	b.n	80037e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40010400 	.word	0x40010400
 8003808:	40014000 	.word	0x40014000
 800380c:	40001800 	.word	0x40001800
 8003810:	00010007 	.word	0x00010007

08003814 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a1a      	ldr	r2, [r3, #32]
 8003832:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <HAL_TIM_Base_Stop_IT+0x48>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	f240 4344 	movw	r3, #1092	@ 0x444
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <HAL_TIM_Base_Stop_IT+0x48>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e049      	b.n	8003918 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f841 	bl	8003920 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fc69 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_TIM_PWM_Start+0x24>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e03c      	b.n	80039d2 <HAL_TIM_PWM_Start+0x9e>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b04      	cmp	r3, #4
 800395c:	d109      	bne.n	8003972 <HAL_TIM_PWM_Start+0x3e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	bf14      	ite	ne
 800396a:	2301      	movne	r3, #1
 800396c:	2300      	moveq	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	e02f      	b.n	80039d2 <HAL_TIM_PWM_Start+0x9e>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d109      	bne.n	800398c <HAL_TIM_PWM_Start+0x58>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e022      	b.n	80039d2 <HAL_TIM_PWM_Start+0x9e>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d109      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x72>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b01      	cmp	r3, #1
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	e015      	b.n	80039d2 <HAL_TIM_PWM_Start+0x9e>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d109      	bne.n	80039c0 <HAL_TIM_PWM_Start+0x8c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	bf14      	ite	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	2300      	moveq	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e008      	b.n	80039d2 <HAL_TIM_PWM_Start+0x9e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	bf14      	ite	ne
 80039cc:	2301      	movne	r3, #1
 80039ce:	2300      	moveq	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e092      	b.n	8003b00 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_TIM_PWM_Start+0xb6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039e8:	e023      	b.n	8003a32 <HAL_TIM_PWM_Start+0xfe>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start+0xc6>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039f8:	e01b      	b.n	8003a32 <HAL_TIM_PWM_Start+0xfe>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start+0xd6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a08:	e013      	b.n	8003a32 <HAL_TIM_PWM_Start+0xfe>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Start+0xe6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a18:	e00b      	b.n	8003a32 <HAL_TIM_PWM_Start+0xfe>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_PWM_Start+0xf6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a28:	e003      	b.n	8003a32 <HAL_TIM_PWM_Start+0xfe>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 ff3c 	bl	80048b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a30      	ldr	r2, [pc, #192]	@ (8003b08 <HAL_TIM_PWM_Start+0x1d4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIM_PWM_Start+0x120>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b0c <HAL_TIM_PWM_Start+0x1d8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_TIM_PWM_Start+0x124>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_TIM_PWM_Start+0x126>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a25      	ldr	r2, [pc, #148]	@ (8003b08 <HAL_TIM_PWM_Start+0x1d4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_TIM_PWM_Start+0x18a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d01d      	beq.n	8003abe <HAL_TIM_PWM_Start+0x18a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a22      	ldr	r2, [pc, #136]	@ (8003b10 <HAL_TIM_PWM_Start+0x1dc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_TIM_PWM_Start+0x18a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a20      	ldr	r2, [pc, #128]	@ (8003b14 <HAL_TIM_PWM_Start+0x1e0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_TIM_PWM_Start+0x18a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <HAL_TIM_PWM_Start+0x1e4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_TIM_PWM_Start+0x18a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a19      	ldr	r2, [pc, #100]	@ (8003b0c <HAL_TIM_PWM_Start+0x1d8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_TIM_PWM_Start+0x18a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1b      	ldr	r2, [pc, #108]	@ (8003b1c <HAL_TIM_PWM_Start+0x1e8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_TIM_PWM_Start+0x18a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <HAL_TIM_PWM_Start+0x1ec>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d115      	bne.n	8003aea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <HAL_TIM_PWM_Start+0x1f0>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b06      	cmp	r3, #6
 8003ace:	d015      	beq.n	8003afc <HAL_TIM_PWM_Start+0x1c8>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad6:	d011      	beq.n	8003afc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae8:	e008      	b.n	8003afc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e000      	b.n	8003afe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40010400 	.word	0x40010400
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40001800 	.word	0x40001800
 8003b24:	00010007 	.word	0x00010007

08003b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0202 	mvn.w	r2, #2
 8003b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 faee 	bl	800414c <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fae0 	bl	8004138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 faf1 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0204 	mvn.w	r2, #4
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fac4 	bl	800414c <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fab6 	bl	8004138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fac7 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0208 	mvn.w	r2, #8
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2204      	movs	r2, #4
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa9a 	bl	800414c <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa8c 	bl	8004138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa9d 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0210 	mvn.w	r2, #16
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2208      	movs	r2, #8
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa70 	bl	800414c <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa62 	bl	8004138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fa73 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0201 	mvn.w	r2, #1
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa3c 	bl	8004124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b80      	cmp	r3, #128	@ 0x80
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 ff2c 	bl	8004b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce6:	d10e      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d107      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 ff1f 	bl	8004b44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d10:	2b40      	cmp	r3, #64	@ 0x40
 8003d12:	d10e      	bne.n	8003d32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1e:	2b40      	cmp	r3, #64	@ 0x40
 8003d20:	d107      	bne.n	8003d32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa21 	bl	8004174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d10e      	bne.n	8003d5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d107      	bne.n	8003d5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f06f 0220 	mvn.w	r2, #32
 8003d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fedf 	bl	8004b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0ff      	b.n	8003f86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b14      	cmp	r3, #20
 8003d92:	f200 80f0 	bhi.w	8003f76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d96:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003f77 	.word	0x08003f77
 8003da4:	08003f77 	.word	0x08003f77
 8003da8:	08003f77 	.word	0x08003f77
 8003dac:	08003e31 	.word	0x08003e31
 8003db0:	08003f77 	.word	0x08003f77
 8003db4:	08003f77 	.word	0x08003f77
 8003db8:	08003f77 	.word	0x08003f77
 8003dbc:	08003e73 	.word	0x08003e73
 8003dc0:	08003f77 	.word	0x08003f77
 8003dc4:	08003f77 	.word	0x08003f77
 8003dc8:	08003f77 	.word	0x08003f77
 8003dcc:	08003eb3 	.word	0x08003eb3
 8003dd0:	08003f77 	.word	0x08003f77
 8003dd4:	08003f77 	.word	0x08003f77
 8003dd8:	08003f77 	.word	0x08003f77
 8003ddc:	08003ef5 	.word	0x08003ef5
 8003de0:	08003f77 	.word	0x08003f77
 8003de4:	08003f77 	.word	0x08003f77
 8003de8:	08003f77 	.word	0x08003f77
 8003dec:	08003f35 	.word	0x08003f35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fa66 	bl	80042c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6999      	ldr	r1, [r3, #24]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	619a      	str	r2, [r3, #24]
      break;
 8003e2e:	e0a5      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fab8 	bl	80043ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	619a      	str	r2, [r3, #24]
      break;
 8003e70:	e084      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fb0f 	bl	800449c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0208 	orr.w	r2, r2, #8
 8003e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0204 	bic.w	r2, r2, #4
 8003e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69d9      	ldr	r1, [r3, #28]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	61da      	str	r2, [r3, #28]
      break;
 8003eb0:	e064      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fb65 	bl	8004588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69d9      	ldr	r1, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	021a      	lsls	r2, r3, #8
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	61da      	str	r2, [r3, #28]
      break;
 8003ef2:	e043      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fb9c 	bl	8004638 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0208 	orr.w	r2, r2, #8
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0204 	bic.w	r2, r2, #4
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f32:	e023      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fbce 	bl	80046dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f74:	e002      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop

08003f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIM_ConfigClockSource+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e0b4      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x186>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	4b56      	ldr	r3, [pc, #344]	@ (8004120 <HAL_TIM_ConfigClockSource+0x190>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe4:	d03e      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0xd4>
 8003fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fea:	f200 8087 	bhi.w	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff2:	f000 8086 	beq.w	8004102 <HAL_TIM_ConfigClockSource+0x172>
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffa:	d87f      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b70      	cmp	r3, #112	@ 0x70
 8003ffe:	d01a      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0xa6>
 8004000:	2b70      	cmp	r3, #112	@ 0x70
 8004002:	d87b      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b60      	cmp	r3, #96	@ 0x60
 8004006:	d050      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x11a>
 8004008:	2b60      	cmp	r3, #96	@ 0x60
 800400a:	d877      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b50      	cmp	r3, #80	@ 0x50
 800400e:	d03c      	beq.n	800408a <HAL_TIM_ConfigClockSource+0xfa>
 8004010:	2b50      	cmp	r3, #80	@ 0x50
 8004012:	d873      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b40      	cmp	r3, #64	@ 0x40
 8004016:	d058      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x13a>
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d86f      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b30      	cmp	r3, #48	@ 0x30
 800401e:	d064      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15a>
 8004020:	2b30      	cmp	r3, #48	@ 0x30
 8004022:	d86b      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b20      	cmp	r3, #32
 8004026:	d060      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15a>
 8004028:	2b20      	cmp	r3, #32
 800402a:	d867      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d05c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15a>
 8004030:	2b10      	cmp	r3, #16
 8004032:	d05a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15a>
 8004034:	e062      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004046:	f000 fc17 	bl	8004878 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	609a      	str	r2, [r3, #8]
      break;
 8004062:	e04f      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004074:	f000 fc00 	bl	8004878 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004086:	609a      	str	r2, [r3, #8]
      break;
 8004088:	e03c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004096:	461a      	mov	r2, r3
 8004098:	f000 fb74 	bl	8004784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2150      	movs	r1, #80	@ 0x50
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fbcd 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e02c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 fb93 	bl	80047e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2160      	movs	r1, #96	@ 0x60
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fbbd 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 80040c8:	e01c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 fb54 	bl	8004784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2140      	movs	r1, #64	@ 0x40
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fbad 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 80040e8:	e00c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 fba4 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 80040fa:	e003      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004100:	e000      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	fffeff88 	.word	0xfffeff88

08004124 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a40      	ldr	r2, [pc, #256]	@ (800429c <TIM_Base_SetConfig+0x114>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a6:	d00f      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a3d      	ldr	r2, [pc, #244]	@ (80042a0 <TIM_Base_SetConfig+0x118>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a3c      	ldr	r2, [pc, #240]	@ (80042a4 <TIM_Base_SetConfig+0x11c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d007      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a3b      	ldr	r2, [pc, #236]	@ (80042a8 <TIM_Base_SetConfig+0x120>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a3a      	ldr	r2, [pc, #232]	@ (80042ac <TIM_Base_SetConfig+0x124>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d108      	bne.n	80041da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2f      	ldr	r2, [pc, #188]	@ (800429c <TIM_Base_SetConfig+0x114>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02b      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e8:	d027      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a2c      	ldr	r2, [pc, #176]	@ (80042a0 <TIM_Base_SetConfig+0x118>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d023      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2b      	ldr	r2, [pc, #172]	@ (80042a4 <TIM_Base_SetConfig+0x11c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01f      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a2a      	ldr	r2, [pc, #168]	@ (80042a8 <TIM_Base_SetConfig+0x120>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01b      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a29      	ldr	r2, [pc, #164]	@ (80042ac <TIM_Base_SetConfig+0x124>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d017      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a28      	ldr	r2, [pc, #160]	@ (80042b0 <TIM_Base_SetConfig+0x128>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a27      	ldr	r2, [pc, #156]	@ (80042b4 <TIM_Base_SetConfig+0x12c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00f      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a26      	ldr	r2, [pc, #152]	@ (80042b8 <TIM_Base_SetConfig+0x130>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00b      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a25      	ldr	r2, [pc, #148]	@ (80042bc <TIM_Base_SetConfig+0x134>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a24      	ldr	r2, [pc, #144]	@ (80042c0 <TIM_Base_SetConfig+0x138>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a23      	ldr	r2, [pc, #140]	@ (80042c4 <TIM_Base_SetConfig+0x13c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a0a      	ldr	r2, [pc, #40]	@ (800429c <TIM_Base_SetConfig+0x114>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a0c      	ldr	r2, [pc, #48]	@ (80042ac <TIM_Base_SetConfig+0x124>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d103      	bne.n	8004288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	615a      	str	r2, [r3, #20]
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40010400 	.word	0x40010400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800
 80042bc:	40001800 	.word	0x40001800
 80042c0:	40001c00 	.word	0x40001c00
 80042c4:	40002000 	.word	0x40002000

080042c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4b2b      	ldr	r3, [pc, #172]	@ (80043a0 <TIM_OC1_SetConfig+0xd8>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 0302 	bic.w	r3, r3, #2
 8004310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <TIM_OC1_SetConfig+0xdc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_OC1_SetConfig+0x64>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <TIM_OC1_SetConfig+0xe0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d10c      	bne.n	8004346 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0308 	bic.w	r3, r3, #8
 8004332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <TIM_OC1_SetConfig+0xdc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_OC1_SetConfig+0x8e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <TIM_OC1_SetConfig+0xe0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d111      	bne.n	800437a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800435c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	621a      	str	r2, [r3, #32]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	fffeff8f 	.word	0xfffeff8f
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40010400 	.word	0x40010400

080043ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004490 <TIM_OC2_SetConfig+0xe4>)
 80043d8:	4013      	ands	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0320 	bic.w	r3, r3, #32
 80043f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a23      	ldr	r2, [pc, #140]	@ (8004494 <TIM_OC2_SetConfig+0xe8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_OC2_SetConfig+0x68>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a22      	ldr	r2, [pc, #136]	@ (8004498 <TIM_OC2_SetConfig+0xec>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10d      	bne.n	8004430 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800441a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800442e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a18      	ldr	r2, [pc, #96]	@ (8004494 <TIM_OC2_SetConfig+0xe8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d003      	beq.n	8004440 <TIM_OC2_SetConfig+0x94>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a17      	ldr	r2, [pc, #92]	@ (8004498 <TIM_OC2_SetConfig+0xec>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d113      	bne.n	8004468 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800444e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	feff8fff 	.word	0xfeff8fff
 8004494:	40010000 	.word	0x40010000
 8004498:	40010400 	.word	0x40010400

0800449c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4b2d      	ldr	r3, [pc, #180]	@ (800457c <TIM_OC3_SetConfig+0xe0>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a22      	ldr	r2, [pc, #136]	@ (8004580 <TIM_OC3_SetConfig+0xe4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC3_SetConfig+0x66>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a21      	ldr	r2, [pc, #132]	@ (8004584 <TIM_OC3_SetConfig+0xe8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10d      	bne.n	800451e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800451c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a17      	ldr	r2, [pc, #92]	@ (8004580 <TIM_OC3_SetConfig+0xe4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_OC3_SetConfig+0x92>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a16      	ldr	r2, [pc, #88]	@ (8004584 <TIM_OC3_SetConfig+0xe8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d113      	bne.n	8004556 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800453c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	fffeff8f 	.word	0xfffeff8f
 8004580:	40010000 	.word	0x40010000
 8004584:	40010400 	.word	0x40010400

08004588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <TIM_OC4_SetConfig+0xa4>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	031b      	lsls	r3, r3, #12
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <TIM_OC4_SetConfig+0xa8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_OC4_SetConfig+0x68>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a12      	ldr	r2, [pc, #72]	@ (8004634 <TIM_OC4_SetConfig+0xac>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d109      	bne.n	8004604 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	019b      	lsls	r3, r3, #6
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	feff8fff 	.word	0xfeff8fff
 8004630:	40010000 	.word	0x40010000
 8004634:	40010400 	.word	0x40010400

08004638 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <TIM_OC5_SetConfig+0x98>)
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004678:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <TIM_OC5_SetConfig+0x9c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d003      	beq.n	8004696 <TIM_OC5_SetConfig+0x5e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a11      	ldr	r2, [pc, #68]	@ (80046d8 <TIM_OC5_SetConfig+0xa0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d109      	bne.n	80046aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	621a      	str	r2, [r3, #32]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	fffeff8f 	.word	0xfffeff8f
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40010400 	.word	0x40010400

080046dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <TIM_OC6_SetConfig+0x9c>)
 8004708:	4013      	ands	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800471e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	051b      	lsls	r3, r3, #20
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a13      	ldr	r2, [pc, #76]	@ (800477c <TIM_OC6_SetConfig+0xa0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_OC6_SetConfig+0x60>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a12      	ldr	r2, [pc, #72]	@ (8004780 <TIM_OC6_SetConfig+0xa4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d109      	bne.n	8004750 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	029b      	lsls	r3, r3, #10
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	feff8fff 	.word	0xfeff8fff
 800477c:	40010000 	.word	0x40010000
 8004780:	40010400 	.word	0x40010400

08004784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 030a 	bic.w	r3, r3, #10
 80047c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f023 0210 	bic.w	r2, r3, #16
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800480c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	031b      	lsls	r3, r3, #12
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800481e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	f043 0307 	orr.w	r3, r3, #7
 8004864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	021a      	lsls	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	431a      	orrs	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	609a      	str	r2, [r3, #8]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2201      	movs	r2, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	43db      	mvns	r3, r3
 80048da:	401a      	ands	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e06d      	b.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a30      	ldr	r2, [pc, #192]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d108      	bne.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004956:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a20      	ldr	r2, [pc, #128]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d022      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498e:	d01d      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d018      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a15      	ldr	r2, [pc, #84]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10c      	bne.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40010400 	.word	0x40010400
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40001800 	.word	0x40001800

08004a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e065      	b.n	8004b08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a14      	ldr	r2, [pc, #80]	@ (8004b18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d115      	bne.n	8004af6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	051b      	lsls	r3, r3, #20
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400

08004b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e040      	b.n	8004bec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fb02 	bl	8001184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	@ 0x24
 8004b84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8b0 	bl	8004cfc <UART_SetConfig>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e022      	b.n	8004bec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb08 	bl	80051c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fb8f 	bl	8005308 <UART_CheckIdleState>
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	@ 0x28
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d171      	bne.n	8004cf0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_UART_Transmit+0x24>
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e06a      	b.n	8004cf2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2221      	movs	r2, #33	@ 0x21
 8004c28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c2a:	f7fc fc2d 	bl	8001488 <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	88fa      	ldrh	r2, [r7, #6]
 8004c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c48:	d108      	bne.n	8004c5c <HAL_UART_Transmit+0x68>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c64:	e02c      	b.n	8004cc0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2180      	movs	r1, #128	@ 0x80
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb96 	bl	80053a2 <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e038      	b.n	8004cf2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	3302      	adds	r3, #2
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e007      	b.n	8004cae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	3301      	adds	r3, #1
 8004cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1cc      	bne.n	8004c66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2140      	movs	r1, #64	@ 0x40
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fb63 	bl	80053a2 <UART_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e005      	b.n	8004cf2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4ba6      	ldr	r3, [pc, #664]	@ (8004fc0 <UART_SetConfig+0x2c4>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a94      	ldr	r2, [pc, #592]	@ (8004fc4 <UART_SetConfig+0x2c8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d120      	bne.n	8004dba <UART_SetConfig+0xbe>
 8004d78:	4b93      	ldr	r3, [pc, #588]	@ (8004fc8 <UART_SetConfig+0x2cc>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d816      	bhi.n	8004db4 <UART_SetConfig+0xb8>
 8004d86:	a201      	add	r2, pc, #4	@ (adr r2, 8004d8c <UART_SetConfig+0x90>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004da9 	.word	0x08004da9
 8004d94:	08004da3 	.word	0x08004da3
 8004d98:	08004daf 	.word	0x08004daf
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e150      	b.n	8005044 <UART_SetConfig+0x348>
 8004da2:	2302      	movs	r3, #2
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e14d      	b.n	8005044 <UART_SetConfig+0x348>
 8004da8:	2304      	movs	r3, #4
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e14a      	b.n	8005044 <UART_SetConfig+0x348>
 8004dae:	2308      	movs	r3, #8
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e147      	b.n	8005044 <UART_SetConfig+0x348>
 8004db4:	2310      	movs	r3, #16
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e144      	b.n	8005044 <UART_SetConfig+0x348>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a83      	ldr	r2, [pc, #524]	@ (8004fcc <UART_SetConfig+0x2d0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d132      	bne.n	8004e2a <UART_SetConfig+0x12e>
 8004dc4:	4b80      	ldr	r3, [pc, #512]	@ (8004fc8 <UART_SetConfig+0x2cc>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d828      	bhi.n	8004e24 <UART_SetConfig+0x128>
 8004dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <UART_SetConfig+0xdc>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004e0d 	.word	0x08004e0d
 8004ddc:	08004e25 	.word	0x08004e25
 8004de0:	08004e25 	.word	0x08004e25
 8004de4:	08004e25 	.word	0x08004e25
 8004de8:	08004e19 	.word	0x08004e19
 8004dec:	08004e25 	.word	0x08004e25
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	08004e25 	.word	0x08004e25
 8004df8:	08004e13 	.word	0x08004e13
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e25 	.word	0x08004e25
 8004e08:	08004e1f 	.word	0x08004e1f
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	e118      	b.n	8005044 <UART_SetConfig+0x348>
 8004e12:	2302      	movs	r3, #2
 8004e14:	77fb      	strb	r3, [r7, #31]
 8004e16:	e115      	b.n	8005044 <UART_SetConfig+0x348>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e112      	b.n	8005044 <UART_SetConfig+0x348>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e10f      	b.n	8005044 <UART_SetConfig+0x348>
 8004e24:	2310      	movs	r3, #16
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e10c      	b.n	8005044 <UART_SetConfig+0x348>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a68      	ldr	r2, [pc, #416]	@ (8004fd0 <UART_SetConfig+0x2d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d120      	bne.n	8004e76 <UART_SetConfig+0x17a>
 8004e34:	4b64      	ldr	r3, [pc, #400]	@ (8004fc8 <UART_SetConfig+0x2cc>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e3e:	2b30      	cmp	r3, #48	@ 0x30
 8004e40:	d013      	beq.n	8004e6a <UART_SetConfig+0x16e>
 8004e42:	2b30      	cmp	r3, #48	@ 0x30
 8004e44:	d814      	bhi.n	8004e70 <UART_SetConfig+0x174>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d009      	beq.n	8004e5e <UART_SetConfig+0x162>
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d810      	bhi.n	8004e70 <UART_SetConfig+0x174>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <UART_SetConfig+0x15c>
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d006      	beq.n	8004e64 <UART_SetConfig+0x168>
 8004e56:	e00b      	b.n	8004e70 <UART_SetConfig+0x174>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e0f2      	b.n	8005044 <UART_SetConfig+0x348>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e0ef      	b.n	8005044 <UART_SetConfig+0x348>
 8004e64:	2304      	movs	r3, #4
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e0ec      	b.n	8005044 <UART_SetConfig+0x348>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e0e9      	b.n	8005044 <UART_SetConfig+0x348>
 8004e70:	2310      	movs	r3, #16
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e0e6      	b.n	8005044 <UART_SetConfig+0x348>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a56      	ldr	r2, [pc, #344]	@ (8004fd4 <UART_SetConfig+0x2d8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d120      	bne.n	8004ec2 <UART_SetConfig+0x1c6>
 8004e80:	4b51      	ldr	r3, [pc, #324]	@ (8004fc8 <UART_SetConfig+0x2cc>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e8c:	d013      	beq.n	8004eb6 <UART_SetConfig+0x1ba>
 8004e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e90:	d814      	bhi.n	8004ebc <UART_SetConfig+0x1c0>
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d009      	beq.n	8004eaa <UART_SetConfig+0x1ae>
 8004e96:	2b80      	cmp	r3, #128	@ 0x80
 8004e98:	d810      	bhi.n	8004ebc <UART_SetConfig+0x1c0>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <UART_SetConfig+0x1a8>
 8004e9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ea0:	d006      	beq.n	8004eb0 <UART_SetConfig+0x1b4>
 8004ea2:	e00b      	b.n	8004ebc <UART_SetConfig+0x1c0>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e0cc      	b.n	8005044 <UART_SetConfig+0x348>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e0c9      	b.n	8005044 <UART_SetConfig+0x348>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e0c6      	b.n	8005044 <UART_SetConfig+0x348>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e0c3      	b.n	8005044 <UART_SetConfig+0x348>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e0c0      	b.n	8005044 <UART_SetConfig+0x348>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a44      	ldr	r2, [pc, #272]	@ (8004fd8 <UART_SetConfig+0x2dc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d125      	bne.n	8004f18 <UART_SetConfig+0x21c>
 8004ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8004fc8 <UART_SetConfig+0x2cc>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eda:	d017      	beq.n	8004f0c <UART_SetConfig+0x210>
 8004edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ee0:	d817      	bhi.n	8004f12 <UART_SetConfig+0x216>
 8004ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee6:	d00b      	beq.n	8004f00 <UART_SetConfig+0x204>
 8004ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eec:	d811      	bhi.n	8004f12 <UART_SetConfig+0x216>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <UART_SetConfig+0x1fe>
 8004ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef6:	d006      	beq.n	8004f06 <UART_SetConfig+0x20a>
 8004ef8:	e00b      	b.n	8004f12 <UART_SetConfig+0x216>
 8004efa:	2300      	movs	r3, #0
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e0a1      	b.n	8005044 <UART_SetConfig+0x348>
 8004f00:	2302      	movs	r3, #2
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e09e      	b.n	8005044 <UART_SetConfig+0x348>
 8004f06:	2304      	movs	r3, #4
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e09b      	b.n	8005044 <UART_SetConfig+0x348>
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e098      	b.n	8005044 <UART_SetConfig+0x348>
 8004f12:	2310      	movs	r3, #16
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e095      	b.n	8005044 <UART_SetConfig+0x348>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8004fdc <UART_SetConfig+0x2e0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d125      	bne.n	8004f6e <UART_SetConfig+0x272>
 8004f22:	4b29      	ldr	r3, [pc, #164]	@ (8004fc8 <UART_SetConfig+0x2cc>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f30:	d017      	beq.n	8004f62 <UART_SetConfig+0x266>
 8004f32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f36:	d817      	bhi.n	8004f68 <UART_SetConfig+0x26c>
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f3c:	d00b      	beq.n	8004f56 <UART_SetConfig+0x25a>
 8004f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f42:	d811      	bhi.n	8004f68 <UART_SetConfig+0x26c>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <UART_SetConfig+0x254>
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4c:	d006      	beq.n	8004f5c <UART_SetConfig+0x260>
 8004f4e:	e00b      	b.n	8004f68 <UART_SetConfig+0x26c>
 8004f50:	2301      	movs	r3, #1
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e076      	b.n	8005044 <UART_SetConfig+0x348>
 8004f56:	2302      	movs	r3, #2
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e073      	b.n	8005044 <UART_SetConfig+0x348>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e070      	b.n	8005044 <UART_SetConfig+0x348>
 8004f62:	2308      	movs	r3, #8
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	e06d      	b.n	8005044 <UART_SetConfig+0x348>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e06a      	b.n	8005044 <UART_SetConfig+0x348>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <UART_SetConfig+0x2e4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d138      	bne.n	8004fea <UART_SetConfig+0x2ee>
 8004f78:	4b13      	ldr	r3, [pc, #76]	@ (8004fc8 <UART_SetConfig+0x2cc>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f86:	d017      	beq.n	8004fb8 <UART_SetConfig+0x2bc>
 8004f88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f8c:	d82a      	bhi.n	8004fe4 <UART_SetConfig+0x2e8>
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f92:	d00b      	beq.n	8004fac <UART_SetConfig+0x2b0>
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f98:	d824      	bhi.n	8004fe4 <UART_SetConfig+0x2e8>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <UART_SetConfig+0x2aa>
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fa2:	d006      	beq.n	8004fb2 <UART_SetConfig+0x2b6>
 8004fa4:	e01e      	b.n	8004fe4 <UART_SetConfig+0x2e8>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e04b      	b.n	8005044 <UART_SetConfig+0x348>
 8004fac:	2302      	movs	r3, #2
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e048      	b.n	8005044 <UART_SetConfig+0x348>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e045      	b.n	8005044 <UART_SetConfig+0x348>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e042      	b.n	8005044 <UART_SetConfig+0x348>
 8004fbe:	bf00      	nop
 8004fc0:	efff69f3 	.word	0xefff69f3
 8004fc4:	40011000 	.word	0x40011000
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40004400 	.word	0x40004400
 8004fd0:	40004800 	.word	0x40004800
 8004fd4:	40004c00 	.word	0x40004c00
 8004fd8:	40005000 	.word	0x40005000
 8004fdc:	40011400 	.word	0x40011400
 8004fe0:	40007800 	.word	0x40007800
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e02c      	b.n	8005044 <UART_SetConfig+0x348>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a72      	ldr	r2, [pc, #456]	@ (80051b8 <UART_SetConfig+0x4bc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d125      	bne.n	8005040 <UART_SetConfig+0x344>
 8004ff4:	4b71      	ldr	r3, [pc, #452]	@ (80051bc <UART_SetConfig+0x4c0>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ffe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005002:	d017      	beq.n	8005034 <UART_SetConfig+0x338>
 8005004:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005008:	d817      	bhi.n	800503a <UART_SetConfig+0x33e>
 800500a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500e:	d00b      	beq.n	8005028 <UART_SetConfig+0x32c>
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005014:	d811      	bhi.n	800503a <UART_SetConfig+0x33e>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <UART_SetConfig+0x326>
 800501a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800501e:	d006      	beq.n	800502e <UART_SetConfig+0x332>
 8005020:	e00b      	b.n	800503a <UART_SetConfig+0x33e>
 8005022:	2300      	movs	r3, #0
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e00d      	b.n	8005044 <UART_SetConfig+0x348>
 8005028:	2302      	movs	r3, #2
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e00a      	b.n	8005044 <UART_SetConfig+0x348>
 800502e:	2304      	movs	r3, #4
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e007      	b.n	8005044 <UART_SetConfig+0x348>
 8005034:	2308      	movs	r3, #8
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e004      	b.n	8005044 <UART_SetConfig+0x348>
 800503a:	2310      	movs	r3, #16
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e001      	b.n	8005044 <UART_SetConfig+0x348>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504c:	d15b      	bne.n	8005106 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d828      	bhi.n	80050a6 <UART_SetConfig+0x3aa>
 8005054:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <UART_SetConfig+0x360>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005081 	.word	0x08005081
 8005060:	08005089 	.word	0x08005089
 8005064:	08005091 	.word	0x08005091
 8005068:	080050a7 	.word	0x080050a7
 800506c:	08005097 	.word	0x08005097
 8005070:	080050a7 	.word	0x080050a7
 8005074:	080050a7 	.word	0x080050a7
 8005078:	080050a7 	.word	0x080050a7
 800507c:	0800509f 	.word	0x0800509f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005080:	f7fd fea8 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8005084:	61b8      	str	r0, [r7, #24]
        break;
 8005086:	e013      	b.n	80050b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005088:	f7fd feb8 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 800508c:	61b8      	str	r0, [r7, #24]
        break;
 800508e:	e00f      	b.n	80050b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005090:	4b4b      	ldr	r3, [pc, #300]	@ (80051c0 <UART_SetConfig+0x4c4>)
 8005092:	61bb      	str	r3, [r7, #24]
        break;
 8005094:	e00c      	b.n	80050b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005096:	f7fd fd8b 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 800509a:	61b8      	str	r0, [r7, #24]
        break;
 800509c:	e008      	b.n	80050b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050a2:	61bb      	str	r3, [r7, #24]
        break;
 80050a4:	e004      	b.n	80050b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	77bb      	strb	r3, [r7, #30]
        break;
 80050ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d074      	beq.n	80051a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	005a      	lsls	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d916      	bls.n	8005100 <UART_SetConfig+0x404>
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d8:	d212      	bcs.n	8005100 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f023 030f 	bic.w	r3, r3, #15
 80050e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	89fa      	ldrh	r2, [r7, #14]
 80050fc:	60da      	str	r2, [r3, #12]
 80050fe:	e04f      	b.n	80051a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	77bb      	strb	r3, [r7, #30]
 8005104:	e04c      	b.n	80051a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005106:	7ffb      	ldrb	r3, [r7, #31]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d828      	bhi.n	800515e <UART_SetConfig+0x462>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <UART_SetConfig+0x418>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	0800515f 	.word	0x0800515f
 8005124:	0800514f 	.word	0x0800514f
 8005128:	0800515f 	.word	0x0800515f
 800512c:	0800515f 	.word	0x0800515f
 8005130:	0800515f 	.word	0x0800515f
 8005134:	08005157 	.word	0x08005157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005138:	f7fd fe4c 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 800513c:	61b8      	str	r0, [r7, #24]
        break;
 800513e:	e013      	b.n	8005168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005140:	f7fd fe5c 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8005144:	61b8      	str	r0, [r7, #24]
        break;
 8005146:	e00f      	b.n	8005168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005148:	4b1d      	ldr	r3, [pc, #116]	@ (80051c0 <UART_SetConfig+0x4c4>)
 800514a:	61bb      	str	r3, [r7, #24]
        break;
 800514c:	e00c      	b.n	8005168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514e:	f7fd fd2f 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8005152:	61b8      	str	r0, [r7, #24]
        break;
 8005154:	e008      	b.n	8005168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800515a:	61bb      	str	r3, [r7, #24]
        break;
 800515c:	e004      	b.n	8005168 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	77bb      	strb	r3, [r7, #30]
        break;
 8005166:	bf00      	nop
    }

    if (pclk != 0U)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	085a      	lsrs	r2, r3, #1
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	441a      	add	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b0f      	cmp	r3, #15
 8005186:	d909      	bls.n	800519c <UART_SetConfig+0x4a0>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518e:	d205      	bcs.n	800519c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	e001      	b.n	80051a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40007c00 	.word	0x40007c00
 80051bc:	40023800 	.word	0x40023800
 80051c0:	00f42400 	.word	0x00f42400

080051c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01a      	beq.n	80052da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c2:	d10a      	bne.n	80052da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005318:	f7fc f8b6 	bl	8001488 <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b08      	cmp	r3, #8
 800532a:	d10e      	bne.n	800534a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800532c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f831 	bl	80053a2 <UART_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e027      	b.n	800539a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d10e      	bne.n	8005376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f81b 	bl	80053a2 <UART_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e011      	b.n	800539a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b09c      	sub	sp, #112	@ 0x70
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b2:	e0a7      	b.n	8005504 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ba:	f000 80a3 	beq.w	8005504 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fc f863 	bl	8001488 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80053ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d13f      	bne.n	8005454 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80053e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80053e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80053f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e6      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3308      	adds	r3, #8
 800540c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	663b      	str	r3, [r7, #96]	@ 0x60
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005426:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005428:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800542c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e068      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d050      	beq.n	8005504 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800546c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005470:	d148      	bne.n	8005504 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800547a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
 800549c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e6      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	613b      	str	r3, [r7, #16]
   return(result);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054ce:	623a      	str	r2, [r7, #32]
 80054d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	69f9      	ldr	r1, [r7, #28]
 80054d4:	6a3a      	ldr	r2, [r7, #32]
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	61bb      	str	r3, [r7, #24]
   return(result);
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e5      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e010      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	429a      	cmp	r2, r3
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	429a      	cmp	r2, r3
 8005520:	f43f af48 	beq.w	80053b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3770      	adds	r7, #112	@ 0x70
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005530:	b084      	sub	sp, #16
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	f107 001c 	add.w	r0, r7, #28
 800553e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	2b01      	cmp	r3, #1
 8005546:	d120      	bne.n	800558a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	4b20      	ldr	r3, [pc, #128]	@ (80055dc <USB_CoreInit+0xac>)
 800555a:	4013      	ands	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800556c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d105      	bne.n	800557e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa96 	bl	8005ab0 <USB_CoreReset>
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]
 8005588:	e010      	b.n	80055ac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa8a 	bl	8005ab0 <USB_CoreReset>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10b      	bne.n	80055ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f043 0206 	orr.w	r2, r3, #6
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d6:	b004      	add	sp, #16
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	ffbdffbf 	.word	0xffbdffbf

080055e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f023 0201 	bic.w	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d115      	bne.n	8005650 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005630:	2001      	movs	r0, #1
 8005632:	f7fb ff35 	bl	80014a0 <HAL_Delay>
      ms++;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3301      	adds	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fa29 	bl	8005a94 <USB_GetMode>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d01e      	beq.n	8005686 <USB_SetCurrentMode+0x84>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b31      	cmp	r3, #49	@ 0x31
 800564c:	d9f0      	bls.n	8005630 <USB_SetCurrentMode+0x2e>
 800564e:	e01a      	b.n	8005686 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d115      	bne.n	8005682 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005662:	2001      	movs	r0, #1
 8005664:	f7fb ff1c 	bl	80014a0 <HAL_Delay>
      ms++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fa10 	bl	8005a94 <USB_GetMode>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <USB_SetCurrentMode+0x84>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b31      	cmp	r3, #49	@ 0x31
 800567e:	d9f0      	bls.n	8005662 <USB_SetCurrentMode+0x60>
 8005680:	e001      	b.n	8005686 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e005      	b.n	8005692 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b32      	cmp	r3, #50	@ 0x32
 800568a:	d101      	bne.n	8005690 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800569c:	b084      	sub	sp, #16
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e009      	b.n	80056d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3340      	adds	r3, #64	@ 0x40
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b0e      	cmp	r3, #14
 80056d4:	d9f2      	bls.n	80056bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11c      	bne.n	8005716 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e005      	b.n	8005722 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005734:	4619      	mov	r1, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573c:	461a      	mov	r2, r3
 800573e:	680b      	ldr	r3, [r1, #0]
 8005740:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10c      	bne.n	8005762 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f965 	bl	8005a20 <USB_SetDevSpeed>
 8005756:	e008      	b.n	800576a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005758:	2101      	movs	r1, #1
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f960 	bl	8005a20 <USB_SetDevSpeed>
 8005760:	e003      	b.n	800576a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005762:	2103      	movs	r1, #3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f95b 	bl	8005a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800576a:	2110      	movs	r1, #16
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8f3 	bl	8005958 <USB_FlushTxFifo>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f91f 	bl	80059c0 <USB_FlushRxFifo>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005792:	461a      	mov	r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800579e:	461a      	mov	r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057aa:	461a      	mov	r2, r3
 80057ac:	2300      	movs	r3, #0
 80057ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e043      	b.n	800583e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057cc:	d118      	bne.n	8005800 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e0:	461a      	mov	r2, r3
 80057e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e013      	b.n	8005812 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e008      	b.n	8005812 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800581e:	461a      	mov	r2, r3
 8005820:	2300      	movs	r3, #0
 8005822:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005830:	461a      	mov	r2, r3
 8005832:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005836:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	3301      	adds	r3, #1
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3b7      	bcc.n	80057b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e043      	b.n	80058d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800585e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005862:	d118      	bne.n	8005896 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005876:	461a      	mov	r2, r3
 8005878:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e013      	b.n	80058a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588c:	461a      	mov	r2, r3
 800588e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	e008      	b.n	80058a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a2:	461a      	mov	r2, r3
 80058a4:	2300      	movs	r3, #0
 80058a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c6:	461a      	mov	r2, r3
 80058c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	3301      	adds	r3, #1
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3b7      	bcc.n	800584c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f043 0210 	orr.w	r2, r3, #16
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <USB_DevInit+0x2b4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800591c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f043 0208 	orr.w	r2, r3, #8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800592e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <USB_DevInit+0x2b8>)
 800593a:	4313      	orrs	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005940:	7dfb      	ldrb	r3, [r7, #23]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800594c:	b004      	add	sp, #16
 800594e:	4770      	bx	lr
 8005950:	803c3800 	.word	0x803c3800
 8005954:	40000004 	.word	0x40000004

08005958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a13      	ldr	r2, [pc, #76]	@ (80059bc <USB_FlushTxFifo+0x64>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e01b      	b.n	80059b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	daf2      	bge.n	8005966 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	019b      	lsls	r3, r3, #6
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a08      	ldr	r2, [pc, #32]	@ (80059bc <USB_FlushTxFifo+0x64>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e006      	b.n	80059b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d0f0      	beq.n	8005990 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	00030d40 	.word	0x00030d40

080059c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a11      	ldr	r2, [pc, #68]	@ (8005a1c <USB_FlushRxFifo+0x5c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e018      	b.n	8005a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	daf2      	bge.n	80059cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2210      	movs	r2, #16
 80059ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a08      	ldr	r2, [pc, #32]	@ (8005a1c <USB_FlushRxFifo+0x5c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e006      	b.n	8005a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d0f0      	beq.n	80059f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	00030d40 	.word	0x00030d40

08005a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a6c:	f023 0303 	bic.w	r3, r3, #3
 8005a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a13      	ldr	r2, [pc, #76]	@ (8005b14 <USB_CoreReset+0x64>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e01b      	b.n	8005b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	daf2      	bge.n	8005abc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f043 0201 	orr.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a09      	ldr	r2, [pc, #36]	@ (8005b14 <USB_CoreReset+0x64>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d901      	bls.n	8005af8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e006      	b.n	8005b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d0f0      	beq.n	8005ae6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	00030d40 	.word	0x00030d40

08005b18 <siprintf>:
 8005b18:	b40e      	push	{r1, r2, r3}
 8005b1a:	b510      	push	{r4, lr}
 8005b1c:	b09d      	sub	sp, #116	@ 0x74
 8005b1e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005b20:	9002      	str	r0, [sp, #8]
 8005b22:	9006      	str	r0, [sp, #24]
 8005b24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b28:	480a      	ldr	r0, [pc, #40]	@ (8005b54 <siprintf+0x3c>)
 8005b2a:	9107      	str	r1, [sp, #28]
 8005b2c:	9104      	str	r1, [sp, #16]
 8005b2e:	490a      	ldr	r1, [pc, #40]	@ (8005b58 <siprintf+0x40>)
 8005b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b34:	9105      	str	r1, [sp, #20]
 8005b36:	2400      	movs	r4, #0
 8005b38:	a902      	add	r1, sp, #8
 8005b3a:	6800      	ldr	r0, [r0, #0]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005b40:	f000 f994 	bl	8005e6c <_svfiprintf_r>
 8005b44:	9b02      	ldr	r3, [sp, #8]
 8005b46:	701c      	strb	r4, [r3, #0]
 8005b48:	b01d      	add	sp, #116	@ 0x74
 8005b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4e:	b003      	add	sp, #12
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000010 	.word	0x20000010
 8005b58:	ffff0208 	.word	0xffff0208

08005b5c <memset>:
 8005b5c:	4402      	add	r2, r0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d100      	bne.n	8005b66 <memset+0xa>
 8005b64:	4770      	bx	lr
 8005b66:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6a:	e7f9      	b.n	8005b60 <memset+0x4>

08005b6c <__errno>:
 8005b6c:	4b01      	ldr	r3, [pc, #4]	@ (8005b74 <__errno+0x8>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000010 	.word	0x20000010

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005bb0 <__libc_init_array+0x38>)
 8005b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005bb4 <__libc_init_array+0x3c>)
 8005b7e:	1b64      	subs	r4, r4, r5
 8005b80:	10a4      	asrs	r4, r4, #2
 8005b82:	2600      	movs	r6, #0
 8005b84:	42a6      	cmp	r6, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	4d0b      	ldr	r5, [pc, #44]	@ (8005bb8 <__libc_init_array+0x40>)
 8005b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005bbc <__libc_init_array+0x44>)
 8005b8c:	f000 fc64 	bl	8006458 <_init>
 8005b90:	1b64      	subs	r4, r4, r5
 8005b92:	10a4      	asrs	r4, r4, #2
 8005b94:	2600      	movs	r6, #0
 8005b96:	42a6      	cmp	r6, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba0:	4798      	blx	r3
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005baa:	4798      	blx	r3
 8005bac:	3601      	adds	r6, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	080064cc 	.word	0x080064cc
 8005bb4:	080064cc 	.word	0x080064cc
 8005bb8:	080064cc 	.word	0x080064cc
 8005bbc:	080064d0 	.word	0x080064d0

08005bc0 <__retarget_lock_acquire_recursive>:
 8005bc0:	4770      	bx	lr

08005bc2 <__retarget_lock_release_recursive>:
 8005bc2:	4770      	bx	lr

08005bc4 <_free_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	2900      	cmp	r1, #0
 8005bca:	d041      	beq.n	8005c50 <_free_r+0x8c>
 8005bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bd0:	1f0c      	subs	r4, r1, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bfb8      	it	lt
 8005bd6:	18e4      	addlt	r4, r4, r3
 8005bd8:	f000 f8e0 	bl	8005d9c <__malloc_lock>
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c54 <_free_r+0x90>)
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	b933      	cbnz	r3, 8005bf0 <_free_r+0x2c>
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	6014      	str	r4, [r2, #0]
 8005be6:	4628      	mov	r0, r5
 8005be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bec:	f000 b8dc 	b.w	8005da8 <__malloc_unlock>
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d908      	bls.n	8005c06 <_free_r+0x42>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	1821      	adds	r1, r4, r0
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf01      	itttt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	1809      	addeq	r1, r1, r0
 8005c02:	6021      	streq	r1, [r4, #0]
 8005c04:	e7ed      	b.n	8005be2 <_free_r+0x1e>
 8005c06:	461a      	mov	r2, r3
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	b10b      	cbz	r3, 8005c10 <_free_r+0x4c>
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	d9fa      	bls.n	8005c06 <_free_r+0x42>
 8005c10:	6811      	ldr	r1, [r2, #0]
 8005c12:	1850      	adds	r0, r2, r1
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d10b      	bne.n	8005c30 <_free_r+0x6c>
 8005c18:	6820      	ldr	r0, [r4, #0]
 8005c1a:	4401      	add	r1, r0
 8005c1c:	1850      	adds	r0, r2, r1
 8005c1e:	4283      	cmp	r3, r0
 8005c20:	6011      	str	r1, [r2, #0]
 8005c22:	d1e0      	bne.n	8005be6 <_free_r+0x22>
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	6053      	str	r3, [r2, #4]
 8005c2a:	4408      	add	r0, r1
 8005c2c:	6010      	str	r0, [r2, #0]
 8005c2e:	e7da      	b.n	8005be6 <_free_r+0x22>
 8005c30:	d902      	bls.n	8005c38 <_free_r+0x74>
 8005c32:	230c      	movs	r3, #12
 8005c34:	602b      	str	r3, [r5, #0]
 8005c36:	e7d6      	b.n	8005be6 <_free_r+0x22>
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	1821      	adds	r1, r4, r0
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf04      	itt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	bf04      	itt	eq
 8005c48:	1809      	addeq	r1, r1, r0
 8005c4a:	6021      	streq	r1, [r4, #0]
 8005c4c:	6054      	str	r4, [r2, #4]
 8005c4e:	e7ca      	b.n	8005be6 <_free_r+0x22>
 8005c50:	bd38      	pop	{r3, r4, r5, pc}
 8005c52:	bf00      	nop
 8005c54:	20000a20 	.word	0x20000a20

08005c58 <sbrk_aligned>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c98 <sbrk_aligned+0x40>)
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	6831      	ldr	r1, [r6, #0]
 8005c60:	4605      	mov	r5, r0
 8005c62:	b911      	cbnz	r1, 8005c6a <sbrk_aligned+0x12>
 8005c64:	f000 fba4 	bl	80063b0 <_sbrk_r>
 8005c68:	6030      	str	r0, [r6, #0]
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 fb9f 	bl	80063b0 <_sbrk_r>
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	d103      	bne.n	8005c7e <sbrk_aligned+0x26>
 8005c76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	bd70      	pop	{r4, r5, r6, pc}
 8005c7e:	1cc4      	adds	r4, r0, #3
 8005c80:	f024 0403 	bic.w	r4, r4, #3
 8005c84:	42a0      	cmp	r0, r4
 8005c86:	d0f8      	beq.n	8005c7a <sbrk_aligned+0x22>
 8005c88:	1a21      	subs	r1, r4, r0
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 fb90 	bl	80063b0 <_sbrk_r>
 8005c90:	3001      	adds	r0, #1
 8005c92:	d1f2      	bne.n	8005c7a <sbrk_aligned+0x22>
 8005c94:	e7ef      	b.n	8005c76 <sbrk_aligned+0x1e>
 8005c96:	bf00      	nop
 8005c98:	20000a1c 	.word	0x20000a1c

08005c9c <_malloc_r>:
 8005c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca0:	1ccd      	adds	r5, r1, #3
 8005ca2:	f025 0503 	bic.w	r5, r5, #3
 8005ca6:	3508      	adds	r5, #8
 8005ca8:	2d0c      	cmp	r5, #12
 8005caa:	bf38      	it	cc
 8005cac:	250c      	movcc	r5, #12
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	db01      	blt.n	8005cb8 <_malloc_r+0x1c>
 8005cb4:	42a9      	cmp	r1, r5
 8005cb6:	d904      	bls.n	8005cc2 <_malloc_r+0x26>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	6033      	str	r3, [r6, #0]
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d98 <_malloc_r+0xfc>
 8005cc6:	f000 f869 	bl	8005d9c <__malloc_lock>
 8005cca:	f8d8 3000 	ldr.w	r3, [r8]
 8005cce:	461c      	mov	r4, r3
 8005cd0:	bb44      	cbnz	r4, 8005d24 <_malloc_r+0x88>
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f7ff ffbf 	bl	8005c58 <sbrk_aligned>
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	4604      	mov	r4, r0
 8005cde:	d158      	bne.n	8005d92 <_malloc_r+0xf6>
 8005ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ce4:	4627      	mov	r7, r4
 8005ce6:	2f00      	cmp	r7, #0
 8005ce8:	d143      	bne.n	8005d72 <_malloc_r+0xd6>
 8005cea:	2c00      	cmp	r4, #0
 8005cec:	d04b      	beq.n	8005d86 <_malloc_r+0xea>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	eb04 0903 	add.w	r9, r4, r3
 8005cf8:	f000 fb5a 	bl	80063b0 <_sbrk_r>
 8005cfc:	4581      	cmp	r9, r0
 8005cfe:	d142      	bne.n	8005d86 <_malloc_r+0xea>
 8005d00:	6821      	ldr	r1, [r4, #0]
 8005d02:	1a6d      	subs	r5, r5, r1
 8005d04:	4629      	mov	r1, r5
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff ffa6 	bl	8005c58 <sbrk_aligned>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d03a      	beq.n	8005d86 <_malloc_r+0xea>
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	442b      	add	r3, r5
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	f8d8 3000 	ldr.w	r3, [r8]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	bb62      	cbnz	r2, 8005d78 <_malloc_r+0xdc>
 8005d1e:	f8c8 7000 	str.w	r7, [r8]
 8005d22:	e00f      	b.n	8005d44 <_malloc_r+0xa8>
 8005d24:	6822      	ldr	r2, [r4, #0]
 8005d26:	1b52      	subs	r2, r2, r5
 8005d28:	d420      	bmi.n	8005d6c <_malloc_r+0xd0>
 8005d2a:	2a0b      	cmp	r2, #11
 8005d2c:	d917      	bls.n	8005d5e <_malloc_r+0xc2>
 8005d2e:	1961      	adds	r1, r4, r5
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	6025      	str	r5, [r4, #0]
 8005d34:	bf18      	it	ne
 8005d36:	6059      	strne	r1, [r3, #4]
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	bf08      	it	eq
 8005d3c:	f8c8 1000 	streq.w	r1, [r8]
 8005d40:	5162      	str	r2, [r4, r5]
 8005d42:	604b      	str	r3, [r1, #4]
 8005d44:	4630      	mov	r0, r6
 8005d46:	f000 f82f 	bl	8005da8 <__malloc_unlock>
 8005d4a:	f104 000b 	add.w	r0, r4, #11
 8005d4e:	1d23      	adds	r3, r4, #4
 8005d50:	f020 0007 	bic.w	r0, r0, #7
 8005d54:	1ac2      	subs	r2, r0, r3
 8005d56:	bf1c      	itt	ne
 8005d58:	1a1b      	subne	r3, r3, r0
 8005d5a:	50a3      	strne	r3, [r4, r2]
 8005d5c:	e7af      	b.n	8005cbe <_malloc_r+0x22>
 8005d5e:	6862      	ldr	r2, [r4, #4]
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	bf0c      	ite	eq
 8005d64:	f8c8 2000 	streq.w	r2, [r8]
 8005d68:	605a      	strne	r2, [r3, #4]
 8005d6a:	e7eb      	b.n	8005d44 <_malloc_r+0xa8>
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	6864      	ldr	r4, [r4, #4]
 8005d70:	e7ae      	b.n	8005cd0 <_malloc_r+0x34>
 8005d72:	463c      	mov	r4, r7
 8005d74:	687f      	ldr	r7, [r7, #4]
 8005d76:	e7b6      	b.n	8005ce6 <_malloc_r+0x4a>
 8005d78:	461a      	mov	r2, r3
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d1fb      	bne.n	8005d78 <_malloc_r+0xdc>
 8005d80:	2300      	movs	r3, #0
 8005d82:	6053      	str	r3, [r2, #4]
 8005d84:	e7de      	b.n	8005d44 <_malloc_r+0xa8>
 8005d86:	230c      	movs	r3, #12
 8005d88:	6033      	str	r3, [r6, #0]
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f000 f80c 	bl	8005da8 <__malloc_unlock>
 8005d90:	e794      	b.n	8005cbc <_malloc_r+0x20>
 8005d92:	6005      	str	r5, [r0, #0]
 8005d94:	e7d6      	b.n	8005d44 <_malloc_r+0xa8>
 8005d96:	bf00      	nop
 8005d98:	20000a20 	.word	0x20000a20

08005d9c <__malloc_lock>:
 8005d9c:	4801      	ldr	r0, [pc, #4]	@ (8005da4 <__malloc_lock+0x8>)
 8005d9e:	f7ff bf0f 	b.w	8005bc0 <__retarget_lock_acquire_recursive>
 8005da2:	bf00      	nop
 8005da4:	20000a18 	.word	0x20000a18

08005da8 <__malloc_unlock>:
 8005da8:	4801      	ldr	r0, [pc, #4]	@ (8005db0 <__malloc_unlock+0x8>)
 8005daa:	f7ff bf0a 	b.w	8005bc2 <__retarget_lock_release_recursive>
 8005dae:	bf00      	nop
 8005db0:	20000a18 	.word	0x20000a18

08005db4 <__ssputs_r>:
 8005db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db8:	688e      	ldr	r6, [r1, #8]
 8005dba:	461f      	mov	r7, r3
 8005dbc:	42be      	cmp	r6, r7
 8005dbe:	680b      	ldr	r3, [r1, #0]
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	4690      	mov	r8, r2
 8005dc6:	d82d      	bhi.n	8005e24 <__ssputs_r+0x70>
 8005dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005dd0:	d026      	beq.n	8005e20 <__ssputs_r+0x6c>
 8005dd2:	6965      	ldr	r5, [r4, #20]
 8005dd4:	6909      	ldr	r1, [r1, #16]
 8005dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dda:	eba3 0901 	sub.w	r9, r3, r1
 8005dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005de2:	1c7b      	adds	r3, r7, #1
 8005de4:	444b      	add	r3, r9
 8005de6:	106d      	asrs	r5, r5, #1
 8005de8:	429d      	cmp	r5, r3
 8005dea:	bf38      	it	cc
 8005dec:	461d      	movcc	r5, r3
 8005dee:	0553      	lsls	r3, r2, #21
 8005df0:	d527      	bpl.n	8005e42 <__ssputs_r+0x8e>
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7ff ff52 	bl	8005c9c <_malloc_r>
 8005df8:	4606      	mov	r6, r0
 8005dfa:	b360      	cbz	r0, 8005e56 <__ssputs_r+0xa2>
 8005dfc:	6921      	ldr	r1, [r4, #16]
 8005dfe:	464a      	mov	r2, r9
 8005e00:	f000 fae6 	bl	80063d0 <memcpy>
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	6126      	str	r6, [r4, #16]
 8005e12:	6165      	str	r5, [r4, #20]
 8005e14:	444e      	add	r6, r9
 8005e16:	eba5 0509 	sub.w	r5, r5, r9
 8005e1a:	6026      	str	r6, [r4, #0]
 8005e1c:	60a5      	str	r5, [r4, #8]
 8005e1e:	463e      	mov	r6, r7
 8005e20:	42be      	cmp	r6, r7
 8005e22:	d900      	bls.n	8005e26 <__ssputs_r+0x72>
 8005e24:	463e      	mov	r6, r7
 8005e26:	6820      	ldr	r0, [r4, #0]
 8005e28:	4632      	mov	r2, r6
 8005e2a:	4641      	mov	r1, r8
 8005e2c:	f000 faa6 	bl	800637c <memmove>
 8005e30:	68a3      	ldr	r3, [r4, #8]
 8005e32:	1b9b      	subs	r3, r3, r6
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	4433      	add	r3, r6
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	462a      	mov	r2, r5
 8005e44:	f000 fad2 	bl	80063ec <_realloc_r>
 8005e48:	4606      	mov	r6, r0
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d1e0      	bne.n	8005e10 <__ssputs_r+0x5c>
 8005e4e:	6921      	ldr	r1, [r4, #16]
 8005e50:	4650      	mov	r0, sl
 8005e52:	f7ff feb7 	bl	8005bc4 <_free_r>
 8005e56:	230c      	movs	r3, #12
 8005e58:	f8ca 3000 	str.w	r3, [sl]
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e68:	e7e9      	b.n	8005e3e <__ssputs_r+0x8a>
	...

08005e6c <_svfiprintf_r>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	4698      	mov	r8, r3
 8005e72:	898b      	ldrh	r3, [r1, #12]
 8005e74:	061b      	lsls	r3, r3, #24
 8005e76:	b09d      	sub	sp, #116	@ 0x74
 8005e78:	4607      	mov	r7, r0
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	d510      	bpl.n	8005ea2 <_svfiprintf_r+0x36>
 8005e80:	690b      	ldr	r3, [r1, #16]
 8005e82:	b973      	cbnz	r3, 8005ea2 <_svfiprintf_r+0x36>
 8005e84:	2140      	movs	r1, #64	@ 0x40
 8005e86:	f7ff ff09 	bl	8005c9c <_malloc_r>
 8005e8a:	6028      	str	r0, [r5, #0]
 8005e8c:	6128      	str	r0, [r5, #16]
 8005e8e:	b930      	cbnz	r0, 8005e9e <_svfiprintf_r+0x32>
 8005e90:	230c      	movs	r3, #12
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e98:	b01d      	add	sp, #116	@ 0x74
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9e:	2340      	movs	r3, #64	@ 0x40
 8005ea0:	616b      	str	r3, [r5, #20]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea6:	2320      	movs	r3, #32
 8005ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb0:	2330      	movs	r3, #48	@ 0x30
 8005eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006050 <_svfiprintf_r+0x1e4>
 8005eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eba:	f04f 0901 	mov.w	r9, #1
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	469a      	mov	sl, r3
 8005ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ec6:	b10a      	cbz	r2, 8005ecc <_svfiprintf_r+0x60>
 8005ec8:	2a25      	cmp	r2, #37	@ 0x25
 8005eca:	d1f9      	bne.n	8005ec0 <_svfiprintf_r+0x54>
 8005ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed0:	d00b      	beq.n	8005eea <_svfiprintf_r+0x7e>
 8005ed2:	465b      	mov	r3, fp
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff ff6b 	bl	8005db4 <__ssputs_r>
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f000 80a7 	beq.w	8006032 <_svfiprintf_r+0x1c6>
 8005ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ee6:	445a      	add	r2, fp
 8005ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eea:	f89a 3000 	ldrb.w	r3, [sl]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 809f 	beq.w	8006032 <_svfiprintf_r+0x1c6>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005efe:	f10a 0a01 	add.w	sl, sl, #1
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	9307      	str	r3, [sp, #28]
 8005f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f0c:	4654      	mov	r4, sl
 8005f0e:	2205      	movs	r2, #5
 8005f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f14:	484e      	ldr	r0, [pc, #312]	@ (8006050 <_svfiprintf_r+0x1e4>)
 8005f16:	f7fa f99b 	bl	8000250 <memchr>
 8005f1a:	9a04      	ldr	r2, [sp, #16]
 8005f1c:	b9d8      	cbnz	r0, 8005f56 <_svfiprintf_r+0xea>
 8005f1e:	06d0      	lsls	r0, r2, #27
 8005f20:	bf44      	itt	mi
 8005f22:	2320      	movmi	r3, #32
 8005f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f28:	0711      	lsls	r1, r2, #28
 8005f2a:	bf44      	itt	mi
 8005f2c:	232b      	movmi	r3, #43	@ 0x2b
 8005f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f32:	f89a 3000 	ldrb.w	r3, [sl]
 8005f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f38:	d015      	beq.n	8005f66 <_svfiprintf_r+0xfa>
 8005f3a:	9a07      	ldr	r2, [sp, #28]
 8005f3c:	4654      	mov	r4, sl
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f04f 0c0a 	mov.w	ip, #10
 8005f44:	4621      	mov	r1, r4
 8005f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f4a:	3b30      	subs	r3, #48	@ 0x30
 8005f4c:	2b09      	cmp	r3, #9
 8005f4e:	d94b      	bls.n	8005fe8 <_svfiprintf_r+0x17c>
 8005f50:	b1b0      	cbz	r0, 8005f80 <_svfiprintf_r+0x114>
 8005f52:	9207      	str	r2, [sp, #28]
 8005f54:	e014      	b.n	8005f80 <_svfiprintf_r+0x114>
 8005f56:	eba0 0308 	sub.w	r3, r0, r8
 8005f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	9304      	str	r3, [sp, #16]
 8005f62:	46a2      	mov	sl, r4
 8005f64:	e7d2      	b.n	8005f0c <_svfiprintf_r+0xa0>
 8005f66:	9b03      	ldr	r3, [sp, #12]
 8005f68:	1d19      	adds	r1, r3, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	9103      	str	r1, [sp, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfbb      	ittet	lt
 8005f72:	425b      	neglt	r3, r3
 8005f74:	f042 0202 	orrlt.w	r2, r2, #2
 8005f78:	9307      	strge	r3, [sp, #28]
 8005f7a:	9307      	strlt	r3, [sp, #28]
 8005f7c:	bfb8      	it	lt
 8005f7e:	9204      	strlt	r2, [sp, #16]
 8005f80:	7823      	ldrb	r3, [r4, #0]
 8005f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f84:	d10a      	bne.n	8005f9c <_svfiprintf_r+0x130>
 8005f86:	7863      	ldrb	r3, [r4, #1]
 8005f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f8a:	d132      	bne.n	8005ff2 <_svfiprintf_r+0x186>
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	1d1a      	adds	r2, r3, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	9203      	str	r2, [sp, #12]
 8005f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f98:	3402      	adds	r4, #2
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006060 <_svfiprintf_r+0x1f4>
 8005fa0:	7821      	ldrb	r1, [r4, #0]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	f7fa f953 	bl	8000250 <memchr>
 8005faa:	b138      	cbz	r0, 8005fbc <_svfiprintf_r+0x150>
 8005fac:	9b04      	ldr	r3, [sp, #16]
 8005fae:	eba0 000a 	sub.w	r0, r0, sl
 8005fb2:	2240      	movs	r2, #64	@ 0x40
 8005fb4:	4082      	lsls	r2, r0
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	3401      	adds	r4, #1
 8005fba:	9304      	str	r3, [sp, #16]
 8005fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc0:	4824      	ldr	r0, [pc, #144]	@ (8006054 <_svfiprintf_r+0x1e8>)
 8005fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fc6:	2206      	movs	r2, #6
 8005fc8:	f7fa f942 	bl	8000250 <memchr>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d036      	beq.n	800603e <_svfiprintf_r+0x1d2>
 8005fd0:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <_svfiprintf_r+0x1ec>)
 8005fd2:	bb1b      	cbnz	r3, 800601c <_svfiprintf_r+0x1b0>
 8005fd4:	9b03      	ldr	r3, [sp, #12]
 8005fd6:	3307      	adds	r3, #7
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	3308      	adds	r3, #8
 8005fde:	9303      	str	r3, [sp, #12]
 8005fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe2:	4433      	add	r3, r6
 8005fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe6:	e76a      	b.n	8005ebe <_svfiprintf_r+0x52>
 8005fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fec:	460c      	mov	r4, r1
 8005fee:	2001      	movs	r0, #1
 8005ff0:	e7a8      	b.n	8005f44 <_svfiprintf_r+0xd8>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	3401      	adds	r4, #1
 8005ff6:	9305      	str	r3, [sp, #20]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f04f 0c0a 	mov.w	ip, #10
 8005ffe:	4620      	mov	r0, r4
 8006000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006004:	3a30      	subs	r2, #48	@ 0x30
 8006006:	2a09      	cmp	r2, #9
 8006008:	d903      	bls.n	8006012 <_svfiprintf_r+0x1a6>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0c6      	beq.n	8005f9c <_svfiprintf_r+0x130>
 800600e:	9105      	str	r1, [sp, #20]
 8006010:	e7c4      	b.n	8005f9c <_svfiprintf_r+0x130>
 8006012:	fb0c 2101 	mla	r1, ip, r1, r2
 8006016:	4604      	mov	r4, r0
 8006018:	2301      	movs	r3, #1
 800601a:	e7f0      	b.n	8005ffe <_svfiprintf_r+0x192>
 800601c:	ab03      	add	r3, sp, #12
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	462a      	mov	r2, r5
 8006022:	4b0e      	ldr	r3, [pc, #56]	@ (800605c <_svfiprintf_r+0x1f0>)
 8006024:	a904      	add	r1, sp, #16
 8006026:	4638      	mov	r0, r7
 8006028:	f3af 8000 	nop.w
 800602c:	1c42      	adds	r2, r0, #1
 800602e:	4606      	mov	r6, r0
 8006030:	d1d6      	bne.n	8005fe0 <_svfiprintf_r+0x174>
 8006032:	89ab      	ldrh	r3, [r5, #12]
 8006034:	065b      	lsls	r3, r3, #25
 8006036:	f53f af2d 	bmi.w	8005e94 <_svfiprintf_r+0x28>
 800603a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800603c:	e72c      	b.n	8005e98 <_svfiprintf_r+0x2c>
 800603e:	ab03      	add	r3, sp, #12
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	462a      	mov	r2, r5
 8006044:	4b05      	ldr	r3, [pc, #20]	@ (800605c <_svfiprintf_r+0x1f0>)
 8006046:	a904      	add	r1, sp, #16
 8006048:	4638      	mov	r0, r7
 800604a:	f000 f879 	bl	8006140 <_printf_i>
 800604e:	e7ed      	b.n	800602c <_svfiprintf_r+0x1c0>
 8006050:	08006490 	.word	0x08006490
 8006054:	0800649a 	.word	0x0800649a
 8006058:	00000000 	.word	0x00000000
 800605c:	08005db5 	.word	0x08005db5
 8006060:	08006496 	.word	0x08006496

08006064 <_printf_common>:
 8006064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	4616      	mov	r6, r2
 800606a:	4698      	mov	r8, r3
 800606c:	688a      	ldr	r2, [r1, #8]
 800606e:	690b      	ldr	r3, [r1, #16]
 8006070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006074:	4293      	cmp	r3, r2
 8006076:	bfb8      	it	lt
 8006078:	4613      	movlt	r3, r2
 800607a:	6033      	str	r3, [r6, #0]
 800607c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006080:	4607      	mov	r7, r0
 8006082:	460c      	mov	r4, r1
 8006084:	b10a      	cbz	r2, 800608a <_printf_common+0x26>
 8006086:	3301      	adds	r3, #1
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	0699      	lsls	r1, r3, #26
 800608e:	bf42      	ittt	mi
 8006090:	6833      	ldrmi	r3, [r6, #0]
 8006092:	3302      	addmi	r3, #2
 8006094:	6033      	strmi	r3, [r6, #0]
 8006096:	6825      	ldr	r5, [r4, #0]
 8006098:	f015 0506 	ands.w	r5, r5, #6
 800609c:	d106      	bne.n	80060ac <_printf_common+0x48>
 800609e:	f104 0a19 	add.w	sl, r4, #25
 80060a2:	68e3      	ldr	r3, [r4, #12]
 80060a4:	6832      	ldr	r2, [r6, #0]
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	dc26      	bgt.n	80060fa <_printf_common+0x96>
 80060ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	3b00      	subs	r3, #0
 80060b4:	bf18      	it	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	0692      	lsls	r2, r2, #26
 80060ba:	d42b      	bmi.n	8006114 <_printf_common+0xb0>
 80060bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060c0:	4641      	mov	r1, r8
 80060c2:	4638      	mov	r0, r7
 80060c4:	47c8      	blx	r9
 80060c6:	3001      	adds	r0, #1
 80060c8:	d01e      	beq.n	8006108 <_printf_common+0xa4>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	6922      	ldr	r2, [r4, #16]
 80060ce:	f003 0306 	and.w	r3, r3, #6
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	bf02      	ittt	eq
 80060d6:	68e5      	ldreq	r5, [r4, #12]
 80060d8:	6833      	ldreq	r3, [r6, #0]
 80060da:	1aed      	subeq	r5, r5, r3
 80060dc:	68a3      	ldr	r3, [r4, #8]
 80060de:	bf0c      	ite	eq
 80060e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e4:	2500      	movne	r5, #0
 80060e6:	4293      	cmp	r3, r2
 80060e8:	bfc4      	itt	gt
 80060ea:	1a9b      	subgt	r3, r3, r2
 80060ec:	18ed      	addgt	r5, r5, r3
 80060ee:	2600      	movs	r6, #0
 80060f0:	341a      	adds	r4, #26
 80060f2:	42b5      	cmp	r5, r6
 80060f4:	d11a      	bne.n	800612c <_printf_common+0xc8>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e008      	b.n	800610c <_printf_common+0xa8>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4652      	mov	r2, sl
 80060fe:	4641      	mov	r1, r8
 8006100:	4638      	mov	r0, r7
 8006102:	47c8      	blx	r9
 8006104:	3001      	adds	r0, #1
 8006106:	d103      	bne.n	8006110 <_printf_common+0xac>
 8006108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	3501      	adds	r5, #1
 8006112:	e7c6      	b.n	80060a2 <_printf_common+0x3e>
 8006114:	18e1      	adds	r1, r4, r3
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	2030      	movs	r0, #48	@ 0x30
 800611a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800611e:	4422      	add	r2, r4
 8006120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006128:	3302      	adds	r3, #2
 800612a:	e7c7      	b.n	80060bc <_printf_common+0x58>
 800612c:	2301      	movs	r3, #1
 800612e:	4622      	mov	r2, r4
 8006130:	4641      	mov	r1, r8
 8006132:	4638      	mov	r0, r7
 8006134:	47c8      	blx	r9
 8006136:	3001      	adds	r0, #1
 8006138:	d0e6      	beq.n	8006108 <_printf_common+0xa4>
 800613a:	3601      	adds	r6, #1
 800613c:	e7d9      	b.n	80060f2 <_printf_common+0x8e>
	...

08006140 <_printf_i>:
 8006140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	7e0f      	ldrb	r7, [r1, #24]
 8006146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006148:	2f78      	cmp	r7, #120	@ 0x78
 800614a:	4691      	mov	r9, r2
 800614c:	4680      	mov	r8, r0
 800614e:	460c      	mov	r4, r1
 8006150:	469a      	mov	sl, r3
 8006152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006156:	d807      	bhi.n	8006168 <_printf_i+0x28>
 8006158:	2f62      	cmp	r7, #98	@ 0x62
 800615a:	d80a      	bhi.n	8006172 <_printf_i+0x32>
 800615c:	2f00      	cmp	r7, #0
 800615e:	f000 80d1 	beq.w	8006304 <_printf_i+0x1c4>
 8006162:	2f58      	cmp	r7, #88	@ 0x58
 8006164:	f000 80b8 	beq.w	80062d8 <_printf_i+0x198>
 8006168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800616c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006170:	e03a      	b.n	80061e8 <_printf_i+0xa8>
 8006172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006176:	2b15      	cmp	r3, #21
 8006178:	d8f6      	bhi.n	8006168 <_printf_i+0x28>
 800617a:	a101      	add	r1, pc, #4	@ (adr r1, 8006180 <_printf_i+0x40>)
 800617c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006180:	080061d9 	.word	0x080061d9
 8006184:	080061ed 	.word	0x080061ed
 8006188:	08006169 	.word	0x08006169
 800618c:	08006169 	.word	0x08006169
 8006190:	08006169 	.word	0x08006169
 8006194:	08006169 	.word	0x08006169
 8006198:	080061ed 	.word	0x080061ed
 800619c:	08006169 	.word	0x08006169
 80061a0:	08006169 	.word	0x08006169
 80061a4:	08006169 	.word	0x08006169
 80061a8:	08006169 	.word	0x08006169
 80061ac:	080062eb 	.word	0x080062eb
 80061b0:	08006217 	.word	0x08006217
 80061b4:	080062a5 	.word	0x080062a5
 80061b8:	08006169 	.word	0x08006169
 80061bc:	08006169 	.word	0x08006169
 80061c0:	0800630d 	.word	0x0800630d
 80061c4:	08006169 	.word	0x08006169
 80061c8:	08006217 	.word	0x08006217
 80061cc:	08006169 	.word	0x08006169
 80061d0:	08006169 	.word	0x08006169
 80061d4:	080062ad 	.word	0x080062ad
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	1d1a      	adds	r2, r3, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6032      	str	r2, [r6, #0]
 80061e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061e8:	2301      	movs	r3, #1
 80061ea:	e09c      	b.n	8006326 <_printf_i+0x1e6>
 80061ec:	6833      	ldr	r3, [r6, #0]
 80061ee:	6820      	ldr	r0, [r4, #0]
 80061f0:	1d19      	adds	r1, r3, #4
 80061f2:	6031      	str	r1, [r6, #0]
 80061f4:	0606      	lsls	r6, r0, #24
 80061f6:	d501      	bpl.n	80061fc <_printf_i+0xbc>
 80061f8:	681d      	ldr	r5, [r3, #0]
 80061fa:	e003      	b.n	8006204 <_printf_i+0xc4>
 80061fc:	0645      	lsls	r5, r0, #25
 80061fe:	d5fb      	bpl.n	80061f8 <_printf_i+0xb8>
 8006200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006204:	2d00      	cmp	r5, #0
 8006206:	da03      	bge.n	8006210 <_printf_i+0xd0>
 8006208:	232d      	movs	r3, #45	@ 0x2d
 800620a:	426d      	negs	r5, r5
 800620c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006210:	4858      	ldr	r0, [pc, #352]	@ (8006374 <_printf_i+0x234>)
 8006212:	230a      	movs	r3, #10
 8006214:	e011      	b.n	800623a <_printf_i+0xfa>
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	6833      	ldr	r3, [r6, #0]
 800621a:	0608      	lsls	r0, r1, #24
 800621c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006220:	d402      	bmi.n	8006228 <_printf_i+0xe8>
 8006222:	0649      	lsls	r1, r1, #25
 8006224:	bf48      	it	mi
 8006226:	b2ad      	uxthmi	r5, r5
 8006228:	2f6f      	cmp	r7, #111	@ 0x6f
 800622a:	4852      	ldr	r0, [pc, #328]	@ (8006374 <_printf_i+0x234>)
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	bf14      	ite	ne
 8006230:	230a      	movne	r3, #10
 8006232:	2308      	moveq	r3, #8
 8006234:	2100      	movs	r1, #0
 8006236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800623a:	6866      	ldr	r6, [r4, #4]
 800623c:	60a6      	str	r6, [r4, #8]
 800623e:	2e00      	cmp	r6, #0
 8006240:	db05      	blt.n	800624e <_printf_i+0x10e>
 8006242:	6821      	ldr	r1, [r4, #0]
 8006244:	432e      	orrs	r6, r5
 8006246:	f021 0104 	bic.w	r1, r1, #4
 800624a:	6021      	str	r1, [r4, #0]
 800624c:	d04b      	beq.n	80062e6 <_printf_i+0x1a6>
 800624e:	4616      	mov	r6, r2
 8006250:	fbb5 f1f3 	udiv	r1, r5, r3
 8006254:	fb03 5711 	mls	r7, r3, r1, r5
 8006258:	5dc7      	ldrb	r7, [r0, r7]
 800625a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800625e:	462f      	mov	r7, r5
 8006260:	42bb      	cmp	r3, r7
 8006262:	460d      	mov	r5, r1
 8006264:	d9f4      	bls.n	8006250 <_printf_i+0x110>
 8006266:	2b08      	cmp	r3, #8
 8006268:	d10b      	bne.n	8006282 <_printf_i+0x142>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	07df      	lsls	r7, r3, #31
 800626e:	d508      	bpl.n	8006282 <_printf_i+0x142>
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	6861      	ldr	r1, [r4, #4]
 8006274:	4299      	cmp	r1, r3
 8006276:	bfde      	ittt	le
 8006278:	2330      	movle	r3, #48	@ 0x30
 800627a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800627e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006282:	1b92      	subs	r2, r2, r6
 8006284:	6122      	str	r2, [r4, #16]
 8006286:	f8cd a000 	str.w	sl, [sp]
 800628a:	464b      	mov	r3, r9
 800628c:	aa03      	add	r2, sp, #12
 800628e:	4621      	mov	r1, r4
 8006290:	4640      	mov	r0, r8
 8006292:	f7ff fee7 	bl	8006064 <_printf_common>
 8006296:	3001      	adds	r0, #1
 8006298:	d14a      	bne.n	8006330 <_printf_i+0x1f0>
 800629a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800629e:	b004      	add	sp, #16
 80062a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	f043 0320 	orr.w	r3, r3, #32
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	4832      	ldr	r0, [pc, #200]	@ (8006378 <_printf_i+0x238>)
 80062ae:	2778      	movs	r7, #120	@ 0x78
 80062b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	6831      	ldr	r1, [r6, #0]
 80062b8:	061f      	lsls	r7, r3, #24
 80062ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80062be:	d402      	bmi.n	80062c6 <_printf_i+0x186>
 80062c0:	065f      	lsls	r7, r3, #25
 80062c2:	bf48      	it	mi
 80062c4:	b2ad      	uxthmi	r5, r5
 80062c6:	6031      	str	r1, [r6, #0]
 80062c8:	07d9      	lsls	r1, r3, #31
 80062ca:	bf44      	itt	mi
 80062cc:	f043 0320 	orrmi.w	r3, r3, #32
 80062d0:	6023      	strmi	r3, [r4, #0]
 80062d2:	b11d      	cbz	r5, 80062dc <_printf_i+0x19c>
 80062d4:	2310      	movs	r3, #16
 80062d6:	e7ad      	b.n	8006234 <_printf_i+0xf4>
 80062d8:	4826      	ldr	r0, [pc, #152]	@ (8006374 <_printf_i+0x234>)
 80062da:	e7e9      	b.n	80062b0 <_printf_i+0x170>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	f023 0320 	bic.w	r3, r3, #32
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	e7f6      	b.n	80062d4 <_printf_i+0x194>
 80062e6:	4616      	mov	r6, r2
 80062e8:	e7bd      	b.n	8006266 <_printf_i+0x126>
 80062ea:	6833      	ldr	r3, [r6, #0]
 80062ec:	6825      	ldr	r5, [r4, #0]
 80062ee:	6961      	ldr	r1, [r4, #20]
 80062f0:	1d18      	adds	r0, r3, #4
 80062f2:	6030      	str	r0, [r6, #0]
 80062f4:	062e      	lsls	r6, r5, #24
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	d501      	bpl.n	80062fe <_printf_i+0x1be>
 80062fa:	6019      	str	r1, [r3, #0]
 80062fc:	e002      	b.n	8006304 <_printf_i+0x1c4>
 80062fe:	0668      	lsls	r0, r5, #25
 8006300:	d5fb      	bpl.n	80062fa <_printf_i+0x1ba>
 8006302:	8019      	strh	r1, [r3, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	6123      	str	r3, [r4, #16]
 8006308:	4616      	mov	r6, r2
 800630a:	e7bc      	b.n	8006286 <_printf_i+0x146>
 800630c:	6833      	ldr	r3, [r6, #0]
 800630e:	1d1a      	adds	r2, r3, #4
 8006310:	6032      	str	r2, [r6, #0]
 8006312:	681e      	ldr	r6, [r3, #0]
 8006314:	6862      	ldr	r2, [r4, #4]
 8006316:	2100      	movs	r1, #0
 8006318:	4630      	mov	r0, r6
 800631a:	f7f9 ff99 	bl	8000250 <memchr>
 800631e:	b108      	cbz	r0, 8006324 <_printf_i+0x1e4>
 8006320:	1b80      	subs	r0, r0, r6
 8006322:	6060      	str	r0, [r4, #4]
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	6123      	str	r3, [r4, #16]
 8006328:	2300      	movs	r3, #0
 800632a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800632e:	e7aa      	b.n	8006286 <_printf_i+0x146>
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	4632      	mov	r2, r6
 8006334:	4649      	mov	r1, r9
 8006336:	4640      	mov	r0, r8
 8006338:	47d0      	blx	sl
 800633a:	3001      	adds	r0, #1
 800633c:	d0ad      	beq.n	800629a <_printf_i+0x15a>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	079b      	lsls	r3, r3, #30
 8006342:	d413      	bmi.n	800636c <_printf_i+0x22c>
 8006344:	68e0      	ldr	r0, [r4, #12]
 8006346:	9b03      	ldr	r3, [sp, #12]
 8006348:	4298      	cmp	r0, r3
 800634a:	bfb8      	it	lt
 800634c:	4618      	movlt	r0, r3
 800634e:	e7a6      	b.n	800629e <_printf_i+0x15e>
 8006350:	2301      	movs	r3, #1
 8006352:	4632      	mov	r2, r6
 8006354:	4649      	mov	r1, r9
 8006356:	4640      	mov	r0, r8
 8006358:	47d0      	blx	sl
 800635a:	3001      	adds	r0, #1
 800635c:	d09d      	beq.n	800629a <_printf_i+0x15a>
 800635e:	3501      	adds	r5, #1
 8006360:	68e3      	ldr	r3, [r4, #12]
 8006362:	9903      	ldr	r1, [sp, #12]
 8006364:	1a5b      	subs	r3, r3, r1
 8006366:	42ab      	cmp	r3, r5
 8006368:	dcf2      	bgt.n	8006350 <_printf_i+0x210>
 800636a:	e7eb      	b.n	8006344 <_printf_i+0x204>
 800636c:	2500      	movs	r5, #0
 800636e:	f104 0619 	add.w	r6, r4, #25
 8006372:	e7f5      	b.n	8006360 <_printf_i+0x220>
 8006374:	080064a1 	.word	0x080064a1
 8006378:	080064b2 	.word	0x080064b2

0800637c <memmove>:
 800637c:	4288      	cmp	r0, r1
 800637e:	b510      	push	{r4, lr}
 8006380:	eb01 0402 	add.w	r4, r1, r2
 8006384:	d902      	bls.n	800638c <memmove+0x10>
 8006386:	4284      	cmp	r4, r0
 8006388:	4623      	mov	r3, r4
 800638a:	d807      	bhi.n	800639c <memmove+0x20>
 800638c:	1e43      	subs	r3, r0, #1
 800638e:	42a1      	cmp	r1, r4
 8006390:	d008      	beq.n	80063a4 <memmove+0x28>
 8006392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800639a:	e7f8      	b.n	800638e <memmove+0x12>
 800639c:	4402      	add	r2, r0
 800639e:	4601      	mov	r1, r0
 80063a0:	428a      	cmp	r2, r1
 80063a2:	d100      	bne.n	80063a6 <memmove+0x2a>
 80063a4:	bd10      	pop	{r4, pc}
 80063a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063ae:	e7f7      	b.n	80063a0 <memmove+0x24>

080063b0 <_sbrk_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4d06      	ldr	r5, [pc, #24]	@ (80063cc <_sbrk_r+0x1c>)
 80063b4:	2300      	movs	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	4608      	mov	r0, r1
 80063ba:	602b      	str	r3, [r5, #0]
 80063bc:	f7fa fc72 	bl	8000ca4 <_sbrk>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d102      	bne.n	80063ca <_sbrk_r+0x1a>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	b103      	cbz	r3, 80063ca <_sbrk_r+0x1a>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	20000a14 	.word	0x20000a14

080063d0 <memcpy>:
 80063d0:	440a      	add	r2, r1
 80063d2:	4291      	cmp	r1, r2
 80063d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80063d8:	d100      	bne.n	80063dc <memcpy+0xc>
 80063da:	4770      	bx	lr
 80063dc:	b510      	push	{r4, lr}
 80063de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063e6:	4291      	cmp	r1, r2
 80063e8:	d1f9      	bne.n	80063de <memcpy+0xe>
 80063ea:	bd10      	pop	{r4, pc}

080063ec <_realloc_r>:
 80063ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f0:	4607      	mov	r7, r0
 80063f2:	4614      	mov	r4, r2
 80063f4:	460d      	mov	r5, r1
 80063f6:	b921      	cbnz	r1, 8006402 <_realloc_r+0x16>
 80063f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	4611      	mov	r1, r2
 80063fe:	f7ff bc4d 	b.w	8005c9c <_malloc_r>
 8006402:	b92a      	cbnz	r2, 8006410 <_realloc_r+0x24>
 8006404:	f7ff fbde 	bl	8005bc4 <_free_r>
 8006408:	4625      	mov	r5, r4
 800640a:	4628      	mov	r0, r5
 800640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006410:	f000 f81a 	bl	8006448 <_malloc_usable_size_r>
 8006414:	4284      	cmp	r4, r0
 8006416:	4606      	mov	r6, r0
 8006418:	d802      	bhi.n	8006420 <_realloc_r+0x34>
 800641a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800641e:	d8f4      	bhi.n	800640a <_realloc_r+0x1e>
 8006420:	4621      	mov	r1, r4
 8006422:	4638      	mov	r0, r7
 8006424:	f7ff fc3a 	bl	8005c9c <_malloc_r>
 8006428:	4680      	mov	r8, r0
 800642a:	b908      	cbnz	r0, 8006430 <_realloc_r+0x44>
 800642c:	4645      	mov	r5, r8
 800642e:	e7ec      	b.n	800640a <_realloc_r+0x1e>
 8006430:	42b4      	cmp	r4, r6
 8006432:	4622      	mov	r2, r4
 8006434:	4629      	mov	r1, r5
 8006436:	bf28      	it	cs
 8006438:	4632      	movcs	r2, r6
 800643a:	f7ff ffc9 	bl	80063d0 <memcpy>
 800643e:	4629      	mov	r1, r5
 8006440:	4638      	mov	r0, r7
 8006442:	f7ff fbbf 	bl	8005bc4 <_free_r>
 8006446:	e7f1      	b.n	800642c <_realloc_r+0x40>

08006448 <_malloc_usable_size_r>:
 8006448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800644c:	1f18      	subs	r0, r3, #4
 800644e:	2b00      	cmp	r3, #0
 8006450:	bfbc      	itt	lt
 8006452:	580b      	ldrlt	r3, [r1, r0]
 8006454:	18c0      	addlt	r0, r0, r3
 8006456:	4770      	bx	lr

08006458 <_init>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr

08006464 <_fini>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	bf00      	nop
 8006468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646a:	bc08      	pop	{r3}
 800646c:	469e      	mov	lr, r3
 800646e:	4770      	bx	lr
