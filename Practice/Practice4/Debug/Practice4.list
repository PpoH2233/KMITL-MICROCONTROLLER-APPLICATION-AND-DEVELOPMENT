
Practice4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009234  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009438  08009438  0000a438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800988c  0800988c  0000b314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800988c  0800988c  0000a88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009894  08009894  0000b314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009894  08009894  0000a894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009898  08009898  0000a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800989c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08009a70  0000b1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08009b10  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000838  20000314  08009bb0  0000b314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b4c  08009bb0  0000bb4c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b314  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013893  00000000  00000000  0000b342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003031  00000000  00000000  0001ebd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f58  00000000  00000000  00021c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000baa  00000000  00000000  00022b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ac86  00000000  00000000  0002370a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000133f2  00000000  00000000  0004e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00101504  00000000  00000000  00061782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00162c86  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000517c  00000000  00000000  00162ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  00167e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	0800941c 	.word	0x0800941c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	0800941c 	.word	0x0800941c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a18:	4a21      	ldr	r2, [pc, #132]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a46:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <MX_ADC1_Init+0xa0>)
 8000a48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a64:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a66:	f000 fe0b 	bl	8001680 <HAL_ADC_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a70:	f000 faf2 	bl	8001058 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a74:	230a      	movs	r3, #10
 8000a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a86:	f000 ffa5 	bl	80019d4 <HAL_ADC_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a90:	f000 fae2 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000330 	.word	0x20000330
 8000aa0:	40012000 	.word	0x40012000
 8000aa4:	0f000001 	.word	0x0f000001

08000aa8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <HAL_ADC_MspInit+0x74>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d123      	bne.n	8000b12 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_ADC_MspInit+0x78>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ace:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <HAL_ADC_MspInit+0x78>)
 8000ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_ADC_MspInit+0x78>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_ADC_MspInit+0x78>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <HAL_ADC_MspInit+0x78>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <HAL_ADC_MspInit+0x78>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000afa:	2301      	movs	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <HAL_ADC_MspInit+0x7c>)
 8000b0e:	f001 fdbd 	bl	800268c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40012000 	.word	0x40012000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020800 	.word	0x40020800

08000b28 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b2e:	4a20      	ldr	r2, [pc, #128]	@ (8000bb0 <MX_ETH_Init+0x88>)
 8000b30:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b40:	22e1      	movs	r2, #225	@ 0xe1
 8000b42:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b58:	4a16      	ldr	r2, [pc, #88]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b62:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b66:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <MX_ETH_Init+0x90>)
 8000b68:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b6c:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <MX_ETH_Init+0x94>)
 8000b6e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b72:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000b76:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b7a:	f001 fa61 	bl	8002040 <HAL_ETH_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 fa68 	bl	8001058 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b88:	2238      	movs	r2, #56	@ 0x38
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <MX_ETH_Init+0x98>)
 8000b8e:	f005 f92a 	bl	8005de6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_ETH_Init+0x98>)
 8000b94:	2221      	movs	r2, #33	@ 0x21
 8000b96:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_ETH_Init+0x98>)
 8000b9a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b9e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <MX_ETH_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200003b0 	.word	0x200003b0
 8000bb0:	40028000 	.word	0x40028000
 8000bb4:	20000460 	.word	0x20000460
 8000bb8:	20000274 	.word	0x20000274
 8000bbc:	200001d4 	.word	0x200001d4
 8000bc0:	20000378 	.word	0x20000378

08000bc4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	@ 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a4e      	ldr	r2, [pc, #312]	@ (8000d1c <HAL_ETH_MspInit+0x158>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	f040 8096 	bne.w	8000d14 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000be8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	4a4c      	ldr	r2, [pc, #304]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000bee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	6a3b      	ldr	r3, [r7, #32]
 8000c00:	4b47      	ldr	r3, [pc, #284]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	4a46      	ldr	r2, [pc, #280]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0c:	4b44      	ldr	r3, [pc, #272]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	4b41      	ldr	r3, [pc, #260]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	4a40      	ldr	r2, [pc, #256]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c24:	4b3e      	ldr	r3, [pc, #248]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c34:	4a3a      	ldr	r2, [pc, #232]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4c:	4a34      	ldr	r2, [pc, #208]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c54:	4b32      	ldr	r3, [pc, #200]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c60:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	4a2e      	ldr	r2, [pc, #184]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c78:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	4a28      	ldr	r2, [pc, #160]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c84:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c90:	2332      	movs	r3, #50	@ 0x32
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481e      	ldr	r0, [pc, #120]	@ (8000d24 <HAL_ETH_MspInit+0x160>)
 8000cac:	f001 fcee 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cb0:	2386      	movs	r3, #134	@ 0x86
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4817      	ldr	r0, [pc, #92]	@ (8000d28 <HAL_ETH_MspInit+0x164>)
 8000ccc:	f001 fcde 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce2:	230b      	movs	r3, #11
 8000ce4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	480f      	ldr	r0, [pc, #60]	@ (8000d2c <HAL_ETH_MspInit+0x168>)
 8000cee:	f001 fccd 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cf2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d04:	230b      	movs	r3, #11
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <HAL_ETH_MspInit+0x16c>)
 8000d10:	f001 fcbc 	bl	800268c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	@ 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40028000 	.word	0x40028000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020800 	.word	0x40020800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40021800 	.word	0x40021800

08000d34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b47      	ldr	r3, [pc, #284]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a46      	ldr	r2, [pc, #280]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b44      	ldr	r3, [pc, #272]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b41      	ldr	r3, [pc, #260]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a40      	ldr	r2, [pc, #256]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a3a      	ldr	r2, [pc, #232]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b38      	ldr	r3, [pc, #224]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a34      	ldr	r2, [pc, #208]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a2e      	ldr	r2, [pc, #184]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc2:	4b29      	ldr	r3, [pc, #164]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a28      	ldr	r2, [pc, #160]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <MX_GPIO_Init+0x134>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000de0:	4822      	ldr	r0, [pc, #136]	@ (8000e6c <MX_GPIO_Init+0x138>)
 8000de2:	f001 fdff 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2140      	movs	r1, #64	@ 0x40
 8000dea:	4821      	ldr	r0, [pc, #132]	@ (8000e70 <MX_GPIO_Init+0x13c>)
 8000dec:	f001 fdfa 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000df0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	481b      	ldr	r0, [pc, #108]	@ (8000e74 <MX_GPIO_Init+0x140>)
 8000e08:	f001 fc40 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e0c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <MX_GPIO_Init+0x138>)
 8000e26:	f001 fc31 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e2a:	2340      	movs	r3, #64	@ 0x40
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <MX_GPIO_Init+0x13c>)
 8000e42:	f001 fc23 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_GPIO_Init+0x13c>)
 8000e5a:	f001 fc17 	bl	800268c <HAL_GPIO_Init>

}
 8000e5e:	bf00      	nop
 8000e60:	3730      	adds	r7, #48	@ 0x30
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40020800 	.word	0x40020800

08000e78 <getVin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float getVin(uint32_t adc_value)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	float Vref = 3.3f;
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <getVin+0x4c>)
 8000e82:	617b      	str	r3, [r7, #20]
	uint32_t resolution = 4095;
 8000e84:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000e88:	613b      	str	r3, [r7, #16]
	float Vin = ((float)adc_value / resolution) * Vref;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eaa:	edc7 7a03 	vstr	s15, [r7, #12]
	return Vin;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	ee07 3a90 	vmov	s15, r3
}
 8000eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40533333 	.word	0x40533333

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b09c      	sub	sp, #112	@ 0x70
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f000 fb56 	bl	800157e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f851 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f7ff ff2d 	bl	8000d34 <MX_GPIO_Init>
  MX_ETH_Init();
 8000eda:	f7ff fe25 	bl	8000b28 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ede:	f000 f9ed 	bl	80012bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ee2:	f000 fa7b 	bl	80013dc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ee6:	f7ff fd8d 	bl	8000a04 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  volatile uint32_t adc_val = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	66bb      	str	r3, [r7, #104]	@ 0x68
  HAL_ADC_Start(&hadc1);
 8000eee:	481d      	ldr	r0, [pc, #116]	@ (8000f64 <main+0x9c>)
 8000ef0:	f000 fc0a 	bl	8001708 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while( HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){HAL_UART_Transmit(&huart3, "k\r\n" , 3, 100);}
 8000ef4:	e005      	b.n	8000f02 <main+0x3a>
 8000ef6:	2364      	movs	r3, #100	@ 0x64
 8000ef8:	2203      	movs	r2, #3
 8000efa:	491b      	ldr	r1, [pc, #108]	@ (8000f68 <main+0xa0>)
 8000efc:	481b      	ldr	r0, [pc, #108]	@ (8000f6c <main+0xa4>)
 8000efe:	f003 f87d 	bl	8003ffc <HAL_UART_Transmit>
 8000f02:	2164      	movs	r1, #100	@ 0x64
 8000f04:	4817      	ldr	r0, [pc, #92]	@ (8000f64 <main+0x9c>)
 8000f06:	f000 fccd 	bl	80018a4 <HAL_ADC_PollForConversion>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f2      	bne.n	8000ef6 <main+0x2e>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 8000f10:	4814      	ldr	r0, [pc, #80]	@ (8000f64 <main+0x9c>)
 8000f12:	f000 fd52 	bl	80019ba <HAL_ADC_GetValue>
 8000f16:	4603      	mov	r3, r0
 8000f18:	66bb      	str	r3, [r7, #104]	@ 0x68

	  float Vin;
	  Vin = getVin(adc_val);
 8000f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ffab 	bl	8000e78 <getVin>
 8000f22:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c

	  char buf[100];
	  sprintf(buf, "%.2f" , Vin);
 8000f26:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8000f2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2e:	1d38      	adds	r0, r7, #4
 8000f30:	ec53 2b17 	vmov	r2, r3, d7
 8000f34:	490e      	ldr	r1, [pc, #56]	@ (8000f70 <main+0xa8>)
 8000f36:	f004 fef1 	bl	8005d1c <siprintf>

	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 100);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f9cf 	bl	80002e0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	1d39      	adds	r1, r7, #4
 8000f48:	2364      	movs	r3, #100	@ 0x64
 8000f4a:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <main+0xa4>)
 8000f4c:	f003 f856 	bl	8003ffc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, "\r\n" , 2, 100);
 8000f50:	2364      	movs	r3, #100	@ 0x64
 8000f52:	2202      	movs	r2, #2
 8000f54:	4907      	ldr	r1, [pc, #28]	@ (8000f74 <main+0xac>)
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <main+0xa4>)
 8000f58:	f003 f850 	bl	8003ffc <HAL_UART_Transmit>


	  HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 fb6b 	bl	8001638 <HAL_Delay>
  {
 8000f62:	e7c7      	b.n	8000ef4 <main+0x2c>
 8000f64:	20000330 	.word	0x20000330
 8000f68:	08009438 	.word	0x08009438
 8000f6c:	2000046c 	.word	0x2000046c
 8000f70:	0800943c 	.word	0x0800943c
 8000f74:	08009444 	.word	0x08009444

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	@ 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	2234      	movs	r2, #52	@ 0x34
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 ff2d 	bl	8005de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f9c:	f001 fe84 	bl	8002ca8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <SystemClock_Config+0xd8>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8001050 <SystemClock_Config+0xd8>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fac:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <SystemClock_Config+0xd8>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <SystemClock_Config+0xdc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a25      	ldr	r2, [pc, #148]	@ (8001054 <SystemClock_Config+0xdc>)
 8000fbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <SystemClock_Config+0xdc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fd4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fe8:	23d8      	movs	r3, #216	@ 0xd8
 8000fea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ff0:	2309      	movs	r3, #9
 8000ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 feb3 	bl	8002d68 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001008:	f000 f826 	bl	8001058 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800100c:	f001 fe5c 	bl	8002cc8 <HAL_PWREx_EnableOverDrive>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001016:	f000 f81f 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101a:	230f      	movs	r3, #15
 800101c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101e:	2302      	movs	r3, #2
 8001020:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001026:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800102a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2107      	movs	r1, #7
 8001038:	4618      	mov	r0, r3
 800103a:	f002 f943 	bl	80032c4 <HAL_RCC_ClockConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001044:	f000 f808 	bl	8001058 <Error_Handler>
  }
}
 8001048:	bf00      	nop
 800104a:	3750      	adds	r7, #80	@ 0x50
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_MspInit+0x44>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <HAL_MspInit+0x44>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <HAL_MspInit+0x44>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <HAL_MspInit+0x44>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_MspInit+0x44>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 fa79 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}

0800110a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  return 1;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_kill>:

int _kill(int pid, int sig)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001124:	f004 feb2 	bl	8005e8c <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	2216      	movs	r2, #22
 800112c:	601a      	str	r2, [r3, #0]
  return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_exit>:

void _exit (int status)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001142:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffe7 	bl	800111a <_kill>
  while (1) {}    /* Make sure we hang here */
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <_exit+0x12>

08001150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e00a      	b.n	8001178 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001162:	f3af 8000 	nop.w
 8001166:	4601      	mov	r1, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf0      	blt.n	8001162 <_read+0x12>
  }

  return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e009      	b.n	80011b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf1      	blt.n	800119c <_write+0x12>
  }
  return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_close>:

int _close(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ea:	605a      	str	r2, [r3, #4]
  return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_isatty>:

int _isatty(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f004 fe16 	bl	8005e8c <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20080000 	.word	0x20080000
 800128c:	00000400 	.word	0x00000400
 8001290:	20000468 	.word	0x20000468
 8001294:	20000b50 	.word	0x20000b50

08001298 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <MX_USART3_UART_Init+0x5c>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_USART3_UART_Init+0x58>)
 8001300:	f002 fe2e 	bl	8003f60 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800130a:	f7ff fea5 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000046c 	.word	0x2000046c
 8001318:	40004800 	.word	0x40004800

0800131c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0ae      	sub	sp, #184	@ 0xb8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2290      	movs	r2, #144	@ 0x90
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fd52 	bl	8005de6 <memset>
  if(uartHandle->Instance==USART3)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a22      	ldr	r2, [pc, #136]	@ (80013d0 <HAL_UART_MspInit+0xb4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d13c      	bne.n	80013c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800134c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001350:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001352:	2300      	movs	r3, #0
 8001354:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4618      	mov	r0, r3
 800135c:	f002 f9d8 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001366:	f7ff fe77 	bl	8001058 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_UART_MspInit+0xb8>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <HAL_UART_MspInit+0xb8>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <HAL_UART_MspInit+0xb8>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <HAL_UART_MspInit+0xb8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a13      	ldr	r2, [pc, #76]	@ (80013d4 <HAL_UART_MspInit+0xb8>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_UART_MspInit+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800139a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800139e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b4:	2307      	movs	r3, #7
 80013b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <HAL_UART_MspInit+0xbc>)
 80013c2:	f001 f963 	bl	800268c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	37b8      	adds	r7, #184	@ 0xb8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004800 	.word	0x40004800
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020c00 	.word	0x40020c00

080013dc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ea:	2206      	movs	r2, #6
 80013ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001402:	2201      	movs	r2, #1
 8001404:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001414:	2201      	movs	r2, #1
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001420:	f001 faf9 	bl	8002a16 <HAL_PCD_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800142a:	f7ff fe15 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200004f4 	.word	0x200004f4

08001438 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0ae      	sub	sp, #184	@ 0xb8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2290      	movs	r2, #144	@ 0x90
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f004 fcc4 	bl	8005de6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001466:	d159      	bne.n	800151c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001468:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800146c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4618      	mov	r0, r3
 800147a:	f002 f949 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001484:	f7ff fde8 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6313      	str	r3, [r2, #48]	@ 0x30
 8001494:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014a0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80014a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014ba:	230a      	movs	r3, #10
 80014bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	@ (8001528 <HAL_PCD_MspInit+0xf0>)
 80014c8:	f001 f8e0 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4810      	ldr	r0, [pc, #64]	@ (8001528 <HAL_PCD_MspInit+0xf0>)
 80014e8:	f001 f8d0 	bl	800268c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 80014ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 80014f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f6:	6353      	str	r3, [r2, #52]	@ 0x34
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 80014fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001508:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <HAL_PCD_MspInit+0xec>)
 8001512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800151c:	bf00      	nop
 800151e:	37b8      	adds	r7, #184	@ 0xb8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	@ (8001568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	@ (800156c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	@ (8001578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001556:	f7ff fe9f 	bl	8001298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f004 fc9d 	bl	8005e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff fcb3 	bl	8000ec8 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001570:	0800989c 	.word	0x0800989c
  ldr r2, =_sbss
 8001574:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001578:	20000b4c 	.word	0x20000b4c

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>

0800157e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001582:	2003      	movs	r0, #3
 8001584:	f000 fd28 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f805 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff fd69 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fd35 	bl	8002026 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015d4:	f000 fd0b 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	@ (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	200009fc 	.word	0x200009fc

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200009fc 	.word	0x200009fc

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e031      	b.n	80016fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fa02 	bl	8000aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_ADC_Init+0x84>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fad6 	bl	8001c80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016ea:	e001      	b.n	80016f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	ffffeefd 	.word	0xffffeefd

08001708 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_Start+0x1a>
 800171e:	2302      	movs	r3, #2
 8001720:	e0ad      	b.n	800187e <HAL_ADC_Start+0x176>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d018      	beq.n	800176a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001748:	4b50      	ldr	r3, [pc, #320]	@ (800188c <HAL_ADC_Start+0x184>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a50      	ldr	r2, [pc, #320]	@ (8001890 <HAL_ADC_Start+0x188>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0c9a      	lsrs	r2, r3, #18
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800175c:	e002      	b.n	8001764 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3b01      	subs	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f9      	bne.n	800175e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d175      	bne.n	8001864 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800177c:	4b45      	ldr	r3, [pc, #276]	@ (8001894 <HAL_ADC_Start+0x18c>)
 800177e:	4013      	ands	r3, r2
 8001780:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800179e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017b2:	d106      	bne.n	80017c2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b8:	f023 0206 	bic.w	r2, r3, #6
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	645a      	str	r2, [r3, #68]	@ 0x44
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80017da:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <HAL_ADC_Start+0x190>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10f      	bne.n	8001806 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d143      	bne.n	800187c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	e03a      	b.n	800187c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a24      	ldr	r2, [pc, #144]	@ (800189c <HAL_ADC_Start+0x194>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d10e      	bne.n	800182e <HAL_ADC_Start+0x126>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d107      	bne.n	800182e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800182c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_ADC_Start+0x190>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	2b00      	cmp	r3, #0
 8001838:	d120      	bne.n	800187c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a18      	ldr	r2, [pc, #96]	@ (80018a0 <HAL_ADC_Start+0x198>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d11b      	bne.n	800187c <HAL_ADC_Start+0x174>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d114      	bne.n	800187c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	e00b      	b.n	800187c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	f043 0210 	orr.w	r2, r3, #16
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001874:	f043 0201 	orr.w	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000
 8001890:	431bde83 	.word	0x431bde83
 8001894:	fffff8fe 	.word	0xfffff8fe
 8001898:	40012300 	.word	0x40012300
 800189c:	40012000 	.word	0x40012000
 80018a0:	40012200 	.word	0x40012200

080018a4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018c0:	d113      	bne.n	80018ea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018d0:	d10b      	bne.n	80018ea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f043 0220 	orr.w	r2, r3, #32
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e063      	b.n	80019b2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80018ea:	f7ff fe99 	bl	8001620 <HAL_GetTick>
 80018ee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018f0:	e021      	b.n	8001936 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f8:	d01d      	beq.n	8001936 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_ADC_PollForConversion+0x6c>
 8001900:	f7ff fe8e 	bl	8001620 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d212      	bcs.n	8001936 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b02      	cmp	r3, #2
 800191c:	d00b      	beq.n	8001936 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f043 0204 	orr.w	r2, r3, #4
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e03d      	b.n	80019b2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b02      	cmp	r3, #2
 8001942:	d1d6      	bne.n	80018f2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0212 	mvn.w	r2, #18
 800194c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d123      	bne.n	80019b0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800196c:	2b00      	cmp	r3, #0
 800196e:	d11f      	bne.n	80019b0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001988:	2b00      	cmp	r3, #0
 800198a:	d111      	bne.n	80019b0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1c>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e136      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x28a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d93a      	bls.n	8001a76 <HAL_ADC_ConfigChannel+0xa2>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a08:	d035      	beq.n	8001a76 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68d9      	ldr	r1, [r3, #12]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b1e      	subs	r3, #30
 8001a20:	2207      	movs	r2, #7
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a8d      	ldr	r2, [pc, #564]	@ (8001c6c <HAL_ADC_ConfigChannel+0x298>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10a      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	061a      	lsls	r2, r3, #24
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4e:	e035      	b.n	8001abc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4403      	add	r3, r0
 8001a68:	3b1e      	subs	r3, #30
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a74:	e022      	b.n	8001abc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6919      	ldr	r1, [r3, #16]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43da      	mvns	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	400a      	ands	r2, r1
 8001a98:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6919      	ldr	r1, [r3, #16]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4403      	add	r3, r0
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d824      	bhi.n	8001b0e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b05      	subs	r3, #5
 8001ad6:	221f      	movs	r2, #31
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43da      	mvns	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b05      	subs	r3, #5
 8001b00:	fa00 f203 	lsl.w	r2, r0, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b0c:	e04c      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d824      	bhi.n	8001b60 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	3b23      	subs	r3, #35	@ 0x23
 8001b28:	221f      	movs	r2, #31
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	400a      	ands	r2, r1
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b23      	subs	r3, #35	@ 0x23
 8001b52:	fa00 f203 	lsl.w	r2, r0, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5e:	e023      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b41      	subs	r3, #65	@ 0x41
 8001b72:	221f      	movs	r2, #31
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	400a      	ands	r2, r1
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b41      	subs	r3, #65	@ 0x41
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a30      	ldr	r2, [pc, #192]	@ (8001c70 <HAL_ADC_ConfigChannel+0x29c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1f4>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bba:	d105      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bc2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001bc6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a28      	ldr	r2, [pc, #160]	@ (8001c70 <HAL_ADC_ConfigChannel+0x29c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x21e>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001bda:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a25      	ldr	r2, [pc, #148]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001be0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001be4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001be6:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bf0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c70 <HAL_ADC_ConfigChannel+0x29c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d12b      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x280>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <HAL_ADC_ConfigChannel+0x298>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d003      	beq.n	8001c0e <HAL_ADC_ConfigChannel+0x23a>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b11      	cmp	r3, #17
 8001c0c:	d122      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a18      	ldr	r2, [pc, #96]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c14:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001c18:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a15      	ldr	r2, [pc, #84]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <HAL_ADC_ConfigChannel+0x298>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d111      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_ADC_ConfigChannel+0x2a8>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	0c9a      	lsrs	r2, r3, #18
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c46:	e002      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f9      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	10000012 	.word	0x10000012
 8001c70:	40012000 	.word	0x40012000
 8001c74:	40012300 	.word	0x40012300
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	431bde83 	.word	0x431bde83

08001c80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c88:	4b78      	ldr	r3, [pc, #480]	@ (8001e6c <ADC_Init+0x1ec>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a77      	ldr	r2, [pc, #476]	@ (8001e6c <ADC_Init+0x1ec>)
 8001c8e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001c92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c94:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <ADC_Init+0x1ec>)
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4973      	ldr	r1, [pc, #460]	@ (8001e6c <ADC_Init+0x1ec>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	021a      	lsls	r2, r3, #8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0e:	4a58      	ldr	r2, [pc, #352]	@ (8001e70 <ADC_Init+0x1f0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6899      	ldr	r1, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	e00f      	b.n	8001d7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0202 	bic.w	r2, r2, #2
 8001d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6899      	ldr	r1, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	005a      	lsls	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001db6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001dc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	035a      	lsls	r2, r3, #13
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	e007      	b.n	8001df0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	051a      	lsls	r2, r3, #20
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6899      	ldr	r1, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e32:	025a      	lsls	r2, r3, #9
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6899      	ldr	r1, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	029a      	lsls	r2, r3, #10
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40012300 	.word	0x40012300
 8001e70:	0f000001 	.word	0x0f000001

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00
 8001eb8:	05fa0000 	.word	0x05fa0000

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff47 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff5c 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffb0 	bl	8001f94 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06a      	b.n	8002128 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2223      	movs	r2, #35	@ 0x23
 8002060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fdad 	bl	8000bc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	4b31      	ldr	r3, [pc, #196]	@ (8002130 <HAL_ETH_Init+0xf0>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	4a30      	ldr	r2, [pc, #192]	@ (8002130 <HAL_ETH_Init+0xf0>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002074:	6453      	str	r3, [r2, #68]	@ 0x44
 8002076:	4b2e      	ldr	r3, [pc, #184]	@ (8002130 <HAL_ETH_Init+0xf0>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002082:	4b2c      	ldr	r3, [pc, #176]	@ (8002134 <HAL_ETH_Init+0xf4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a2b      	ldr	r2, [pc, #172]	@ (8002134 <HAL_ETH_Init+0xf4>)
 8002088:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800208c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800208e:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <HAL_ETH_Init+0xf4>)
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4927      	ldr	r1, [pc, #156]	@ (8002134 <HAL_ETH_Init+0xf4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800209c:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <HAL_ETH_Init+0xf4>)
 800209e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b8:	f7ff fab2 	bl	8001620 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020be:	e011      	b.n	80020e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020c0:	f7ff faae 	bl	8001620 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020ce:	d909      	bls.n	80020e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2204      	movs	r2, #4
 80020d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	22e0      	movs	r2, #224	@ 0xe0
 80020dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e021      	b.n	8002128 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1e4      	bne.n	80020c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f958 	bl	80023ac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f9ff 	bl	8002500 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa55 	bl	80025b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	461a      	mov	r2, r3
 800210e:	2100      	movs	r1, #0
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f9bd 	bl	8002490 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2210      	movs	r2, #16
 8002122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	40013800 	.word	0x40013800

08002138 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4b51      	ldr	r3, [pc, #324]	@ (8002294 <ETH_SetMACConfig+0x15c>)
 800214e:	4013      	ands	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	7c1b      	ldrb	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <ETH_SetMACConfig+0x28>
 800215a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800215e:	e000      	b.n	8002162 <ETH_SetMACConfig+0x2a>
 8002160:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	7c5b      	ldrb	r3, [r3, #17]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <ETH_SetMACConfig+0x38>
 800216a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800216e:	e000      	b.n	8002172 <ETH_SetMACConfig+0x3a>
 8002170:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002172:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002178:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7fdb      	ldrb	r3, [r3, #31]
 800217e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002180:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002186:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	7f92      	ldrb	r2, [r2, #30]
 800218c:	2a00      	cmp	r2, #0
 800218e:	d102      	bne.n	8002196 <ETH_SetMACConfig+0x5e>
 8002190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002194:	e000      	b.n	8002198 <ETH_SetMACConfig+0x60>
 8002196:	2200      	movs	r2, #0
                        macconf->Speed |
 8002198:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	7f1b      	ldrb	r3, [r3, #28]
 800219e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021a0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	791b      	ldrb	r3, [r3, #4]
 80021ac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021b6:	2a00      	cmp	r2, #0
 80021b8:	d102      	bne.n	80021c0 <ETH_SetMACConfig+0x88>
 80021ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021be:	e000      	b.n	80021c2 <ETH_SetMACConfig+0x8a>
 80021c0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	7bdb      	ldrb	r3, [r3, #15]
 80021c8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021ca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021d8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021da:	4313      	orrs	r3, r2
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7ff fa20 	bl	8001638 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800220e:	4013      	ands	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002216:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800221e:	2a00      	cmp	r2, #0
 8002220:	d101      	bne.n	8002226 <ETH_SetMACConfig+0xee>
 8002222:	2280      	movs	r2, #128	@ 0x80
 8002224:	e000      	b.n	8002228 <ETH_SetMACConfig+0xf0>
 8002226:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002228:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800222e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002236:	2a01      	cmp	r2, #1
 8002238:	d101      	bne.n	800223e <ETH_SetMACConfig+0x106>
 800223a:	2208      	movs	r2, #8
 800223c:	e000      	b.n	8002240 <ETH_SetMACConfig+0x108>
 800223e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002240:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002248:	2a01      	cmp	r2, #1
 800224a:	d101      	bne.n	8002250 <ETH_SetMACConfig+0x118>
 800224c:	2204      	movs	r2, #4
 800224e:	e000      	b.n	8002252 <ETH_SetMACConfig+0x11a>
 8002250:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002252:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800225a:	2a01      	cmp	r2, #1
 800225c:	d101      	bne.n	8002262 <ETH_SetMACConfig+0x12a>
 800225e:	2202      	movs	r2, #2
 8002260:	e000      	b.n	8002264 <ETH_SetMACConfig+0x12c>
 8002262:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002264:	4313      	orrs	r3, r2
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800227c:	2001      	movs	r0, #1
 800227e:	f7ff f9db 	bl	8001638 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	ff20810f 	.word	0xff20810f

08002298 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <ETH_SetDMAConfig+0x110>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	7b1b      	ldrb	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d102      	bne.n	80022c4 <ETH_SetDMAConfig+0x2c>
 80022be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022c2:	e000      	b.n	80022c6 <ETH_SetDMAConfig+0x2e>
 80022c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	7b5b      	ldrb	r3, [r3, #13]
 80022ca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022cc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	7f52      	ldrb	r2, [r2, #29]
 80022d2:	2a00      	cmp	r2, #0
 80022d4:	d102      	bne.n	80022dc <ETH_SetDMAConfig+0x44>
 80022d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80022da:	e000      	b.n	80022de <ETH_SetDMAConfig+0x46>
 80022dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	7b9b      	ldrb	r3, [r3, #14]
 80022e4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022e6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	7f1b      	ldrb	r3, [r3, #28]
 80022f2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	7f9b      	ldrb	r3, [r3, #30]
 80022fa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022fc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002302:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800230a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800230c:	4313      	orrs	r3, r2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800231c:	461a      	mov	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff f982 	bl	8001638 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233c:	461a      	mov	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	791b      	ldrb	r3, [r3, #4]
 8002346:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800234c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002352:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002358:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002360:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002362:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800236a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002370:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800237a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800237e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800238c:	2001      	movs	r0, #1
 800238e:	f7ff f953 	bl	8001638 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6013      	str	r3, [r2, #0]
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	f8de3f23 	.word	0xf8de3f23

080023ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b0a6      	sub	sp, #152	@ 0x98
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023e8:	2300      	movs	r3, #0
 80023ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800240e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002414:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002418:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002420:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fe86 	bl	8002138 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800242c:	2301      	movs	r3, #1
 800242e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002430:	2301      	movs	r3, #1
 8002432:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800243a:	2301      	movs	r3, #1
 800243c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800244e:	2300      	movs	r3, #0
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002452:	2301      	movs	r3, #1
 8002454:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002458:	2301      	movs	r3, #1
 800245a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800245c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002460:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002462:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002466:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800246c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002474:	2300      	movs	r3, #0
 8002476:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff08 	bl	8002298 <ETH_SetDMAConfig>
}
 8002488:	bf00      	nop
 800248a:	3798      	adds	r7, #152	@ 0x98
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3305      	adds	r3, #5
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	3204      	adds	r2, #4
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <ETH_MACAddressConfig+0x68>)
 80024b2:	4413      	add	r3, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3303      	adds	r3, #3
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	061a      	lsls	r2, r3, #24
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3302      	adds	r3, #2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3301      	adds	r3, #1
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	4313      	orrs	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <ETH_MACAddressConfig+0x6c>)
 80024e2:	4413      	add	r3, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	6013      	str	r3, [r2, #0]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40028040 	.word	0x40028040
 80024fc:	40028044 	.word	0x40028044

08002500 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e03e      	b.n	800258c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	3206      	adds	r2, #6
 8002540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d80c      	bhi.n	8002570 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68d9      	ldr	r1, [r3, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e004      	b.n	800257a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	461a      	mov	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3301      	adds	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d9bd      	bls.n	800250e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a4:	611a      	str	r2, [r3, #16]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e046      	b.n	800264e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6919      	ldr	r1, [r3, #16]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80025fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002604:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	3212      	adds	r2, #18
 800261a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d80c      	bhi.n	800263e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6919      	ldr	r1, [r3, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	e004      	b.n	8002648 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3301      	adds	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d9b5      	bls.n	80025c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267e:	60da      	str	r2, [r3, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e175      	b.n	8002998 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 8164 	bne.w	8002992 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d005      	beq.n	80026e2 <HAL_GPIO_Init+0x56>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b03      	cmp	r3, #3
 800274e:	d017      	beq.n	8002780 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d123      	bne.n	80027d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80be 	beq.w	8002992 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	4b66      	ldr	r3, [pc, #408]	@ (80029b0 <HAL_GPIO_Init+0x324>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	4a65      	ldr	r2, [pc, #404]	@ (80029b0 <HAL_GPIO_Init+0x324>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002820:	6453      	str	r3, [r2, #68]	@ 0x44
 8002822:	4b63      	ldr	r3, [pc, #396]	@ (80029b0 <HAL_GPIO_Init+0x324>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800282e:	4a61      	ldr	r2, [pc, #388]	@ (80029b4 <HAL_GPIO_Init+0x328>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a58      	ldr	r2, [pc, #352]	@ (80029b8 <HAL_GPIO_Init+0x32c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d037      	beq.n	80028ca <HAL_GPIO_Init+0x23e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_GPIO_Init+0x330>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_GPIO_Init+0x23a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a56      	ldr	r2, [pc, #344]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d02b      	beq.n	80028c2 <HAL_GPIO_Init+0x236>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a55      	ldr	r2, [pc, #340]	@ (80029c4 <HAL_GPIO_Init+0x338>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_Init+0x232>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a54      	ldr	r2, [pc, #336]	@ (80029c8 <HAL_GPIO_Init+0x33c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_Init+0x22e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a53      	ldr	r2, [pc, #332]	@ (80029cc <HAL_GPIO_Init+0x340>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x22a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a52      	ldr	r2, [pc, #328]	@ (80029d0 <HAL_GPIO_Init+0x344>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a51      	ldr	r2, [pc, #324]	@ (80029d4 <HAL_GPIO_Init+0x348>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x222>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a50      	ldr	r2, [pc, #320]	@ (80029d8 <HAL_GPIO_Init+0x34c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x21e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4f      	ldr	r2, [pc, #316]	@ (80029dc <HAL_GPIO_Init+0x350>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x21a>
 80028a2:	2309      	movs	r3, #9
 80028a4:	e012      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028a6:	230a      	movs	r3, #10
 80028a8:	e010      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028aa:	2308      	movs	r3, #8
 80028ac:	e00e      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e00c      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028b2:	2306      	movs	r3, #6
 80028b4:	e00a      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028b6:	2305      	movs	r3, #5
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028ca:	2300      	movs	r3, #0
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028dc:	4935      	ldr	r1, [pc, #212]	@ (80029b4 <HAL_GPIO_Init+0x328>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ea:	4b3d      	ldr	r3, [pc, #244]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290e:	4a34      	ldr	r2, [pc, #208]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002914:	4b32      	ldr	r3, [pc, #200]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002938:	4a29      	ldr	r2, [pc, #164]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800293e:	4b28      	ldr	r3, [pc, #160]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002962:	4a1f      	ldr	r2, [pc, #124]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002968:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298c:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	f67f ae86 	bls.w	80026ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40021400 	.word	0x40021400
 80029d0:	40021800 	.word	0x40021800
 80029d4:	40021c00 	.word	0x40021c00
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40022400 	.word	0x40022400
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a18:	b08f      	sub	sp, #60	@ 0x3c
 8002a1a:	af0a      	add	r7, sp, #40	@ 0x28
 8002a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e116      	b.n	8002c56 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fcf8 	bl	8001438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 ffbe 	bl	80049e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	687e      	ldr	r6, [r7, #4]
 8002a74:	466d      	mov	r5, sp
 8002a76:	f106 0410 	add.w	r4, r6, #16
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a8a:	1d33      	adds	r3, r6, #4
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f001 ff52 	bl	8004938 <USB_CoreInit>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0d7      	b.n	8002c56 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 ffac 	bl	8004a0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e04a      	b.n	8002b4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	333d      	adds	r3, #61	@ 0x3d
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	333c      	adds	r3, #60	@ 0x3c
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	b298      	uxth	r0, r3
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3344      	adds	r3, #68	@ 0x44
 8002af4:	4602      	mov	r2, r0
 8002af6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3340      	adds	r3, #64	@ 0x40
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3348      	adds	r3, #72	@ 0x48
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	334c      	adds	r3, #76	@ 0x4c
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	3354      	adds	r3, #84	@ 0x54
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3af      	bcc.n	8002ab8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e044      	b.n	8002be8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	3301      	adds	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3b5      	bcc.n	8002b5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	687e      	ldr	r6, [r7, #4]
 8002bfa:	466d      	mov	r5, sp
 8002bfc:	f106 0410 	add.w	r4, r6, #16
 8002c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c10:	1d33      	adds	r3, r6, #4
 8002c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	f001 ff45 	bl	8004aa4 <USB_DevInit>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e014      	b.n	8002c56 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f80b 	bl	8002c60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 f903 	bl	8004e5a <USB_DevDisconnect>

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	10000003 	.word	0x10000003

08002ca8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	4a22      	ldr	r2, [pc, #136]	@ (8002d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cea:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf6:	f7fe fc93 	bl	8001620 <HAL_GetTick>
 8002cfa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cfc:	e009      	b.n	8002d12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cfe:	f7fe fc8f 	bl	8001620 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d0c:	d901      	bls.n	8002d12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e022      	b.n	8002d58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d12:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d1e:	d1ee      	bne.n	8002cfe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d20:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0f      	ldr	r2, [pc, #60]	@ (8002d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d2c:	f7fe fc78 	bl	8001620 <HAL_GetTick>
 8002d30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d32:	e009      	b.n	8002d48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d34:	f7fe fc74 	bl	8001620 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d42:	d901      	bls.n	8002d48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e007      	b.n	8002d58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d54:	d1ee      	bne.n	8002d34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40007000 	.word	0x40007000

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d70:	2300      	movs	r3, #0
 8002d72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e29b      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8087 	beq.w	8002e9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d8c:	4b96      	ldr	r3, [pc, #600]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d00c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d98:	4b93      	ldr	r3, [pc, #588]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d112      	bne.n	8002dca <HAL_RCC_OscConfig+0x62>
 8002da4:	4b90      	ldr	r3, [pc, #576]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db0:	d10b      	bne.n	8002dca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db2:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d06c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x130>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d168      	bne.n	8002e98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e275      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x7a>
 8002dd4:	4b84      	ldr	r3, [pc, #528]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a83      	ldr	r2, [pc, #524]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	e02e      	b.n	8002e40 <HAL_RCC_OscConfig+0xd8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x9c>
 8002dea:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7b      	ldr	r2, [pc, #492]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01d      	b.n	8002e40 <HAL_RCC_OscConfig+0xd8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0xc0>
 8002e0e:	4b76      	ldr	r3, [pc, #472]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b73      	ldr	r3, [pc, #460]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a72      	ldr	r2, [pc, #456]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0xd8>
 8002e28:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fbea 	bl	8001620 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe fbe6 	bl	8001620 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	@ 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e229      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b61      	ldr	r3, [pc, #388]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe8>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fbd6 	bl	8001620 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe fbd2 	bl	8001620 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e215      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	4b57      	ldr	r3, [pc, #348]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x110>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d069      	beq.n	8002f7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ea6:	4b50      	ldr	r3, [pc, #320]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d11c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x190>
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	4b47      	ldr	r3, [pc, #284]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x17a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e1e9      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee2:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	493d      	ldr	r1, [pc, #244]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	e040      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d023      	beq.n	8002f48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f00:	4b39      	ldr	r3, [pc, #228]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a38      	ldr	r2, [pc, #224]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fb88 	bl	8001620 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f14:	f7fe fb84 	bl	8001620 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1c7      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b30      	ldr	r3, [pc, #192]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4929      	ldr	r1, [pc, #164]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
 8002f46:	e018      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f48:	4b27      	ldr	r3, [pc, #156]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe fb64 	bl	8001620 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fb60 	bl	8001620 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1a3      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d038      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d019      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8e:	4b16      	ldr	r3, [pc, #88]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f92:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fb41 	bl	8001620 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fb3d 	bl	8001620 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e180      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x23a>
 8002fc0:	e01a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc2:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc6:	4a08      	ldr	r2, [pc, #32]	@ (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7fe fb27 	bl	8001620 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7fe fb23 	bl	8001620 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d903      	bls.n	8002fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e166      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
 8002fe8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	4b92      	ldr	r3, [pc, #584]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ee      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a4 	beq.w	800314e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b8c      	ldr	r3, [pc, #560]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b89      	ldr	r3, [pc, #548]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	4a88      	ldr	r2, [pc, #544]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800301c:	6413      	str	r3, [r2, #64]	@ 0x40
 800301e:	4b86      	ldr	r3, [pc, #536]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302a:	2301      	movs	r3, #1
 800302c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	4b83      	ldr	r3, [pc, #524]	@ (800323c <HAL_RCC_OscConfig+0x4d4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800303a:	4b80      	ldr	r3, [pc, #512]	@ (800323c <HAL_RCC_OscConfig+0x4d4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7f      	ldr	r2, [pc, #508]	@ (800323c <HAL_RCC_OscConfig+0x4d4>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003046:	f7fe faeb 	bl	8001620 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304e:	f7fe fae7 	bl	8001620 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	@ 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e12a      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003060:	4b76      	ldr	r3, [pc, #472]	@ (800323c <HAL_RCC_OscConfig+0x4d4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x31a>
 8003074:	4b70      	ldr	r3, [pc, #448]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	4a6f      	ldr	r2, [pc, #444]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003080:	e02d      	b.n	80030de <HAL_RCC_OscConfig+0x376>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x33c>
 800308a:	4b6b      	ldr	r3, [pc, #428]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	4a6a      	ldr	r2, [pc, #424]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	@ 0x70
 8003096:	4b68      	ldr	r3, [pc, #416]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	4a67      	ldr	r2, [pc, #412]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a2:	e01c      	b.n	80030de <HAL_RCC_OscConfig+0x376>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x35e>
 80030ac:	4b62      	ldr	r3, [pc, #392]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a61      	ldr	r2, [pc, #388]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c4:	e00b      	b.n	80030de <HAL_RCC_OscConfig+0x376>
 80030c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d2:	4b59      	ldr	r3, [pc, #356]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d6:	4a58      	ldr	r2, [pc, #352]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d015      	beq.n	8003112 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe fa9b 	bl	8001620 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fe fa97 	bl	8001620 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0d8      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	4b4c      	ldr	r3, [pc, #304]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ee      	beq.n	80030ee <HAL_RCC_OscConfig+0x386>
 8003110:	e014      	b.n	800313c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fe fa85 	bl	8001620 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe fa81 	bl	8001620 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e0c2      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	4b41      	ldr	r3, [pc, #260]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ee      	bne.n	800311a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003142:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	4a3c      	ldr	r2, [pc, #240]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80ae 	beq.w	80032b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003158:	4b37      	ldr	r3, [pc, #220]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d06d      	beq.n	8003240 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d14b      	bne.n	8003204 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316c:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a31      	ldr	r2, [pc, #196]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003172:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fa52 	bl	8001620 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe fa4e 	bl	8001620 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e091      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	4b29      	ldr	r3, [pc, #164]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	019b      	lsls	r3, r3, #6
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	3b01      	subs	r3, #1
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	071b      	lsls	r3, r3, #28
 80031ca:	491b      	ldr	r1, [pc, #108]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fa20 	bl	8001620 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fa1c 	bl	8001620 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e05f      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x47c>
 8003202:	e057      	b.n	80032b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0b      	ldr	r2, [pc, #44]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe fa06 	bl	8001620 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe fa02 	bl	8001620 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e045      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x4b0>
 8003236:	e03d      	b.n	80032b4 <HAL_RCC_OscConfig+0x54c>
 8003238:	40023800 	.word	0x40023800
 800323c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003240:	4b1f      	ldr	r3, [pc, #124]	@ (80032c0 <HAL_RCC_OscConfig+0x558>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d030      	beq.n	80032b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d129      	bne.n	80032b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d122      	bne.n	80032b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003276:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003278:	4293      	cmp	r3, r2
 800327a:	d119      	bne.n	80032b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d10f      	bne.n	80032b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0d0      	b.n	800347e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d910      	bls.n	800330c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b67      	ldr	r3, [pc, #412]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 020f 	bic.w	r2, r3, #15
 80032f2:	4965      	ldr	r1, [pc, #404]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a58      	ldr	r2, [pc, #352]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800332e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a52      	ldr	r2, [pc, #328]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003342:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003346:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d040      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d115      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b41      	ldr	r3, [pc, #260]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e073      	b.n	800347e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3d      	ldr	r3, [pc, #244]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06b      	b.n	800347e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4936      	ldr	r1, [pc, #216]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7fe f932 	bl	8001620 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe f92e 	bl	8001620 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e053      	b.n	800347e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2d      	ldr	r3, [pc, #180]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d210      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 020f 	bic.w	r2, r3, #15
 80033fe:	4922      	ldr	r1, [pc, #136]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003442:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	@ (8003490 <HAL_RCC_ClockConfig+0x1cc>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	@ (8003494 <HAL_RCC_ClockConfig+0x1d0>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <HAL_RCC_ClockConfig+0x1d4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe f88e 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00
 800348c:	40023800 	.word	0x40023800
 8003490:	08009448 	.word	0x08009448
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a0:	b094      	sub	sp, #80	@ 0x50
 80034a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a8:	2300      	movs	r3, #0
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ac:	2300      	movs	r3, #0
 80034ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b4:	4b79      	ldr	r3, [pc, #484]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d00d      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x40>
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	f200 80e1 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x34>
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ce:	e0db      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b73      	ldr	r3, [pc, #460]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034d4:	e0db      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034d6:	4b73      	ldr	r3, [pc, #460]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80034d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034da:	e0d8      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034dc:	4b6f      	ldr	r3, [pc, #444]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034e6:	4b6d      	ldr	r3, [pc, #436]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d063      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f2:	4b6a      	ldr	r3, [pc, #424]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	2200      	movs	r2, #0
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	633b      	str	r3, [r7, #48]	@ 0x30
 8003506:	2300      	movs	r3, #0
 8003508:	637b      	str	r3, [r7, #52]	@ 0x34
 800350a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	0159      	lsls	r1, r3, #5
 800351c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003520:	0150      	lsls	r0, r2, #5
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4621      	mov	r1, r4
 8003528:	1a51      	subs	r1, r2, r1
 800352a:	6139      	str	r1, [r7, #16]
 800352c:	4629      	mov	r1, r5
 800352e:	eb63 0301 	sbc.w	r3, r3, r1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003540:	4659      	mov	r1, fp
 8003542:	018b      	lsls	r3, r1, #6
 8003544:	4651      	mov	r1, sl
 8003546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354a:	4651      	mov	r1, sl
 800354c:	018a      	lsls	r2, r1, #6
 800354e:	4651      	mov	r1, sl
 8003550:	ebb2 0801 	subs.w	r8, r2, r1
 8003554:	4659      	mov	r1, fp
 8003556:	eb63 0901 	sbc.w	r9, r3, r1
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800356e:	4690      	mov	r8, r2
 8003570:	4699      	mov	r9, r3
 8003572:	4623      	mov	r3, r4
 8003574:	eb18 0303 	adds.w	r3, r8, r3
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	462b      	mov	r3, r5
 800357c:	eb49 0303 	adc.w	r3, r9, r3
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800358e:	4629      	mov	r1, r5
 8003590:	024b      	lsls	r3, r1, #9
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003598:	4621      	mov	r1, r4
 800359a:	024a      	lsls	r2, r1, #9
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a2:	2200      	movs	r2, #0
 80035a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ac:	f7fd f85c 	bl	8000668 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4613      	mov	r3, r2
 80035b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b8:	e058      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b38      	ldr	r3, [pc, #224]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	2200      	movs	r2, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	4611      	mov	r1, r2
 80035c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ca:	623b      	str	r3, [r7, #32]
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035d4:	4642      	mov	r2, r8
 80035d6:	464b      	mov	r3, r9
 80035d8:	f04f 0000 	mov.w	r0, #0
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	0159      	lsls	r1, r3, #5
 80035e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e6:	0150      	lsls	r0, r2, #5
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4641      	mov	r1, r8
 80035ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80035f2:	4649      	mov	r1, r9
 80035f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003604:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003608:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800360c:	ebb2 040a 	subs.w	r4, r2, sl
 8003610:	eb63 050b 	sbc.w	r5, r3, fp
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	00eb      	lsls	r3, r5, #3
 800361e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003622:	00e2      	lsls	r2, r4, #3
 8003624:	4614      	mov	r4, r2
 8003626:	461d      	mov	r5, r3
 8003628:	4643      	mov	r3, r8
 800362a:	18e3      	adds	r3, r4, r3
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	464b      	mov	r3, r9
 8003630:	eb45 0303 	adc.w	r3, r5, r3
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003642:	4629      	mov	r1, r5
 8003644:	028b      	lsls	r3, r1, #10
 8003646:	4621      	mov	r1, r4
 8003648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800364c:	4621      	mov	r1, r4
 800364e:	028a      	lsls	r2, r1, #10
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003656:	2200      	movs	r2, #0
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	61fa      	str	r2, [r7, #28]
 800365c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003660:	f7fd f802 	bl	8000668 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4613      	mov	r3, r2
 800366a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800367c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800367e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003686:	e002      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800368a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800368c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003690:	4618      	mov	r0, r3
 8003692:	3750      	adds	r7, #80	@ 0x50
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200

080036a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036c4:	f7ff fff0 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0a9b      	lsrs	r3, r3, #10
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	@ (80036e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	08009458 	.word	0x08009458

080036e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036ec:	f7ff ffdc 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0b5b      	lsrs	r3, r3, #13
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	@ (800370c <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	08009458 	.word	0x08009458

08003710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d012      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003738:	4b69      	ldr	r3, [pc, #420]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a68      	ldr	r2, [pc, #416]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003742:	6093      	str	r3, [r2, #8]
 8003744:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	4964      	ldr	r1, [pc, #400]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800375a:	2301      	movs	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800376a:	4b5d      	ldr	r3, [pc, #372]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003770:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	4959      	ldr	r1, [pc, #356]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003788:	d101      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800378a:	2301      	movs	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d017      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037a6:	4b4e      	ldr	r3, [pc, #312]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	494a      	ldr	r1, [pc, #296]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037c4:	d101      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 808b 	beq.w	800390a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b3a      	ldr	r3, [pc, #232]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	4a39      	ldr	r2, [pc, #228]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003800:	4b37      	ldr	r3, [pc, #220]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800380c:	4b35      	ldr	r3, [pc, #212]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a34      	ldr	r2, [pc, #208]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fd ff02 	bl	8001620 <HAL_GetTick>
 800381c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fd fefe 	bl	8001620 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	@ 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e38f      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003832:	4b2c      	ldr	r3, [pc, #176]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800383e:	4b28      	ldr	r3, [pc, #160]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003846:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d035      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	429a      	cmp	r2, r3
 800385a:	d02e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800385c:	4b20      	ldr	r3, [pc, #128]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003864:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003866:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003870:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003872:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	4a1a      	ldr	r2, [pc, #104]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800387c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800387e:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003884:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d114      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd fec6 	bl	8001620 <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003896:	e00a      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fd fec2 	bl	8001620 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e351      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0ee      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038c6:	d111      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	4901      	ldr	r1, [pc, #4]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
 80038de:	e00b      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40007000 	.word	0x40007000
 80038e8:	0ffffcff 	.word	0x0ffffcff
 80038ec:	4bac      	ldr	r3, [pc, #688]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4aab      	ldr	r2, [pc, #684]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80038f6:	6093      	str	r3, [r2, #8]
 80038f8:	4ba9      	ldr	r3, [pc, #676]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	49a6      	ldr	r1, [pc, #664]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003906:	4313      	orrs	r3, r2
 8003908:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003916:	4ba2      	ldr	r3, [pc, #648]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800391c:	4aa0      	ldr	r2, [pc, #640]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003926:	4b9e      	ldr	r3, [pc, #632]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003928:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	499b      	ldr	r1, [pc, #620]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003944:	4b96      	ldr	r3, [pc, #600]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003952:	4993      	ldr	r1, [pc, #588]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003966:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003974:	498a      	ldr	r1, [pc, #552]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003988:	4b85      	ldr	r3, [pc, #532]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003996:	4982      	ldr	r1, [pc, #520]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039aa:	4b7d      	ldr	r3, [pc, #500]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b8:	4979      	ldr	r1, [pc, #484]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039cc:	4b74      	ldr	r3, [pc, #464]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	4971      	ldr	r1, [pc, #452]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ee:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f4:	f023 020c 	bic.w	r2, r3, #12
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fc:	4968      	ldr	r1, [pc, #416]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a10:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a16:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1e:	4960      	ldr	r1, [pc, #384]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a32:	4b5b      	ldr	r3, [pc, #364]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a38:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	4957      	ldr	r1, [pc, #348]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a54:	4b52      	ldr	r3, [pc, #328]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	494f      	ldr	r1, [pc, #316]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	4946      	ldr	r1, [pc, #280]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a98:	4b41      	ldr	r3, [pc, #260]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa6:	493e      	ldr	r1, [pc, #248]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aba:	4b39      	ldr	r3, [pc, #228]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac8:	4935      	ldr	r1, [pc, #212]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003adc:	4b30      	ldr	r3, [pc, #192]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aea:	492d      	ldr	r1, [pc, #180]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d011      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003afe:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b04:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b0c:	4924      	ldr	r1, [pc, #144]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b3e:	4b18      	ldr	r3, [pc, #96]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b44:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4c:	4914      	ldr	r1, [pc, #80]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00b      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b66:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b70:	490b      	ldr	r1, [pc, #44]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00f      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b94:	4902      	ldr	r1, [pc, #8]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	4986      	ldr	r1, [pc, #536]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00b      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bd4:	4b81      	ldr	r3, [pc, #516]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bda:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003be4:	497d      	ldr	r1, [pc, #500]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d006      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80d6 	beq.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c00:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0c:	f7fd fd08 	bl	8001620 <HAL_GetTick>
 8003c10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c14:	f7fd fd04 	bl	8001620 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	@ 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e195      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c26:	4b6d      	ldr	r3, [pc, #436]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d021      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11d      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c46:	4b65      	ldr	r3, [pc, #404]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c54:	4b61      	ldr	r3, [pc, #388]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c5a:	0e1b      	lsrs	r3, r3, #24
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	019a      	lsls	r2, r3, #6
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	071b      	lsls	r3, r3, #28
 8003c7a:	4958      	ldr	r1, [pc, #352]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02e      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cac:	d129      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cae:	4b4b      	ldr	r3, [pc, #300]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cbc:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cc2:	0f1b      	lsrs	r3, r3, #28
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	019a      	lsls	r2, r3, #6
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	041b      	lsls	r3, r3, #16
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	061b      	lsls	r3, r3, #24
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	493e      	ldr	r1, [pc, #248]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cea:	4b3c      	ldr	r3, [pc, #240]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf0:	f023 021f 	bic.w	r2, r3, #31
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	4938      	ldr	r1, [pc, #224]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01d      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d0e:	4b33      	ldr	r3, [pc, #204]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d14:	0e1b      	lsrs	r3, r3, #24
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d22:	0f1b      	lsrs	r3, r3, #28
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	019a      	lsls	r2, r3, #6
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	061b      	lsls	r3, r3, #24
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	071b      	lsls	r3, r3, #28
 8003d42:	4926      	ldr	r1, [pc, #152]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d011      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	019a      	lsls	r2, r3, #6
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	071b      	lsls	r3, r3, #28
 8003d72:	491a      	ldr	r1, [pc, #104]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d7a:	4b18      	ldr	r3, [pc, #96]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a17      	ldr	r2, [pc, #92]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d86:	f7fd fc4b 	bl	8001620 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d8e:	f7fd fc47 	bl	8001620 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	@ 0x64
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e0d8      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003da0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	f040 80ce 	bne.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003db4:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a08      	ldr	r2, [pc, #32]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fc2e 	bl	8001620 <HAL_GetTick>
 8003dc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dc8:	f7fd fc2a 	bl	8001620 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	@ 0x64
 8003dd4:	d904      	bls.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0bb      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003de0:	4b5e      	ldr	r3, [pc, #376]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dec:	d0ec      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02e      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d12a      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e16:	4b51      	ldr	r3, [pc, #324]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e24:	4b4d      	ldr	r3, [pc, #308]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2a:	0f1b      	lsrs	r3, r3, #28
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	019a      	lsls	r2, r3, #6
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	061b      	lsls	r3, r3, #24
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	071b      	lsls	r3, r3, #28
 8003e4a:	4944      	ldr	r1, [pc, #272]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e52:	4b42      	ldr	r3, [pc, #264]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	3b01      	subs	r3, #1
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	493d      	ldr	r1, [pc, #244]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d022      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e80:	d11d      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e82:	4b36      	ldr	r3, [pc, #216]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e88:	0e1b      	lsrs	r3, r3, #24
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e90:	4b32      	ldr	r3, [pc, #200]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e96:	0f1b      	lsrs	r3, r3, #28
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	019a      	lsls	r2, r3, #6
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	061b      	lsls	r3, r3, #24
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	071b      	lsls	r3, r3, #28
 8003eb6:	4929      	ldr	r1, [pc, #164]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d028      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eca:	4b24      	ldr	r3, [pc, #144]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	0e1b      	lsrs	r3, r3, #24
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ed8:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	019a      	lsls	r2, r3, #6
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	061b      	lsls	r3, r3, #24
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	4917      	ldr	r1, [pc, #92]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f06:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	4911      	ldr	r1, [pc, #68]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0e      	ldr	r2, [pc, #56]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f28:	f7fd fb7a 	bl	8001620 <HAL_GetTick>
 8003f2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f30:	f7fd fb76 	bl	8001620 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	@ 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e007      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f42:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f4e:	d1ef      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800

08003f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e040      	b.n	8003ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd f9ca 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2224      	movs	r2, #36	@ 0x24
 8003f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8b0 	bl	8004104 <UART_SetConfig>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e022      	b.n	8003ff4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fb08 	bl	80045cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fb8f 	bl	8004710 <UART_CheckIdleState>
 8003ff2:	4603      	mov	r3, r0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004010:	2b20      	cmp	r3, #32
 8004012:	d171      	bne.n	80040f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_UART_Transmit+0x24>
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e06a      	b.n	80040fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2221      	movs	r2, #33	@ 0x21
 8004030:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004032:	f7fd faf5 	bl	8001620 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004050:	d108      	bne.n	8004064 <HAL_UART_Transmit+0x68>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	e003      	b.n	800406c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800406c:	e02c      	b.n	80040c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2200      	movs	r2, #0
 8004076:	2180      	movs	r1, #128	@ 0x80
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fb96 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e038      	b.n	80040fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	3302      	adds	r3, #2
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e007      	b.n	80040b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1cc      	bne.n	800406e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	2140      	movs	r1, #64	@ 0x40
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fb63 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e005      	b.n	80040fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4ba6      	ldr	r3, [pc, #664]	@ (80043c8 <UART_SetConfig+0x2c4>)
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	6979      	ldr	r1, [r7, #20]
 8004138:	430b      	orrs	r3, r1
 800413a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a94      	ldr	r2, [pc, #592]	@ (80043cc <UART_SetConfig+0x2c8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d120      	bne.n	80041c2 <UART_SetConfig+0xbe>
 8004180:	4b93      	ldr	r3, [pc, #588]	@ (80043d0 <UART_SetConfig+0x2cc>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b03      	cmp	r3, #3
 800418c:	d816      	bhi.n	80041bc <UART_SetConfig+0xb8>
 800418e:	a201      	add	r2, pc, #4	@ (adr r2, 8004194 <UART_SetConfig+0x90>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041a5 	.word	0x080041a5
 8004198:	080041b1 	.word	0x080041b1
 800419c:	080041ab 	.word	0x080041ab
 80041a0:	080041b7 	.word	0x080041b7
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e150      	b.n	800444c <UART_SetConfig+0x348>
 80041aa:	2302      	movs	r3, #2
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	e14d      	b.n	800444c <UART_SetConfig+0x348>
 80041b0:	2304      	movs	r3, #4
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e14a      	b.n	800444c <UART_SetConfig+0x348>
 80041b6:	2308      	movs	r3, #8
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e147      	b.n	800444c <UART_SetConfig+0x348>
 80041bc:	2310      	movs	r3, #16
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e144      	b.n	800444c <UART_SetConfig+0x348>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a83      	ldr	r2, [pc, #524]	@ (80043d4 <UART_SetConfig+0x2d0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d132      	bne.n	8004232 <UART_SetConfig+0x12e>
 80041cc:	4b80      	ldr	r3, [pc, #512]	@ (80043d0 <UART_SetConfig+0x2cc>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d828      	bhi.n	800422c <UART_SetConfig+0x128>
 80041da:	a201      	add	r2, pc, #4	@ (adr r2, 80041e0 <UART_SetConfig+0xdc>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004215 	.word	0x08004215
 80041e4:	0800422d 	.word	0x0800422d
 80041e8:	0800422d 	.word	0x0800422d
 80041ec:	0800422d 	.word	0x0800422d
 80041f0:	08004221 	.word	0x08004221
 80041f4:	0800422d 	.word	0x0800422d
 80041f8:	0800422d 	.word	0x0800422d
 80041fc:	0800422d 	.word	0x0800422d
 8004200:	0800421b 	.word	0x0800421b
 8004204:	0800422d 	.word	0x0800422d
 8004208:	0800422d 	.word	0x0800422d
 800420c:	0800422d 	.word	0x0800422d
 8004210:	08004227 	.word	0x08004227
 8004214:	2300      	movs	r3, #0
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e118      	b.n	800444c <UART_SetConfig+0x348>
 800421a:	2302      	movs	r3, #2
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e115      	b.n	800444c <UART_SetConfig+0x348>
 8004220:	2304      	movs	r3, #4
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e112      	b.n	800444c <UART_SetConfig+0x348>
 8004226:	2308      	movs	r3, #8
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e10f      	b.n	800444c <UART_SetConfig+0x348>
 800422c:	2310      	movs	r3, #16
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e10c      	b.n	800444c <UART_SetConfig+0x348>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a68      	ldr	r2, [pc, #416]	@ (80043d8 <UART_SetConfig+0x2d4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d120      	bne.n	800427e <UART_SetConfig+0x17a>
 800423c:	4b64      	ldr	r3, [pc, #400]	@ (80043d0 <UART_SetConfig+0x2cc>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004246:	2b30      	cmp	r3, #48	@ 0x30
 8004248:	d013      	beq.n	8004272 <UART_SetConfig+0x16e>
 800424a:	2b30      	cmp	r3, #48	@ 0x30
 800424c:	d814      	bhi.n	8004278 <UART_SetConfig+0x174>
 800424e:	2b20      	cmp	r3, #32
 8004250:	d009      	beq.n	8004266 <UART_SetConfig+0x162>
 8004252:	2b20      	cmp	r3, #32
 8004254:	d810      	bhi.n	8004278 <UART_SetConfig+0x174>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <UART_SetConfig+0x15c>
 800425a:	2b10      	cmp	r3, #16
 800425c:	d006      	beq.n	800426c <UART_SetConfig+0x168>
 800425e:	e00b      	b.n	8004278 <UART_SetConfig+0x174>
 8004260:	2300      	movs	r3, #0
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e0f2      	b.n	800444c <UART_SetConfig+0x348>
 8004266:	2302      	movs	r3, #2
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e0ef      	b.n	800444c <UART_SetConfig+0x348>
 800426c:	2304      	movs	r3, #4
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e0ec      	b.n	800444c <UART_SetConfig+0x348>
 8004272:	2308      	movs	r3, #8
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e0e9      	b.n	800444c <UART_SetConfig+0x348>
 8004278:	2310      	movs	r3, #16
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e0e6      	b.n	800444c <UART_SetConfig+0x348>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a56      	ldr	r2, [pc, #344]	@ (80043dc <UART_SetConfig+0x2d8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d120      	bne.n	80042ca <UART_SetConfig+0x1c6>
 8004288:	4b51      	ldr	r3, [pc, #324]	@ (80043d0 <UART_SetConfig+0x2cc>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004292:	2bc0      	cmp	r3, #192	@ 0xc0
 8004294:	d013      	beq.n	80042be <UART_SetConfig+0x1ba>
 8004296:	2bc0      	cmp	r3, #192	@ 0xc0
 8004298:	d814      	bhi.n	80042c4 <UART_SetConfig+0x1c0>
 800429a:	2b80      	cmp	r3, #128	@ 0x80
 800429c:	d009      	beq.n	80042b2 <UART_SetConfig+0x1ae>
 800429e:	2b80      	cmp	r3, #128	@ 0x80
 80042a0:	d810      	bhi.n	80042c4 <UART_SetConfig+0x1c0>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <UART_SetConfig+0x1a8>
 80042a6:	2b40      	cmp	r3, #64	@ 0x40
 80042a8:	d006      	beq.n	80042b8 <UART_SetConfig+0x1b4>
 80042aa:	e00b      	b.n	80042c4 <UART_SetConfig+0x1c0>
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e0cc      	b.n	800444c <UART_SetConfig+0x348>
 80042b2:	2302      	movs	r3, #2
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e0c9      	b.n	800444c <UART_SetConfig+0x348>
 80042b8:	2304      	movs	r3, #4
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e0c6      	b.n	800444c <UART_SetConfig+0x348>
 80042be:	2308      	movs	r3, #8
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e0c3      	b.n	800444c <UART_SetConfig+0x348>
 80042c4:	2310      	movs	r3, #16
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e0c0      	b.n	800444c <UART_SetConfig+0x348>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a44      	ldr	r2, [pc, #272]	@ (80043e0 <UART_SetConfig+0x2dc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d125      	bne.n	8004320 <UART_SetConfig+0x21c>
 80042d4:	4b3e      	ldr	r3, [pc, #248]	@ (80043d0 <UART_SetConfig+0x2cc>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e2:	d017      	beq.n	8004314 <UART_SetConfig+0x210>
 80042e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e8:	d817      	bhi.n	800431a <UART_SetConfig+0x216>
 80042ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ee:	d00b      	beq.n	8004308 <UART_SetConfig+0x204>
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f4:	d811      	bhi.n	800431a <UART_SetConfig+0x216>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <UART_SetConfig+0x1fe>
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042fe:	d006      	beq.n	800430e <UART_SetConfig+0x20a>
 8004300:	e00b      	b.n	800431a <UART_SetConfig+0x216>
 8004302:	2300      	movs	r3, #0
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e0a1      	b.n	800444c <UART_SetConfig+0x348>
 8004308:	2302      	movs	r3, #2
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e09e      	b.n	800444c <UART_SetConfig+0x348>
 800430e:	2304      	movs	r3, #4
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e09b      	b.n	800444c <UART_SetConfig+0x348>
 8004314:	2308      	movs	r3, #8
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e098      	b.n	800444c <UART_SetConfig+0x348>
 800431a:	2310      	movs	r3, #16
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e095      	b.n	800444c <UART_SetConfig+0x348>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2f      	ldr	r2, [pc, #188]	@ (80043e4 <UART_SetConfig+0x2e0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d125      	bne.n	8004376 <UART_SetConfig+0x272>
 800432a:	4b29      	ldr	r3, [pc, #164]	@ (80043d0 <UART_SetConfig+0x2cc>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004330:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004334:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004338:	d017      	beq.n	800436a <UART_SetConfig+0x266>
 800433a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800433e:	d817      	bhi.n	8004370 <UART_SetConfig+0x26c>
 8004340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004344:	d00b      	beq.n	800435e <UART_SetConfig+0x25a>
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800434a:	d811      	bhi.n	8004370 <UART_SetConfig+0x26c>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <UART_SetConfig+0x254>
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004354:	d006      	beq.n	8004364 <UART_SetConfig+0x260>
 8004356:	e00b      	b.n	8004370 <UART_SetConfig+0x26c>
 8004358:	2301      	movs	r3, #1
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e076      	b.n	800444c <UART_SetConfig+0x348>
 800435e:	2302      	movs	r3, #2
 8004360:	77fb      	strb	r3, [r7, #31]
 8004362:	e073      	b.n	800444c <UART_SetConfig+0x348>
 8004364:	2304      	movs	r3, #4
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e070      	b.n	800444c <UART_SetConfig+0x348>
 800436a:	2308      	movs	r3, #8
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e06d      	b.n	800444c <UART_SetConfig+0x348>
 8004370:	2310      	movs	r3, #16
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e06a      	b.n	800444c <UART_SetConfig+0x348>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1b      	ldr	r2, [pc, #108]	@ (80043e8 <UART_SetConfig+0x2e4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d138      	bne.n	80043f2 <UART_SetConfig+0x2ee>
 8004380:	4b13      	ldr	r3, [pc, #76]	@ (80043d0 <UART_SetConfig+0x2cc>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004386:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800438a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800438e:	d017      	beq.n	80043c0 <UART_SetConfig+0x2bc>
 8004390:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004394:	d82a      	bhi.n	80043ec <UART_SetConfig+0x2e8>
 8004396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439a:	d00b      	beq.n	80043b4 <UART_SetConfig+0x2b0>
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a0:	d824      	bhi.n	80043ec <UART_SetConfig+0x2e8>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <UART_SetConfig+0x2aa>
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043aa:	d006      	beq.n	80043ba <UART_SetConfig+0x2b6>
 80043ac:	e01e      	b.n	80043ec <UART_SetConfig+0x2e8>
 80043ae:	2300      	movs	r3, #0
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e04b      	b.n	800444c <UART_SetConfig+0x348>
 80043b4:	2302      	movs	r3, #2
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e048      	b.n	800444c <UART_SetConfig+0x348>
 80043ba:	2304      	movs	r3, #4
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e045      	b.n	800444c <UART_SetConfig+0x348>
 80043c0:	2308      	movs	r3, #8
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e042      	b.n	800444c <UART_SetConfig+0x348>
 80043c6:	bf00      	nop
 80043c8:	efff69f3 	.word	0xefff69f3
 80043cc:	40011000 	.word	0x40011000
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40004400 	.word	0x40004400
 80043d8:	40004800 	.word	0x40004800
 80043dc:	40004c00 	.word	0x40004c00
 80043e0:	40005000 	.word	0x40005000
 80043e4:	40011400 	.word	0x40011400
 80043e8:	40007800 	.word	0x40007800
 80043ec:	2310      	movs	r3, #16
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e02c      	b.n	800444c <UART_SetConfig+0x348>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a72      	ldr	r2, [pc, #456]	@ (80045c0 <UART_SetConfig+0x4bc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d125      	bne.n	8004448 <UART_SetConfig+0x344>
 80043fc:	4b71      	ldr	r3, [pc, #452]	@ (80045c4 <UART_SetConfig+0x4c0>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004402:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004406:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800440a:	d017      	beq.n	800443c <UART_SetConfig+0x338>
 800440c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004410:	d817      	bhi.n	8004442 <UART_SetConfig+0x33e>
 8004412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004416:	d00b      	beq.n	8004430 <UART_SetConfig+0x32c>
 8004418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800441c:	d811      	bhi.n	8004442 <UART_SetConfig+0x33e>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <UART_SetConfig+0x326>
 8004422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004426:	d006      	beq.n	8004436 <UART_SetConfig+0x332>
 8004428:	e00b      	b.n	8004442 <UART_SetConfig+0x33e>
 800442a:	2300      	movs	r3, #0
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e00d      	b.n	800444c <UART_SetConfig+0x348>
 8004430:	2302      	movs	r3, #2
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e00a      	b.n	800444c <UART_SetConfig+0x348>
 8004436:	2304      	movs	r3, #4
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e007      	b.n	800444c <UART_SetConfig+0x348>
 800443c:	2308      	movs	r3, #8
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e004      	b.n	800444c <UART_SetConfig+0x348>
 8004442:	2310      	movs	r3, #16
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e001      	b.n	800444c <UART_SetConfig+0x348>
 8004448:	2310      	movs	r3, #16
 800444a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004454:	d15b      	bne.n	800450e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004456:	7ffb      	ldrb	r3, [r7, #31]
 8004458:	2b08      	cmp	r3, #8
 800445a:	d828      	bhi.n	80044ae <UART_SetConfig+0x3aa>
 800445c:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <UART_SetConfig+0x360>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004489 	.word	0x08004489
 8004468:	08004491 	.word	0x08004491
 800446c:	08004499 	.word	0x08004499
 8004470:	080044af 	.word	0x080044af
 8004474:	0800449f 	.word	0x0800449f
 8004478:	080044af 	.word	0x080044af
 800447c:	080044af 	.word	0x080044af
 8004480:	080044af 	.word	0x080044af
 8004484:	080044a7 	.word	0x080044a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004488:	f7ff f91a 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 800448c:	61b8      	str	r0, [r7, #24]
        break;
 800448e:	e013      	b.n	80044b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7ff f92a 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 8004494:	61b8      	str	r0, [r7, #24]
        break;
 8004496:	e00f      	b.n	80044b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004498:	4b4b      	ldr	r3, [pc, #300]	@ (80045c8 <UART_SetConfig+0x4c4>)
 800449a:	61bb      	str	r3, [r7, #24]
        break;
 800449c:	e00c      	b.n	80044b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449e:	f7fe fffd 	bl	800349c <HAL_RCC_GetSysClockFreq>
 80044a2:	61b8      	str	r0, [r7, #24]
        break;
 80044a4:	e008      	b.n	80044b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044aa:	61bb      	str	r3, [r7, #24]
        break;
 80044ac:	e004      	b.n	80044b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	77bb      	strb	r3, [r7, #30]
        break;
 80044b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d074      	beq.n	80045a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	005a      	lsls	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	d916      	bls.n	8004508 <UART_SetConfig+0x404>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e0:	d212      	bcs.n	8004508 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f023 030f 	bic.w	r3, r3, #15
 80044ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	89fb      	ldrh	r3, [r7, #14]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	89fa      	ldrh	r2, [r7, #14]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	e04f      	b.n	80045a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	77bb      	strb	r3, [r7, #30]
 800450c:	e04c      	b.n	80045a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800450e:	7ffb      	ldrb	r3, [r7, #31]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d828      	bhi.n	8004566 <UART_SetConfig+0x462>
 8004514:	a201      	add	r2, pc, #4	@ (adr r2, 800451c <UART_SetConfig+0x418>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004541 	.word	0x08004541
 8004520:	08004549 	.word	0x08004549
 8004524:	08004551 	.word	0x08004551
 8004528:	08004567 	.word	0x08004567
 800452c:	08004557 	.word	0x08004557
 8004530:	08004567 	.word	0x08004567
 8004534:	08004567 	.word	0x08004567
 8004538:	08004567 	.word	0x08004567
 800453c:	0800455f 	.word	0x0800455f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004540:	f7ff f8be 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004544:	61b8      	str	r0, [r7, #24]
        break;
 8004546:	e013      	b.n	8004570 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7ff f8ce 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 800454c:	61b8      	str	r0, [r7, #24]
        break;
 800454e:	e00f      	b.n	8004570 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004550:	4b1d      	ldr	r3, [pc, #116]	@ (80045c8 <UART_SetConfig+0x4c4>)
 8004552:	61bb      	str	r3, [r7, #24]
        break;
 8004554:	e00c      	b.n	8004570 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004556:	f7fe ffa1 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800455a:	61b8      	str	r0, [r7, #24]
        break;
 800455c:	e008      	b.n	8004570 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004562:	61bb      	str	r3, [r7, #24]
        break;
 8004564:	e004      	b.n	8004570 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	77bb      	strb	r3, [r7, #30]
        break;
 800456e:	bf00      	nop
    }

    if (pclk != 0U)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d018      	beq.n	80045a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	085a      	lsrs	r2, r3, #1
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	441a      	add	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d909      	bls.n	80045a4 <UART_SetConfig+0x4a0>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004596:	d205      	bcs.n	80045a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e001      	b.n	80045a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40007c00 	.word	0x40007c00
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400

080045cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ca:	d10a      	bne.n	80046e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004720:	f7fc ff7e 	bl	8001620 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b08      	cmp	r3, #8
 8004732:	d10e      	bne.n	8004752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f831 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e027      	b.n	80047a2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d10e      	bne.n	800477e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004760:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f81b 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e011      	b.n	80047a2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b09c      	sub	sp, #112	@ 0x70
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	e0a7      	b.n	800490c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047c2:	f000 80a3 	beq.w	800490c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c6:	f7fc ff2b 	bl	8001620 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <UART_WaitOnFlagUntilTimeout+0x32>
 80047d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d13f      	bne.n	800485c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80047ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ec:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80047f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004800:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e6      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	663b      	str	r3, [r7, #96]	@ 0x60
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800482e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004830:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004834:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800483c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e068      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d050      	beq.n	800490c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004878:	d148      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004882:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004898:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e6      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	613b      	str	r3, [r7, #16]
   return(result);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3308      	adds	r3, #8
 80048d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80048d6:	623a      	str	r2, [r7, #32]
 80048d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	69f9      	ldr	r1, [r7, #28]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e5      	bne.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e010      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4013      	ands	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	429a      	cmp	r2, r3
 8004928:	f43f af48 	beq.w	80047bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3770      	adds	r7, #112	@ 0x70
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004938:	b084      	sub	sp, #16
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	f107 001c 	add.w	r0, r7, #28
 8004946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	2b01      	cmp	r3, #1
 800494e:	d120      	bne.n	8004992 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <USB_CoreInit+0xac>)
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa96 	bl	8004eb8 <USB_CoreReset>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
 8004990:	e010      	b.n	80049b4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fa8a 	bl	8004eb8 <USB_CoreReset>
 80049a4:	4603      	mov	r3, r0
 80049a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80049b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10b      	bne.n	80049d2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f043 0206 	orr.w	r2, r3, #6
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049de:	b004      	add	sp, #16
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	ffbdffbf 	.word	0xffbdffbf

080049e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f023 0201 	bic.w	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d115      	bne.n	8004a58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f7fc fdfd 	bl	8001638 <HAL_Delay>
      ms++;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa29 	bl	8004e9c <USB_GetMode>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d01e      	beq.n	8004a8e <USB_SetCurrentMode+0x84>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b31      	cmp	r3, #49	@ 0x31
 8004a54:	d9f0      	bls.n	8004a38 <USB_SetCurrentMode+0x2e>
 8004a56:	e01a      	b.n	8004a8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d115      	bne.n	8004a8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f7fc fde4 	bl	8001638 <HAL_Delay>
      ms++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fa10 	bl	8004e9c <USB_GetMode>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <USB_SetCurrentMode+0x84>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b31      	cmp	r3, #49	@ 0x31
 8004a86:	d9f0      	bls.n	8004a6a <USB_SetCurrentMode+0x60>
 8004a88:	e001      	b.n	8004a8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e005      	b.n	8004a9a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b32      	cmp	r3, #50	@ 0x32
 8004a92:	d101      	bne.n	8004a98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b086      	sub	sp, #24
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e009      	b.n	8004ad8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3340      	adds	r3, #64	@ 0x40
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b0e      	cmp	r3, #14
 8004adc:	d9f2      	bls.n	8004ac4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11c      	bne.n	8004b1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004af2:	f043 0302 	orr.w	r3, r3, #2
 8004af6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e005      	b.n	8004b2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b30:	461a      	mov	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b44:	461a      	mov	r2, r3
 8004b46:	680b      	ldr	r3, [r1, #0]
 8004b48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10c      	bne.n	8004b6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d104      	bne.n	8004b60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b56:	2100      	movs	r1, #0
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f965 	bl	8004e28 <USB_SetDevSpeed>
 8004b5e:	e008      	b.n	8004b72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b60:	2101      	movs	r1, #1
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f960 	bl	8004e28 <USB_SetDevSpeed>
 8004b68:	e003      	b.n	8004b72 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b6a:	2103      	movs	r1, #3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f95b 	bl	8004e28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b72:	2110      	movs	r1, #16
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8f3 	bl	8004d60 <USB_FlushTxFifo>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f91f 	bl	8004dc8 <USB_FlushRxFifo>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	e043      	b.n	8004c46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bd4:	d118      	bne.n	8004c08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be8:	461a      	mov	r2, r3
 8004bea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	e013      	b.n	8004c1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e008      	b.n	8004c1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c14:	461a      	mov	r2, r3
 8004c16:	2300      	movs	r3, #0
 8004c18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c26:	461a      	mov	r2, r3
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3301      	adds	r3, #1
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3b7      	bcc.n	8004bbe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e043      	b.n	8004cdc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c6a:	d118      	bne.n	8004c9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e013      	b.n	8004cb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c94:	461a      	mov	r2, r3
 8004c96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	e008      	b.n	8004cb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004caa:	461a      	mov	r2, r3
 8004cac:	2300      	movs	r3, #0
 8004cae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d3b7      	bcc.n	8004c54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d105      	bne.n	8004d18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f043 0210 	orr.w	r2, r3, #16
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d58 <USB_DevInit+0x2b4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f043 0208 	orr.w	r2, r3, #8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <USB_DevInit+0x2b8>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d54:	b004      	add	sp, #16
 8004d56:	4770      	bx	lr
 8004d58:	803c3800 	.word	0x803c3800
 8004d5c:	40000004 	.word	0x40000004

08004d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3301      	adds	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <USB_FlushTxFifo+0x64>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e01b      	b.n	8004db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	daf2      	bge.n	8004d6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	019b      	lsls	r3, r3, #6
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a08      	ldr	r2, [pc, #32]	@ (8004dc4 <USB_FlushTxFifo+0x64>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e006      	b.n	8004db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d0f0      	beq.n	8004d98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	00030d40 	.word	0x00030d40

08004dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a11      	ldr	r2, [pc, #68]	@ (8004e24 <USB_FlushRxFifo+0x5c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e018      	b.n	8004e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	daf2      	bge.n	8004dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2210      	movs	r2, #16
 8004df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a08      	ldr	r2, [pc, #32]	@ (8004e24 <USB_FlushRxFifo+0x5c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d0f0      	beq.n	8004df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	00030d40 	.word	0x00030d40

08004e28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e74:	f023 0303 	bic.w	r3, r3, #3
 8004e78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e88:	f043 0302 	orr.w	r3, r3, #2
 8004e8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a13      	ldr	r2, [pc, #76]	@ (8004f1c <USB_CoreReset+0x64>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e01b      	b.n	8004f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	daf2      	bge.n	8004ec4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a09      	ldr	r2, [pc, #36]	@ (8004f1c <USB_CoreReset+0x64>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e006      	b.n	8004f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d0f0      	beq.n	8004eee <USB_CoreReset+0x36>

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	00030d40 	.word	0x00030d40

08004f20 <__cvt>:
 8004f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f22:	ed2d 8b02 	vpush	{d8}
 8004f26:	eeb0 8b40 	vmov.f64	d8, d0
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	4617      	mov	r7, r2
 8004f2e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004f30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f32:	ee18 2a90 	vmov	r2, s17
 8004f36:	f025 0520 	bic.w	r5, r5, #32
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	bfb6      	itet	lt
 8004f3e:	222d      	movlt	r2, #45	@ 0x2d
 8004f40:	2200      	movge	r2, #0
 8004f42:	eeb1 8b40 	vneglt.f64	d8, d0
 8004f46:	2d46      	cmp	r5, #70	@ 0x46
 8004f48:	460c      	mov	r4, r1
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	d004      	beq.n	8004f58 <__cvt+0x38>
 8004f4e:	2d45      	cmp	r5, #69	@ 0x45
 8004f50:	d100      	bne.n	8004f54 <__cvt+0x34>
 8004f52:	3401      	adds	r4, #1
 8004f54:	2102      	movs	r1, #2
 8004f56:	e000      	b.n	8004f5a <__cvt+0x3a>
 8004f58:	2103      	movs	r1, #3
 8004f5a:	ab03      	add	r3, sp, #12
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	ab02      	add	r3, sp, #8
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	4622      	mov	r2, r4
 8004f64:	4633      	mov	r3, r6
 8004f66:	eeb0 0b48 	vmov.f64	d0, d8
 8004f6a:	f001 f84d 	bl	8006008 <_dtoa_r>
 8004f6e:	2d47      	cmp	r5, #71	@ 0x47
 8004f70:	d114      	bne.n	8004f9c <__cvt+0x7c>
 8004f72:	07fb      	lsls	r3, r7, #31
 8004f74:	d50a      	bpl.n	8004f8c <__cvt+0x6c>
 8004f76:	1902      	adds	r2, r0, r4
 8004f78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f80:	bf08      	it	eq
 8004f82:	9203      	streq	r2, [sp, #12]
 8004f84:	2130      	movs	r1, #48	@ 0x30
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d319      	bcc.n	8004fc0 <__cvt+0xa0>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f90:	1a1b      	subs	r3, r3, r0
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	b005      	add	sp, #20
 8004f96:	ecbd 8b02 	vpop	{d8}
 8004f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f9c:	2d46      	cmp	r5, #70	@ 0x46
 8004f9e:	eb00 0204 	add.w	r2, r0, r4
 8004fa2:	d1e9      	bne.n	8004f78 <__cvt+0x58>
 8004fa4:	7803      	ldrb	r3, [r0, #0]
 8004fa6:	2b30      	cmp	r3, #48	@ 0x30
 8004fa8:	d107      	bne.n	8004fba <__cvt+0x9a>
 8004faa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	bf1c      	itt	ne
 8004fb4:	f1c4 0401 	rsbne	r4, r4, #1
 8004fb8:	6034      	strne	r4, [r6, #0]
 8004fba:	6833      	ldr	r3, [r6, #0]
 8004fbc:	441a      	add	r2, r3
 8004fbe:	e7db      	b.n	8004f78 <__cvt+0x58>
 8004fc0:	1c5c      	adds	r4, r3, #1
 8004fc2:	9403      	str	r4, [sp, #12]
 8004fc4:	7019      	strb	r1, [r3, #0]
 8004fc6:	e7de      	b.n	8004f86 <__cvt+0x66>

08004fc8 <__exponent>:
 8004fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	bfba      	itte	lt
 8004fce:	4249      	neglt	r1, r1
 8004fd0:	232d      	movlt	r3, #45	@ 0x2d
 8004fd2:	232b      	movge	r3, #43	@ 0x2b
 8004fd4:	2909      	cmp	r1, #9
 8004fd6:	7002      	strb	r2, [r0, #0]
 8004fd8:	7043      	strb	r3, [r0, #1]
 8004fda:	dd29      	ble.n	8005030 <__exponent+0x68>
 8004fdc:	f10d 0307 	add.w	r3, sp, #7
 8004fe0:	461d      	mov	r5, r3
 8004fe2:	270a      	movs	r7, #10
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	fbb1 f6f7 	udiv	r6, r1, r7
 8004fea:	fb07 1416 	mls	r4, r7, r6, r1
 8004fee:	3430      	adds	r4, #48	@ 0x30
 8004ff0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	2c63      	cmp	r4, #99	@ 0x63
 8004ff8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	dcf1      	bgt.n	8004fe4 <__exponent+0x1c>
 8005000:	3130      	adds	r1, #48	@ 0x30
 8005002:	1e94      	subs	r4, r2, #2
 8005004:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005008:	1c41      	adds	r1, r0, #1
 800500a:	4623      	mov	r3, r4
 800500c:	42ab      	cmp	r3, r5
 800500e:	d30a      	bcc.n	8005026 <__exponent+0x5e>
 8005010:	f10d 0309 	add.w	r3, sp, #9
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	42ac      	cmp	r4, r5
 8005018:	bf88      	it	hi
 800501a:	2300      	movhi	r3, #0
 800501c:	3302      	adds	r3, #2
 800501e:	4403      	add	r3, r0
 8005020:	1a18      	subs	r0, r3, r0
 8005022:	b003      	add	sp, #12
 8005024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005026:	f813 6b01 	ldrb.w	r6, [r3], #1
 800502a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800502e:	e7ed      	b.n	800500c <__exponent+0x44>
 8005030:	2330      	movs	r3, #48	@ 0x30
 8005032:	3130      	adds	r1, #48	@ 0x30
 8005034:	7083      	strb	r3, [r0, #2]
 8005036:	70c1      	strb	r1, [r0, #3]
 8005038:	1d03      	adds	r3, r0, #4
 800503a:	e7f1      	b.n	8005020 <__exponent+0x58>
 800503c:	0000      	movs	r0, r0
	...

08005040 <_printf_float>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	b08d      	sub	sp, #52	@ 0x34
 8005046:	460c      	mov	r4, r1
 8005048:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800504c:	4616      	mov	r6, r2
 800504e:	461f      	mov	r7, r3
 8005050:	4605      	mov	r5, r0
 8005052:	f000 fed1 	bl	8005df8 <_localeconv_r>
 8005056:	f8d0 b000 	ldr.w	fp, [r0]
 800505a:	4658      	mov	r0, fp
 800505c:	f7fb f940 	bl	80002e0 <strlen>
 8005060:	2300      	movs	r3, #0
 8005062:	930a      	str	r3, [sp, #40]	@ 0x28
 8005064:	f8d8 3000 	ldr.w	r3, [r8]
 8005068:	f894 9018 	ldrb.w	r9, [r4, #24]
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	9005      	str	r0, [sp, #20]
 8005070:	3307      	adds	r3, #7
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	f103 0108 	add.w	r1, r3, #8
 800507a:	f8c8 1000 	str.w	r1, [r8]
 800507e:	ed93 0b00 	vldr	d0, [r3]
 8005082:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80052e0 <_printf_float+0x2a0>
 8005086:	eeb0 7bc0 	vabs.f64	d7, d0
 800508a:	eeb4 7b46 	vcmp.f64	d7, d6
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8005096:	dd24      	ble.n	80050e2 <_printf_float+0xa2>
 8005098:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a0:	d502      	bpl.n	80050a8 <_printf_float+0x68>
 80050a2:	232d      	movs	r3, #45	@ 0x2d
 80050a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a8:	498f      	ldr	r1, [pc, #572]	@ (80052e8 <_printf_float+0x2a8>)
 80050aa:	4b90      	ldr	r3, [pc, #576]	@ (80052ec <_printf_float+0x2ac>)
 80050ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80050b0:	bf8c      	ite	hi
 80050b2:	4688      	movhi	r8, r1
 80050b4:	4698      	movls	r8, r3
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	2303      	movs	r3, #3
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	6022      	str	r2, [r4, #0]
 80050c0:	f04f 0a00 	mov.w	sl, #0
 80050c4:	9700      	str	r7, [sp, #0]
 80050c6:	4633      	mov	r3, r6
 80050c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 f9d1 	bl	8005474 <_printf_common>
 80050d2:	3001      	adds	r0, #1
 80050d4:	f040 8089 	bne.w	80051ea <_printf_float+0x1aa>
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050dc:	b00d      	add	sp, #52	@ 0x34
 80050de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80050e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ea:	d709      	bvc.n	8005100 <_printf_float+0xc0>
 80050ec:	ee10 3a90 	vmov	r3, s1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bfbc      	itt	lt
 80050f4:	232d      	movlt	r3, #45	@ 0x2d
 80050f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050fa:	497d      	ldr	r1, [pc, #500]	@ (80052f0 <_printf_float+0x2b0>)
 80050fc:	4b7d      	ldr	r3, [pc, #500]	@ (80052f4 <_printf_float+0x2b4>)
 80050fe:	e7d5      	b.n	80050ac <_printf_float+0x6c>
 8005100:	6863      	ldr	r3, [r4, #4]
 8005102:	1c59      	adds	r1, r3, #1
 8005104:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8005108:	d139      	bne.n	800517e <_printf_float+0x13e>
 800510a:	2306      	movs	r3, #6
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005112:	2300      	movs	r3, #0
 8005114:	6022      	str	r2, [r4, #0]
 8005116:	9303      	str	r3, [sp, #12]
 8005118:	ab0a      	add	r3, sp, #40	@ 0x28
 800511a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800511e:	ab09      	add	r3, sp, #36	@ 0x24
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	6861      	ldr	r1, [r4, #4]
 8005124:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005128:	4628      	mov	r0, r5
 800512a:	f7ff fef9 	bl	8004f20 <__cvt>
 800512e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005134:	4680      	mov	r8, r0
 8005136:	d129      	bne.n	800518c <_printf_float+0x14c>
 8005138:	1cc8      	adds	r0, r1, #3
 800513a:	db02      	blt.n	8005142 <_printf_float+0x102>
 800513c:	6863      	ldr	r3, [r4, #4]
 800513e:	4299      	cmp	r1, r3
 8005140:	dd41      	ble.n	80051c6 <_printf_float+0x186>
 8005142:	f1a9 0902 	sub.w	r9, r9, #2
 8005146:	fa5f f989 	uxtb.w	r9, r9
 800514a:	3901      	subs	r1, #1
 800514c:	464a      	mov	r2, r9
 800514e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005152:	9109      	str	r1, [sp, #36]	@ 0x24
 8005154:	f7ff ff38 	bl	8004fc8 <__exponent>
 8005158:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800515a:	1813      	adds	r3, r2, r0
 800515c:	2a01      	cmp	r2, #1
 800515e:	4682      	mov	sl, r0
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	dc02      	bgt.n	800516a <_printf_float+0x12a>
 8005164:	6822      	ldr	r2, [r4, #0]
 8005166:	07d2      	lsls	r2, r2, #31
 8005168:	d501      	bpl.n	800516e <_printf_float+0x12e>
 800516a:	3301      	adds	r3, #1
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0a6      	beq.n	80050c4 <_printf_float+0x84>
 8005176:	232d      	movs	r3, #45	@ 0x2d
 8005178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800517c:	e7a2      	b.n	80050c4 <_printf_float+0x84>
 800517e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005182:	d1c4      	bne.n	800510e <_printf_float+0xce>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1c2      	bne.n	800510e <_printf_float+0xce>
 8005188:	2301      	movs	r3, #1
 800518a:	e7bf      	b.n	800510c <_printf_float+0xcc>
 800518c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005190:	d9db      	bls.n	800514a <_printf_float+0x10a>
 8005192:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8005196:	d118      	bne.n	80051ca <_printf_float+0x18a>
 8005198:	2900      	cmp	r1, #0
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	dd0b      	ble.n	80051b6 <_printf_float+0x176>
 800519e:	6121      	str	r1, [r4, #16]
 80051a0:	b913      	cbnz	r3, 80051a8 <_printf_float+0x168>
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	07d0      	lsls	r0, r2, #31
 80051a6:	d502      	bpl.n	80051ae <_printf_float+0x16e>
 80051a8:	3301      	adds	r3, #1
 80051aa:	440b      	add	r3, r1
 80051ac:	6123      	str	r3, [r4, #16]
 80051ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051b0:	f04f 0a00 	mov.w	sl, #0
 80051b4:	e7db      	b.n	800516e <_printf_float+0x12e>
 80051b6:	b913      	cbnz	r3, 80051be <_printf_float+0x17e>
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	07d2      	lsls	r2, r2, #31
 80051bc:	d501      	bpl.n	80051c2 <_printf_float+0x182>
 80051be:	3302      	adds	r3, #2
 80051c0:	e7f4      	b.n	80051ac <_printf_float+0x16c>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7f2      	b.n	80051ac <_printf_float+0x16c>
 80051c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80051ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051cc:	4299      	cmp	r1, r3
 80051ce:	db05      	blt.n	80051dc <_printf_float+0x19c>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	6121      	str	r1, [r4, #16]
 80051d4:	07d8      	lsls	r0, r3, #31
 80051d6:	d5ea      	bpl.n	80051ae <_printf_float+0x16e>
 80051d8:	1c4b      	adds	r3, r1, #1
 80051da:	e7e7      	b.n	80051ac <_printf_float+0x16c>
 80051dc:	2900      	cmp	r1, #0
 80051de:	bfd4      	ite	le
 80051e0:	f1c1 0202 	rsble	r2, r1, #2
 80051e4:	2201      	movgt	r2, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	e7e0      	b.n	80051ac <_printf_float+0x16c>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	055a      	lsls	r2, r3, #21
 80051ee:	d407      	bmi.n	8005200 <_printf_float+0x1c0>
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	4642      	mov	r2, r8
 80051f4:	4631      	mov	r1, r6
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	d12a      	bne.n	8005254 <_printf_float+0x214>
 80051fe:	e76b      	b.n	80050d8 <_printf_float+0x98>
 8005200:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005204:	f240 80e0 	bls.w	80053c8 <_printf_float+0x388>
 8005208:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800520c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005214:	d133      	bne.n	800527e <_printf_float+0x23e>
 8005216:	4a38      	ldr	r2, [pc, #224]	@ (80052f8 <_printf_float+0x2b8>)
 8005218:	2301      	movs	r3, #1
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f af59 	beq.w	80050d8 <_printf_float+0x98>
 8005226:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800522a:	4543      	cmp	r3, r8
 800522c:	db02      	blt.n	8005234 <_printf_float+0x1f4>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	07d8      	lsls	r0, r3, #31
 8005232:	d50f      	bpl.n	8005254 <_printf_float+0x214>
 8005234:	9b05      	ldr	r3, [sp, #20]
 8005236:	465a      	mov	r2, fp
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f af4a 	beq.w	80050d8 <_printf_float+0x98>
 8005244:	f04f 0900 	mov.w	r9, #0
 8005248:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800524c:	f104 0a1a 	add.w	sl, r4, #26
 8005250:	45c8      	cmp	r8, r9
 8005252:	dc09      	bgt.n	8005268 <_printf_float+0x228>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	079b      	lsls	r3, r3, #30
 8005258:	f100 8107 	bmi.w	800546a <_printf_float+0x42a>
 800525c:	68e0      	ldr	r0, [r4, #12]
 800525e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005260:	4298      	cmp	r0, r3
 8005262:	bfb8      	it	lt
 8005264:	4618      	movlt	r0, r3
 8005266:	e739      	b.n	80050dc <_printf_float+0x9c>
 8005268:	2301      	movs	r3, #1
 800526a:	4652      	mov	r2, sl
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	f43f af30 	beq.w	80050d8 <_printf_float+0x98>
 8005278:	f109 0901 	add.w	r9, r9, #1
 800527c:	e7e8      	b.n	8005250 <_printf_float+0x210>
 800527e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	dc3b      	bgt.n	80052fc <_printf_float+0x2bc>
 8005284:	4a1c      	ldr	r2, [pc, #112]	@ (80052f8 <_printf_float+0x2b8>)
 8005286:	2301      	movs	r3, #1
 8005288:	4631      	mov	r1, r6
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	f43f af22 	beq.w	80050d8 <_printf_float+0x98>
 8005294:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005298:	ea59 0303 	orrs.w	r3, r9, r3
 800529c:	d102      	bne.n	80052a4 <_printf_float+0x264>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	07d9      	lsls	r1, r3, #31
 80052a2:	d5d7      	bpl.n	8005254 <_printf_float+0x214>
 80052a4:	9b05      	ldr	r3, [sp, #20]
 80052a6:	465a      	mov	r2, fp
 80052a8:	4631      	mov	r1, r6
 80052aa:	4628      	mov	r0, r5
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	f43f af12 	beq.w	80050d8 <_printf_float+0x98>
 80052b4:	f04f 0a00 	mov.w	sl, #0
 80052b8:	f104 0b1a 	add.w	fp, r4, #26
 80052bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052be:	425b      	negs	r3, r3
 80052c0:	4553      	cmp	r3, sl
 80052c2:	dc01      	bgt.n	80052c8 <_printf_float+0x288>
 80052c4:	464b      	mov	r3, r9
 80052c6:	e794      	b.n	80051f2 <_printf_float+0x1b2>
 80052c8:	2301      	movs	r3, #1
 80052ca:	465a      	mov	r2, fp
 80052cc:	4631      	mov	r1, r6
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b8      	blx	r7
 80052d2:	3001      	adds	r0, #1
 80052d4:	f43f af00 	beq.w	80050d8 <_printf_float+0x98>
 80052d8:	f10a 0a01 	add.w	sl, sl, #1
 80052dc:	e7ee      	b.n	80052bc <_printf_float+0x27c>
 80052de:	bf00      	nop
 80052e0:	ffffffff 	.word	0xffffffff
 80052e4:	7fefffff 	.word	0x7fefffff
 80052e8:	08009464 	.word	0x08009464
 80052ec:	08009460 	.word	0x08009460
 80052f0:	0800946c 	.word	0x0800946c
 80052f4:	08009468 	.word	0x08009468
 80052f8:	08009470 	.word	0x08009470
 80052fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005302:	4553      	cmp	r3, sl
 8005304:	bfa8      	it	ge
 8005306:	4653      	movge	r3, sl
 8005308:	2b00      	cmp	r3, #0
 800530a:	4699      	mov	r9, r3
 800530c:	dc37      	bgt.n	800537e <_printf_float+0x33e>
 800530e:	2300      	movs	r3, #0
 8005310:	9307      	str	r3, [sp, #28]
 8005312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005316:	f104 021a 	add.w	r2, r4, #26
 800531a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800531c:	9907      	ldr	r1, [sp, #28]
 800531e:	9306      	str	r3, [sp, #24]
 8005320:	eba3 0309 	sub.w	r3, r3, r9
 8005324:	428b      	cmp	r3, r1
 8005326:	dc31      	bgt.n	800538c <_printf_float+0x34c>
 8005328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800532a:	459a      	cmp	sl, r3
 800532c:	dc3b      	bgt.n	80053a6 <_printf_float+0x366>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	07da      	lsls	r2, r3, #31
 8005332:	d438      	bmi.n	80053a6 <_printf_float+0x366>
 8005334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005336:	ebaa 0903 	sub.w	r9, sl, r3
 800533a:	9b06      	ldr	r3, [sp, #24]
 800533c:	ebaa 0303 	sub.w	r3, sl, r3
 8005340:	4599      	cmp	r9, r3
 8005342:	bfa8      	it	ge
 8005344:	4699      	movge	r9, r3
 8005346:	f1b9 0f00 	cmp.w	r9, #0
 800534a:	dc34      	bgt.n	80053b6 <_printf_float+0x376>
 800534c:	f04f 0800 	mov.w	r8, #0
 8005350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005354:	f104 0b1a 	add.w	fp, r4, #26
 8005358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535a:	ebaa 0303 	sub.w	r3, sl, r3
 800535e:	eba3 0309 	sub.w	r3, r3, r9
 8005362:	4543      	cmp	r3, r8
 8005364:	f77f af76 	ble.w	8005254 <_printf_float+0x214>
 8005368:	2301      	movs	r3, #1
 800536a:	465a      	mov	r2, fp
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f aeb0 	beq.w	80050d8 <_printf_float+0x98>
 8005378:	f108 0801 	add.w	r8, r8, #1
 800537c:	e7ec      	b.n	8005358 <_printf_float+0x318>
 800537e:	4642      	mov	r2, r8
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	d1c1      	bne.n	800530e <_printf_float+0x2ce>
 800538a:	e6a5      	b.n	80050d8 <_printf_float+0x98>
 800538c:	2301      	movs	r3, #1
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	9206      	str	r2, [sp, #24]
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	f43f ae9e 	beq.w	80050d8 <_printf_float+0x98>
 800539c:	9b07      	ldr	r3, [sp, #28]
 800539e:	9a06      	ldr	r2, [sp, #24]
 80053a0:	3301      	adds	r3, #1
 80053a2:	9307      	str	r3, [sp, #28]
 80053a4:	e7b9      	b.n	800531a <_printf_float+0x2da>
 80053a6:	9b05      	ldr	r3, [sp, #20]
 80053a8:	465a      	mov	r2, fp
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	d1bf      	bne.n	8005334 <_printf_float+0x2f4>
 80053b4:	e690      	b.n	80050d8 <_printf_float+0x98>
 80053b6:	9a06      	ldr	r2, [sp, #24]
 80053b8:	464b      	mov	r3, r9
 80053ba:	4442      	add	r2, r8
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	d1c2      	bne.n	800534c <_printf_float+0x30c>
 80053c6:	e687      	b.n	80050d8 <_printf_float+0x98>
 80053c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80053cc:	f1b9 0f01 	cmp.w	r9, #1
 80053d0:	dc01      	bgt.n	80053d6 <_printf_float+0x396>
 80053d2:	07db      	lsls	r3, r3, #31
 80053d4:	d536      	bpl.n	8005444 <_printf_float+0x404>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4642      	mov	r2, r8
 80053da:	4631      	mov	r1, r6
 80053dc:	4628      	mov	r0, r5
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	f43f ae79 	beq.w	80050d8 <_printf_float+0x98>
 80053e6:	9b05      	ldr	r3, [sp, #20]
 80053e8:	465a      	mov	r2, fp
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f ae71 	beq.w	80050d8 <_printf_float+0x98>
 80053f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80053fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8005406:	d018      	beq.n	800543a <_printf_float+0x3fa>
 8005408:	464b      	mov	r3, r9
 800540a:	f108 0201 	add.w	r2, r8, #1
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	d10c      	bne.n	8005432 <_printf_float+0x3f2>
 8005418:	e65e      	b.n	80050d8 <_printf_float+0x98>
 800541a:	2301      	movs	r3, #1
 800541c:	465a      	mov	r2, fp
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae57 	beq.w	80050d8 <_printf_float+0x98>
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	45c8      	cmp	r8, r9
 8005430:	dbf3      	blt.n	800541a <_printf_float+0x3da>
 8005432:	4653      	mov	r3, sl
 8005434:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005438:	e6dc      	b.n	80051f4 <_printf_float+0x1b4>
 800543a:	f04f 0800 	mov.w	r8, #0
 800543e:	f104 0b1a 	add.w	fp, r4, #26
 8005442:	e7f4      	b.n	800542e <_printf_float+0x3ee>
 8005444:	2301      	movs	r3, #1
 8005446:	4642      	mov	r2, r8
 8005448:	e7e1      	b.n	800540e <_printf_float+0x3ce>
 800544a:	2301      	movs	r3, #1
 800544c:	464a      	mov	r2, r9
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	f43f ae3f 	beq.w	80050d8 <_printf_float+0x98>
 800545a:	f108 0801 	add.w	r8, r8, #1
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005462:	1a5b      	subs	r3, r3, r1
 8005464:	4543      	cmp	r3, r8
 8005466:	dcf0      	bgt.n	800544a <_printf_float+0x40a>
 8005468:	e6f8      	b.n	800525c <_printf_float+0x21c>
 800546a:	f04f 0800 	mov.w	r8, #0
 800546e:	f104 0919 	add.w	r9, r4, #25
 8005472:	e7f4      	b.n	800545e <_printf_float+0x41e>

08005474 <_printf_common>:
 8005474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	4616      	mov	r6, r2
 800547a:	4698      	mov	r8, r3
 800547c:	688a      	ldr	r2, [r1, #8]
 800547e:	690b      	ldr	r3, [r1, #16]
 8005480:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005484:	4293      	cmp	r3, r2
 8005486:	bfb8      	it	lt
 8005488:	4613      	movlt	r3, r2
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005490:	4607      	mov	r7, r0
 8005492:	460c      	mov	r4, r1
 8005494:	b10a      	cbz	r2, 800549a <_printf_common+0x26>
 8005496:	3301      	adds	r3, #1
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	0699      	lsls	r1, r3, #26
 800549e:	bf42      	ittt	mi
 80054a0:	6833      	ldrmi	r3, [r6, #0]
 80054a2:	3302      	addmi	r3, #2
 80054a4:	6033      	strmi	r3, [r6, #0]
 80054a6:	6825      	ldr	r5, [r4, #0]
 80054a8:	f015 0506 	ands.w	r5, r5, #6
 80054ac:	d106      	bne.n	80054bc <_printf_common+0x48>
 80054ae:	f104 0a19 	add.w	sl, r4, #25
 80054b2:	68e3      	ldr	r3, [r4, #12]
 80054b4:	6832      	ldr	r2, [r6, #0]
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	dc26      	bgt.n	800550a <_printf_common+0x96>
 80054bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	3b00      	subs	r3, #0
 80054c4:	bf18      	it	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	0692      	lsls	r2, r2, #26
 80054ca:	d42b      	bmi.n	8005524 <_printf_common+0xb0>
 80054cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054d0:	4641      	mov	r1, r8
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c8      	blx	r9
 80054d6:	3001      	adds	r0, #1
 80054d8:	d01e      	beq.n	8005518 <_printf_common+0xa4>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	6922      	ldr	r2, [r4, #16]
 80054de:	f003 0306 	and.w	r3, r3, #6
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	bf02      	ittt	eq
 80054e6:	68e5      	ldreq	r5, [r4, #12]
 80054e8:	6833      	ldreq	r3, [r6, #0]
 80054ea:	1aed      	subeq	r5, r5, r3
 80054ec:	68a3      	ldr	r3, [r4, #8]
 80054ee:	bf0c      	ite	eq
 80054f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054f4:	2500      	movne	r5, #0
 80054f6:	4293      	cmp	r3, r2
 80054f8:	bfc4      	itt	gt
 80054fa:	1a9b      	subgt	r3, r3, r2
 80054fc:	18ed      	addgt	r5, r5, r3
 80054fe:	2600      	movs	r6, #0
 8005500:	341a      	adds	r4, #26
 8005502:	42b5      	cmp	r5, r6
 8005504:	d11a      	bne.n	800553c <_printf_common+0xc8>
 8005506:	2000      	movs	r0, #0
 8005508:	e008      	b.n	800551c <_printf_common+0xa8>
 800550a:	2301      	movs	r3, #1
 800550c:	4652      	mov	r2, sl
 800550e:	4641      	mov	r1, r8
 8005510:	4638      	mov	r0, r7
 8005512:	47c8      	blx	r9
 8005514:	3001      	adds	r0, #1
 8005516:	d103      	bne.n	8005520 <_printf_common+0xac>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	3501      	adds	r5, #1
 8005522:	e7c6      	b.n	80054b2 <_printf_common+0x3e>
 8005524:	18e1      	adds	r1, r4, r3
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	2030      	movs	r0, #48	@ 0x30
 800552a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800552e:	4422      	add	r2, r4
 8005530:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005534:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005538:	3302      	adds	r3, #2
 800553a:	e7c7      	b.n	80054cc <_printf_common+0x58>
 800553c:	2301      	movs	r3, #1
 800553e:	4622      	mov	r2, r4
 8005540:	4641      	mov	r1, r8
 8005542:	4638      	mov	r0, r7
 8005544:	47c8      	blx	r9
 8005546:	3001      	adds	r0, #1
 8005548:	d0e6      	beq.n	8005518 <_printf_common+0xa4>
 800554a:	3601      	adds	r6, #1
 800554c:	e7d9      	b.n	8005502 <_printf_common+0x8e>
	...

08005550 <_printf_i>:
 8005550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	7e0f      	ldrb	r7, [r1, #24]
 8005556:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005558:	2f78      	cmp	r7, #120	@ 0x78
 800555a:	4691      	mov	r9, r2
 800555c:	4680      	mov	r8, r0
 800555e:	460c      	mov	r4, r1
 8005560:	469a      	mov	sl, r3
 8005562:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005566:	d807      	bhi.n	8005578 <_printf_i+0x28>
 8005568:	2f62      	cmp	r7, #98	@ 0x62
 800556a:	d80a      	bhi.n	8005582 <_printf_i+0x32>
 800556c:	2f00      	cmp	r7, #0
 800556e:	f000 80d1 	beq.w	8005714 <_printf_i+0x1c4>
 8005572:	2f58      	cmp	r7, #88	@ 0x58
 8005574:	f000 80b8 	beq.w	80056e8 <_printf_i+0x198>
 8005578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800557c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005580:	e03a      	b.n	80055f8 <_printf_i+0xa8>
 8005582:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005586:	2b15      	cmp	r3, #21
 8005588:	d8f6      	bhi.n	8005578 <_printf_i+0x28>
 800558a:	a101      	add	r1, pc, #4	@ (adr r1, 8005590 <_printf_i+0x40>)
 800558c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005590:	080055e9 	.word	0x080055e9
 8005594:	080055fd 	.word	0x080055fd
 8005598:	08005579 	.word	0x08005579
 800559c:	08005579 	.word	0x08005579
 80055a0:	08005579 	.word	0x08005579
 80055a4:	08005579 	.word	0x08005579
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	08005579 	.word	0x08005579
 80055b0:	08005579 	.word	0x08005579
 80055b4:	08005579 	.word	0x08005579
 80055b8:	08005579 	.word	0x08005579
 80055bc:	080056fb 	.word	0x080056fb
 80055c0:	08005627 	.word	0x08005627
 80055c4:	080056b5 	.word	0x080056b5
 80055c8:	08005579 	.word	0x08005579
 80055cc:	08005579 	.word	0x08005579
 80055d0:	0800571d 	.word	0x0800571d
 80055d4:	08005579 	.word	0x08005579
 80055d8:	08005627 	.word	0x08005627
 80055dc:	08005579 	.word	0x08005579
 80055e0:	08005579 	.word	0x08005579
 80055e4:	080056bd 	.word	0x080056bd
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6032      	str	r2, [r6, #0]
 80055f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055f8:	2301      	movs	r3, #1
 80055fa:	e09c      	b.n	8005736 <_printf_i+0x1e6>
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	1d19      	adds	r1, r3, #4
 8005602:	6031      	str	r1, [r6, #0]
 8005604:	0606      	lsls	r6, r0, #24
 8005606:	d501      	bpl.n	800560c <_printf_i+0xbc>
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	e003      	b.n	8005614 <_printf_i+0xc4>
 800560c:	0645      	lsls	r5, r0, #25
 800560e:	d5fb      	bpl.n	8005608 <_printf_i+0xb8>
 8005610:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005614:	2d00      	cmp	r5, #0
 8005616:	da03      	bge.n	8005620 <_printf_i+0xd0>
 8005618:	232d      	movs	r3, #45	@ 0x2d
 800561a:	426d      	negs	r5, r5
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005620:	4858      	ldr	r0, [pc, #352]	@ (8005784 <_printf_i+0x234>)
 8005622:	230a      	movs	r3, #10
 8005624:	e011      	b.n	800564a <_printf_i+0xfa>
 8005626:	6821      	ldr	r1, [r4, #0]
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	0608      	lsls	r0, r1, #24
 800562c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005630:	d402      	bmi.n	8005638 <_printf_i+0xe8>
 8005632:	0649      	lsls	r1, r1, #25
 8005634:	bf48      	it	mi
 8005636:	b2ad      	uxthmi	r5, r5
 8005638:	2f6f      	cmp	r7, #111	@ 0x6f
 800563a:	4852      	ldr	r0, [pc, #328]	@ (8005784 <_printf_i+0x234>)
 800563c:	6033      	str	r3, [r6, #0]
 800563e:	bf14      	ite	ne
 8005640:	230a      	movne	r3, #10
 8005642:	2308      	moveq	r3, #8
 8005644:	2100      	movs	r1, #0
 8005646:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800564a:	6866      	ldr	r6, [r4, #4]
 800564c:	60a6      	str	r6, [r4, #8]
 800564e:	2e00      	cmp	r6, #0
 8005650:	db05      	blt.n	800565e <_printf_i+0x10e>
 8005652:	6821      	ldr	r1, [r4, #0]
 8005654:	432e      	orrs	r6, r5
 8005656:	f021 0104 	bic.w	r1, r1, #4
 800565a:	6021      	str	r1, [r4, #0]
 800565c:	d04b      	beq.n	80056f6 <_printf_i+0x1a6>
 800565e:	4616      	mov	r6, r2
 8005660:	fbb5 f1f3 	udiv	r1, r5, r3
 8005664:	fb03 5711 	mls	r7, r3, r1, r5
 8005668:	5dc7      	ldrb	r7, [r0, r7]
 800566a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800566e:	462f      	mov	r7, r5
 8005670:	42bb      	cmp	r3, r7
 8005672:	460d      	mov	r5, r1
 8005674:	d9f4      	bls.n	8005660 <_printf_i+0x110>
 8005676:	2b08      	cmp	r3, #8
 8005678:	d10b      	bne.n	8005692 <_printf_i+0x142>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	07df      	lsls	r7, r3, #31
 800567e:	d508      	bpl.n	8005692 <_printf_i+0x142>
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	6861      	ldr	r1, [r4, #4]
 8005684:	4299      	cmp	r1, r3
 8005686:	bfde      	ittt	le
 8005688:	2330      	movle	r3, #48	@ 0x30
 800568a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800568e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005692:	1b92      	subs	r2, r2, r6
 8005694:	6122      	str	r2, [r4, #16]
 8005696:	f8cd a000 	str.w	sl, [sp]
 800569a:	464b      	mov	r3, r9
 800569c:	aa03      	add	r2, sp, #12
 800569e:	4621      	mov	r1, r4
 80056a0:	4640      	mov	r0, r8
 80056a2:	f7ff fee7 	bl	8005474 <_printf_common>
 80056a6:	3001      	adds	r0, #1
 80056a8:	d14a      	bne.n	8005740 <_printf_i+0x1f0>
 80056aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056ae:	b004      	add	sp, #16
 80056b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f043 0320 	orr.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	4832      	ldr	r0, [pc, #200]	@ (8005788 <_printf_i+0x238>)
 80056be:	2778      	movs	r7, #120	@ 0x78
 80056c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	6831      	ldr	r1, [r6, #0]
 80056c8:	061f      	lsls	r7, r3, #24
 80056ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80056ce:	d402      	bmi.n	80056d6 <_printf_i+0x186>
 80056d0:	065f      	lsls	r7, r3, #25
 80056d2:	bf48      	it	mi
 80056d4:	b2ad      	uxthmi	r5, r5
 80056d6:	6031      	str	r1, [r6, #0]
 80056d8:	07d9      	lsls	r1, r3, #31
 80056da:	bf44      	itt	mi
 80056dc:	f043 0320 	orrmi.w	r3, r3, #32
 80056e0:	6023      	strmi	r3, [r4, #0]
 80056e2:	b11d      	cbz	r5, 80056ec <_printf_i+0x19c>
 80056e4:	2310      	movs	r3, #16
 80056e6:	e7ad      	b.n	8005644 <_printf_i+0xf4>
 80056e8:	4826      	ldr	r0, [pc, #152]	@ (8005784 <_printf_i+0x234>)
 80056ea:	e7e9      	b.n	80056c0 <_printf_i+0x170>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	f023 0320 	bic.w	r3, r3, #32
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	e7f6      	b.n	80056e4 <_printf_i+0x194>
 80056f6:	4616      	mov	r6, r2
 80056f8:	e7bd      	b.n	8005676 <_printf_i+0x126>
 80056fa:	6833      	ldr	r3, [r6, #0]
 80056fc:	6825      	ldr	r5, [r4, #0]
 80056fe:	6961      	ldr	r1, [r4, #20]
 8005700:	1d18      	adds	r0, r3, #4
 8005702:	6030      	str	r0, [r6, #0]
 8005704:	062e      	lsls	r6, r5, #24
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	d501      	bpl.n	800570e <_printf_i+0x1be>
 800570a:	6019      	str	r1, [r3, #0]
 800570c:	e002      	b.n	8005714 <_printf_i+0x1c4>
 800570e:	0668      	lsls	r0, r5, #25
 8005710:	d5fb      	bpl.n	800570a <_printf_i+0x1ba>
 8005712:	8019      	strh	r1, [r3, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	4616      	mov	r6, r2
 800571a:	e7bc      	b.n	8005696 <_printf_i+0x146>
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	6032      	str	r2, [r6, #0]
 8005722:	681e      	ldr	r6, [r3, #0]
 8005724:	6862      	ldr	r2, [r4, #4]
 8005726:	2100      	movs	r1, #0
 8005728:	4630      	mov	r0, r6
 800572a:	f7fa fd89 	bl	8000240 <memchr>
 800572e:	b108      	cbz	r0, 8005734 <_printf_i+0x1e4>
 8005730:	1b80      	subs	r0, r0, r6
 8005732:	6060      	str	r0, [r4, #4]
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	2300      	movs	r3, #0
 800573a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800573e:	e7aa      	b.n	8005696 <_printf_i+0x146>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	4632      	mov	r2, r6
 8005744:	4649      	mov	r1, r9
 8005746:	4640      	mov	r0, r8
 8005748:	47d0      	blx	sl
 800574a:	3001      	adds	r0, #1
 800574c:	d0ad      	beq.n	80056aa <_printf_i+0x15a>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	079b      	lsls	r3, r3, #30
 8005752:	d413      	bmi.n	800577c <_printf_i+0x22c>
 8005754:	68e0      	ldr	r0, [r4, #12]
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	4298      	cmp	r0, r3
 800575a:	bfb8      	it	lt
 800575c:	4618      	movlt	r0, r3
 800575e:	e7a6      	b.n	80056ae <_printf_i+0x15e>
 8005760:	2301      	movs	r3, #1
 8005762:	4632      	mov	r2, r6
 8005764:	4649      	mov	r1, r9
 8005766:	4640      	mov	r0, r8
 8005768:	47d0      	blx	sl
 800576a:	3001      	adds	r0, #1
 800576c:	d09d      	beq.n	80056aa <_printf_i+0x15a>
 800576e:	3501      	adds	r5, #1
 8005770:	68e3      	ldr	r3, [r4, #12]
 8005772:	9903      	ldr	r1, [sp, #12]
 8005774:	1a5b      	subs	r3, r3, r1
 8005776:	42ab      	cmp	r3, r5
 8005778:	dcf2      	bgt.n	8005760 <_printf_i+0x210>
 800577a:	e7eb      	b.n	8005754 <_printf_i+0x204>
 800577c:	2500      	movs	r5, #0
 800577e:	f104 0619 	add.w	r6, r4, #25
 8005782:	e7f5      	b.n	8005770 <_printf_i+0x220>
 8005784:	08009472 	.word	0x08009472
 8005788:	08009483 	.word	0x08009483

0800578c <_scanf_float>:
 800578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005790:	b087      	sub	sp, #28
 8005792:	4691      	mov	r9, r2
 8005794:	9303      	str	r3, [sp, #12]
 8005796:	688b      	ldr	r3, [r1, #8]
 8005798:	1e5a      	subs	r2, r3, #1
 800579a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800579e:	bf81      	itttt	hi
 80057a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80057a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80057a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80057ac:	608b      	strhi	r3, [r1, #8]
 80057ae:	680b      	ldr	r3, [r1, #0]
 80057b0:	460a      	mov	r2, r1
 80057b2:	f04f 0500 	mov.w	r5, #0
 80057b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80057ba:	f842 3b1c 	str.w	r3, [r2], #28
 80057be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80057c2:	4680      	mov	r8, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	bf98      	it	ls
 80057c8:	f04f 0b00 	movls.w	fp, #0
 80057cc:	9201      	str	r2, [sp, #4]
 80057ce:	4616      	mov	r6, r2
 80057d0:	46aa      	mov	sl, r5
 80057d2:	462f      	mov	r7, r5
 80057d4:	9502      	str	r5, [sp, #8]
 80057d6:	68a2      	ldr	r2, [r4, #8]
 80057d8:	b15a      	cbz	r2, 80057f2 <_scanf_float+0x66>
 80057da:	f8d9 3000 	ldr.w	r3, [r9]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80057e2:	d863      	bhi.n	80058ac <_scanf_float+0x120>
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d83b      	bhi.n	8005860 <_scanf_float+0xd4>
 80057e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80057ec:	b2c8      	uxtb	r0, r1
 80057ee:	280e      	cmp	r0, #14
 80057f0:	d939      	bls.n	8005866 <_scanf_float+0xda>
 80057f2:	b11f      	cbz	r7, 80057fc <_scanf_float+0x70>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005800:	f1ba 0f01 	cmp.w	sl, #1
 8005804:	f200 8114 	bhi.w	8005a30 <_scanf_float+0x2a4>
 8005808:	9b01      	ldr	r3, [sp, #4]
 800580a:	429e      	cmp	r6, r3
 800580c:	f200 8105 	bhi.w	8005a1a <_scanf_float+0x28e>
 8005810:	2001      	movs	r0, #1
 8005812:	b007      	add	sp, #28
 8005814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005818:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800581c:	2a0d      	cmp	r2, #13
 800581e:	d8e8      	bhi.n	80057f2 <_scanf_float+0x66>
 8005820:	a101      	add	r1, pc, #4	@ (adr r1, 8005828 <_scanf_float+0x9c>)
 8005822:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005971 	.word	0x08005971
 800582c:	080057f3 	.word	0x080057f3
 8005830:	080057f3 	.word	0x080057f3
 8005834:	080057f3 	.word	0x080057f3
 8005838:	080059cd 	.word	0x080059cd
 800583c:	080059a7 	.word	0x080059a7
 8005840:	080057f3 	.word	0x080057f3
 8005844:	080057f3 	.word	0x080057f3
 8005848:	0800597f 	.word	0x0800597f
 800584c:	080057f3 	.word	0x080057f3
 8005850:	080057f3 	.word	0x080057f3
 8005854:	080057f3 	.word	0x080057f3
 8005858:	080057f3 	.word	0x080057f3
 800585c:	0800593b 	.word	0x0800593b
 8005860:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005864:	e7da      	b.n	800581c <_scanf_float+0x90>
 8005866:	290e      	cmp	r1, #14
 8005868:	d8c3      	bhi.n	80057f2 <_scanf_float+0x66>
 800586a:	a001      	add	r0, pc, #4	@ (adr r0, 8005870 <_scanf_float+0xe4>)
 800586c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005870:	0800592b 	.word	0x0800592b
 8005874:	080057f3 	.word	0x080057f3
 8005878:	0800592b 	.word	0x0800592b
 800587c:	080059bb 	.word	0x080059bb
 8005880:	080057f3 	.word	0x080057f3
 8005884:	080058cd 	.word	0x080058cd
 8005888:	08005911 	.word	0x08005911
 800588c:	08005911 	.word	0x08005911
 8005890:	08005911 	.word	0x08005911
 8005894:	08005911 	.word	0x08005911
 8005898:	08005911 	.word	0x08005911
 800589c:	08005911 	.word	0x08005911
 80058a0:	08005911 	.word	0x08005911
 80058a4:	08005911 	.word	0x08005911
 80058a8:	08005911 	.word	0x08005911
 80058ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80058ae:	d809      	bhi.n	80058c4 <_scanf_float+0x138>
 80058b0:	2b60      	cmp	r3, #96	@ 0x60
 80058b2:	d8b1      	bhi.n	8005818 <_scanf_float+0x8c>
 80058b4:	2b54      	cmp	r3, #84	@ 0x54
 80058b6:	d07b      	beq.n	80059b0 <_scanf_float+0x224>
 80058b8:	2b59      	cmp	r3, #89	@ 0x59
 80058ba:	d19a      	bne.n	80057f2 <_scanf_float+0x66>
 80058bc:	2d07      	cmp	r5, #7
 80058be:	d198      	bne.n	80057f2 <_scanf_float+0x66>
 80058c0:	2508      	movs	r5, #8
 80058c2:	e02f      	b.n	8005924 <_scanf_float+0x198>
 80058c4:	2b74      	cmp	r3, #116	@ 0x74
 80058c6:	d073      	beq.n	80059b0 <_scanf_float+0x224>
 80058c8:	2b79      	cmp	r3, #121	@ 0x79
 80058ca:	e7f6      	b.n	80058ba <_scanf_float+0x12e>
 80058cc:	6821      	ldr	r1, [r4, #0]
 80058ce:	05c8      	lsls	r0, r1, #23
 80058d0:	d51e      	bpl.n	8005910 <_scanf_float+0x184>
 80058d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80058d6:	6021      	str	r1, [r4, #0]
 80058d8:	3701      	adds	r7, #1
 80058da:	f1bb 0f00 	cmp.w	fp, #0
 80058de:	d003      	beq.n	80058e8 <_scanf_float+0x15c>
 80058e0:	3201      	adds	r2, #1
 80058e2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80058e6:	60a2      	str	r2, [r4, #8]
 80058e8:	68a3      	ldr	r3, [r4, #8]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	60a3      	str	r3, [r4, #8]
 80058ee:	6923      	ldr	r3, [r4, #16]
 80058f0:	3301      	adds	r3, #1
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f8c9 3004 	str.w	r3, [r9, #4]
 8005900:	f340 8082 	ble.w	8005a08 <_scanf_float+0x27c>
 8005904:	f8d9 3000 	ldr.w	r3, [r9]
 8005908:	3301      	adds	r3, #1
 800590a:	f8c9 3000 	str.w	r3, [r9]
 800590e:	e762      	b.n	80057d6 <_scanf_float+0x4a>
 8005910:	eb1a 0105 	adds.w	r1, sl, r5
 8005914:	f47f af6d 	bne.w	80057f2 <_scanf_float+0x66>
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800591e:	6022      	str	r2, [r4, #0]
 8005920:	460d      	mov	r5, r1
 8005922:	468a      	mov	sl, r1
 8005924:	f806 3b01 	strb.w	r3, [r6], #1
 8005928:	e7de      	b.n	80058e8 <_scanf_float+0x15c>
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	0610      	lsls	r0, r2, #24
 800592e:	f57f af60 	bpl.w	80057f2 <_scanf_float+0x66>
 8005932:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005936:	6022      	str	r2, [r4, #0]
 8005938:	e7f4      	b.n	8005924 <_scanf_float+0x198>
 800593a:	f1ba 0f00 	cmp.w	sl, #0
 800593e:	d10c      	bne.n	800595a <_scanf_float+0x1ce>
 8005940:	b977      	cbnz	r7, 8005960 <_scanf_float+0x1d4>
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005948:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800594c:	d108      	bne.n	8005960 <_scanf_float+0x1d4>
 800594e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005952:	6022      	str	r2, [r4, #0]
 8005954:	f04f 0a01 	mov.w	sl, #1
 8005958:	e7e4      	b.n	8005924 <_scanf_float+0x198>
 800595a:	f1ba 0f02 	cmp.w	sl, #2
 800595e:	d050      	beq.n	8005a02 <_scanf_float+0x276>
 8005960:	2d01      	cmp	r5, #1
 8005962:	d002      	beq.n	800596a <_scanf_float+0x1de>
 8005964:	2d04      	cmp	r5, #4
 8005966:	f47f af44 	bne.w	80057f2 <_scanf_float+0x66>
 800596a:	3501      	adds	r5, #1
 800596c:	b2ed      	uxtb	r5, r5
 800596e:	e7d9      	b.n	8005924 <_scanf_float+0x198>
 8005970:	f1ba 0f01 	cmp.w	sl, #1
 8005974:	f47f af3d 	bne.w	80057f2 <_scanf_float+0x66>
 8005978:	f04f 0a02 	mov.w	sl, #2
 800597c:	e7d2      	b.n	8005924 <_scanf_float+0x198>
 800597e:	b975      	cbnz	r5, 800599e <_scanf_float+0x212>
 8005980:	2f00      	cmp	r7, #0
 8005982:	f47f af37 	bne.w	80057f4 <_scanf_float+0x68>
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800598c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005990:	f040 80fc 	bne.w	8005b8c <_scanf_float+0x400>
 8005994:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005998:	6022      	str	r2, [r4, #0]
 800599a:	2501      	movs	r5, #1
 800599c:	e7c2      	b.n	8005924 <_scanf_float+0x198>
 800599e:	2d03      	cmp	r5, #3
 80059a0:	d0e3      	beq.n	800596a <_scanf_float+0x1de>
 80059a2:	2d05      	cmp	r5, #5
 80059a4:	e7df      	b.n	8005966 <_scanf_float+0x1da>
 80059a6:	2d02      	cmp	r5, #2
 80059a8:	f47f af23 	bne.w	80057f2 <_scanf_float+0x66>
 80059ac:	2503      	movs	r5, #3
 80059ae:	e7b9      	b.n	8005924 <_scanf_float+0x198>
 80059b0:	2d06      	cmp	r5, #6
 80059b2:	f47f af1e 	bne.w	80057f2 <_scanf_float+0x66>
 80059b6:	2507      	movs	r5, #7
 80059b8:	e7b4      	b.n	8005924 <_scanf_float+0x198>
 80059ba:	6822      	ldr	r2, [r4, #0]
 80059bc:	0591      	lsls	r1, r2, #22
 80059be:	f57f af18 	bpl.w	80057f2 <_scanf_float+0x66>
 80059c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80059c6:	6022      	str	r2, [r4, #0]
 80059c8:	9702      	str	r7, [sp, #8]
 80059ca:	e7ab      	b.n	8005924 <_scanf_float+0x198>
 80059cc:	6822      	ldr	r2, [r4, #0]
 80059ce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80059d2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80059d6:	d005      	beq.n	80059e4 <_scanf_float+0x258>
 80059d8:	0550      	lsls	r0, r2, #21
 80059da:	f57f af0a 	bpl.w	80057f2 <_scanf_float+0x66>
 80059de:	2f00      	cmp	r7, #0
 80059e0:	f000 80d4 	beq.w	8005b8c <_scanf_float+0x400>
 80059e4:	0591      	lsls	r1, r2, #22
 80059e6:	bf58      	it	pl
 80059e8:	9902      	ldrpl	r1, [sp, #8]
 80059ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80059ee:	bf58      	it	pl
 80059f0:	1a79      	subpl	r1, r7, r1
 80059f2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80059f6:	bf58      	it	pl
 80059f8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	2700      	movs	r7, #0
 8005a00:	e790      	b.n	8005924 <_scanf_float+0x198>
 8005a02:	f04f 0a03 	mov.w	sl, #3
 8005a06:	e78d      	b.n	8005924 <_scanf_float+0x198>
 8005a08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4798      	blx	r3
 8005a12:	2800      	cmp	r0, #0
 8005a14:	f43f aedf 	beq.w	80057d6 <_scanf_float+0x4a>
 8005a18:	e6eb      	b.n	80057f2 <_scanf_float+0x66>
 8005a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a22:	464a      	mov	r2, r9
 8005a24:	4640      	mov	r0, r8
 8005a26:	4798      	blx	r3
 8005a28:	6923      	ldr	r3, [r4, #16]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	6123      	str	r3, [r4, #16]
 8005a2e:	e6eb      	b.n	8005808 <_scanf_float+0x7c>
 8005a30:	1e6b      	subs	r3, r5, #1
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d824      	bhi.n	8005a80 <_scanf_float+0x2f4>
 8005a36:	2d02      	cmp	r5, #2
 8005a38:	d836      	bhi.n	8005aa8 <_scanf_float+0x31c>
 8005a3a:	9b01      	ldr	r3, [sp, #4]
 8005a3c:	429e      	cmp	r6, r3
 8005a3e:	f67f aee7 	bls.w	8005810 <_scanf_float+0x84>
 8005a42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a4a:	464a      	mov	r2, r9
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	4798      	blx	r3
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	e7f0      	b.n	8005a3a <_scanf_float+0x2ae>
 8005a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005a60:	464a      	mov	r2, r9
 8005a62:	4640      	mov	r0, r8
 8005a64:	4798      	blx	r3
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005a70:	fa5f fa8a 	uxtb.w	sl, sl
 8005a74:	f1ba 0f02 	cmp.w	sl, #2
 8005a78:	d1ee      	bne.n	8005a58 <_scanf_float+0x2cc>
 8005a7a:	3d03      	subs	r5, #3
 8005a7c:	b2ed      	uxtb	r5, r5
 8005a7e:	1b76      	subs	r6, r6, r5
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	05da      	lsls	r2, r3, #23
 8005a84:	d530      	bpl.n	8005ae8 <_scanf_float+0x35c>
 8005a86:	055b      	lsls	r3, r3, #21
 8005a88:	d511      	bpl.n	8005aae <_scanf_float+0x322>
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	429e      	cmp	r6, r3
 8005a8e:	f67f aebf 	bls.w	8005810 <_scanf_float+0x84>
 8005a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a9a:	464a      	mov	r2, r9
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	4798      	blx	r3
 8005aa0:	6923      	ldr	r3, [r4, #16]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	e7f0      	b.n	8005a8a <_scanf_float+0x2fe>
 8005aa8:	46aa      	mov	sl, r5
 8005aaa:	46b3      	mov	fp, r6
 8005aac:	e7de      	b.n	8005a6c <_scanf_float+0x2e0>
 8005aae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	2965      	cmp	r1, #101	@ 0x65
 8005ab6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005aba:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8005abe:	6123      	str	r3, [r4, #16]
 8005ac0:	d00c      	beq.n	8005adc <_scanf_float+0x350>
 8005ac2:	2945      	cmp	r1, #69	@ 0x45
 8005ac4:	d00a      	beq.n	8005adc <_scanf_float+0x350>
 8005ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005aca:	464a      	mov	r2, r9
 8005acc:	4640      	mov	r0, r8
 8005ace:	4798      	blx	r3
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	1eb5      	subs	r5, r6, #2
 8005ada:	6123      	str	r3, [r4, #16]
 8005adc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ae0:	464a      	mov	r2, r9
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4798      	blx	r3
 8005ae6:	462e      	mov	r6, r5
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	f012 0210 	ands.w	r2, r2, #16
 8005aee:	d001      	beq.n	8005af4 <_scanf_float+0x368>
 8005af0:	2000      	movs	r0, #0
 8005af2:	e68e      	b.n	8005812 <_scanf_float+0x86>
 8005af4:	7032      	strb	r2, [r6, #0]
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b00:	d123      	bne.n	8005b4a <_scanf_float+0x3be>
 8005b02:	9b02      	ldr	r3, [sp, #8]
 8005b04:	429f      	cmp	r7, r3
 8005b06:	d00a      	beq.n	8005b1e <_scanf_float+0x392>
 8005b08:	1bda      	subs	r2, r3, r7
 8005b0a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005b0e:	429e      	cmp	r6, r3
 8005b10:	bf28      	it	cs
 8005b12:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005b16:	491e      	ldr	r1, [pc, #120]	@ (8005b90 <_scanf_float+0x404>)
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f000 f8ff 	bl	8005d1c <siprintf>
 8005b1e:	9901      	ldr	r1, [sp, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	4640      	mov	r0, r8
 8005b24:	f002 fb2a 	bl	800817c <_strtod_r>
 8005b28:	9b03      	ldr	r3, [sp, #12]
 8005b2a:	6821      	ldr	r1, [r4, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f011 0f02 	tst.w	r1, #2
 8005b32:	f103 0204 	add.w	r2, r3, #4
 8005b36:	d015      	beq.n	8005b64 <_scanf_float+0x3d8>
 8005b38:	9903      	ldr	r1, [sp, #12]
 8005b3a:	600a      	str	r2, [r1, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	ed83 0b00 	vstr	d0, [r3]
 8005b42:	68e3      	ldr	r3, [r4, #12]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60e3      	str	r3, [r4, #12]
 8005b48:	e7d2      	b.n	8005af0 <_scanf_float+0x364>
 8005b4a:	9b04      	ldr	r3, [sp, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0e6      	beq.n	8005b1e <_scanf_float+0x392>
 8005b50:	9905      	ldr	r1, [sp, #20]
 8005b52:	230a      	movs	r3, #10
 8005b54:	3101      	adds	r1, #1
 8005b56:	4640      	mov	r0, r8
 8005b58:	f002 fb90 	bl	800827c <_strtol_r>
 8005b5c:	9b04      	ldr	r3, [sp, #16]
 8005b5e:	9e05      	ldr	r6, [sp, #20]
 8005b60:	1ac2      	subs	r2, r0, r3
 8005b62:	e7d2      	b.n	8005b0a <_scanf_float+0x37e>
 8005b64:	f011 0f04 	tst.w	r1, #4
 8005b68:	9903      	ldr	r1, [sp, #12]
 8005b6a:	600a      	str	r2, [r1, #0]
 8005b6c:	d1e6      	bne.n	8005b3c <_scanf_float+0x3b0>
 8005b6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8005b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b76:	681d      	ldr	r5, [r3, #0]
 8005b78:	d705      	bvc.n	8005b86 <_scanf_float+0x3fa>
 8005b7a:	4806      	ldr	r0, [pc, #24]	@ (8005b94 <_scanf_float+0x408>)
 8005b7c:	f000 f9b4 	bl	8005ee8 <nanf>
 8005b80:	ed85 0a00 	vstr	s0, [r5]
 8005b84:	e7dd      	b.n	8005b42 <_scanf_float+0x3b6>
 8005b86:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005b8a:	e7f9      	b.n	8005b80 <_scanf_float+0x3f4>
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	e635      	b.n	80057fc <_scanf_float+0x70>
 8005b90:	08009494 	.word	0x08009494
 8005b94:	080095d5 	.word	0x080095d5

08005b98 <std>:
 8005b98:	2300      	movs	r3, #0
 8005b9a:	b510      	push	{r4, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ba6:	6083      	str	r3, [r0, #8]
 8005ba8:	8181      	strh	r1, [r0, #12]
 8005baa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bac:	81c2      	strh	r2, [r0, #14]
 8005bae:	6183      	str	r3, [r0, #24]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	305c      	adds	r0, #92	@ 0x5c
 8005bb6:	f000 f916 	bl	8005de6 <memset>
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <std+0x58>)
 8005bbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <std+0x5c>)
 8005bc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf8 <std+0x60>)
 8005bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <std+0x64>)
 8005bc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <std+0x68>)
 8005bcc:	6224      	str	r4, [r4, #32]
 8005bce:	429c      	cmp	r4, r3
 8005bd0:	d006      	beq.n	8005be0 <std+0x48>
 8005bd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bd6:	4294      	cmp	r4, r2
 8005bd8:	d002      	beq.n	8005be0 <std+0x48>
 8005bda:	33d0      	adds	r3, #208	@ 0xd0
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	d105      	bne.n	8005bec <std+0x54>
 8005be0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be8:	f000 b97a 	b.w	8005ee0 <__retarget_lock_init_recursive>
 8005bec:	bd10      	pop	{r4, pc}
 8005bee:	bf00      	nop
 8005bf0:	08005d61 	.word	0x08005d61
 8005bf4:	08005d83 	.word	0x08005d83
 8005bf8:	08005dbb 	.word	0x08005dbb
 8005bfc:	08005ddf 	.word	0x08005ddf
 8005c00:	20000a00 	.word	0x20000a00

08005c04 <stdio_exit_handler>:
 8005c04:	4a02      	ldr	r2, [pc, #8]	@ (8005c10 <stdio_exit_handler+0xc>)
 8005c06:	4903      	ldr	r1, [pc, #12]	@ (8005c14 <stdio_exit_handler+0x10>)
 8005c08:	4803      	ldr	r0, [pc, #12]	@ (8005c18 <stdio_exit_handler+0x14>)
 8005c0a:	f000 b869 	b.w	8005ce0 <_fwalk_sglue>
 8005c0e:	bf00      	nop
 8005c10:	2000000c 	.word	0x2000000c
 8005c14:	08008639 	.word	0x08008639
 8005c18:	2000001c 	.word	0x2000001c

08005c1c <cleanup_stdio>:
 8005c1c:	6841      	ldr	r1, [r0, #4]
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c50 <cleanup_stdio+0x34>)
 8005c20:	4299      	cmp	r1, r3
 8005c22:	b510      	push	{r4, lr}
 8005c24:	4604      	mov	r4, r0
 8005c26:	d001      	beq.n	8005c2c <cleanup_stdio+0x10>
 8005c28:	f002 fd06 	bl	8008638 <_fflush_r>
 8005c2c:	68a1      	ldr	r1, [r4, #8]
 8005c2e:	4b09      	ldr	r3, [pc, #36]	@ (8005c54 <cleanup_stdio+0x38>)
 8005c30:	4299      	cmp	r1, r3
 8005c32:	d002      	beq.n	8005c3a <cleanup_stdio+0x1e>
 8005c34:	4620      	mov	r0, r4
 8005c36:	f002 fcff 	bl	8008638 <_fflush_r>
 8005c3a:	68e1      	ldr	r1, [r4, #12]
 8005c3c:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <cleanup_stdio+0x3c>)
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d004      	beq.n	8005c4c <cleanup_stdio+0x30>
 8005c42:	4620      	mov	r0, r4
 8005c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c48:	f002 bcf6 	b.w	8008638 <_fflush_r>
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000a00 	.word	0x20000a00
 8005c54:	20000a68 	.word	0x20000a68
 8005c58:	20000ad0 	.word	0x20000ad0

08005c5c <global_stdio_init.part.0>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c8c <global_stdio_init.part.0+0x30>)
 8005c60:	4c0b      	ldr	r4, [pc, #44]	@ (8005c90 <global_stdio_init.part.0+0x34>)
 8005c62:	4a0c      	ldr	r2, [pc, #48]	@ (8005c94 <global_stdio_init.part.0+0x38>)
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	4620      	mov	r0, r4
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2104      	movs	r1, #4
 8005c6c:	f7ff ff94 	bl	8005b98 <std>
 8005c70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c74:	2201      	movs	r2, #1
 8005c76:	2109      	movs	r1, #9
 8005c78:	f7ff ff8e 	bl	8005b98 <std>
 8005c7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c80:	2202      	movs	r2, #2
 8005c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c86:	2112      	movs	r1, #18
 8005c88:	f7ff bf86 	b.w	8005b98 <std>
 8005c8c:	20000b38 	.word	0x20000b38
 8005c90:	20000a00 	.word	0x20000a00
 8005c94:	08005c05 	.word	0x08005c05

08005c98 <__sfp_lock_acquire>:
 8005c98:	4801      	ldr	r0, [pc, #4]	@ (8005ca0 <__sfp_lock_acquire+0x8>)
 8005c9a:	f000 b922 	b.w	8005ee2 <__retarget_lock_acquire_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	20000b41 	.word	0x20000b41

08005ca4 <__sfp_lock_release>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	@ (8005cac <__sfp_lock_release+0x8>)
 8005ca6:	f000 b91d 	b.w	8005ee4 <__retarget_lock_release_recursive>
 8005caa:	bf00      	nop
 8005cac:	20000b41 	.word	0x20000b41

08005cb0 <__sinit>:
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	f7ff fff0 	bl	8005c98 <__sfp_lock_acquire>
 8005cb8:	6a23      	ldr	r3, [r4, #32]
 8005cba:	b11b      	cbz	r3, 8005cc4 <__sinit+0x14>
 8005cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc0:	f7ff bff0 	b.w	8005ca4 <__sfp_lock_release>
 8005cc4:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <__sinit+0x28>)
 8005cc6:	6223      	str	r3, [r4, #32]
 8005cc8:	4b04      	ldr	r3, [pc, #16]	@ (8005cdc <__sinit+0x2c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f5      	bne.n	8005cbc <__sinit+0xc>
 8005cd0:	f7ff ffc4 	bl	8005c5c <global_stdio_init.part.0>
 8005cd4:	e7f2      	b.n	8005cbc <__sinit+0xc>
 8005cd6:	bf00      	nop
 8005cd8:	08005c1d 	.word	0x08005c1d
 8005cdc:	20000b38 	.word	0x20000b38

08005ce0 <_fwalk_sglue>:
 8005ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	4688      	mov	r8, r1
 8005ce8:	4614      	mov	r4, r2
 8005cea:	2600      	movs	r6, #0
 8005cec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cf0:	f1b9 0901 	subs.w	r9, r9, #1
 8005cf4:	d505      	bpl.n	8005d02 <_fwalk_sglue+0x22>
 8005cf6:	6824      	ldr	r4, [r4, #0]
 8005cf8:	2c00      	cmp	r4, #0
 8005cfa:	d1f7      	bne.n	8005cec <_fwalk_sglue+0xc>
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d02:	89ab      	ldrh	r3, [r5, #12]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d907      	bls.n	8005d18 <_fwalk_sglue+0x38>
 8005d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	d003      	beq.n	8005d18 <_fwalk_sglue+0x38>
 8005d10:	4629      	mov	r1, r5
 8005d12:	4638      	mov	r0, r7
 8005d14:	47c0      	blx	r8
 8005d16:	4306      	orrs	r6, r0
 8005d18:	3568      	adds	r5, #104	@ 0x68
 8005d1a:	e7e9      	b.n	8005cf0 <_fwalk_sglue+0x10>

08005d1c <siprintf>:
 8005d1c:	b40e      	push	{r1, r2, r3}
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	b09d      	sub	sp, #116	@ 0x74
 8005d22:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d24:	9002      	str	r0, [sp, #8]
 8005d26:	9006      	str	r0, [sp, #24]
 8005d28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d2c:	480a      	ldr	r0, [pc, #40]	@ (8005d58 <siprintf+0x3c>)
 8005d2e:	9107      	str	r1, [sp, #28]
 8005d30:	9104      	str	r1, [sp, #16]
 8005d32:	490a      	ldr	r1, [pc, #40]	@ (8005d5c <siprintf+0x40>)
 8005d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d38:	9105      	str	r1, [sp, #20]
 8005d3a:	2400      	movs	r4, #0
 8005d3c:	a902      	add	r1, sp, #8
 8005d3e:	6800      	ldr	r0, [r0, #0]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d44:	f002 faf8 	bl	8008338 <_svfiprintf_r>
 8005d48:	9b02      	ldr	r3, [sp, #8]
 8005d4a:	701c      	strb	r4, [r3, #0]
 8005d4c:	b01d      	add	sp, #116	@ 0x74
 8005d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d52:	b003      	add	sp, #12
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000018 	.word	0x20000018
 8005d5c:	ffff0208 	.word	0xffff0208

08005d60 <__sread>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	460c      	mov	r4, r1
 8005d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d68:	f000 f86c 	bl	8005e44 <_read_r>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	bfab      	itete	ge
 8005d70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d72:	89a3      	ldrhlt	r3, [r4, #12]
 8005d74:	181b      	addge	r3, r3, r0
 8005d76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d7a:	bfac      	ite	ge
 8005d7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d7e:	81a3      	strhlt	r3, [r4, #12]
 8005d80:	bd10      	pop	{r4, pc}

08005d82 <__swrite>:
 8005d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d86:	461f      	mov	r7, r3
 8005d88:	898b      	ldrh	r3, [r1, #12]
 8005d8a:	05db      	lsls	r3, r3, #23
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	4616      	mov	r6, r2
 8005d92:	d505      	bpl.n	8005da0 <__swrite+0x1e>
 8005d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d98:	2302      	movs	r3, #2
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f000 f840 	bl	8005e20 <_lseek_r>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	4632      	mov	r2, r6
 8005dae:	463b      	mov	r3, r7
 8005db0:	4628      	mov	r0, r5
 8005db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005db6:	f000 b857 	b.w	8005e68 <_write_r>

08005dba <__sseek>:
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc2:	f000 f82d 	bl	8005e20 <_lseek_r>
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	bf15      	itete	ne
 8005dcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dd6:	81a3      	strheq	r3, [r4, #12]
 8005dd8:	bf18      	it	ne
 8005dda:	81a3      	strhne	r3, [r4, #12]
 8005ddc:	bd10      	pop	{r4, pc}

08005dde <__sclose>:
 8005dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de2:	f000 b80d 	b.w	8005e00 <_close_r>

08005de6 <memset>:
 8005de6:	4402      	add	r2, r0
 8005de8:	4603      	mov	r3, r0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d100      	bne.n	8005df0 <memset+0xa>
 8005dee:	4770      	bx	lr
 8005df0:	f803 1b01 	strb.w	r1, [r3], #1
 8005df4:	e7f9      	b.n	8005dea <memset+0x4>
	...

08005df8 <_localeconv_r>:
 8005df8:	4800      	ldr	r0, [pc, #0]	@ (8005dfc <_localeconv_r+0x4>)
 8005dfa:	4770      	bx	lr
 8005dfc:	20000158 	.word	0x20000158

08005e00 <_close_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d06      	ldr	r5, [pc, #24]	@ (8005e1c <_close_r+0x1c>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fb f9d9 	bl	80011c2 <_close>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_close_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_close_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	20000b3c 	.word	0x20000b3c

08005e20 <_lseek_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	@ (8005e40 <_lseek_r+0x20>)
 8005e24:	4604      	mov	r4, r0
 8005e26:	4608      	mov	r0, r1
 8005e28:	4611      	mov	r1, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f7fb f9ee 	bl	8001210 <_lseek>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_lseek_r+0x1e>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_lseek_r+0x1e>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	20000b3c 	.word	0x20000b3c

08005e44 <_read_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d07      	ldr	r5, [pc, #28]	@ (8005e64 <_read_r+0x20>)
 8005e48:	4604      	mov	r4, r0
 8005e4a:	4608      	mov	r0, r1
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	602a      	str	r2, [r5, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f7fb f97c 	bl	8001150 <_read>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_read_r+0x1e>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_read_r+0x1e>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	20000b3c 	.word	0x20000b3c

08005e68 <_write_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d07      	ldr	r5, [pc, #28]	@ (8005e88 <_write_r+0x20>)
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	4608      	mov	r0, r1
 8005e70:	4611      	mov	r1, r2
 8005e72:	2200      	movs	r2, #0
 8005e74:	602a      	str	r2, [r5, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f7fb f987 	bl	800118a <_write>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d102      	bne.n	8005e86 <_write_r+0x1e>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	b103      	cbz	r3, 8005e86 <_write_r+0x1e>
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
 8005e88:	20000b3c 	.word	0x20000b3c

08005e8c <__errno>:
 8005e8c:	4b01      	ldr	r3, [pc, #4]	@ (8005e94 <__errno+0x8>)
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20000018 	.word	0x20000018

08005e98 <__libc_init_array>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ed0 <__libc_init_array+0x38>)
 8005e9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ed4 <__libc_init_array+0x3c>)
 8005e9e:	1b64      	subs	r4, r4, r5
 8005ea0:	10a4      	asrs	r4, r4, #2
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	42a6      	cmp	r6, r4
 8005ea6:	d109      	bne.n	8005ebc <__libc_init_array+0x24>
 8005ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8005ed8 <__libc_init_array+0x40>)
 8005eaa:	4c0c      	ldr	r4, [pc, #48]	@ (8005edc <__libc_init_array+0x44>)
 8005eac:	f003 fab6 	bl	800941c <_init>
 8005eb0:	1b64      	subs	r4, r4, r5
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	2600      	movs	r6, #0
 8005eb6:	42a6      	cmp	r6, r4
 8005eb8:	d105      	bne.n	8005ec6 <__libc_init_array+0x2e>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec0:	4798      	blx	r3
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__libc_init_array+0xc>
 8005ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eca:	4798      	blx	r3
 8005ecc:	3601      	adds	r6, #1
 8005ece:	e7f2      	b.n	8005eb6 <__libc_init_array+0x1e>
 8005ed0:	08009894 	.word	0x08009894
 8005ed4:	08009894 	.word	0x08009894
 8005ed8:	08009894 	.word	0x08009894
 8005edc:	08009898 	.word	0x08009898

08005ee0 <__retarget_lock_init_recursive>:
 8005ee0:	4770      	bx	lr

08005ee2 <__retarget_lock_acquire_recursive>:
 8005ee2:	4770      	bx	lr

08005ee4 <__retarget_lock_release_recursive>:
 8005ee4:	4770      	bx	lr
	...

08005ee8 <nanf>:
 8005ee8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005ef0 <nanf+0x8>
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	7fc00000 	.word	0x7fc00000

08005ef4 <quorem>:
 8005ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	6903      	ldr	r3, [r0, #16]
 8005efa:	690c      	ldr	r4, [r1, #16]
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	4607      	mov	r7, r0
 8005f00:	db7e      	blt.n	8006000 <quorem+0x10c>
 8005f02:	3c01      	subs	r4, #1
 8005f04:	f101 0814 	add.w	r8, r1, #20
 8005f08:	00a3      	lsls	r3, r4, #2
 8005f0a:	f100 0514 	add.w	r5, r0, #20
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	429a      	cmp	r2, r3
 8005f22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f26:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f2a:	d32e      	bcc.n	8005f8a <quorem+0x96>
 8005f2c:	f04f 0a00 	mov.w	sl, #0
 8005f30:	46c4      	mov	ip, r8
 8005f32:	46ae      	mov	lr, r5
 8005f34:	46d3      	mov	fp, sl
 8005f36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f3a:	b298      	uxth	r0, r3
 8005f3c:	fb06 a000 	mla	r0, r6, r0, sl
 8005f40:	0c02      	lsrs	r2, r0, #16
 8005f42:	0c1b      	lsrs	r3, r3, #16
 8005f44:	fb06 2303 	mla	r3, r6, r3, r2
 8005f48:	f8de 2000 	ldr.w	r2, [lr]
 8005f4c:	b280      	uxth	r0, r0
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	1a12      	subs	r2, r2, r0
 8005f52:	445a      	add	r2, fp
 8005f54:	f8de 0000 	ldr.w	r0, [lr]
 8005f58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f66:	b292      	uxth	r2, r2
 8005f68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f6c:	45e1      	cmp	r9, ip
 8005f6e:	f84e 2b04 	str.w	r2, [lr], #4
 8005f72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f76:	d2de      	bcs.n	8005f36 <quorem+0x42>
 8005f78:	9b00      	ldr	r3, [sp, #0]
 8005f7a:	58eb      	ldr	r3, [r5, r3]
 8005f7c:	b92b      	cbnz	r3, 8005f8a <quorem+0x96>
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	3b04      	subs	r3, #4
 8005f82:	429d      	cmp	r5, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	d32f      	bcc.n	8005fe8 <quorem+0xf4>
 8005f88:	613c      	str	r4, [r7, #16]
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	f001 f956 	bl	800723c <__mcmp>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	db25      	blt.n	8005fe0 <quorem+0xec>
 8005f94:	4629      	mov	r1, r5
 8005f96:	2000      	movs	r0, #0
 8005f98:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f9c:	f8d1 c000 	ldr.w	ip, [r1]
 8005fa0:	fa1f fe82 	uxth.w	lr, r2
 8005fa4:	fa1f f38c 	uxth.w	r3, ip
 8005fa8:	eba3 030e 	sub.w	r3, r3, lr
 8005fac:	4403      	add	r3, r0
 8005fae:	0c12      	lsrs	r2, r2, #16
 8005fb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005fb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fbe:	45c1      	cmp	r9, r8
 8005fc0:	f841 3b04 	str.w	r3, [r1], #4
 8005fc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fc8:	d2e6      	bcs.n	8005f98 <quorem+0xa4>
 8005fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fd2:	b922      	cbnz	r2, 8005fde <quorem+0xea>
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	d30b      	bcc.n	8005ff4 <quorem+0x100>
 8005fdc:	613c      	str	r4, [r7, #16]
 8005fde:	3601      	adds	r6, #1
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	b003      	add	sp, #12
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	3b04      	subs	r3, #4
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	d1cb      	bne.n	8005f88 <quorem+0x94>
 8005ff0:	3c01      	subs	r4, #1
 8005ff2:	e7c6      	b.n	8005f82 <quorem+0x8e>
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	3b04      	subs	r3, #4
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	d1ef      	bne.n	8005fdc <quorem+0xe8>
 8005ffc:	3c01      	subs	r4, #1
 8005ffe:	e7ea      	b.n	8005fd6 <quorem+0xe2>
 8006000:	2000      	movs	r0, #0
 8006002:	e7ee      	b.n	8005fe2 <quorem+0xee>
 8006004:	0000      	movs	r0, r0
	...

08006008 <_dtoa_r>:
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	ed2d 8b02 	vpush	{d8}
 8006010:	69c7      	ldr	r7, [r0, #28]
 8006012:	b091      	sub	sp, #68	@ 0x44
 8006014:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006018:	ec55 4b10 	vmov	r4, r5, d0
 800601c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800601e:	9107      	str	r1, [sp, #28]
 8006020:	4681      	mov	r9, r0
 8006022:	9209      	str	r2, [sp, #36]	@ 0x24
 8006024:	930d      	str	r3, [sp, #52]	@ 0x34
 8006026:	b97f      	cbnz	r7, 8006048 <_dtoa_r+0x40>
 8006028:	2010      	movs	r0, #16
 800602a:	f000 fd95 	bl	8006b58 <malloc>
 800602e:	4602      	mov	r2, r0
 8006030:	f8c9 001c 	str.w	r0, [r9, #28]
 8006034:	b920      	cbnz	r0, 8006040 <_dtoa_r+0x38>
 8006036:	4ba0      	ldr	r3, [pc, #640]	@ (80062b8 <_dtoa_r+0x2b0>)
 8006038:	21ef      	movs	r1, #239	@ 0xef
 800603a:	48a0      	ldr	r0, [pc, #640]	@ (80062bc <_dtoa_r+0x2b4>)
 800603c:	f002 fb78 	bl	8008730 <__assert_func>
 8006040:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006044:	6007      	str	r7, [r0, #0]
 8006046:	60c7      	str	r7, [r0, #12]
 8006048:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800604c:	6819      	ldr	r1, [r3, #0]
 800604e:	b159      	cbz	r1, 8006068 <_dtoa_r+0x60>
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	604a      	str	r2, [r1, #4]
 8006054:	2301      	movs	r3, #1
 8006056:	4093      	lsls	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
 800605a:	4648      	mov	r0, r9
 800605c:	f000 fe72 	bl	8006d44 <_Bfree>
 8006060:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	1e2b      	subs	r3, r5, #0
 800606a:	bfbb      	ittet	lt
 800606c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006070:	9303      	strlt	r3, [sp, #12]
 8006072:	2300      	movge	r3, #0
 8006074:	2201      	movlt	r2, #1
 8006076:	bfac      	ite	ge
 8006078:	6033      	strge	r3, [r6, #0]
 800607a:	6032      	strlt	r2, [r6, #0]
 800607c:	4b90      	ldr	r3, [pc, #576]	@ (80062c0 <_dtoa_r+0x2b8>)
 800607e:	9e03      	ldr	r6, [sp, #12]
 8006080:	43b3      	bics	r3, r6
 8006082:	d110      	bne.n	80060a6 <_dtoa_r+0x9e>
 8006084:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006086:	f242 730f 	movw	r3, #9999	@ 0x270f
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006090:	4323      	orrs	r3, r4
 8006092:	f000 84e6 	beq.w	8006a62 <_dtoa_r+0xa5a>
 8006096:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006098:	4f8a      	ldr	r7, [pc, #552]	@ (80062c4 <_dtoa_r+0x2bc>)
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 84e8 	beq.w	8006a70 <_dtoa_r+0xa68>
 80060a0:	1cfb      	adds	r3, r7, #3
 80060a2:	f000 bce3 	b.w	8006a6c <_dtoa_r+0xa64>
 80060a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80060aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80060ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b2:	d10a      	bne.n	80060ca <_dtoa_r+0xc2>
 80060b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80060b6:	2301      	movs	r3, #1
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80060bc:	b113      	cbz	r3, 80060c4 <_dtoa_r+0xbc>
 80060be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80060c0:	4b81      	ldr	r3, [pc, #516]	@ (80062c8 <_dtoa_r+0x2c0>)
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	4f81      	ldr	r7, [pc, #516]	@ (80062cc <_dtoa_r+0x2c4>)
 80060c6:	f000 bcd3 	b.w	8006a70 <_dtoa_r+0xa68>
 80060ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80060cc:	a90f      	add	r1, sp, #60	@ 0x3c
 80060ce:	4648      	mov	r0, r9
 80060d0:	eeb0 0b48 	vmov.f64	d0, d8
 80060d4:	f001 f9d2 	bl	800747c <__d2b>
 80060d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80060dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060de:	9001      	str	r0, [sp, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d045      	beq.n	8006170 <_dtoa_r+0x168>
 80060e4:	eeb0 7b48 	vmov.f64	d7, d8
 80060e8:	ee18 1a90 	vmov	r1, s17
 80060ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80060f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80060f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80060f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80060fc:	2500      	movs	r5, #0
 80060fe:	ee07 1a90 	vmov	s15, r1
 8006102:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8006106:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80062a0 <_dtoa_r+0x298>
 800610a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800610e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80062a8 <_dtoa_r+0x2a0>
 8006112:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006116:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80062b0 <_dtoa_r+0x2a8>
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006122:	eeb0 7b46 	vmov.f64	d7, d6
 8006126:	eea4 7b05 	vfma.f64	d7, d4, d5
 800612a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800612e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006136:	ee16 8a90 	vmov	r8, s13
 800613a:	d508      	bpl.n	800614e <_dtoa_r+0x146>
 800613c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006140:	eeb4 6b47 	vcmp.f64	d6, d7
 8006144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006148:	bf18      	it	ne
 800614a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800614e:	f1b8 0f16 	cmp.w	r8, #22
 8006152:	d82b      	bhi.n	80061ac <_dtoa_r+0x1a4>
 8006154:	495e      	ldr	r1, [pc, #376]	@ (80062d0 <_dtoa_r+0x2c8>)
 8006156:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800615a:	ed91 7b00 	vldr	d7, [r1]
 800615e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006166:	d501      	bpl.n	800616c <_dtoa_r+0x164>
 8006168:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800616c:	2100      	movs	r1, #0
 800616e:	e01e      	b.n	80061ae <_dtoa_r+0x1a6>
 8006170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006172:	4413      	add	r3, r2
 8006174:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006178:	2920      	cmp	r1, #32
 800617a:	bfc1      	itttt	gt
 800617c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006180:	408e      	lslgt	r6, r1
 8006182:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8006186:	fa24 f101 	lsrgt.w	r1, r4, r1
 800618a:	bfd6      	itet	le
 800618c:	f1c1 0120 	rsble	r1, r1, #32
 8006190:	4331      	orrgt	r1, r6
 8006192:	fa04 f101 	lslle.w	r1, r4, r1
 8006196:	ee07 1a90 	vmov	s15, r1
 800619a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800619e:	3b01      	subs	r3, #1
 80061a0:	ee17 1a90 	vmov	r1, s15
 80061a4:	2501      	movs	r5, #1
 80061a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80061aa:	e7a8      	b.n	80060fe <_dtoa_r+0xf6>
 80061ac:	2101      	movs	r1, #1
 80061ae:	1ad2      	subs	r2, r2, r3
 80061b0:	1e53      	subs	r3, r2, #1
 80061b2:	9306      	str	r3, [sp, #24]
 80061b4:	bf45      	ittet	mi
 80061b6:	f1c2 0301 	rsbmi	r3, r2, #1
 80061ba:	9304      	strmi	r3, [sp, #16]
 80061bc:	2300      	movpl	r3, #0
 80061be:	2300      	movmi	r3, #0
 80061c0:	bf4c      	ite	mi
 80061c2:	9306      	strmi	r3, [sp, #24]
 80061c4:	9304      	strpl	r3, [sp, #16]
 80061c6:	f1b8 0f00 	cmp.w	r8, #0
 80061ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80061cc:	db18      	blt.n	8006200 <_dtoa_r+0x1f8>
 80061ce:	9b06      	ldr	r3, [sp, #24]
 80061d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80061d4:	4443      	add	r3, r8
 80061d6:	9306      	str	r3, [sp, #24]
 80061d8:	2300      	movs	r3, #0
 80061da:	9a07      	ldr	r2, [sp, #28]
 80061dc:	2a09      	cmp	r2, #9
 80061de:	d845      	bhi.n	800626c <_dtoa_r+0x264>
 80061e0:	2a05      	cmp	r2, #5
 80061e2:	bfc4      	itt	gt
 80061e4:	3a04      	subgt	r2, #4
 80061e6:	9207      	strgt	r2, [sp, #28]
 80061e8:	9a07      	ldr	r2, [sp, #28]
 80061ea:	f1a2 0202 	sub.w	r2, r2, #2
 80061ee:	bfcc      	ite	gt
 80061f0:	2400      	movgt	r4, #0
 80061f2:	2401      	movle	r4, #1
 80061f4:	2a03      	cmp	r2, #3
 80061f6:	d844      	bhi.n	8006282 <_dtoa_r+0x27a>
 80061f8:	e8df f002 	tbb	[pc, r2]
 80061fc:	0b173634 	.word	0x0b173634
 8006200:	9b04      	ldr	r3, [sp, #16]
 8006202:	2200      	movs	r2, #0
 8006204:	eba3 0308 	sub.w	r3, r3, r8
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	920a      	str	r2, [sp, #40]	@ 0x28
 800620c:	f1c8 0300 	rsb	r3, r8, #0
 8006210:	e7e3      	b.n	80061da <_dtoa_r+0x1d2>
 8006212:	2201      	movs	r2, #1
 8006214:	9208      	str	r2, [sp, #32]
 8006216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006218:	eb08 0b02 	add.w	fp, r8, r2
 800621c:	f10b 0a01 	add.w	sl, fp, #1
 8006220:	4652      	mov	r2, sl
 8006222:	2a01      	cmp	r2, #1
 8006224:	bfb8      	it	lt
 8006226:	2201      	movlt	r2, #1
 8006228:	e006      	b.n	8006238 <_dtoa_r+0x230>
 800622a:	2201      	movs	r2, #1
 800622c:	9208      	str	r2, [sp, #32]
 800622e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006230:	2a00      	cmp	r2, #0
 8006232:	dd29      	ble.n	8006288 <_dtoa_r+0x280>
 8006234:	4693      	mov	fp, r2
 8006236:	4692      	mov	sl, r2
 8006238:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800623c:	2100      	movs	r1, #0
 800623e:	2004      	movs	r0, #4
 8006240:	f100 0614 	add.w	r6, r0, #20
 8006244:	4296      	cmp	r6, r2
 8006246:	d926      	bls.n	8006296 <_dtoa_r+0x28e>
 8006248:	6079      	str	r1, [r7, #4]
 800624a:	4648      	mov	r0, r9
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	f000 fd39 	bl	8006cc4 <_Balloc>
 8006252:	9b05      	ldr	r3, [sp, #20]
 8006254:	4607      	mov	r7, r0
 8006256:	2800      	cmp	r0, #0
 8006258:	d13e      	bne.n	80062d8 <_dtoa_r+0x2d0>
 800625a:	4b1e      	ldr	r3, [pc, #120]	@ (80062d4 <_dtoa_r+0x2cc>)
 800625c:	4602      	mov	r2, r0
 800625e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006262:	e6ea      	b.n	800603a <_dtoa_r+0x32>
 8006264:	2200      	movs	r2, #0
 8006266:	e7e1      	b.n	800622c <_dtoa_r+0x224>
 8006268:	2200      	movs	r2, #0
 800626a:	e7d3      	b.n	8006214 <_dtoa_r+0x20c>
 800626c:	2401      	movs	r4, #1
 800626e:	2200      	movs	r2, #0
 8006270:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8006274:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006278:	2100      	movs	r1, #0
 800627a:	46da      	mov	sl, fp
 800627c:	2212      	movs	r2, #18
 800627e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006280:	e7da      	b.n	8006238 <_dtoa_r+0x230>
 8006282:	2201      	movs	r2, #1
 8006284:	9208      	str	r2, [sp, #32]
 8006286:	e7f5      	b.n	8006274 <_dtoa_r+0x26c>
 8006288:	f04f 0b01 	mov.w	fp, #1
 800628c:	46da      	mov	sl, fp
 800628e:	465a      	mov	r2, fp
 8006290:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8006294:	e7d0      	b.n	8006238 <_dtoa_r+0x230>
 8006296:	3101      	adds	r1, #1
 8006298:	0040      	lsls	r0, r0, #1
 800629a:	e7d1      	b.n	8006240 <_dtoa_r+0x238>
 800629c:	f3af 8000 	nop.w
 80062a0:	636f4361 	.word	0x636f4361
 80062a4:	3fd287a7 	.word	0x3fd287a7
 80062a8:	8b60c8b3 	.word	0x8b60c8b3
 80062ac:	3fc68a28 	.word	0x3fc68a28
 80062b0:	509f79fb 	.word	0x509f79fb
 80062b4:	3fd34413 	.word	0x3fd34413
 80062b8:	080094a6 	.word	0x080094a6
 80062bc:	080094bd 	.word	0x080094bd
 80062c0:	7ff00000 	.word	0x7ff00000
 80062c4:	080094a2 	.word	0x080094a2
 80062c8:	08009471 	.word	0x08009471
 80062cc:	08009470 	.word	0x08009470
 80062d0:	08009670 	.word	0x08009670
 80062d4:	08009515 	.word	0x08009515
 80062d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80062dc:	f1ba 0f0e 	cmp.w	sl, #14
 80062e0:	6010      	str	r0, [r2, #0]
 80062e2:	d86e      	bhi.n	80063c2 <_dtoa_r+0x3ba>
 80062e4:	2c00      	cmp	r4, #0
 80062e6:	d06c      	beq.n	80063c2 <_dtoa_r+0x3ba>
 80062e8:	f1b8 0f00 	cmp.w	r8, #0
 80062ec:	f340 80b4 	ble.w	8006458 <_dtoa_r+0x450>
 80062f0:	4ac8      	ldr	r2, [pc, #800]	@ (8006614 <_dtoa_r+0x60c>)
 80062f2:	f008 010f 	and.w	r1, r8, #15
 80062f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80062fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80062fe:	ed92 7b00 	vldr	d7, [r2]
 8006302:	ea4f 1128 	mov.w	r1, r8, asr #4
 8006306:	f000 809b 	beq.w	8006440 <_dtoa_r+0x438>
 800630a:	4ac3      	ldr	r2, [pc, #780]	@ (8006618 <_dtoa_r+0x610>)
 800630c:	ed92 6b08 	vldr	d6, [r2, #32]
 8006310:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006314:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006318:	f001 010f 	and.w	r1, r1, #15
 800631c:	2203      	movs	r2, #3
 800631e:	48be      	ldr	r0, [pc, #760]	@ (8006618 <_dtoa_r+0x610>)
 8006320:	2900      	cmp	r1, #0
 8006322:	f040 808f 	bne.w	8006444 <_dtoa_r+0x43c>
 8006326:	ed9d 6b02 	vldr	d6, [sp, #8]
 800632a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800632e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006332:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006334:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006338:	2900      	cmp	r1, #0
 800633a:	f000 80b3 	beq.w	80064a4 <_dtoa_r+0x49c>
 800633e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8006342:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634a:	f140 80ab 	bpl.w	80064a4 <_dtoa_r+0x49c>
 800634e:	f1ba 0f00 	cmp.w	sl, #0
 8006352:	f000 80a7 	beq.w	80064a4 <_dtoa_r+0x49c>
 8006356:	f1bb 0f00 	cmp.w	fp, #0
 800635a:	dd30      	ble.n	80063be <_dtoa_r+0x3b6>
 800635c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006360:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006364:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006368:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800636c:	9105      	str	r1, [sp, #20]
 800636e:	3201      	adds	r2, #1
 8006370:	465c      	mov	r4, fp
 8006372:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006376:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800637a:	ee07 2a90 	vmov	s15, r2
 800637e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006382:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006386:	ee15 2a90 	vmov	r2, s11
 800638a:	ec51 0b15 	vmov	r0, r1, d5
 800638e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8006392:	2c00      	cmp	r4, #0
 8006394:	f040 808a 	bne.w	80064ac <_dtoa_r+0x4a4>
 8006398:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800639c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80063a0:	ec41 0b17 	vmov	d7, r0, r1
 80063a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ac:	f300 826a 	bgt.w	8006884 <_dtoa_r+0x87c>
 80063b0:	eeb1 7b47 	vneg.f64	d7, d7
 80063b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063bc:	d423      	bmi.n	8006406 <_dtoa_r+0x3fe>
 80063be:	ed8d 8b02 	vstr	d8, [sp, #8]
 80063c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	f2c0 8129 	blt.w	800661c <_dtoa_r+0x614>
 80063ca:	f1b8 0f0e 	cmp.w	r8, #14
 80063ce:	f300 8125 	bgt.w	800661c <_dtoa_r+0x614>
 80063d2:	4b90      	ldr	r3, [pc, #576]	@ (8006614 <_dtoa_r+0x60c>)
 80063d4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80063d8:	ed93 6b00 	vldr	d6, [r3]
 80063dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f280 80c8 	bge.w	8006574 <_dtoa_r+0x56c>
 80063e4:	f1ba 0f00 	cmp.w	sl, #0
 80063e8:	f300 80c4 	bgt.w	8006574 <_dtoa_r+0x56c>
 80063ec:	d10b      	bne.n	8006406 <_dtoa_r+0x3fe>
 80063ee:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80063f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80063f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006402:	f2c0 823c 	blt.w	800687e <_dtoa_r+0x876>
 8006406:	2400      	movs	r4, #0
 8006408:	4625      	mov	r5, r4
 800640a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640c:	43db      	mvns	r3, r3
 800640e:	9305      	str	r3, [sp, #20]
 8006410:	463e      	mov	r6, r7
 8006412:	f04f 0800 	mov.w	r8, #0
 8006416:	4621      	mov	r1, r4
 8006418:	4648      	mov	r0, r9
 800641a:	f000 fc93 	bl	8006d44 <_Bfree>
 800641e:	2d00      	cmp	r5, #0
 8006420:	f000 80a2 	beq.w	8006568 <_dtoa_r+0x560>
 8006424:	f1b8 0f00 	cmp.w	r8, #0
 8006428:	d005      	beq.n	8006436 <_dtoa_r+0x42e>
 800642a:	45a8      	cmp	r8, r5
 800642c:	d003      	beq.n	8006436 <_dtoa_r+0x42e>
 800642e:	4641      	mov	r1, r8
 8006430:	4648      	mov	r0, r9
 8006432:	f000 fc87 	bl	8006d44 <_Bfree>
 8006436:	4629      	mov	r1, r5
 8006438:	4648      	mov	r0, r9
 800643a:	f000 fc83 	bl	8006d44 <_Bfree>
 800643e:	e093      	b.n	8006568 <_dtoa_r+0x560>
 8006440:	2202      	movs	r2, #2
 8006442:	e76c      	b.n	800631e <_dtoa_r+0x316>
 8006444:	07cc      	lsls	r4, r1, #31
 8006446:	d504      	bpl.n	8006452 <_dtoa_r+0x44a>
 8006448:	ed90 6b00 	vldr	d6, [r0]
 800644c:	3201      	adds	r2, #1
 800644e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006452:	1049      	asrs	r1, r1, #1
 8006454:	3008      	adds	r0, #8
 8006456:	e763      	b.n	8006320 <_dtoa_r+0x318>
 8006458:	d022      	beq.n	80064a0 <_dtoa_r+0x498>
 800645a:	f1c8 0100 	rsb	r1, r8, #0
 800645e:	4a6d      	ldr	r2, [pc, #436]	@ (8006614 <_dtoa_r+0x60c>)
 8006460:	f001 000f 	and.w	r0, r1, #15
 8006464:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006468:	ed92 7b00 	vldr	d7, [r2]
 800646c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006470:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006474:	4868      	ldr	r0, [pc, #416]	@ (8006618 <_dtoa_r+0x610>)
 8006476:	1109      	asrs	r1, r1, #4
 8006478:	2400      	movs	r4, #0
 800647a:	2202      	movs	r2, #2
 800647c:	b929      	cbnz	r1, 800648a <_dtoa_r+0x482>
 800647e:	2c00      	cmp	r4, #0
 8006480:	f43f af57 	beq.w	8006332 <_dtoa_r+0x32a>
 8006484:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006488:	e753      	b.n	8006332 <_dtoa_r+0x32a>
 800648a:	07ce      	lsls	r6, r1, #31
 800648c:	d505      	bpl.n	800649a <_dtoa_r+0x492>
 800648e:	ed90 6b00 	vldr	d6, [r0]
 8006492:	3201      	adds	r2, #1
 8006494:	2401      	movs	r4, #1
 8006496:	ee27 7b06 	vmul.f64	d7, d7, d6
 800649a:	1049      	asrs	r1, r1, #1
 800649c:	3008      	adds	r0, #8
 800649e:	e7ed      	b.n	800647c <_dtoa_r+0x474>
 80064a0:	2202      	movs	r2, #2
 80064a2:	e746      	b.n	8006332 <_dtoa_r+0x32a>
 80064a4:	f8cd 8014 	str.w	r8, [sp, #20]
 80064a8:	4654      	mov	r4, sl
 80064aa:	e762      	b.n	8006372 <_dtoa_r+0x36a>
 80064ac:	4a59      	ldr	r2, [pc, #356]	@ (8006614 <_dtoa_r+0x60c>)
 80064ae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80064b2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80064b6:	9a08      	ldr	r2, [sp, #32]
 80064b8:	ec41 0b17 	vmov	d7, r0, r1
 80064bc:	443c      	add	r4, r7
 80064be:	b34a      	cbz	r2, 8006514 <_dtoa_r+0x50c>
 80064c0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80064c4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80064c8:	463e      	mov	r6, r7
 80064ca:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80064ce:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80064d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80064d6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80064da:	ee14 2a90 	vmov	r2, s9
 80064de:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80064e2:	3230      	adds	r2, #48	@ 0x30
 80064e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80064e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	f806 2b01 	strb.w	r2, [r6], #1
 80064f4:	d438      	bmi.n	8006568 <_dtoa_r+0x560>
 80064f6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80064fa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80064fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006502:	d46e      	bmi.n	80065e2 <_dtoa_r+0x5da>
 8006504:	42a6      	cmp	r6, r4
 8006506:	f43f af5a 	beq.w	80063be <_dtoa_r+0x3b6>
 800650a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800650e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006512:	e7e0      	b.n	80064d6 <_dtoa_r+0x4ce>
 8006514:	4621      	mov	r1, r4
 8006516:	463e      	mov	r6, r7
 8006518:	ee27 7b04 	vmul.f64	d7, d7, d4
 800651c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006520:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006524:	ee14 2a90 	vmov	r2, s9
 8006528:	3230      	adds	r2, #48	@ 0x30
 800652a:	f806 2b01 	strb.w	r2, [r6], #1
 800652e:	42a6      	cmp	r6, r4
 8006530:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006534:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006538:	d119      	bne.n	800656e <_dtoa_r+0x566>
 800653a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800653e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006542:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654a:	dc4a      	bgt.n	80065e2 <_dtoa_r+0x5da>
 800654c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006550:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006558:	f57f af31 	bpl.w	80063be <_dtoa_r+0x3b6>
 800655c:	460e      	mov	r6, r1
 800655e:	3901      	subs	r1, #1
 8006560:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006564:	2b30      	cmp	r3, #48	@ 0x30
 8006566:	d0f9      	beq.n	800655c <_dtoa_r+0x554>
 8006568:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800656c:	e027      	b.n	80065be <_dtoa_r+0x5b6>
 800656e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006572:	e7d5      	b.n	8006520 <_dtoa_r+0x518>
 8006574:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006578:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800657c:	463e      	mov	r6, r7
 800657e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006582:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006586:	ee15 3a10 	vmov	r3, s10
 800658a:	3330      	adds	r3, #48	@ 0x30
 800658c:	f806 3b01 	strb.w	r3, [r6], #1
 8006590:	1bf3      	subs	r3, r6, r7
 8006592:	459a      	cmp	sl, r3
 8006594:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006598:	eea3 7b46 	vfms.f64	d7, d3, d6
 800659c:	d132      	bne.n	8006604 <_dtoa_r+0x5fc>
 800659e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80065a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80065a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065aa:	dc18      	bgt.n	80065de <_dtoa_r+0x5d6>
 80065ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80065b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b4:	d103      	bne.n	80065be <_dtoa_r+0x5b6>
 80065b6:	ee15 3a10 	vmov	r3, s10
 80065ba:	07db      	lsls	r3, r3, #31
 80065bc:	d40f      	bmi.n	80065de <_dtoa_r+0x5d6>
 80065be:	9901      	ldr	r1, [sp, #4]
 80065c0:	4648      	mov	r0, r9
 80065c2:	f000 fbbf 	bl	8006d44 <_Bfree>
 80065c6:	2300      	movs	r3, #0
 80065c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065ca:	7033      	strb	r3, [r6, #0]
 80065cc:	f108 0301 	add.w	r3, r8, #1
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 824b 	beq.w	8006a70 <_dtoa_r+0xa68>
 80065da:	601e      	str	r6, [r3, #0]
 80065dc:	e248      	b.n	8006a70 <_dtoa_r+0xa68>
 80065de:	f8cd 8014 	str.w	r8, [sp, #20]
 80065e2:	4633      	mov	r3, r6
 80065e4:	461e      	mov	r6, r3
 80065e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ea:	2a39      	cmp	r2, #57	@ 0x39
 80065ec:	d106      	bne.n	80065fc <_dtoa_r+0x5f4>
 80065ee:	429f      	cmp	r7, r3
 80065f0:	d1f8      	bne.n	80065e4 <_dtoa_r+0x5dc>
 80065f2:	9a05      	ldr	r2, [sp, #20]
 80065f4:	3201      	adds	r2, #1
 80065f6:	9205      	str	r2, [sp, #20]
 80065f8:	2230      	movs	r2, #48	@ 0x30
 80065fa:	703a      	strb	r2, [r7, #0]
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	3201      	adds	r2, #1
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e7b1      	b.n	8006568 <_dtoa_r+0x560>
 8006604:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006608:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800660c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006610:	d1b5      	bne.n	800657e <_dtoa_r+0x576>
 8006612:	e7d4      	b.n	80065be <_dtoa_r+0x5b6>
 8006614:	08009670 	.word	0x08009670
 8006618:	08009648 	.word	0x08009648
 800661c:	9908      	ldr	r1, [sp, #32]
 800661e:	2900      	cmp	r1, #0
 8006620:	f000 80e9 	beq.w	80067f6 <_dtoa_r+0x7ee>
 8006624:	9907      	ldr	r1, [sp, #28]
 8006626:	2901      	cmp	r1, #1
 8006628:	f300 80cb 	bgt.w	80067c2 <_dtoa_r+0x7ba>
 800662c:	2d00      	cmp	r5, #0
 800662e:	f000 80c4 	beq.w	80067ba <_dtoa_r+0x7b2>
 8006632:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006636:	9e04      	ldr	r6, [sp, #16]
 8006638:	461c      	mov	r4, r3
 800663a:	9305      	str	r3, [sp, #20]
 800663c:	9b04      	ldr	r3, [sp, #16]
 800663e:	4413      	add	r3, r2
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	2101      	movs	r1, #1
 8006646:	4413      	add	r3, r2
 8006648:	4648      	mov	r0, r9
 800664a:	9306      	str	r3, [sp, #24]
 800664c:	f000 fc78 	bl	8006f40 <__i2b>
 8006650:	9b05      	ldr	r3, [sp, #20]
 8006652:	4605      	mov	r5, r0
 8006654:	b166      	cbz	r6, 8006670 <_dtoa_r+0x668>
 8006656:	9a06      	ldr	r2, [sp, #24]
 8006658:	2a00      	cmp	r2, #0
 800665a:	dd09      	ble.n	8006670 <_dtoa_r+0x668>
 800665c:	42b2      	cmp	r2, r6
 800665e:	9904      	ldr	r1, [sp, #16]
 8006660:	bfa8      	it	ge
 8006662:	4632      	movge	r2, r6
 8006664:	1a89      	subs	r1, r1, r2
 8006666:	9104      	str	r1, [sp, #16]
 8006668:	9906      	ldr	r1, [sp, #24]
 800666a:	1ab6      	subs	r6, r6, r2
 800666c:	1a8a      	subs	r2, r1, r2
 800666e:	9206      	str	r2, [sp, #24]
 8006670:	b30b      	cbz	r3, 80066b6 <_dtoa_r+0x6ae>
 8006672:	9a08      	ldr	r2, [sp, #32]
 8006674:	2a00      	cmp	r2, #0
 8006676:	f000 80c5 	beq.w	8006804 <_dtoa_r+0x7fc>
 800667a:	2c00      	cmp	r4, #0
 800667c:	f000 80bf 	beq.w	80067fe <_dtoa_r+0x7f6>
 8006680:	4629      	mov	r1, r5
 8006682:	4622      	mov	r2, r4
 8006684:	4648      	mov	r0, r9
 8006686:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006688:	f000 fd12 	bl	80070b0 <__pow5mult>
 800668c:	9a01      	ldr	r2, [sp, #4]
 800668e:	4601      	mov	r1, r0
 8006690:	4605      	mov	r5, r0
 8006692:	4648      	mov	r0, r9
 8006694:	f000 fc6a 	bl	8006f6c <__multiply>
 8006698:	9901      	ldr	r1, [sp, #4]
 800669a:	9005      	str	r0, [sp, #20]
 800669c:	4648      	mov	r0, r9
 800669e:	f000 fb51 	bl	8006d44 <_Bfree>
 80066a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066a4:	1b1b      	subs	r3, r3, r4
 80066a6:	f000 80b0 	beq.w	800680a <_dtoa_r+0x802>
 80066aa:	9905      	ldr	r1, [sp, #20]
 80066ac:	461a      	mov	r2, r3
 80066ae:	4648      	mov	r0, r9
 80066b0:	f000 fcfe 	bl	80070b0 <__pow5mult>
 80066b4:	9001      	str	r0, [sp, #4]
 80066b6:	2101      	movs	r1, #1
 80066b8:	4648      	mov	r0, r9
 80066ba:	f000 fc41 	bl	8006f40 <__i2b>
 80066be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066c0:	4604      	mov	r4, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 81da 	beq.w	8006a7c <_dtoa_r+0xa74>
 80066c8:	461a      	mov	r2, r3
 80066ca:	4601      	mov	r1, r0
 80066cc:	4648      	mov	r0, r9
 80066ce:	f000 fcef 	bl	80070b0 <__pow5mult>
 80066d2:	9b07      	ldr	r3, [sp, #28]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	4604      	mov	r4, r0
 80066d8:	f300 80a0 	bgt.w	800681c <_dtoa_r+0x814>
 80066dc:	9b02      	ldr	r3, [sp, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 8096 	bne.w	8006810 <_dtoa_r+0x808>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	f040 8092 	bne.w	8006814 <_dtoa_r+0x80c>
 80066f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80066f4:	0d12      	lsrs	r2, r2, #20
 80066f6:	0512      	lsls	r2, r2, #20
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	f000 808d 	beq.w	8006818 <_dtoa_r+0x810>
 80066fe:	9b04      	ldr	r3, [sp, #16]
 8006700:	3301      	adds	r3, #1
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	9b06      	ldr	r3, [sp, #24]
 8006706:	3301      	adds	r3, #1
 8006708:	9306      	str	r3, [sp, #24]
 800670a:	2301      	movs	r3, #1
 800670c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800670e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 81b9 	beq.w	8006a88 <_dtoa_r+0xa80>
 8006716:	6922      	ldr	r2, [r4, #16]
 8006718:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800671c:	6910      	ldr	r0, [r2, #16]
 800671e:	f000 fbc3 	bl	8006ea8 <__hi0bits>
 8006722:	f1c0 0020 	rsb	r0, r0, #32
 8006726:	9b06      	ldr	r3, [sp, #24]
 8006728:	4418      	add	r0, r3
 800672a:	f010 001f 	ands.w	r0, r0, #31
 800672e:	f000 8081 	beq.w	8006834 <_dtoa_r+0x82c>
 8006732:	f1c0 0220 	rsb	r2, r0, #32
 8006736:	2a04      	cmp	r2, #4
 8006738:	dd73      	ble.n	8006822 <_dtoa_r+0x81a>
 800673a:	9b04      	ldr	r3, [sp, #16]
 800673c:	f1c0 001c 	rsb	r0, r0, #28
 8006740:	4403      	add	r3, r0
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	4406      	add	r6, r0
 8006748:	4403      	add	r3, r0
 800674a:	9306      	str	r3, [sp, #24]
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	dd05      	ble.n	800675e <_dtoa_r+0x756>
 8006752:	9901      	ldr	r1, [sp, #4]
 8006754:	461a      	mov	r2, r3
 8006756:	4648      	mov	r0, r9
 8006758:	f000 fd04 	bl	8007164 <__lshift>
 800675c:	9001      	str	r0, [sp, #4]
 800675e:	9b06      	ldr	r3, [sp, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	dd05      	ble.n	8006770 <_dtoa_r+0x768>
 8006764:	4621      	mov	r1, r4
 8006766:	461a      	mov	r2, r3
 8006768:	4648      	mov	r0, r9
 800676a:	f000 fcfb 	bl	8007164 <__lshift>
 800676e:	4604      	mov	r4, r0
 8006770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006772:	2b00      	cmp	r3, #0
 8006774:	d060      	beq.n	8006838 <_dtoa_r+0x830>
 8006776:	9801      	ldr	r0, [sp, #4]
 8006778:	4621      	mov	r1, r4
 800677a:	f000 fd5f 	bl	800723c <__mcmp>
 800677e:	2800      	cmp	r0, #0
 8006780:	da5a      	bge.n	8006838 <_dtoa_r+0x830>
 8006782:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	9901      	ldr	r1, [sp, #4]
 800678a:	2300      	movs	r3, #0
 800678c:	220a      	movs	r2, #10
 800678e:	4648      	mov	r0, r9
 8006790:	f000 fafa 	bl	8006d88 <__multadd>
 8006794:	9b08      	ldr	r3, [sp, #32]
 8006796:	9001      	str	r0, [sp, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8177 	beq.w	8006a8c <_dtoa_r+0xa84>
 800679e:	4629      	mov	r1, r5
 80067a0:	2300      	movs	r3, #0
 80067a2:	220a      	movs	r2, #10
 80067a4:	4648      	mov	r0, r9
 80067a6:	f000 faef 	bl	8006d88 <__multadd>
 80067aa:	f1bb 0f00 	cmp.w	fp, #0
 80067ae:	4605      	mov	r5, r0
 80067b0:	dc6e      	bgt.n	8006890 <_dtoa_r+0x888>
 80067b2:	9b07      	ldr	r3, [sp, #28]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	dc48      	bgt.n	800684a <_dtoa_r+0x842>
 80067b8:	e06a      	b.n	8006890 <_dtoa_r+0x888>
 80067ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80067c0:	e739      	b.n	8006636 <_dtoa_r+0x62e>
 80067c2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80067c6:	42a3      	cmp	r3, r4
 80067c8:	db07      	blt.n	80067da <_dtoa_r+0x7d2>
 80067ca:	f1ba 0f00 	cmp.w	sl, #0
 80067ce:	eba3 0404 	sub.w	r4, r3, r4
 80067d2:	db0b      	blt.n	80067ec <_dtoa_r+0x7e4>
 80067d4:	9e04      	ldr	r6, [sp, #16]
 80067d6:	4652      	mov	r2, sl
 80067d8:	e72f      	b.n	800663a <_dtoa_r+0x632>
 80067da:	1ae2      	subs	r2, r4, r3
 80067dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067de:	9e04      	ldr	r6, [sp, #16]
 80067e0:	4413      	add	r3, r2
 80067e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80067e4:	4652      	mov	r2, sl
 80067e6:	4623      	mov	r3, r4
 80067e8:	2400      	movs	r4, #0
 80067ea:	e726      	b.n	800663a <_dtoa_r+0x632>
 80067ec:	9a04      	ldr	r2, [sp, #16]
 80067ee:	eba2 060a 	sub.w	r6, r2, sl
 80067f2:	2200      	movs	r2, #0
 80067f4:	e721      	b.n	800663a <_dtoa_r+0x632>
 80067f6:	9e04      	ldr	r6, [sp, #16]
 80067f8:	9d08      	ldr	r5, [sp, #32]
 80067fa:	461c      	mov	r4, r3
 80067fc:	e72a      	b.n	8006654 <_dtoa_r+0x64c>
 80067fe:	9a01      	ldr	r2, [sp, #4]
 8006800:	9205      	str	r2, [sp, #20]
 8006802:	e752      	b.n	80066aa <_dtoa_r+0x6a2>
 8006804:	9901      	ldr	r1, [sp, #4]
 8006806:	461a      	mov	r2, r3
 8006808:	e751      	b.n	80066ae <_dtoa_r+0x6a6>
 800680a:	9b05      	ldr	r3, [sp, #20]
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	e752      	b.n	80066b6 <_dtoa_r+0x6ae>
 8006810:	2300      	movs	r3, #0
 8006812:	e77b      	b.n	800670c <_dtoa_r+0x704>
 8006814:	9b02      	ldr	r3, [sp, #8]
 8006816:	e779      	b.n	800670c <_dtoa_r+0x704>
 8006818:	920b      	str	r2, [sp, #44]	@ 0x2c
 800681a:	e778      	b.n	800670e <_dtoa_r+0x706>
 800681c:	2300      	movs	r3, #0
 800681e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006820:	e779      	b.n	8006716 <_dtoa_r+0x70e>
 8006822:	d093      	beq.n	800674c <_dtoa_r+0x744>
 8006824:	9b04      	ldr	r3, [sp, #16]
 8006826:	321c      	adds	r2, #28
 8006828:	4413      	add	r3, r2
 800682a:	9304      	str	r3, [sp, #16]
 800682c:	9b06      	ldr	r3, [sp, #24]
 800682e:	4416      	add	r6, r2
 8006830:	4413      	add	r3, r2
 8006832:	e78a      	b.n	800674a <_dtoa_r+0x742>
 8006834:	4602      	mov	r2, r0
 8006836:	e7f5      	b.n	8006824 <_dtoa_r+0x81c>
 8006838:	f1ba 0f00 	cmp.w	sl, #0
 800683c:	f8cd 8014 	str.w	r8, [sp, #20]
 8006840:	46d3      	mov	fp, sl
 8006842:	dc21      	bgt.n	8006888 <_dtoa_r+0x880>
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	2b02      	cmp	r3, #2
 8006848:	dd1e      	ble.n	8006888 <_dtoa_r+0x880>
 800684a:	f1bb 0f00 	cmp.w	fp, #0
 800684e:	f47f addc 	bne.w	800640a <_dtoa_r+0x402>
 8006852:	4621      	mov	r1, r4
 8006854:	465b      	mov	r3, fp
 8006856:	2205      	movs	r2, #5
 8006858:	4648      	mov	r0, r9
 800685a:	f000 fa95 	bl	8006d88 <__multadd>
 800685e:	4601      	mov	r1, r0
 8006860:	4604      	mov	r4, r0
 8006862:	9801      	ldr	r0, [sp, #4]
 8006864:	f000 fcea 	bl	800723c <__mcmp>
 8006868:	2800      	cmp	r0, #0
 800686a:	f77f adce 	ble.w	800640a <_dtoa_r+0x402>
 800686e:	463e      	mov	r6, r7
 8006870:	2331      	movs	r3, #49	@ 0x31
 8006872:	f806 3b01 	strb.w	r3, [r6], #1
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	3301      	adds	r3, #1
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	e5c9      	b.n	8006412 <_dtoa_r+0x40a>
 800687e:	f8cd 8014 	str.w	r8, [sp, #20]
 8006882:	4654      	mov	r4, sl
 8006884:	4625      	mov	r5, r4
 8006886:	e7f2      	b.n	800686e <_dtoa_r+0x866>
 8006888:	9b08      	ldr	r3, [sp, #32]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8102 	beq.w	8006a94 <_dtoa_r+0xa8c>
 8006890:	2e00      	cmp	r6, #0
 8006892:	dd05      	ble.n	80068a0 <_dtoa_r+0x898>
 8006894:	4629      	mov	r1, r5
 8006896:	4632      	mov	r2, r6
 8006898:	4648      	mov	r0, r9
 800689a:	f000 fc63 	bl	8007164 <__lshift>
 800689e:	4605      	mov	r5, r0
 80068a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d058      	beq.n	8006958 <_dtoa_r+0x950>
 80068a6:	6869      	ldr	r1, [r5, #4]
 80068a8:	4648      	mov	r0, r9
 80068aa:	f000 fa0b 	bl	8006cc4 <_Balloc>
 80068ae:	4606      	mov	r6, r0
 80068b0:	b928      	cbnz	r0, 80068be <_dtoa_r+0x8b6>
 80068b2:	4b82      	ldr	r3, [pc, #520]	@ (8006abc <_dtoa_r+0xab4>)
 80068b4:	4602      	mov	r2, r0
 80068b6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80068ba:	f7ff bbbe 	b.w	800603a <_dtoa_r+0x32>
 80068be:	692a      	ldr	r2, [r5, #16]
 80068c0:	3202      	adds	r2, #2
 80068c2:	0092      	lsls	r2, r2, #2
 80068c4:	f105 010c 	add.w	r1, r5, #12
 80068c8:	300c      	adds	r0, #12
 80068ca:	f001 ff19 	bl	8008700 <memcpy>
 80068ce:	2201      	movs	r2, #1
 80068d0:	4631      	mov	r1, r6
 80068d2:	4648      	mov	r0, r9
 80068d4:	f000 fc46 	bl	8007164 <__lshift>
 80068d8:	1c7b      	adds	r3, r7, #1
 80068da:	9304      	str	r3, [sp, #16]
 80068dc:	eb07 030b 	add.w	r3, r7, fp
 80068e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e2:	9b02      	ldr	r3, [sp, #8]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	46a8      	mov	r8, r5
 80068ea:	9308      	str	r3, [sp, #32]
 80068ec:	4605      	mov	r5, r0
 80068ee:	9b04      	ldr	r3, [sp, #16]
 80068f0:	9801      	ldr	r0, [sp, #4]
 80068f2:	4621      	mov	r1, r4
 80068f4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80068f8:	f7ff fafc 	bl	8005ef4 <quorem>
 80068fc:	4641      	mov	r1, r8
 80068fe:	9002      	str	r0, [sp, #8]
 8006900:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006904:	9801      	ldr	r0, [sp, #4]
 8006906:	f000 fc99 	bl	800723c <__mcmp>
 800690a:	462a      	mov	r2, r5
 800690c:	9006      	str	r0, [sp, #24]
 800690e:	4621      	mov	r1, r4
 8006910:	4648      	mov	r0, r9
 8006912:	f000 fcaf 	bl	8007274 <__mdiff>
 8006916:	68c2      	ldr	r2, [r0, #12]
 8006918:	4606      	mov	r6, r0
 800691a:	b9fa      	cbnz	r2, 800695c <_dtoa_r+0x954>
 800691c:	4601      	mov	r1, r0
 800691e:	9801      	ldr	r0, [sp, #4]
 8006920:	f000 fc8c 	bl	800723c <__mcmp>
 8006924:	4602      	mov	r2, r0
 8006926:	4631      	mov	r1, r6
 8006928:	4648      	mov	r0, r9
 800692a:	920a      	str	r2, [sp, #40]	@ 0x28
 800692c:	f000 fa0a 	bl	8006d44 <_Bfree>
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006934:	9e04      	ldr	r6, [sp, #16]
 8006936:	ea42 0103 	orr.w	r1, r2, r3
 800693a:	9b08      	ldr	r3, [sp, #32]
 800693c:	4319      	orrs	r1, r3
 800693e:	d10f      	bne.n	8006960 <_dtoa_r+0x958>
 8006940:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006944:	d028      	beq.n	8006998 <_dtoa_r+0x990>
 8006946:	9b06      	ldr	r3, [sp, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	dd02      	ble.n	8006952 <_dtoa_r+0x94a>
 800694c:	9b02      	ldr	r3, [sp, #8]
 800694e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006952:	f88b a000 	strb.w	sl, [fp]
 8006956:	e55e      	b.n	8006416 <_dtoa_r+0x40e>
 8006958:	4628      	mov	r0, r5
 800695a:	e7bd      	b.n	80068d8 <_dtoa_r+0x8d0>
 800695c:	2201      	movs	r2, #1
 800695e:	e7e2      	b.n	8006926 <_dtoa_r+0x91e>
 8006960:	9b06      	ldr	r3, [sp, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	db04      	blt.n	8006970 <_dtoa_r+0x968>
 8006966:	9907      	ldr	r1, [sp, #28]
 8006968:	430b      	orrs	r3, r1
 800696a:	9908      	ldr	r1, [sp, #32]
 800696c:	430b      	orrs	r3, r1
 800696e:	d120      	bne.n	80069b2 <_dtoa_r+0x9aa>
 8006970:	2a00      	cmp	r2, #0
 8006972:	ddee      	ble.n	8006952 <_dtoa_r+0x94a>
 8006974:	9901      	ldr	r1, [sp, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	4648      	mov	r0, r9
 800697a:	f000 fbf3 	bl	8007164 <__lshift>
 800697e:	4621      	mov	r1, r4
 8006980:	9001      	str	r0, [sp, #4]
 8006982:	f000 fc5b 	bl	800723c <__mcmp>
 8006986:	2800      	cmp	r0, #0
 8006988:	dc03      	bgt.n	8006992 <_dtoa_r+0x98a>
 800698a:	d1e2      	bne.n	8006952 <_dtoa_r+0x94a>
 800698c:	f01a 0f01 	tst.w	sl, #1
 8006990:	d0df      	beq.n	8006952 <_dtoa_r+0x94a>
 8006992:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006996:	d1d9      	bne.n	800694c <_dtoa_r+0x944>
 8006998:	2339      	movs	r3, #57	@ 0x39
 800699a:	f88b 3000 	strb.w	r3, [fp]
 800699e:	4633      	mov	r3, r6
 80069a0:	461e      	mov	r6, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80069a8:	2a39      	cmp	r2, #57	@ 0x39
 80069aa:	d052      	beq.n	8006a52 <_dtoa_r+0xa4a>
 80069ac:	3201      	adds	r2, #1
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	e531      	b.n	8006416 <_dtoa_r+0x40e>
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	dd07      	ble.n	80069c6 <_dtoa_r+0x9be>
 80069b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80069ba:	d0ed      	beq.n	8006998 <_dtoa_r+0x990>
 80069bc:	f10a 0301 	add.w	r3, sl, #1
 80069c0:	f88b 3000 	strb.w	r3, [fp]
 80069c4:	e527      	b.n	8006416 <_dtoa_r+0x40e>
 80069c6:	9b04      	ldr	r3, [sp, #16]
 80069c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069ca:	f803 ac01 	strb.w	sl, [r3, #-1]
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d029      	beq.n	8006a26 <_dtoa_r+0xa1e>
 80069d2:	9901      	ldr	r1, [sp, #4]
 80069d4:	2300      	movs	r3, #0
 80069d6:	220a      	movs	r2, #10
 80069d8:	4648      	mov	r0, r9
 80069da:	f000 f9d5 	bl	8006d88 <__multadd>
 80069de:	45a8      	cmp	r8, r5
 80069e0:	9001      	str	r0, [sp, #4]
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	f04f 020a 	mov.w	r2, #10
 80069ea:	4641      	mov	r1, r8
 80069ec:	4648      	mov	r0, r9
 80069ee:	d107      	bne.n	8006a00 <_dtoa_r+0x9f8>
 80069f0:	f000 f9ca 	bl	8006d88 <__multadd>
 80069f4:	4680      	mov	r8, r0
 80069f6:	4605      	mov	r5, r0
 80069f8:	9b04      	ldr	r3, [sp, #16]
 80069fa:	3301      	adds	r3, #1
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	e776      	b.n	80068ee <_dtoa_r+0x8e6>
 8006a00:	f000 f9c2 	bl	8006d88 <__multadd>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4680      	mov	r8, r0
 8006a08:	2300      	movs	r3, #0
 8006a0a:	220a      	movs	r2, #10
 8006a0c:	4648      	mov	r0, r9
 8006a0e:	f000 f9bb 	bl	8006d88 <__multadd>
 8006a12:	4605      	mov	r5, r0
 8006a14:	e7f0      	b.n	80069f8 <_dtoa_r+0x9f0>
 8006a16:	f1bb 0f00 	cmp.w	fp, #0
 8006a1a:	bfcc      	ite	gt
 8006a1c:	465e      	movgt	r6, fp
 8006a1e:	2601      	movle	r6, #1
 8006a20:	443e      	add	r6, r7
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	9901      	ldr	r1, [sp, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4648      	mov	r0, r9
 8006a2c:	f000 fb9a 	bl	8007164 <__lshift>
 8006a30:	4621      	mov	r1, r4
 8006a32:	9001      	str	r0, [sp, #4]
 8006a34:	f000 fc02 	bl	800723c <__mcmp>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	dcb0      	bgt.n	800699e <_dtoa_r+0x996>
 8006a3c:	d102      	bne.n	8006a44 <_dtoa_r+0xa3c>
 8006a3e:	f01a 0f01 	tst.w	sl, #1
 8006a42:	d1ac      	bne.n	800699e <_dtoa_r+0x996>
 8006a44:	4633      	mov	r3, r6
 8006a46:	461e      	mov	r6, r3
 8006a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a4c:	2a30      	cmp	r2, #48	@ 0x30
 8006a4e:	d0fa      	beq.n	8006a46 <_dtoa_r+0xa3e>
 8006a50:	e4e1      	b.n	8006416 <_dtoa_r+0x40e>
 8006a52:	429f      	cmp	r7, r3
 8006a54:	d1a4      	bne.n	80069a0 <_dtoa_r+0x998>
 8006a56:	9b05      	ldr	r3, [sp, #20]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	9305      	str	r3, [sp, #20]
 8006a5c:	2331      	movs	r3, #49	@ 0x31
 8006a5e:	703b      	strb	r3, [r7, #0]
 8006a60:	e4d9      	b.n	8006416 <_dtoa_r+0x40e>
 8006a62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006a64:	4f16      	ldr	r7, [pc, #88]	@ (8006ac0 <_dtoa_r+0xab8>)
 8006a66:	b11b      	cbz	r3, 8006a70 <_dtoa_r+0xa68>
 8006a68:	f107 0308 	add.w	r3, r7, #8
 8006a6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4638      	mov	r0, r7
 8006a72:	b011      	add	sp, #68	@ 0x44
 8006a74:	ecbd 8b02 	vpop	{d8}
 8006a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	f77f ae2c 	ble.w	80066dc <_dtoa_r+0x6d4>
 8006a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a88:	2001      	movs	r0, #1
 8006a8a:	e64c      	b.n	8006726 <_dtoa_r+0x71e>
 8006a8c:	f1bb 0f00 	cmp.w	fp, #0
 8006a90:	f77f aed8 	ble.w	8006844 <_dtoa_r+0x83c>
 8006a94:	463e      	mov	r6, r7
 8006a96:	9801      	ldr	r0, [sp, #4]
 8006a98:	4621      	mov	r1, r4
 8006a9a:	f7ff fa2b 	bl	8005ef4 <quorem>
 8006a9e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006aa2:	f806 ab01 	strb.w	sl, [r6], #1
 8006aa6:	1bf2      	subs	r2, r6, r7
 8006aa8:	4593      	cmp	fp, r2
 8006aaa:	ddb4      	ble.n	8006a16 <_dtoa_r+0xa0e>
 8006aac:	9901      	ldr	r1, [sp, #4]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	4648      	mov	r0, r9
 8006ab4:	f000 f968 	bl	8006d88 <__multadd>
 8006ab8:	9001      	str	r0, [sp, #4]
 8006aba:	e7ec      	b.n	8006a96 <_dtoa_r+0xa8e>
 8006abc:	08009515 	.word	0x08009515
 8006ac0:	08009499 	.word	0x08009499

08006ac4 <_free_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	d041      	beq.n	8006b50 <_free_r+0x8c>
 8006acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad0:	1f0c      	subs	r4, r1, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	bfb8      	it	lt
 8006ad6:	18e4      	addlt	r4, r4, r3
 8006ad8:	f000 f8e8 	bl	8006cac <__malloc_lock>
 8006adc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b54 <_free_r+0x90>)
 8006ade:	6813      	ldr	r3, [r2, #0]
 8006ae0:	b933      	cbnz	r3, 8006af0 <_free_r+0x2c>
 8006ae2:	6063      	str	r3, [r4, #4]
 8006ae4:	6014      	str	r4, [r2, #0]
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aec:	f000 b8e4 	b.w	8006cb8 <__malloc_unlock>
 8006af0:	42a3      	cmp	r3, r4
 8006af2:	d908      	bls.n	8006b06 <_free_r+0x42>
 8006af4:	6820      	ldr	r0, [r4, #0]
 8006af6:	1821      	adds	r1, r4, r0
 8006af8:	428b      	cmp	r3, r1
 8006afa:	bf01      	itttt	eq
 8006afc:	6819      	ldreq	r1, [r3, #0]
 8006afe:	685b      	ldreq	r3, [r3, #4]
 8006b00:	1809      	addeq	r1, r1, r0
 8006b02:	6021      	streq	r1, [r4, #0]
 8006b04:	e7ed      	b.n	8006ae2 <_free_r+0x1e>
 8006b06:	461a      	mov	r2, r3
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	b10b      	cbz	r3, 8006b10 <_free_r+0x4c>
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	d9fa      	bls.n	8006b06 <_free_r+0x42>
 8006b10:	6811      	ldr	r1, [r2, #0]
 8006b12:	1850      	adds	r0, r2, r1
 8006b14:	42a0      	cmp	r0, r4
 8006b16:	d10b      	bne.n	8006b30 <_free_r+0x6c>
 8006b18:	6820      	ldr	r0, [r4, #0]
 8006b1a:	4401      	add	r1, r0
 8006b1c:	1850      	adds	r0, r2, r1
 8006b1e:	4283      	cmp	r3, r0
 8006b20:	6011      	str	r1, [r2, #0]
 8006b22:	d1e0      	bne.n	8006ae6 <_free_r+0x22>
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	6053      	str	r3, [r2, #4]
 8006b2a:	4408      	add	r0, r1
 8006b2c:	6010      	str	r0, [r2, #0]
 8006b2e:	e7da      	b.n	8006ae6 <_free_r+0x22>
 8006b30:	d902      	bls.n	8006b38 <_free_r+0x74>
 8006b32:	230c      	movs	r3, #12
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	e7d6      	b.n	8006ae6 <_free_r+0x22>
 8006b38:	6820      	ldr	r0, [r4, #0]
 8006b3a:	1821      	adds	r1, r4, r0
 8006b3c:	428b      	cmp	r3, r1
 8006b3e:	bf04      	itt	eq
 8006b40:	6819      	ldreq	r1, [r3, #0]
 8006b42:	685b      	ldreq	r3, [r3, #4]
 8006b44:	6063      	str	r3, [r4, #4]
 8006b46:	bf04      	itt	eq
 8006b48:	1809      	addeq	r1, r1, r0
 8006b4a:	6021      	streq	r1, [r4, #0]
 8006b4c:	6054      	str	r4, [r2, #4]
 8006b4e:	e7ca      	b.n	8006ae6 <_free_r+0x22>
 8006b50:	bd38      	pop	{r3, r4, r5, pc}
 8006b52:	bf00      	nop
 8006b54:	20000b48 	.word	0x20000b48

08006b58 <malloc>:
 8006b58:	4b02      	ldr	r3, [pc, #8]	@ (8006b64 <malloc+0xc>)
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	f000 b825 	b.w	8006bac <_malloc_r>
 8006b62:	bf00      	nop
 8006b64:	20000018 	.word	0x20000018

08006b68 <sbrk_aligned>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8006ba8 <sbrk_aligned+0x40>)
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	6831      	ldr	r1, [r6, #0]
 8006b70:	4605      	mov	r5, r0
 8006b72:	b911      	cbnz	r1, 8006b7a <sbrk_aligned+0x12>
 8006b74:	f001 fdb4 	bl	80086e0 <_sbrk_r>
 8006b78:	6030      	str	r0, [r6, #0]
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f001 fdaf 	bl	80086e0 <_sbrk_r>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d103      	bne.n	8006b8e <sbrk_aligned+0x26>
 8006b86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}
 8006b8e:	1cc4      	adds	r4, r0, #3
 8006b90:	f024 0403 	bic.w	r4, r4, #3
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d0f8      	beq.n	8006b8a <sbrk_aligned+0x22>
 8006b98:	1a21      	subs	r1, r4, r0
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f001 fda0 	bl	80086e0 <_sbrk_r>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d1f2      	bne.n	8006b8a <sbrk_aligned+0x22>
 8006ba4:	e7ef      	b.n	8006b86 <sbrk_aligned+0x1e>
 8006ba6:	bf00      	nop
 8006ba8:	20000b44 	.word	0x20000b44

08006bac <_malloc_r>:
 8006bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb0:	1ccd      	adds	r5, r1, #3
 8006bb2:	f025 0503 	bic.w	r5, r5, #3
 8006bb6:	3508      	adds	r5, #8
 8006bb8:	2d0c      	cmp	r5, #12
 8006bba:	bf38      	it	cc
 8006bbc:	250c      	movcc	r5, #12
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	db01      	blt.n	8006bc8 <_malloc_r+0x1c>
 8006bc4:	42a9      	cmp	r1, r5
 8006bc6:	d904      	bls.n	8006bd2 <_malloc_r+0x26>
 8006bc8:	230c      	movs	r3, #12
 8006bca:	6033      	str	r3, [r6, #0]
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ca8 <_malloc_r+0xfc>
 8006bd6:	f000 f869 	bl	8006cac <__malloc_lock>
 8006bda:	f8d8 3000 	ldr.w	r3, [r8]
 8006bde:	461c      	mov	r4, r3
 8006be0:	bb44      	cbnz	r4, 8006c34 <_malloc_r+0x88>
 8006be2:	4629      	mov	r1, r5
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff ffbf 	bl	8006b68 <sbrk_aligned>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	4604      	mov	r4, r0
 8006bee:	d158      	bne.n	8006ca2 <_malloc_r+0xf6>
 8006bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8006bf4:	4627      	mov	r7, r4
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	d143      	bne.n	8006c82 <_malloc_r+0xd6>
 8006bfa:	2c00      	cmp	r4, #0
 8006bfc:	d04b      	beq.n	8006c96 <_malloc_r+0xea>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	4639      	mov	r1, r7
 8006c02:	4630      	mov	r0, r6
 8006c04:	eb04 0903 	add.w	r9, r4, r3
 8006c08:	f001 fd6a 	bl	80086e0 <_sbrk_r>
 8006c0c:	4581      	cmp	r9, r0
 8006c0e:	d142      	bne.n	8006c96 <_malloc_r+0xea>
 8006c10:	6821      	ldr	r1, [r4, #0]
 8006c12:	1a6d      	subs	r5, r5, r1
 8006c14:	4629      	mov	r1, r5
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7ff ffa6 	bl	8006b68 <sbrk_aligned>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d03a      	beq.n	8006c96 <_malloc_r+0xea>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	442b      	add	r3, r5
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	bb62      	cbnz	r2, 8006c88 <_malloc_r+0xdc>
 8006c2e:	f8c8 7000 	str.w	r7, [r8]
 8006c32:	e00f      	b.n	8006c54 <_malloc_r+0xa8>
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	1b52      	subs	r2, r2, r5
 8006c38:	d420      	bmi.n	8006c7c <_malloc_r+0xd0>
 8006c3a:	2a0b      	cmp	r2, #11
 8006c3c:	d917      	bls.n	8006c6e <_malloc_r+0xc2>
 8006c3e:	1961      	adds	r1, r4, r5
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	6025      	str	r5, [r4, #0]
 8006c44:	bf18      	it	ne
 8006c46:	6059      	strne	r1, [r3, #4]
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	bf08      	it	eq
 8006c4c:	f8c8 1000 	streq.w	r1, [r8]
 8006c50:	5162      	str	r2, [r4, r5]
 8006c52:	604b      	str	r3, [r1, #4]
 8006c54:	4630      	mov	r0, r6
 8006c56:	f000 f82f 	bl	8006cb8 <__malloc_unlock>
 8006c5a:	f104 000b 	add.w	r0, r4, #11
 8006c5e:	1d23      	adds	r3, r4, #4
 8006c60:	f020 0007 	bic.w	r0, r0, #7
 8006c64:	1ac2      	subs	r2, r0, r3
 8006c66:	bf1c      	itt	ne
 8006c68:	1a1b      	subne	r3, r3, r0
 8006c6a:	50a3      	strne	r3, [r4, r2]
 8006c6c:	e7af      	b.n	8006bce <_malloc_r+0x22>
 8006c6e:	6862      	ldr	r2, [r4, #4]
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	bf0c      	ite	eq
 8006c74:	f8c8 2000 	streq.w	r2, [r8]
 8006c78:	605a      	strne	r2, [r3, #4]
 8006c7a:	e7eb      	b.n	8006c54 <_malloc_r+0xa8>
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	6864      	ldr	r4, [r4, #4]
 8006c80:	e7ae      	b.n	8006be0 <_malloc_r+0x34>
 8006c82:	463c      	mov	r4, r7
 8006c84:	687f      	ldr	r7, [r7, #4]
 8006c86:	e7b6      	b.n	8006bf6 <_malloc_r+0x4a>
 8006c88:	461a      	mov	r2, r3
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	d1fb      	bne.n	8006c88 <_malloc_r+0xdc>
 8006c90:	2300      	movs	r3, #0
 8006c92:	6053      	str	r3, [r2, #4]
 8006c94:	e7de      	b.n	8006c54 <_malloc_r+0xa8>
 8006c96:	230c      	movs	r3, #12
 8006c98:	6033      	str	r3, [r6, #0]
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f000 f80c 	bl	8006cb8 <__malloc_unlock>
 8006ca0:	e794      	b.n	8006bcc <_malloc_r+0x20>
 8006ca2:	6005      	str	r5, [r0, #0]
 8006ca4:	e7d6      	b.n	8006c54 <_malloc_r+0xa8>
 8006ca6:	bf00      	nop
 8006ca8:	20000b48 	.word	0x20000b48

08006cac <__malloc_lock>:
 8006cac:	4801      	ldr	r0, [pc, #4]	@ (8006cb4 <__malloc_lock+0x8>)
 8006cae:	f7ff b918 	b.w	8005ee2 <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	20000b40 	.word	0x20000b40

08006cb8 <__malloc_unlock>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	@ (8006cc0 <__malloc_unlock+0x8>)
 8006cba:	f7ff b913 	b.w	8005ee4 <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20000b40 	.word	0x20000b40

08006cc4 <_Balloc>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	69c6      	ldr	r6, [r0, #28]
 8006cc8:	4604      	mov	r4, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	b976      	cbnz	r6, 8006cec <_Balloc+0x28>
 8006cce:	2010      	movs	r0, #16
 8006cd0:	f7ff ff42 	bl	8006b58 <malloc>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	61e0      	str	r0, [r4, #28]
 8006cd8:	b920      	cbnz	r0, 8006ce4 <_Balloc+0x20>
 8006cda:	4b18      	ldr	r3, [pc, #96]	@ (8006d3c <_Balloc+0x78>)
 8006cdc:	4818      	ldr	r0, [pc, #96]	@ (8006d40 <_Balloc+0x7c>)
 8006cde:	216b      	movs	r1, #107	@ 0x6b
 8006ce0:	f001 fd26 	bl	8008730 <__assert_func>
 8006ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ce8:	6006      	str	r6, [r0, #0]
 8006cea:	60c6      	str	r6, [r0, #12]
 8006cec:	69e6      	ldr	r6, [r4, #28]
 8006cee:	68f3      	ldr	r3, [r6, #12]
 8006cf0:	b183      	cbz	r3, 8006d14 <_Balloc+0x50>
 8006cf2:	69e3      	ldr	r3, [r4, #28]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cfa:	b9b8      	cbnz	r0, 8006d2c <_Balloc+0x68>
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8006d02:	1d72      	adds	r2, r6, #5
 8006d04:	0092      	lsls	r2, r2, #2
 8006d06:	4620      	mov	r0, r4
 8006d08:	f001 fd30 	bl	800876c <_calloc_r>
 8006d0c:	b160      	cbz	r0, 8006d28 <_Balloc+0x64>
 8006d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d12:	e00e      	b.n	8006d32 <_Balloc+0x6e>
 8006d14:	2221      	movs	r2, #33	@ 0x21
 8006d16:	2104      	movs	r1, #4
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f001 fd27 	bl	800876c <_calloc_r>
 8006d1e:	69e3      	ldr	r3, [r4, #28]
 8006d20:	60f0      	str	r0, [r6, #12]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e4      	bne.n	8006cf2 <_Balloc+0x2e>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	6802      	ldr	r2, [r0, #0]
 8006d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d32:	2300      	movs	r3, #0
 8006d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d38:	e7f7      	b.n	8006d2a <_Balloc+0x66>
 8006d3a:	bf00      	nop
 8006d3c:	080094a6 	.word	0x080094a6
 8006d40:	08009526 	.word	0x08009526

08006d44 <_Bfree>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	69c6      	ldr	r6, [r0, #28]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b976      	cbnz	r6, 8006d6c <_Bfree+0x28>
 8006d4e:	2010      	movs	r0, #16
 8006d50:	f7ff ff02 	bl	8006b58 <malloc>
 8006d54:	4602      	mov	r2, r0
 8006d56:	61e8      	str	r0, [r5, #28]
 8006d58:	b920      	cbnz	r0, 8006d64 <_Bfree+0x20>
 8006d5a:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <_Bfree+0x3c>)
 8006d5c:	4809      	ldr	r0, [pc, #36]	@ (8006d84 <_Bfree+0x40>)
 8006d5e:	218f      	movs	r1, #143	@ 0x8f
 8006d60:	f001 fce6 	bl	8008730 <__assert_func>
 8006d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d68:	6006      	str	r6, [r0, #0]
 8006d6a:	60c6      	str	r6, [r0, #12]
 8006d6c:	b13c      	cbz	r4, 8006d7e <_Bfree+0x3a>
 8006d6e:	69eb      	ldr	r3, [r5, #28]
 8006d70:	6862      	ldr	r2, [r4, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d78:	6021      	str	r1, [r4, #0]
 8006d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	080094a6 	.word	0x080094a6
 8006d84:	08009526 	.word	0x08009526

08006d88 <__multadd>:
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8c:	690d      	ldr	r5, [r1, #16]
 8006d8e:	4607      	mov	r7, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	461e      	mov	r6, r3
 8006d94:	f101 0c14 	add.w	ip, r1, #20
 8006d98:	2000      	movs	r0, #0
 8006d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d9e:	b299      	uxth	r1, r3
 8006da0:	fb02 6101 	mla	r1, r2, r1, r6
 8006da4:	0c1e      	lsrs	r6, r3, #16
 8006da6:	0c0b      	lsrs	r3, r1, #16
 8006da8:	fb02 3306 	mla	r3, r2, r6, r3
 8006dac:	b289      	uxth	r1, r1
 8006dae:	3001      	adds	r0, #1
 8006db0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006db4:	4285      	cmp	r5, r0
 8006db6:	f84c 1b04 	str.w	r1, [ip], #4
 8006dba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dbe:	dcec      	bgt.n	8006d9a <__multadd+0x12>
 8006dc0:	b30e      	cbz	r6, 8006e06 <__multadd+0x7e>
 8006dc2:	68a3      	ldr	r3, [r4, #8]
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dc19      	bgt.n	8006dfc <__multadd+0x74>
 8006dc8:	6861      	ldr	r1, [r4, #4]
 8006dca:	4638      	mov	r0, r7
 8006dcc:	3101      	adds	r1, #1
 8006dce:	f7ff ff79 	bl	8006cc4 <_Balloc>
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	b928      	cbnz	r0, 8006de2 <__multadd+0x5a>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e0c <__multadd+0x84>)
 8006dda:	480d      	ldr	r0, [pc, #52]	@ (8006e10 <__multadd+0x88>)
 8006ddc:	21ba      	movs	r1, #186	@ 0xba
 8006dde:	f001 fca7 	bl	8008730 <__assert_func>
 8006de2:	6922      	ldr	r2, [r4, #16]
 8006de4:	3202      	adds	r2, #2
 8006de6:	f104 010c 	add.w	r1, r4, #12
 8006dea:	0092      	lsls	r2, r2, #2
 8006dec:	300c      	adds	r0, #12
 8006dee:	f001 fc87 	bl	8008700 <memcpy>
 8006df2:	4621      	mov	r1, r4
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff ffa5 	bl	8006d44 <_Bfree>
 8006dfa:	4644      	mov	r4, r8
 8006dfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e00:	3501      	adds	r5, #1
 8006e02:	615e      	str	r6, [r3, #20]
 8006e04:	6125      	str	r5, [r4, #16]
 8006e06:	4620      	mov	r0, r4
 8006e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0c:	08009515 	.word	0x08009515
 8006e10:	08009526 	.word	0x08009526

08006e14 <__s2b>:
 8006e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e18:	460c      	mov	r4, r1
 8006e1a:	4615      	mov	r5, r2
 8006e1c:	461f      	mov	r7, r3
 8006e1e:	2209      	movs	r2, #9
 8006e20:	3308      	adds	r3, #8
 8006e22:	4606      	mov	r6, r0
 8006e24:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e28:	2100      	movs	r1, #0
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	db09      	blt.n	8006e44 <__s2b+0x30>
 8006e30:	4630      	mov	r0, r6
 8006e32:	f7ff ff47 	bl	8006cc4 <_Balloc>
 8006e36:	b940      	cbnz	r0, 8006e4a <__s2b+0x36>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b19      	ldr	r3, [pc, #100]	@ (8006ea0 <__s2b+0x8c>)
 8006e3c:	4819      	ldr	r0, [pc, #100]	@ (8006ea4 <__s2b+0x90>)
 8006e3e:	21d3      	movs	r1, #211	@ 0xd3
 8006e40:	f001 fc76 	bl	8008730 <__assert_func>
 8006e44:	0052      	lsls	r2, r2, #1
 8006e46:	3101      	adds	r1, #1
 8006e48:	e7f0      	b.n	8006e2c <__s2b+0x18>
 8006e4a:	9b08      	ldr	r3, [sp, #32]
 8006e4c:	6143      	str	r3, [r0, #20]
 8006e4e:	2d09      	cmp	r5, #9
 8006e50:	f04f 0301 	mov.w	r3, #1
 8006e54:	6103      	str	r3, [r0, #16]
 8006e56:	dd16      	ble.n	8006e86 <__s2b+0x72>
 8006e58:	f104 0909 	add.w	r9, r4, #9
 8006e5c:	46c8      	mov	r8, r9
 8006e5e:	442c      	add	r4, r5
 8006e60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e64:	4601      	mov	r1, r0
 8006e66:	3b30      	subs	r3, #48	@ 0x30
 8006e68:	220a      	movs	r2, #10
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f7ff ff8c 	bl	8006d88 <__multadd>
 8006e70:	45a0      	cmp	r8, r4
 8006e72:	d1f5      	bne.n	8006e60 <__s2b+0x4c>
 8006e74:	f1a5 0408 	sub.w	r4, r5, #8
 8006e78:	444c      	add	r4, r9
 8006e7a:	1b2d      	subs	r5, r5, r4
 8006e7c:	1963      	adds	r3, r4, r5
 8006e7e:	42bb      	cmp	r3, r7
 8006e80:	db04      	blt.n	8006e8c <__s2b+0x78>
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	340a      	adds	r4, #10
 8006e88:	2509      	movs	r5, #9
 8006e8a:	e7f6      	b.n	8006e7a <__s2b+0x66>
 8006e8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e90:	4601      	mov	r1, r0
 8006e92:	3b30      	subs	r3, #48	@ 0x30
 8006e94:	220a      	movs	r2, #10
 8006e96:	4630      	mov	r0, r6
 8006e98:	f7ff ff76 	bl	8006d88 <__multadd>
 8006e9c:	e7ee      	b.n	8006e7c <__s2b+0x68>
 8006e9e:	bf00      	nop
 8006ea0:	08009515 	.word	0x08009515
 8006ea4:	08009526 	.word	0x08009526

08006ea8 <__hi0bits>:
 8006ea8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006eac:	4603      	mov	r3, r0
 8006eae:	bf36      	itet	cc
 8006eb0:	0403      	lslcc	r3, r0, #16
 8006eb2:	2000      	movcs	r0, #0
 8006eb4:	2010      	movcc	r0, #16
 8006eb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eba:	bf3c      	itt	cc
 8006ebc:	021b      	lslcc	r3, r3, #8
 8006ebe:	3008      	addcc	r0, #8
 8006ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ec4:	bf3c      	itt	cc
 8006ec6:	011b      	lslcc	r3, r3, #4
 8006ec8:	3004      	addcc	r0, #4
 8006eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ece:	bf3c      	itt	cc
 8006ed0:	009b      	lslcc	r3, r3, #2
 8006ed2:	3002      	addcc	r0, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db05      	blt.n	8006ee4 <__hi0bits+0x3c>
 8006ed8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006edc:	f100 0001 	add.w	r0, r0, #1
 8006ee0:	bf08      	it	eq
 8006ee2:	2020      	moveq	r0, #32
 8006ee4:	4770      	bx	lr

08006ee6 <__lo0bits>:
 8006ee6:	6803      	ldr	r3, [r0, #0]
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f013 0007 	ands.w	r0, r3, #7
 8006eee:	d00b      	beq.n	8006f08 <__lo0bits+0x22>
 8006ef0:	07d9      	lsls	r1, r3, #31
 8006ef2:	d421      	bmi.n	8006f38 <__lo0bits+0x52>
 8006ef4:	0798      	lsls	r0, r3, #30
 8006ef6:	bf49      	itett	mi
 8006ef8:	085b      	lsrmi	r3, r3, #1
 8006efa:	089b      	lsrpl	r3, r3, #2
 8006efc:	2001      	movmi	r0, #1
 8006efe:	6013      	strmi	r3, [r2, #0]
 8006f00:	bf5c      	itt	pl
 8006f02:	6013      	strpl	r3, [r2, #0]
 8006f04:	2002      	movpl	r0, #2
 8006f06:	4770      	bx	lr
 8006f08:	b299      	uxth	r1, r3
 8006f0a:	b909      	cbnz	r1, 8006f10 <__lo0bits+0x2a>
 8006f0c:	0c1b      	lsrs	r3, r3, #16
 8006f0e:	2010      	movs	r0, #16
 8006f10:	b2d9      	uxtb	r1, r3
 8006f12:	b909      	cbnz	r1, 8006f18 <__lo0bits+0x32>
 8006f14:	3008      	adds	r0, #8
 8006f16:	0a1b      	lsrs	r3, r3, #8
 8006f18:	0719      	lsls	r1, r3, #28
 8006f1a:	bf04      	itt	eq
 8006f1c:	091b      	lsreq	r3, r3, #4
 8006f1e:	3004      	addeq	r0, #4
 8006f20:	0799      	lsls	r1, r3, #30
 8006f22:	bf04      	itt	eq
 8006f24:	089b      	lsreq	r3, r3, #2
 8006f26:	3002      	addeq	r0, #2
 8006f28:	07d9      	lsls	r1, r3, #31
 8006f2a:	d403      	bmi.n	8006f34 <__lo0bits+0x4e>
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	f100 0001 	add.w	r0, r0, #1
 8006f32:	d003      	beq.n	8006f3c <__lo0bits+0x56>
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	4770      	bx	lr
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4770      	bx	lr
 8006f3c:	2020      	movs	r0, #32
 8006f3e:	4770      	bx	lr

08006f40 <__i2b>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	460c      	mov	r4, r1
 8006f44:	2101      	movs	r1, #1
 8006f46:	f7ff febd 	bl	8006cc4 <_Balloc>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	b928      	cbnz	r0, 8006f5a <__i2b+0x1a>
 8006f4e:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <__i2b+0x24>)
 8006f50:	4805      	ldr	r0, [pc, #20]	@ (8006f68 <__i2b+0x28>)
 8006f52:	f240 1145 	movw	r1, #325	@ 0x145
 8006f56:	f001 fbeb 	bl	8008730 <__assert_func>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	6144      	str	r4, [r0, #20]
 8006f5e:	6103      	str	r3, [r0, #16]
 8006f60:	bd10      	pop	{r4, pc}
 8006f62:	bf00      	nop
 8006f64:	08009515 	.word	0x08009515
 8006f68:	08009526 	.word	0x08009526

08006f6c <__multiply>:
 8006f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	4617      	mov	r7, r2
 8006f72:	690a      	ldr	r2, [r1, #16]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	bfa8      	it	ge
 8006f7a:	463b      	movge	r3, r7
 8006f7c:	4689      	mov	r9, r1
 8006f7e:	bfa4      	itt	ge
 8006f80:	460f      	movge	r7, r1
 8006f82:	4699      	movge	r9, r3
 8006f84:	693d      	ldr	r5, [r7, #16]
 8006f86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	eb05 060a 	add.w	r6, r5, sl
 8006f92:	42b3      	cmp	r3, r6
 8006f94:	b085      	sub	sp, #20
 8006f96:	bfb8      	it	lt
 8006f98:	3101      	addlt	r1, #1
 8006f9a:	f7ff fe93 	bl	8006cc4 <_Balloc>
 8006f9e:	b930      	cbnz	r0, 8006fae <__multiply+0x42>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b41      	ldr	r3, [pc, #260]	@ (80070a8 <__multiply+0x13c>)
 8006fa4:	4841      	ldr	r0, [pc, #260]	@ (80070ac <__multiply+0x140>)
 8006fa6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006faa:	f001 fbc1 	bl	8008730 <__assert_func>
 8006fae:	f100 0414 	add.w	r4, r0, #20
 8006fb2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006fb6:	4623      	mov	r3, r4
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4573      	cmp	r3, lr
 8006fbc:	d320      	bcc.n	8007000 <__multiply+0x94>
 8006fbe:	f107 0814 	add.w	r8, r7, #20
 8006fc2:	f109 0114 	add.w	r1, r9, #20
 8006fc6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006fca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006fce:	9302      	str	r3, [sp, #8]
 8006fd0:	1beb      	subs	r3, r5, r7
 8006fd2:	3b15      	subs	r3, #21
 8006fd4:	f023 0303 	bic.w	r3, r3, #3
 8006fd8:	3304      	adds	r3, #4
 8006fda:	3715      	adds	r7, #21
 8006fdc:	42bd      	cmp	r5, r7
 8006fde:	bf38      	it	cc
 8006fe0:	2304      	movcc	r3, #4
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	9103      	str	r1, [sp, #12]
 8006fe8:	428b      	cmp	r3, r1
 8006fea:	d80c      	bhi.n	8007006 <__multiply+0x9a>
 8006fec:	2e00      	cmp	r6, #0
 8006fee:	dd03      	ble.n	8006ff8 <__multiply+0x8c>
 8006ff0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d055      	beq.n	80070a4 <__multiply+0x138>
 8006ff8:	6106      	str	r6, [r0, #16]
 8006ffa:	b005      	add	sp, #20
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007000:	f843 2b04 	str.w	r2, [r3], #4
 8007004:	e7d9      	b.n	8006fba <__multiply+0x4e>
 8007006:	f8b1 a000 	ldrh.w	sl, [r1]
 800700a:	f1ba 0f00 	cmp.w	sl, #0
 800700e:	d01f      	beq.n	8007050 <__multiply+0xe4>
 8007010:	46c4      	mov	ip, r8
 8007012:	46a1      	mov	r9, r4
 8007014:	2700      	movs	r7, #0
 8007016:	f85c 2b04 	ldr.w	r2, [ip], #4
 800701a:	f8d9 3000 	ldr.w	r3, [r9]
 800701e:	fa1f fb82 	uxth.w	fp, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	fb0a 330b 	mla	r3, sl, fp, r3
 8007028:	443b      	add	r3, r7
 800702a:	f8d9 7000 	ldr.w	r7, [r9]
 800702e:	0c12      	lsrs	r2, r2, #16
 8007030:	0c3f      	lsrs	r7, r7, #16
 8007032:	fb0a 7202 	mla	r2, sl, r2, r7
 8007036:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007040:	4565      	cmp	r5, ip
 8007042:	f849 3b04 	str.w	r3, [r9], #4
 8007046:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800704a:	d8e4      	bhi.n	8007016 <__multiply+0xaa>
 800704c:	9b01      	ldr	r3, [sp, #4]
 800704e:	50e7      	str	r7, [r4, r3]
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007056:	3104      	adds	r1, #4
 8007058:	f1b9 0f00 	cmp.w	r9, #0
 800705c:	d020      	beq.n	80070a0 <__multiply+0x134>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	4647      	mov	r7, r8
 8007062:	46a4      	mov	ip, r4
 8007064:	f04f 0a00 	mov.w	sl, #0
 8007068:	f8b7 b000 	ldrh.w	fp, [r7]
 800706c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007070:	fb09 220b 	mla	r2, r9, fp, r2
 8007074:	4452      	add	r2, sl
 8007076:	b29b      	uxth	r3, r3
 8007078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707c:	f84c 3b04 	str.w	r3, [ip], #4
 8007080:	f857 3b04 	ldr.w	r3, [r7], #4
 8007084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007088:	f8bc 3000 	ldrh.w	r3, [ip]
 800708c:	fb09 330a 	mla	r3, r9, sl, r3
 8007090:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007094:	42bd      	cmp	r5, r7
 8007096:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800709a:	d8e5      	bhi.n	8007068 <__multiply+0xfc>
 800709c:	9a01      	ldr	r2, [sp, #4]
 800709e:	50a3      	str	r3, [r4, r2]
 80070a0:	3404      	adds	r4, #4
 80070a2:	e79f      	b.n	8006fe4 <__multiply+0x78>
 80070a4:	3e01      	subs	r6, #1
 80070a6:	e7a1      	b.n	8006fec <__multiply+0x80>
 80070a8:	08009515 	.word	0x08009515
 80070ac:	08009526 	.word	0x08009526

080070b0 <__pow5mult>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	4615      	mov	r5, r2
 80070b6:	f012 0203 	ands.w	r2, r2, #3
 80070ba:	4607      	mov	r7, r0
 80070bc:	460e      	mov	r6, r1
 80070be:	d007      	beq.n	80070d0 <__pow5mult+0x20>
 80070c0:	4c25      	ldr	r4, [pc, #148]	@ (8007158 <__pow5mult+0xa8>)
 80070c2:	3a01      	subs	r2, #1
 80070c4:	2300      	movs	r3, #0
 80070c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070ca:	f7ff fe5d 	bl	8006d88 <__multadd>
 80070ce:	4606      	mov	r6, r0
 80070d0:	10ad      	asrs	r5, r5, #2
 80070d2:	d03d      	beq.n	8007150 <__pow5mult+0xa0>
 80070d4:	69fc      	ldr	r4, [r7, #28]
 80070d6:	b97c      	cbnz	r4, 80070f8 <__pow5mult+0x48>
 80070d8:	2010      	movs	r0, #16
 80070da:	f7ff fd3d 	bl	8006b58 <malloc>
 80070de:	4602      	mov	r2, r0
 80070e0:	61f8      	str	r0, [r7, #28]
 80070e2:	b928      	cbnz	r0, 80070f0 <__pow5mult+0x40>
 80070e4:	4b1d      	ldr	r3, [pc, #116]	@ (800715c <__pow5mult+0xac>)
 80070e6:	481e      	ldr	r0, [pc, #120]	@ (8007160 <__pow5mult+0xb0>)
 80070e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80070ec:	f001 fb20 	bl	8008730 <__assert_func>
 80070f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070f4:	6004      	str	r4, [r0, #0]
 80070f6:	60c4      	str	r4, [r0, #12]
 80070f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80070fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007100:	b94c      	cbnz	r4, 8007116 <__pow5mult+0x66>
 8007102:	f240 2171 	movw	r1, #625	@ 0x271
 8007106:	4638      	mov	r0, r7
 8007108:	f7ff ff1a 	bl	8006f40 <__i2b>
 800710c:	2300      	movs	r3, #0
 800710e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007112:	4604      	mov	r4, r0
 8007114:	6003      	str	r3, [r0, #0]
 8007116:	f04f 0900 	mov.w	r9, #0
 800711a:	07eb      	lsls	r3, r5, #31
 800711c:	d50a      	bpl.n	8007134 <__pow5mult+0x84>
 800711e:	4631      	mov	r1, r6
 8007120:	4622      	mov	r2, r4
 8007122:	4638      	mov	r0, r7
 8007124:	f7ff ff22 	bl	8006f6c <__multiply>
 8007128:	4631      	mov	r1, r6
 800712a:	4680      	mov	r8, r0
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff fe09 	bl	8006d44 <_Bfree>
 8007132:	4646      	mov	r6, r8
 8007134:	106d      	asrs	r5, r5, #1
 8007136:	d00b      	beq.n	8007150 <__pow5mult+0xa0>
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	b938      	cbnz	r0, 800714c <__pow5mult+0x9c>
 800713c:	4622      	mov	r2, r4
 800713e:	4621      	mov	r1, r4
 8007140:	4638      	mov	r0, r7
 8007142:	f7ff ff13 	bl	8006f6c <__multiply>
 8007146:	6020      	str	r0, [r4, #0]
 8007148:	f8c0 9000 	str.w	r9, [r0]
 800714c:	4604      	mov	r4, r0
 800714e:	e7e4      	b.n	800711a <__pow5mult+0x6a>
 8007150:	4630      	mov	r0, r6
 8007152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007156:	bf00      	nop
 8007158:	08009638 	.word	0x08009638
 800715c:	080094a6 	.word	0x080094a6
 8007160:	08009526 	.word	0x08009526

08007164 <__lshift>:
 8007164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007168:	460c      	mov	r4, r1
 800716a:	6849      	ldr	r1, [r1, #4]
 800716c:	6923      	ldr	r3, [r4, #16]
 800716e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	4607      	mov	r7, r0
 8007176:	4691      	mov	r9, r2
 8007178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800717c:	f108 0601 	add.w	r6, r8, #1
 8007180:	42b3      	cmp	r3, r6
 8007182:	db0b      	blt.n	800719c <__lshift+0x38>
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff fd9d 	bl	8006cc4 <_Balloc>
 800718a:	4605      	mov	r5, r0
 800718c:	b948      	cbnz	r0, 80071a2 <__lshift+0x3e>
 800718e:	4602      	mov	r2, r0
 8007190:	4b28      	ldr	r3, [pc, #160]	@ (8007234 <__lshift+0xd0>)
 8007192:	4829      	ldr	r0, [pc, #164]	@ (8007238 <__lshift+0xd4>)
 8007194:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007198:	f001 faca 	bl	8008730 <__assert_func>
 800719c:	3101      	adds	r1, #1
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	e7ee      	b.n	8007180 <__lshift+0x1c>
 80071a2:	2300      	movs	r3, #0
 80071a4:	f100 0114 	add.w	r1, r0, #20
 80071a8:	f100 0210 	add.w	r2, r0, #16
 80071ac:	4618      	mov	r0, r3
 80071ae:	4553      	cmp	r3, sl
 80071b0:	db33      	blt.n	800721a <__lshift+0xb6>
 80071b2:	6920      	ldr	r0, [r4, #16]
 80071b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071b8:	f104 0314 	add.w	r3, r4, #20
 80071bc:	f019 091f 	ands.w	r9, r9, #31
 80071c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071c8:	d02b      	beq.n	8007222 <__lshift+0xbe>
 80071ca:	f1c9 0e20 	rsb	lr, r9, #32
 80071ce:	468a      	mov	sl, r1
 80071d0:	2200      	movs	r2, #0
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	fa00 f009 	lsl.w	r0, r0, r9
 80071d8:	4310      	orrs	r0, r2
 80071da:	f84a 0b04 	str.w	r0, [sl], #4
 80071de:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e2:	459c      	cmp	ip, r3
 80071e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80071e8:	d8f3      	bhi.n	80071d2 <__lshift+0x6e>
 80071ea:	ebac 0304 	sub.w	r3, ip, r4
 80071ee:	3b15      	subs	r3, #21
 80071f0:	f023 0303 	bic.w	r3, r3, #3
 80071f4:	3304      	adds	r3, #4
 80071f6:	f104 0015 	add.w	r0, r4, #21
 80071fa:	4560      	cmp	r0, ip
 80071fc:	bf88      	it	hi
 80071fe:	2304      	movhi	r3, #4
 8007200:	50ca      	str	r2, [r1, r3]
 8007202:	b10a      	cbz	r2, 8007208 <__lshift+0xa4>
 8007204:	f108 0602 	add.w	r6, r8, #2
 8007208:	3e01      	subs	r6, #1
 800720a:	4638      	mov	r0, r7
 800720c:	612e      	str	r6, [r5, #16]
 800720e:	4621      	mov	r1, r4
 8007210:	f7ff fd98 	bl	8006d44 <_Bfree>
 8007214:	4628      	mov	r0, r5
 8007216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721a:	f842 0f04 	str.w	r0, [r2, #4]!
 800721e:	3301      	adds	r3, #1
 8007220:	e7c5      	b.n	80071ae <__lshift+0x4a>
 8007222:	3904      	subs	r1, #4
 8007224:	f853 2b04 	ldr.w	r2, [r3], #4
 8007228:	f841 2f04 	str.w	r2, [r1, #4]!
 800722c:	459c      	cmp	ip, r3
 800722e:	d8f9      	bhi.n	8007224 <__lshift+0xc0>
 8007230:	e7ea      	b.n	8007208 <__lshift+0xa4>
 8007232:	bf00      	nop
 8007234:	08009515 	.word	0x08009515
 8007238:	08009526 	.word	0x08009526

0800723c <__mcmp>:
 800723c:	690a      	ldr	r2, [r1, #16]
 800723e:	4603      	mov	r3, r0
 8007240:	6900      	ldr	r0, [r0, #16]
 8007242:	1a80      	subs	r0, r0, r2
 8007244:	b530      	push	{r4, r5, lr}
 8007246:	d10e      	bne.n	8007266 <__mcmp+0x2a>
 8007248:	3314      	adds	r3, #20
 800724a:	3114      	adds	r1, #20
 800724c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007250:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007254:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007258:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800725c:	4295      	cmp	r5, r2
 800725e:	d003      	beq.n	8007268 <__mcmp+0x2c>
 8007260:	d205      	bcs.n	800726e <__mcmp+0x32>
 8007262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007266:	bd30      	pop	{r4, r5, pc}
 8007268:	42a3      	cmp	r3, r4
 800726a:	d3f3      	bcc.n	8007254 <__mcmp+0x18>
 800726c:	e7fb      	b.n	8007266 <__mcmp+0x2a>
 800726e:	2001      	movs	r0, #1
 8007270:	e7f9      	b.n	8007266 <__mcmp+0x2a>
	...

08007274 <__mdiff>:
 8007274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007278:	4689      	mov	r9, r1
 800727a:	4606      	mov	r6, r0
 800727c:	4611      	mov	r1, r2
 800727e:	4648      	mov	r0, r9
 8007280:	4614      	mov	r4, r2
 8007282:	f7ff ffdb 	bl	800723c <__mcmp>
 8007286:	1e05      	subs	r5, r0, #0
 8007288:	d112      	bne.n	80072b0 <__mdiff+0x3c>
 800728a:	4629      	mov	r1, r5
 800728c:	4630      	mov	r0, r6
 800728e:	f7ff fd19 	bl	8006cc4 <_Balloc>
 8007292:	4602      	mov	r2, r0
 8007294:	b928      	cbnz	r0, 80072a2 <__mdiff+0x2e>
 8007296:	4b3f      	ldr	r3, [pc, #252]	@ (8007394 <__mdiff+0x120>)
 8007298:	f240 2137 	movw	r1, #567	@ 0x237
 800729c:	483e      	ldr	r0, [pc, #248]	@ (8007398 <__mdiff+0x124>)
 800729e:	f001 fa47 	bl	8008730 <__assert_func>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072a8:	4610      	mov	r0, r2
 80072aa:	b003      	add	sp, #12
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b0:	bfbc      	itt	lt
 80072b2:	464b      	movlt	r3, r9
 80072b4:	46a1      	movlt	r9, r4
 80072b6:	4630      	mov	r0, r6
 80072b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072bc:	bfba      	itte	lt
 80072be:	461c      	movlt	r4, r3
 80072c0:	2501      	movlt	r5, #1
 80072c2:	2500      	movge	r5, #0
 80072c4:	f7ff fcfe 	bl	8006cc4 <_Balloc>
 80072c8:	4602      	mov	r2, r0
 80072ca:	b918      	cbnz	r0, 80072d4 <__mdiff+0x60>
 80072cc:	4b31      	ldr	r3, [pc, #196]	@ (8007394 <__mdiff+0x120>)
 80072ce:	f240 2145 	movw	r1, #581	@ 0x245
 80072d2:	e7e3      	b.n	800729c <__mdiff+0x28>
 80072d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80072d8:	6926      	ldr	r6, [r4, #16]
 80072da:	60c5      	str	r5, [r0, #12]
 80072dc:	f109 0310 	add.w	r3, r9, #16
 80072e0:	f109 0514 	add.w	r5, r9, #20
 80072e4:	f104 0e14 	add.w	lr, r4, #20
 80072e8:	f100 0b14 	add.w	fp, r0, #20
 80072ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80072f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	46d9      	mov	r9, fp
 80072f8:	f04f 0c00 	mov.w	ip, #0
 80072fc:	9b01      	ldr	r3, [sp, #4]
 80072fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007302:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	fa1f f38a 	uxth.w	r3, sl
 800730c:	4619      	mov	r1, r3
 800730e:	b283      	uxth	r3, r0
 8007310:	1acb      	subs	r3, r1, r3
 8007312:	0c00      	lsrs	r0, r0, #16
 8007314:	4463      	add	r3, ip
 8007316:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800731a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800731e:	b29b      	uxth	r3, r3
 8007320:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007324:	4576      	cmp	r6, lr
 8007326:	f849 3b04 	str.w	r3, [r9], #4
 800732a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800732e:	d8e5      	bhi.n	80072fc <__mdiff+0x88>
 8007330:	1b33      	subs	r3, r6, r4
 8007332:	3b15      	subs	r3, #21
 8007334:	f023 0303 	bic.w	r3, r3, #3
 8007338:	3415      	adds	r4, #21
 800733a:	3304      	adds	r3, #4
 800733c:	42a6      	cmp	r6, r4
 800733e:	bf38      	it	cc
 8007340:	2304      	movcc	r3, #4
 8007342:	441d      	add	r5, r3
 8007344:	445b      	add	r3, fp
 8007346:	461e      	mov	r6, r3
 8007348:	462c      	mov	r4, r5
 800734a:	4544      	cmp	r4, r8
 800734c:	d30e      	bcc.n	800736c <__mdiff+0xf8>
 800734e:	f108 0103 	add.w	r1, r8, #3
 8007352:	1b49      	subs	r1, r1, r5
 8007354:	f021 0103 	bic.w	r1, r1, #3
 8007358:	3d03      	subs	r5, #3
 800735a:	45a8      	cmp	r8, r5
 800735c:	bf38      	it	cc
 800735e:	2100      	movcc	r1, #0
 8007360:	440b      	add	r3, r1
 8007362:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007366:	b191      	cbz	r1, 800738e <__mdiff+0x11a>
 8007368:	6117      	str	r7, [r2, #16]
 800736a:	e79d      	b.n	80072a8 <__mdiff+0x34>
 800736c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007370:	46e6      	mov	lr, ip
 8007372:	0c08      	lsrs	r0, r1, #16
 8007374:	fa1c fc81 	uxtah	ip, ip, r1
 8007378:	4471      	add	r1, lr
 800737a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800737e:	b289      	uxth	r1, r1
 8007380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007384:	f846 1b04 	str.w	r1, [r6], #4
 8007388:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800738c:	e7dd      	b.n	800734a <__mdiff+0xd6>
 800738e:	3f01      	subs	r7, #1
 8007390:	e7e7      	b.n	8007362 <__mdiff+0xee>
 8007392:	bf00      	nop
 8007394:	08009515 	.word	0x08009515
 8007398:	08009526 	.word	0x08009526

0800739c <__ulp>:
 800739c:	b082      	sub	sp, #8
 800739e:	ed8d 0b00 	vstr	d0, [sp]
 80073a2:	9a01      	ldr	r2, [sp, #4]
 80073a4:	4b0f      	ldr	r3, [pc, #60]	@ (80073e4 <__ulp+0x48>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dc08      	bgt.n	80073c2 <__ulp+0x26>
 80073b0:	425b      	negs	r3, r3
 80073b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80073b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073ba:	da04      	bge.n	80073c6 <__ulp+0x2a>
 80073bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80073c0:	4113      	asrs	r3, r2
 80073c2:	2200      	movs	r2, #0
 80073c4:	e008      	b.n	80073d8 <__ulp+0x3c>
 80073c6:	f1a2 0314 	sub.w	r3, r2, #20
 80073ca:	2b1e      	cmp	r3, #30
 80073cc:	bfda      	itte	le
 80073ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80073d2:	40da      	lsrle	r2, r3
 80073d4:	2201      	movgt	r2, #1
 80073d6:	2300      	movs	r3, #0
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	ec41 0b10 	vmov	d0, r0, r1
 80073e0:	b002      	add	sp, #8
 80073e2:	4770      	bx	lr
 80073e4:	7ff00000 	.word	0x7ff00000

080073e8 <__b2d>:
 80073e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ec:	6906      	ldr	r6, [r0, #16]
 80073ee:	f100 0814 	add.w	r8, r0, #20
 80073f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80073f6:	1f37      	subs	r7, r6, #4
 80073f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073fc:	4610      	mov	r0, r2
 80073fe:	f7ff fd53 	bl	8006ea8 <__hi0bits>
 8007402:	f1c0 0320 	rsb	r3, r0, #32
 8007406:	280a      	cmp	r0, #10
 8007408:	600b      	str	r3, [r1, #0]
 800740a:	491b      	ldr	r1, [pc, #108]	@ (8007478 <__b2d+0x90>)
 800740c:	dc15      	bgt.n	800743a <__b2d+0x52>
 800740e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007412:	fa22 f30c 	lsr.w	r3, r2, ip
 8007416:	45b8      	cmp	r8, r7
 8007418:	ea43 0501 	orr.w	r5, r3, r1
 800741c:	bf34      	ite	cc
 800741e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007422:	2300      	movcs	r3, #0
 8007424:	3015      	adds	r0, #21
 8007426:	fa02 f000 	lsl.w	r0, r2, r0
 800742a:	fa23 f30c 	lsr.w	r3, r3, ip
 800742e:	4303      	orrs	r3, r0
 8007430:	461c      	mov	r4, r3
 8007432:	ec45 4b10 	vmov	d0, r4, r5
 8007436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743a:	45b8      	cmp	r8, r7
 800743c:	bf3a      	itte	cc
 800743e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007442:	f1a6 0708 	subcc.w	r7, r6, #8
 8007446:	2300      	movcs	r3, #0
 8007448:	380b      	subs	r0, #11
 800744a:	d012      	beq.n	8007472 <__b2d+0x8a>
 800744c:	f1c0 0120 	rsb	r1, r0, #32
 8007450:	fa23 f401 	lsr.w	r4, r3, r1
 8007454:	4082      	lsls	r2, r0
 8007456:	4322      	orrs	r2, r4
 8007458:	4547      	cmp	r7, r8
 800745a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800745e:	bf8c      	ite	hi
 8007460:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007464:	2200      	movls	r2, #0
 8007466:	4083      	lsls	r3, r0
 8007468:	40ca      	lsrs	r2, r1
 800746a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800746e:	4313      	orrs	r3, r2
 8007470:	e7de      	b.n	8007430 <__b2d+0x48>
 8007472:	ea42 0501 	orr.w	r5, r2, r1
 8007476:	e7db      	b.n	8007430 <__b2d+0x48>
 8007478:	3ff00000 	.word	0x3ff00000

0800747c <__d2b>:
 800747c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007480:	460f      	mov	r7, r1
 8007482:	2101      	movs	r1, #1
 8007484:	ec59 8b10 	vmov	r8, r9, d0
 8007488:	4616      	mov	r6, r2
 800748a:	f7ff fc1b 	bl	8006cc4 <_Balloc>
 800748e:	4604      	mov	r4, r0
 8007490:	b930      	cbnz	r0, 80074a0 <__d2b+0x24>
 8007492:	4602      	mov	r2, r0
 8007494:	4b23      	ldr	r3, [pc, #140]	@ (8007524 <__d2b+0xa8>)
 8007496:	4824      	ldr	r0, [pc, #144]	@ (8007528 <__d2b+0xac>)
 8007498:	f240 310f 	movw	r1, #783	@ 0x30f
 800749c:	f001 f948 	bl	8008730 <__assert_func>
 80074a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074a8:	b10d      	cbz	r5, 80074ae <__d2b+0x32>
 80074aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	f1b8 0300 	subs.w	r3, r8, #0
 80074b4:	d023      	beq.n	80074fe <__d2b+0x82>
 80074b6:	4668      	mov	r0, sp
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	f7ff fd14 	bl	8006ee6 <__lo0bits>
 80074be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074c2:	b1d0      	cbz	r0, 80074fa <__d2b+0x7e>
 80074c4:	f1c0 0320 	rsb	r3, r0, #32
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	430b      	orrs	r3, r1
 80074ce:	40c2      	lsrs	r2, r0
 80074d0:	6163      	str	r3, [r4, #20]
 80074d2:	9201      	str	r2, [sp, #4]
 80074d4:	9b01      	ldr	r3, [sp, #4]
 80074d6:	61a3      	str	r3, [r4, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bf0c      	ite	eq
 80074dc:	2201      	moveq	r2, #1
 80074de:	2202      	movne	r2, #2
 80074e0:	6122      	str	r2, [r4, #16]
 80074e2:	b1a5      	cbz	r5, 800750e <__d2b+0x92>
 80074e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80074e8:	4405      	add	r5, r0
 80074ea:	603d      	str	r5, [r7, #0]
 80074ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80074f0:	6030      	str	r0, [r6, #0]
 80074f2:	4620      	mov	r0, r4
 80074f4:	b003      	add	sp, #12
 80074f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074fa:	6161      	str	r1, [r4, #20]
 80074fc:	e7ea      	b.n	80074d4 <__d2b+0x58>
 80074fe:	a801      	add	r0, sp, #4
 8007500:	f7ff fcf1 	bl	8006ee6 <__lo0bits>
 8007504:	9b01      	ldr	r3, [sp, #4]
 8007506:	6163      	str	r3, [r4, #20]
 8007508:	3020      	adds	r0, #32
 800750a:	2201      	movs	r2, #1
 800750c:	e7e8      	b.n	80074e0 <__d2b+0x64>
 800750e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007512:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007516:	6038      	str	r0, [r7, #0]
 8007518:	6918      	ldr	r0, [r3, #16]
 800751a:	f7ff fcc5 	bl	8006ea8 <__hi0bits>
 800751e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007522:	e7e5      	b.n	80074f0 <__d2b+0x74>
 8007524:	08009515 	.word	0x08009515
 8007528:	08009526 	.word	0x08009526

0800752c <__ratio>:
 800752c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	4688      	mov	r8, r1
 8007532:	4669      	mov	r1, sp
 8007534:	4681      	mov	r9, r0
 8007536:	f7ff ff57 	bl	80073e8 <__b2d>
 800753a:	a901      	add	r1, sp, #4
 800753c:	4640      	mov	r0, r8
 800753e:	ec55 4b10 	vmov	r4, r5, d0
 8007542:	f7ff ff51 	bl	80073e8 <__b2d>
 8007546:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800754a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	e9dd 3100 	ldrd	r3, r1, [sp]
 8007554:	1a5b      	subs	r3, r3, r1
 8007556:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800755a:	ec57 6b10 	vmov	r6, r7, d0
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfd6      	itet	le
 8007562:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007566:	462a      	movgt	r2, r5
 8007568:	463a      	movle	r2, r7
 800756a:	46ab      	mov	fp, r5
 800756c:	46a2      	mov	sl, r4
 800756e:	bfce      	itee	gt
 8007570:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007574:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8007578:	ee00 3a90 	vmovle	s1, r3
 800757c:	ec4b ab17 	vmov	d7, sl, fp
 8007580:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8007584:	b003      	add	sp, #12
 8007586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800758a <__copybits>:
 800758a:	3901      	subs	r1, #1
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	1149      	asrs	r1, r1, #5
 8007590:	6914      	ldr	r4, [r2, #16]
 8007592:	3101      	adds	r1, #1
 8007594:	f102 0314 	add.w	r3, r2, #20
 8007598:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800759c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075a0:	1f05      	subs	r5, r0, #4
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	d30c      	bcc.n	80075c0 <__copybits+0x36>
 80075a6:	1aa3      	subs	r3, r4, r2
 80075a8:	3b11      	subs	r3, #17
 80075aa:	f023 0303 	bic.w	r3, r3, #3
 80075ae:	3211      	adds	r2, #17
 80075b0:	42a2      	cmp	r2, r4
 80075b2:	bf88      	it	hi
 80075b4:	2300      	movhi	r3, #0
 80075b6:	4418      	add	r0, r3
 80075b8:	2300      	movs	r3, #0
 80075ba:	4288      	cmp	r0, r1
 80075bc:	d305      	bcc.n	80075ca <__copybits+0x40>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80075c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80075c8:	e7eb      	b.n	80075a2 <__copybits+0x18>
 80075ca:	f840 3b04 	str.w	r3, [r0], #4
 80075ce:	e7f4      	b.n	80075ba <__copybits+0x30>

080075d0 <__any_on>:
 80075d0:	f100 0214 	add.w	r2, r0, #20
 80075d4:	6900      	ldr	r0, [r0, #16]
 80075d6:	114b      	asrs	r3, r1, #5
 80075d8:	4298      	cmp	r0, r3
 80075da:	b510      	push	{r4, lr}
 80075dc:	db11      	blt.n	8007602 <__any_on+0x32>
 80075de:	dd0a      	ble.n	80075f6 <__any_on+0x26>
 80075e0:	f011 011f 	ands.w	r1, r1, #31
 80075e4:	d007      	beq.n	80075f6 <__any_on+0x26>
 80075e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075ea:	fa24 f001 	lsr.w	r0, r4, r1
 80075ee:	fa00 f101 	lsl.w	r1, r0, r1
 80075f2:	428c      	cmp	r4, r1
 80075f4:	d10b      	bne.n	800760e <__any_on+0x3e>
 80075f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d803      	bhi.n	8007606 <__any_on+0x36>
 80075fe:	2000      	movs	r0, #0
 8007600:	bd10      	pop	{r4, pc}
 8007602:	4603      	mov	r3, r0
 8007604:	e7f7      	b.n	80075f6 <__any_on+0x26>
 8007606:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800760a:	2900      	cmp	r1, #0
 800760c:	d0f5      	beq.n	80075fa <__any_on+0x2a>
 800760e:	2001      	movs	r0, #1
 8007610:	e7f6      	b.n	8007600 <__any_on+0x30>

08007612 <sulp>:
 8007612:	b570      	push	{r4, r5, r6, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	460d      	mov	r5, r1
 8007618:	4616      	mov	r6, r2
 800761a:	ec45 4b10 	vmov	d0, r4, r5
 800761e:	f7ff febd 	bl	800739c <__ulp>
 8007622:	b17e      	cbz	r6, 8007644 <sulp+0x32>
 8007624:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007628:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800762c:	2b00      	cmp	r3, #0
 800762e:	dd09      	ble.n	8007644 <sulp+0x32>
 8007630:	051b      	lsls	r3, r3, #20
 8007632:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8007636:	2000      	movs	r0, #0
 8007638:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800763c:	ec41 0b17 	vmov	d7, r0, r1
 8007640:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007644:	bd70      	pop	{r4, r5, r6, pc}
	...

08007648 <_strtod_l>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	ed2d 8b0a 	vpush	{d8-d12}
 8007650:	b097      	sub	sp, #92	@ 0x5c
 8007652:	4688      	mov	r8, r1
 8007654:	920e      	str	r2, [sp, #56]	@ 0x38
 8007656:	2200      	movs	r2, #0
 8007658:	9212      	str	r2, [sp, #72]	@ 0x48
 800765a:	9005      	str	r0, [sp, #20]
 800765c:	f04f 0a00 	mov.w	sl, #0
 8007660:	f04f 0b00 	mov.w	fp, #0
 8007664:	460a      	mov	r2, r1
 8007666:	9211      	str	r2, [sp, #68]	@ 0x44
 8007668:	7811      	ldrb	r1, [r2, #0]
 800766a:	292b      	cmp	r1, #43	@ 0x2b
 800766c:	d04c      	beq.n	8007708 <_strtod_l+0xc0>
 800766e:	d839      	bhi.n	80076e4 <_strtod_l+0x9c>
 8007670:	290d      	cmp	r1, #13
 8007672:	d833      	bhi.n	80076dc <_strtod_l+0x94>
 8007674:	2908      	cmp	r1, #8
 8007676:	d833      	bhi.n	80076e0 <_strtod_l+0x98>
 8007678:	2900      	cmp	r1, #0
 800767a:	d03c      	beq.n	80076f6 <_strtod_l+0xae>
 800767c:	2200      	movs	r2, #0
 800767e:	9208      	str	r2, [sp, #32]
 8007680:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007682:	782a      	ldrb	r2, [r5, #0]
 8007684:	2a30      	cmp	r2, #48	@ 0x30
 8007686:	f040 80b7 	bne.w	80077f8 <_strtod_l+0x1b0>
 800768a:	786a      	ldrb	r2, [r5, #1]
 800768c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007690:	2a58      	cmp	r2, #88	@ 0x58
 8007692:	d170      	bne.n	8007776 <_strtod_l+0x12e>
 8007694:	9302      	str	r3, [sp, #8]
 8007696:	9b08      	ldr	r3, [sp, #32]
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	ab12      	add	r3, sp, #72	@ 0x48
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4a90      	ldr	r2, [pc, #576]	@ (80078e0 <_strtod_l+0x298>)
 80076a0:	9805      	ldr	r0, [sp, #20]
 80076a2:	ab13      	add	r3, sp, #76	@ 0x4c
 80076a4:	a911      	add	r1, sp, #68	@ 0x44
 80076a6:	f001 f8dd 	bl	8008864 <__gethex>
 80076aa:	f010 060f 	ands.w	r6, r0, #15
 80076ae:	4604      	mov	r4, r0
 80076b0:	d005      	beq.n	80076be <_strtod_l+0x76>
 80076b2:	2e06      	cmp	r6, #6
 80076b4:	d12a      	bne.n	800770c <_strtod_l+0xc4>
 80076b6:	3501      	adds	r5, #1
 80076b8:	2300      	movs	r3, #0
 80076ba:	9511      	str	r5, [sp, #68]	@ 0x44
 80076bc:	9308      	str	r3, [sp, #32]
 80076be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 8537 	bne.w	8008134 <_strtod_l+0xaec>
 80076c6:	9b08      	ldr	r3, [sp, #32]
 80076c8:	ec4b ab10 	vmov	d0, sl, fp
 80076cc:	b1cb      	cbz	r3, 8007702 <_strtod_l+0xba>
 80076ce:	eeb1 0b40 	vneg.f64	d0, d0
 80076d2:	b017      	add	sp, #92	@ 0x5c
 80076d4:	ecbd 8b0a 	vpop	{d8-d12}
 80076d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076dc:	2920      	cmp	r1, #32
 80076de:	d1cd      	bne.n	800767c <_strtod_l+0x34>
 80076e0:	3201      	adds	r2, #1
 80076e2:	e7c0      	b.n	8007666 <_strtod_l+0x1e>
 80076e4:	292d      	cmp	r1, #45	@ 0x2d
 80076e6:	d1c9      	bne.n	800767c <_strtod_l+0x34>
 80076e8:	2101      	movs	r1, #1
 80076ea:	9108      	str	r1, [sp, #32]
 80076ec:	1c51      	adds	r1, r2, #1
 80076ee:	9111      	str	r1, [sp, #68]	@ 0x44
 80076f0:	7852      	ldrb	r2, [r2, #1]
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	d1c4      	bne.n	8007680 <_strtod_l+0x38>
 80076f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076f8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f040 8517 	bne.w	8008130 <_strtod_l+0xae8>
 8007702:	ec4b ab10 	vmov	d0, sl, fp
 8007706:	e7e4      	b.n	80076d2 <_strtod_l+0x8a>
 8007708:	2100      	movs	r1, #0
 800770a:	e7ee      	b.n	80076ea <_strtod_l+0xa2>
 800770c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800770e:	b13a      	cbz	r2, 8007720 <_strtod_l+0xd8>
 8007710:	2135      	movs	r1, #53	@ 0x35
 8007712:	a814      	add	r0, sp, #80	@ 0x50
 8007714:	f7ff ff39 	bl	800758a <__copybits>
 8007718:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800771a:	9805      	ldr	r0, [sp, #20]
 800771c:	f7ff fb12 	bl	8006d44 <_Bfree>
 8007720:	1e73      	subs	r3, r6, #1
 8007722:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007724:	2b04      	cmp	r3, #4
 8007726:	d806      	bhi.n	8007736 <_strtod_l+0xee>
 8007728:	e8df f003 	tbb	[pc, r3]
 800772c:	201d0314 	.word	0x201d0314
 8007730:	14          	.byte	0x14
 8007731:	00          	.byte	0x00
 8007732:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8007736:	05e3      	lsls	r3, r4, #23
 8007738:	bf48      	it	mi
 800773a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800773e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007742:	0d1b      	lsrs	r3, r3, #20
 8007744:	051b      	lsls	r3, r3, #20
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1b9      	bne.n	80076be <_strtod_l+0x76>
 800774a:	f7fe fb9f 	bl	8005e8c <__errno>
 800774e:	2322      	movs	r3, #34	@ 0x22
 8007750:	6003      	str	r3, [r0, #0]
 8007752:	e7b4      	b.n	80076be <_strtod_l+0x76>
 8007754:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8007758:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800775c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007760:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007764:	e7e7      	b.n	8007736 <_strtod_l+0xee>
 8007766:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80078e8 <_strtod_l+0x2a0>
 800776a:	e7e4      	b.n	8007736 <_strtod_l+0xee>
 800776c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007770:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007774:	e7df      	b.n	8007736 <_strtod_l+0xee>
 8007776:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	9211      	str	r2, [sp, #68]	@ 0x44
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	2b30      	cmp	r3, #48	@ 0x30
 8007780:	d0f9      	beq.n	8007776 <_strtod_l+0x12e>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d09b      	beq.n	80076be <_strtod_l+0x76>
 8007786:	2301      	movs	r3, #1
 8007788:	9307      	str	r3, [sp, #28]
 800778a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800778c:	930a      	str	r3, [sp, #40]	@ 0x28
 800778e:	2300      	movs	r3, #0
 8007790:	9306      	str	r3, [sp, #24]
 8007792:	4699      	mov	r9, r3
 8007794:	461d      	mov	r5, r3
 8007796:	220a      	movs	r2, #10
 8007798:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800779a:	7804      	ldrb	r4, [r0, #0]
 800779c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80077a0:	b2d9      	uxtb	r1, r3
 80077a2:	2909      	cmp	r1, #9
 80077a4:	d92a      	bls.n	80077fc <_strtod_l+0x1b4>
 80077a6:	494f      	ldr	r1, [pc, #316]	@ (80078e4 <_strtod_l+0x29c>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	f000 ff87 	bl	80086bc <strncmp>
 80077ae:	b398      	cbz	r0, 8007818 <_strtod_l+0x1d0>
 80077b0:	2000      	movs	r0, #0
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	4607      	mov	r7, r0
 80077b8:	4601      	mov	r1, r0
 80077ba:	2a65      	cmp	r2, #101	@ 0x65
 80077bc:	d001      	beq.n	80077c2 <_strtod_l+0x17a>
 80077be:	2a45      	cmp	r2, #69	@ 0x45
 80077c0:	d118      	bne.n	80077f4 <_strtod_l+0x1ac>
 80077c2:	b91b      	cbnz	r3, 80077cc <_strtod_l+0x184>
 80077c4:	9b07      	ldr	r3, [sp, #28]
 80077c6:	4303      	orrs	r3, r0
 80077c8:	d095      	beq.n	80076f6 <_strtod_l+0xae>
 80077ca:	2300      	movs	r3, #0
 80077cc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80077d0:	f108 0201 	add.w	r2, r8, #1
 80077d4:	9211      	str	r2, [sp, #68]	@ 0x44
 80077d6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80077da:	2a2b      	cmp	r2, #43	@ 0x2b
 80077dc:	d074      	beq.n	80078c8 <_strtod_l+0x280>
 80077de:	2a2d      	cmp	r2, #45	@ 0x2d
 80077e0:	d07a      	beq.n	80078d8 <_strtod_l+0x290>
 80077e2:	f04f 0e00 	mov.w	lr, #0
 80077e6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80077ea:	2c09      	cmp	r4, #9
 80077ec:	f240 8082 	bls.w	80078f4 <_strtod_l+0x2ac>
 80077f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80077f4:	2400      	movs	r4, #0
 80077f6:	e09d      	b.n	8007934 <_strtod_l+0x2ec>
 80077f8:	2300      	movs	r3, #0
 80077fa:	e7c5      	b.n	8007788 <_strtod_l+0x140>
 80077fc:	2d08      	cmp	r5, #8
 80077fe:	bfc8      	it	gt
 8007800:	9906      	ldrgt	r1, [sp, #24]
 8007802:	f100 0001 	add.w	r0, r0, #1
 8007806:	bfca      	itet	gt
 8007808:	fb02 3301 	mlagt	r3, r2, r1, r3
 800780c:	fb02 3909 	mlale	r9, r2, r9, r3
 8007810:	9306      	strgt	r3, [sp, #24]
 8007812:	3501      	adds	r5, #1
 8007814:	9011      	str	r0, [sp, #68]	@ 0x44
 8007816:	e7bf      	b.n	8007798 <_strtod_l+0x150>
 8007818:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	9211      	str	r2, [sp, #68]	@ 0x44
 800781e:	785a      	ldrb	r2, [r3, #1]
 8007820:	b3bd      	cbz	r5, 8007892 <_strtod_l+0x24a>
 8007822:	4607      	mov	r7, r0
 8007824:	462b      	mov	r3, r5
 8007826:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800782a:	2909      	cmp	r1, #9
 800782c:	d912      	bls.n	8007854 <_strtod_l+0x20c>
 800782e:	2101      	movs	r1, #1
 8007830:	e7c3      	b.n	80077ba <_strtod_l+0x172>
 8007832:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	9211      	str	r2, [sp, #68]	@ 0x44
 8007838:	785a      	ldrb	r2, [r3, #1]
 800783a:	3001      	adds	r0, #1
 800783c:	2a30      	cmp	r2, #48	@ 0x30
 800783e:	d0f8      	beq.n	8007832 <_strtod_l+0x1ea>
 8007840:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007844:	2b08      	cmp	r3, #8
 8007846:	f200 847a 	bhi.w	800813e <_strtod_l+0xaf6>
 800784a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800784c:	930a      	str	r3, [sp, #40]	@ 0x28
 800784e:	4607      	mov	r7, r0
 8007850:	2000      	movs	r0, #0
 8007852:	4603      	mov	r3, r0
 8007854:	3a30      	subs	r2, #48	@ 0x30
 8007856:	f100 0101 	add.w	r1, r0, #1
 800785a:	d014      	beq.n	8007886 <_strtod_l+0x23e>
 800785c:	440f      	add	r7, r1
 800785e:	469c      	mov	ip, r3
 8007860:	f04f 0e0a 	mov.w	lr, #10
 8007864:	f10c 0401 	add.w	r4, ip, #1
 8007868:	1ae6      	subs	r6, r4, r3
 800786a:	42b1      	cmp	r1, r6
 800786c:	dc13      	bgt.n	8007896 <_strtod_l+0x24e>
 800786e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007872:	1819      	adds	r1, r3, r0
 8007874:	2908      	cmp	r1, #8
 8007876:	f103 0301 	add.w	r3, r3, #1
 800787a:	4403      	add	r3, r0
 800787c:	dc19      	bgt.n	80078b2 <_strtod_l+0x26a>
 800787e:	210a      	movs	r1, #10
 8007880:	fb01 2909 	mla	r9, r1, r9, r2
 8007884:	2100      	movs	r1, #0
 8007886:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007888:	1c50      	adds	r0, r2, #1
 800788a:	9011      	str	r0, [sp, #68]	@ 0x44
 800788c:	7852      	ldrb	r2, [r2, #1]
 800788e:	4608      	mov	r0, r1
 8007890:	e7c9      	b.n	8007826 <_strtod_l+0x1de>
 8007892:	4628      	mov	r0, r5
 8007894:	e7d2      	b.n	800783c <_strtod_l+0x1f4>
 8007896:	f1bc 0f08 	cmp.w	ip, #8
 800789a:	dc03      	bgt.n	80078a4 <_strtod_l+0x25c>
 800789c:	fb0e f909 	mul.w	r9, lr, r9
 80078a0:	46a4      	mov	ip, r4
 80078a2:	e7df      	b.n	8007864 <_strtod_l+0x21c>
 80078a4:	2c10      	cmp	r4, #16
 80078a6:	bfde      	ittt	le
 80078a8:	9e06      	ldrle	r6, [sp, #24]
 80078aa:	fb0e f606 	mulle.w	r6, lr, r6
 80078ae:	9606      	strle	r6, [sp, #24]
 80078b0:	e7f6      	b.n	80078a0 <_strtod_l+0x258>
 80078b2:	290f      	cmp	r1, #15
 80078b4:	bfdf      	itttt	le
 80078b6:	9806      	ldrle	r0, [sp, #24]
 80078b8:	210a      	movle	r1, #10
 80078ba:	fb01 2200 	mlale	r2, r1, r0, r2
 80078be:	9206      	strle	r2, [sp, #24]
 80078c0:	e7e0      	b.n	8007884 <_strtod_l+0x23c>
 80078c2:	2700      	movs	r7, #0
 80078c4:	2101      	movs	r1, #1
 80078c6:	e77d      	b.n	80077c4 <_strtod_l+0x17c>
 80078c8:	f04f 0e00 	mov.w	lr, #0
 80078cc:	f108 0202 	add.w	r2, r8, #2
 80078d0:	9211      	str	r2, [sp, #68]	@ 0x44
 80078d2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80078d6:	e786      	b.n	80077e6 <_strtod_l+0x19e>
 80078d8:	f04f 0e01 	mov.w	lr, #1
 80078dc:	e7f6      	b.n	80078cc <_strtod_l+0x284>
 80078de:	bf00      	nop
 80078e0:	0800974c 	.word	0x0800974c
 80078e4:	0800957f 	.word	0x0800957f
 80078e8:	7ff00000 	.word	0x7ff00000
 80078ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80078ee:	1c54      	adds	r4, r2, #1
 80078f0:	9411      	str	r4, [sp, #68]	@ 0x44
 80078f2:	7852      	ldrb	r2, [r2, #1]
 80078f4:	2a30      	cmp	r2, #48	@ 0x30
 80078f6:	d0f9      	beq.n	80078ec <_strtod_l+0x2a4>
 80078f8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80078fc:	2c08      	cmp	r4, #8
 80078fe:	f63f af79 	bhi.w	80077f4 <_strtod_l+0x1ac>
 8007902:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8007906:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007908:	9209      	str	r2, [sp, #36]	@ 0x24
 800790a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800790c:	1c54      	adds	r4, r2, #1
 800790e:	9411      	str	r4, [sp, #68]	@ 0x44
 8007910:	7852      	ldrb	r2, [r2, #1]
 8007912:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8007916:	2e09      	cmp	r6, #9
 8007918:	d937      	bls.n	800798a <_strtod_l+0x342>
 800791a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800791c:	1ba4      	subs	r4, r4, r6
 800791e:	2c08      	cmp	r4, #8
 8007920:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8007924:	dc02      	bgt.n	800792c <_strtod_l+0x2e4>
 8007926:	4564      	cmp	r4, ip
 8007928:	bfa8      	it	ge
 800792a:	4664      	movge	r4, ip
 800792c:	f1be 0f00 	cmp.w	lr, #0
 8007930:	d000      	beq.n	8007934 <_strtod_l+0x2ec>
 8007932:	4264      	negs	r4, r4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d14d      	bne.n	80079d4 <_strtod_l+0x38c>
 8007938:	9b07      	ldr	r3, [sp, #28]
 800793a:	4318      	orrs	r0, r3
 800793c:	f47f aebf 	bne.w	80076be <_strtod_l+0x76>
 8007940:	2900      	cmp	r1, #0
 8007942:	f47f aed8 	bne.w	80076f6 <_strtod_l+0xae>
 8007946:	2a69      	cmp	r2, #105	@ 0x69
 8007948:	d027      	beq.n	800799a <_strtod_l+0x352>
 800794a:	dc24      	bgt.n	8007996 <_strtod_l+0x34e>
 800794c:	2a49      	cmp	r2, #73	@ 0x49
 800794e:	d024      	beq.n	800799a <_strtod_l+0x352>
 8007950:	2a4e      	cmp	r2, #78	@ 0x4e
 8007952:	f47f aed0 	bne.w	80076f6 <_strtod_l+0xae>
 8007956:	4997      	ldr	r1, [pc, #604]	@ (8007bb4 <_strtod_l+0x56c>)
 8007958:	a811      	add	r0, sp, #68	@ 0x44
 800795a:	f001 f9a5 	bl	8008ca8 <__match>
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f aec9 	beq.w	80076f6 <_strtod_l+0xae>
 8007964:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b28      	cmp	r3, #40	@ 0x28
 800796a:	d12d      	bne.n	80079c8 <_strtod_l+0x380>
 800796c:	4992      	ldr	r1, [pc, #584]	@ (8007bb8 <_strtod_l+0x570>)
 800796e:	aa14      	add	r2, sp, #80	@ 0x50
 8007970:	a811      	add	r0, sp, #68	@ 0x44
 8007972:	f001 f9ad 	bl	8008cd0 <__hexnan>
 8007976:	2805      	cmp	r0, #5
 8007978:	d126      	bne.n	80079c8 <_strtod_l+0x380>
 800797a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800797c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8007980:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007984:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007988:	e699      	b.n	80076be <_strtod_l+0x76>
 800798a:	240a      	movs	r4, #10
 800798c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8007990:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8007994:	e7b9      	b.n	800790a <_strtod_l+0x2c2>
 8007996:	2a6e      	cmp	r2, #110	@ 0x6e
 8007998:	e7db      	b.n	8007952 <_strtod_l+0x30a>
 800799a:	4988      	ldr	r1, [pc, #544]	@ (8007bbc <_strtod_l+0x574>)
 800799c:	a811      	add	r0, sp, #68	@ 0x44
 800799e:	f001 f983 	bl	8008ca8 <__match>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f43f aea7 	beq.w	80076f6 <_strtod_l+0xae>
 80079a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079aa:	4985      	ldr	r1, [pc, #532]	@ (8007bc0 <_strtod_l+0x578>)
 80079ac:	3b01      	subs	r3, #1
 80079ae:	a811      	add	r0, sp, #68	@ 0x44
 80079b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80079b2:	f001 f979 	bl	8008ca8 <__match>
 80079b6:	b910      	cbnz	r0, 80079be <_strtod_l+0x376>
 80079b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079ba:	3301      	adds	r3, #1
 80079bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80079be:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8007bd4 <_strtod_l+0x58c>
 80079c2:	f04f 0a00 	mov.w	sl, #0
 80079c6:	e67a      	b.n	80076be <_strtod_l+0x76>
 80079c8:	487e      	ldr	r0, [pc, #504]	@ (8007bc4 <_strtod_l+0x57c>)
 80079ca:	f000 fea9 	bl	8008720 <nan>
 80079ce:	ec5b ab10 	vmov	sl, fp, d0
 80079d2:	e674      	b.n	80076be <_strtod_l+0x76>
 80079d4:	ee07 9a90 	vmov	s15, r9
 80079d8:	1be2      	subs	r2, r4, r7
 80079da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80079de:	2d00      	cmp	r5, #0
 80079e0:	bf08      	it	eq
 80079e2:	461d      	moveq	r5, r3
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80079e8:	461a      	mov	r2, r3
 80079ea:	bfa8      	it	ge
 80079ec:	2210      	movge	r2, #16
 80079ee:	2b09      	cmp	r3, #9
 80079f0:	ec5b ab17 	vmov	sl, fp, d7
 80079f4:	dc15      	bgt.n	8007a22 <_strtod_l+0x3da>
 80079f6:	1be1      	subs	r1, r4, r7
 80079f8:	2900      	cmp	r1, #0
 80079fa:	f43f ae60 	beq.w	80076be <_strtod_l+0x76>
 80079fe:	eba4 0107 	sub.w	r1, r4, r7
 8007a02:	dd72      	ble.n	8007aea <_strtod_l+0x4a2>
 8007a04:	2916      	cmp	r1, #22
 8007a06:	dc59      	bgt.n	8007abc <_strtod_l+0x474>
 8007a08:	4b6f      	ldr	r3, [pc, #444]	@ (8007bc8 <_strtod_l+0x580>)
 8007a0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a10:	ed93 7b00 	vldr	d7, [r3]
 8007a14:	ec4b ab16 	vmov	d6, sl, fp
 8007a18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a1c:	ec5b ab17 	vmov	sl, fp, d7
 8007a20:	e64d      	b.n	80076be <_strtod_l+0x76>
 8007a22:	4969      	ldr	r1, [pc, #420]	@ (8007bc8 <_strtod_l+0x580>)
 8007a24:	eddd 6a06 	vldr	s13, [sp, #24]
 8007a28:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007a2c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8007a30:	2b0f      	cmp	r3, #15
 8007a32:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8007a36:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007a3a:	ec5b ab16 	vmov	sl, fp, d6
 8007a3e:	ddda      	ble.n	80079f6 <_strtod_l+0x3ae>
 8007a40:	1a9a      	subs	r2, r3, r2
 8007a42:	1be1      	subs	r1, r4, r7
 8007a44:	440a      	add	r2, r1
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	f340 8094 	ble.w	8007b74 <_strtod_l+0x52c>
 8007a4c:	f012 000f 	ands.w	r0, r2, #15
 8007a50:	d00a      	beq.n	8007a68 <_strtod_l+0x420>
 8007a52:	495d      	ldr	r1, [pc, #372]	@ (8007bc8 <_strtod_l+0x580>)
 8007a54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007a58:	ed91 7b00 	vldr	d7, [r1]
 8007a5c:	ec4b ab16 	vmov	d6, sl, fp
 8007a60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a64:	ec5b ab17 	vmov	sl, fp, d7
 8007a68:	f032 020f 	bics.w	r2, r2, #15
 8007a6c:	d073      	beq.n	8007b56 <_strtod_l+0x50e>
 8007a6e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8007a72:	dd47      	ble.n	8007b04 <_strtod_l+0x4bc>
 8007a74:	2400      	movs	r4, #0
 8007a76:	4625      	mov	r5, r4
 8007a78:	9407      	str	r4, [sp, #28]
 8007a7a:	4626      	mov	r6, r4
 8007a7c:	9a05      	ldr	r2, [sp, #20]
 8007a7e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007bd4 <_strtod_l+0x58c>
 8007a82:	2322      	movs	r3, #34	@ 0x22
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	f04f 0a00 	mov.w	sl, #0
 8007a8a:	9b07      	ldr	r3, [sp, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f43f ae16 	beq.w	80076be <_strtod_l+0x76>
 8007a92:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007a94:	9805      	ldr	r0, [sp, #20]
 8007a96:	f7ff f955 	bl	8006d44 <_Bfree>
 8007a9a:	9805      	ldr	r0, [sp, #20]
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	f7ff f951 	bl	8006d44 <_Bfree>
 8007aa2:	9805      	ldr	r0, [sp, #20]
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7ff f94d 	bl	8006d44 <_Bfree>
 8007aaa:	9907      	ldr	r1, [sp, #28]
 8007aac:	9805      	ldr	r0, [sp, #20]
 8007aae:	f7ff f949 	bl	8006d44 <_Bfree>
 8007ab2:	9805      	ldr	r0, [sp, #20]
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	f7ff f945 	bl	8006d44 <_Bfree>
 8007aba:	e600      	b.n	80076be <_strtod_l+0x76>
 8007abc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8007ac0:	1be0      	subs	r0, r4, r7
 8007ac2:	4281      	cmp	r1, r0
 8007ac4:	dbbc      	blt.n	8007a40 <_strtod_l+0x3f8>
 8007ac6:	4a40      	ldr	r2, [pc, #256]	@ (8007bc8 <_strtod_l+0x580>)
 8007ac8:	f1c3 030f 	rsb	r3, r3, #15
 8007acc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007ad0:	ed91 7b00 	vldr	d7, [r1]
 8007ad4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ad6:	ec4b ab16 	vmov	d6, sl, fp
 8007ada:	1acb      	subs	r3, r1, r3
 8007adc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007ae0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ae4:	ed92 6b00 	vldr	d6, [r2]
 8007ae8:	e796      	b.n	8007a18 <_strtod_l+0x3d0>
 8007aea:	3116      	adds	r1, #22
 8007aec:	dba8      	blt.n	8007a40 <_strtod_l+0x3f8>
 8007aee:	4b36      	ldr	r3, [pc, #216]	@ (8007bc8 <_strtod_l+0x580>)
 8007af0:	1b3c      	subs	r4, r7, r4
 8007af2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007af6:	ed94 7b00 	vldr	d7, [r4]
 8007afa:	ec4b ab16 	vmov	d6, sl, fp
 8007afe:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007b02:	e78b      	b.n	8007a1c <_strtod_l+0x3d4>
 8007b04:	2000      	movs	r0, #0
 8007b06:	ec4b ab17 	vmov	d7, sl, fp
 8007b0a:	4e30      	ldr	r6, [pc, #192]	@ (8007bcc <_strtod_l+0x584>)
 8007b0c:	1112      	asrs	r2, r2, #4
 8007b0e:	4601      	mov	r1, r0
 8007b10:	2a01      	cmp	r2, #1
 8007b12:	dc23      	bgt.n	8007b5c <_strtod_l+0x514>
 8007b14:	b108      	cbz	r0, 8007b1a <_strtod_l+0x4d2>
 8007b16:	ec5b ab17 	vmov	sl, fp, d7
 8007b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8007bcc <_strtod_l+0x584>)
 8007b1c:	482c      	ldr	r0, [pc, #176]	@ (8007bd0 <_strtod_l+0x588>)
 8007b1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007b22:	ed92 7b00 	vldr	d7, [r2]
 8007b26:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b2a:	ec4b ab16 	vmov	d6, sl, fp
 8007b2e:	4a29      	ldr	r2, [pc, #164]	@ (8007bd4 <_strtod_l+0x58c>)
 8007b30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b34:	ee17 1a90 	vmov	r1, s15
 8007b38:	400a      	ands	r2, r1
 8007b3a:	4282      	cmp	r2, r0
 8007b3c:	ec5b ab17 	vmov	sl, fp, d7
 8007b40:	d898      	bhi.n	8007a74 <_strtod_l+0x42c>
 8007b42:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8007b46:	4282      	cmp	r2, r0
 8007b48:	bf86      	itte	hi
 8007b4a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007bd8 <_strtod_l+0x590>
 8007b4e:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007b52:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8007b56:	2200      	movs	r2, #0
 8007b58:	9206      	str	r2, [sp, #24]
 8007b5a:	e076      	b.n	8007c4a <_strtod_l+0x602>
 8007b5c:	f012 0f01 	tst.w	r2, #1
 8007b60:	d004      	beq.n	8007b6c <_strtod_l+0x524>
 8007b62:	ed96 6b00 	vldr	d6, [r6]
 8007b66:	2001      	movs	r0, #1
 8007b68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b6c:	3101      	adds	r1, #1
 8007b6e:	1052      	asrs	r2, r2, #1
 8007b70:	3608      	adds	r6, #8
 8007b72:	e7cd      	b.n	8007b10 <_strtod_l+0x4c8>
 8007b74:	d0ef      	beq.n	8007b56 <_strtod_l+0x50e>
 8007b76:	4252      	negs	r2, r2
 8007b78:	f012 000f 	ands.w	r0, r2, #15
 8007b7c:	d00a      	beq.n	8007b94 <_strtod_l+0x54c>
 8007b7e:	4912      	ldr	r1, [pc, #72]	@ (8007bc8 <_strtod_l+0x580>)
 8007b80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007b84:	ed91 7b00 	vldr	d7, [r1]
 8007b88:	ec4b ab16 	vmov	d6, sl, fp
 8007b8c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007b90:	ec5b ab17 	vmov	sl, fp, d7
 8007b94:	1112      	asrs	r2, r2, #4
 8007b96:	d0de      	beq.n	8007b56 <_strtod_l+0x50e>
 8007b98:	2a1f      	cmp	r2, #31
 8007b9a:	dd1f      	ble.n	8007bdc <_strtod_l+0x594>
 8007b9c:	2400      	movs	r4, #0
 8007b9e:	4625      	mov	r5, r4
 8007ba0:	9407      	str	r4, [sp, #28]
 8007ba2:	4626      	mov	r6, r4
 8007ba4:	9a05      	ldr	r2, [sp, #20]
 8007ba6:	2322      	movs	r3, #34	@ 0x22
 8007ba8:	f04f 0a00 	mov.w	sl, #0
 8007bac:	f04f 0b00 	mov.w	fp, #0
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	e76a      	b.n	8007a8a <_strtod_l+0x442>
 8007bb4:	0800946d 	.word	0x0800946d
 8007bb8:	08009738 	.word	0x08009738
 8007bbc:	08009465 	.word	0x08009465
 8007bc0:	0800949c 	.word	0x0800949c
 8007bc4:	080095d5 	.word	0x080095d5
 8007bc8:	08009670 	.word	0x08009670
 8007bcc:	08009648 	.word	0x08009648
 8007bd0:	7ca00000 	.word	0x7ca00000
 8007bd4:	7ff00000 	.word	0x7ff00000
 8007bd8:	7fefffff 	.word	0x7fefffff
 8007bdc:	f012 0110 	ands.w	r1, r2, #16
 8007be0:	bf18      	it	ne
 8007be2:	216a      	movne	r1, #106	@ 0x6a
 8007be4:	9106      	str	r1, [sp, #24]
 8007be6:	ec4b ab17 	vmov	d7, sl, fp
 8007bea:	49af      	ldr	r1, [pc, #700]	@ (8007ea8 <_strtod_l+0x860>)
 8007bec:	2000      	movs	r0, #0
 8007bee:	07d6      	lsls	r6, r2, #31
 8007bf0:	d504      	bpl.n	8007bfc <_strtod_l+0x5b4>
 8007bf2:	ed91 6b00 	vldr	d6, [r1]
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bfc:	1052      	asrs	r2, r2, #1
 8007bfe:	f101 0108 	add.w	r1, r1, #8
 8007c02:	d1f4      	bne.n	8007bee <_strtod_l+0x5a6>
 8007c04:	b108      	cbz	r0, 8007c0a <_strtod_l+0x5c2>
 8007c06:	ec5b ab17 	vmov	sl, fp, d7
 8007c0a:	9a06      	ldr	r2, [sp, #24]
 8007c0c:	b1b2      	cbz	r2, 8007c3c <_strtod_l+0x5f4>
 8007c0e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8007c12:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	4658      	mov	r0, fp
 8007c1a:	dd0f      	ble.n	8007c3c <_strtod_l+0x5f4>
 8007c1c:	2a1f      	cmp	r2, #31
 8007c1e:	dd55      	ble.n	8007ccc <_strtod_l+0x684>
 8007c20:	2a34      	cmp	r2, #52	@ 0x34
 8007c22:	bfde      	ittt	le
 8007c24:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 8007c28:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8007c2c:	408a      	lslle	r2, r1
 8007c2e:	f04f 0a00 	mov.w	sl, #0
 8007c32:	bfcc      	ite	gt
 8007c34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007c38:	ea02 0b00 	andle.w	fp, r2, r0
 8007c3c:	ec4b ab17 	vmov	d7, sl, fp
 8007c40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c48:	d0a8      	beq.n	8007b9c <_strtod_l+0x554>
 8007c4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c4c:	9805      	ldr	r0, [sp, #20]
 8007c4e:	f8cd 9000 	str.w	r9, [sp]
 8007c52:	462a      	mov	r2, r5
 8007c54:	f7ff f8de 	bl	8006e14 <__s2b>
 8007c58:	9007      	str	r0, [sp, #28]
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	f43f af0a 	beq.w	8007a74 <_strtod_l+0x42c>
 8007c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c62:	1b3f      	subs	r7, r7, r4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bfb4      	ite	lt
 8007c68:	463b      	movlt	r3, r7
 8007c6a:	2300      	movge	r3, #0
 8007c6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c70:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8007e98 <_strtod_l+0x850>
 8007c74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c78:	2400      	movs	r4, #0
 8007c7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8007c7c:	4625      	mov	r5, r4
 8007c7e:	9b07      	ldr	r3, [sp, #28]
 8007c80:	9805      	ldr	r0, [sp, #20]
 8007c82:	6859      	ldr	r1, [r3, #4]
 8007c84:	f7ff f81e 	bl	8006cc4 <_Balloc>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	f43f aef6 	beq.w	8007a7c <_strtod_l+0x434>
 8007c90:	9b07      	ldr	r3, [sp, #28]
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	ec4b ab19 	vmov	d9, sl, fp
 8007c98:	3202      	adds	r2, #2
 8007c9a:	f103 010c 	add.w	r1, r3, #12
 8007c9e:	0092      	lsls	r2, r2, #2
 8007ca0:	300c      	adds	r0, #12
 8007ca2:	f000 fd2d 	bl	8008700 <memcpy>
 8007ca6:	eeb0 0b49 	vmov.f64	d0, d9
 8007caa:	9805      	ldr	r0, [sp, #20]
 8007cac:	aa14      	add	r2, sp, #80	@ 0x50
 8007cae:	a913      	add	r1, sp, #76	@ 0x4c
 8007cb0:	f7ff fbe4 	bl	800747c <__d2b>
 8007cb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f43f aee0 	beq.w	8007a7c <_strtod_l+0x434>
 8007cbc:	9805      	ldr	r0, [sp, #20]
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	f7ff f93e 	bl	8006f40 <__i2b>
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	b940      	cbnz	r0, 8007cda <_strtod_l+0x692>
 8007cc8:	2500      	movs	r5, #0
 8007cca:	e6d7      	b.n	8007a7c <_strtod_l+0x434>
 8007ccc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8007cd4:	ea02 0a0a 	and.w	sl, r2, sl
 8007cd8:	e7b0      	b.n	8007c3c <_strtod_l+0x5f4>
 8007cda:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8007cdc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007cde:	2f00      	cmp	r7, #0
 8007ce0:	bfab      	itete	ge
 8007ce2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8007ce4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8007ce6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8007cea:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8007cee:	bfac      	ite	ge
 8007cf0:	eb07 0903 	addge.w	r9, r7, r3
 8007cf4:	eba3 0807 	sublt.w	r8, r3, r7
 8007cf8:	9b06      	ldr	r3, [sp, #24]
 8007cfa:	1aff      	subs	r7, r7, r3
 8007cfc:	4417      	add	r7, r2
 8007cfe:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8007d02:	4a6a      	ldr	r2, [pc, #424]	@ (8007eac <_strtod_l+0x864>)
 8007d04:	3f01      	subs	r7, #1
 8007d06:	4297      	cmp	r7, r2
 8007d08:	da51      	bge.n	8007dae <_strtod_l+0x766>
 8007d0a:	1bd1      	subs	r1, r2, r7
 8007d0c:	291f      	cmp	r1, #31
 8007d0e:	eba3 0301 	sub.w	r3, r3, r1
 8007d12:	f04f 0201 	mov.w	r2, #1
 8007d16:	dc3e      	bgt.n	8007d96 <_strtod_l+0x74e>
 8007d18:	408a      	lsls	r2, r1
 8007d1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007d20:	eb09 0703 	add.w	r7, r9, r3
 8007d24:	4498      	add	r8, r3
 8007d26:	9b06      	ldr	r3, [sp, #24]
 8007d28:	45b9      	cmp	r9, r7
 8007d2a:	4498      	add	r8, r3
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	bfa8      	it	ge
 8007d30:	463b      	movge	r3, r7
 8007d32:	4543      	cmp	r3, r8
 8007d34:	bfa8      	it	ge
 8007d36:	4643      	movge	r3, r8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bfc2      	ittt	gt
 8007d3c:	1aff      	subgt	r7, r7, r3
 8007d3e:	eba8 0803 	subgt.w	r8, r8, r3
 8007d42:	eba9 0903 	subgt.w	r9, r9, r3
 8007d46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	dd16      	ble.n	8007d7a <_strtod_l+0x732>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	9805      	ldr	r0, [sp, #20]
 8007d50:	461a      	mov	r2, r3
 8007d52:	f7ff f9ad 	bl	80070b0 <__pow5mult>
 8007d56:	4605      	mov	r5, r0
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d0b5      	beq.n	8007cc8 <_strtod_l+0x680>
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d60:	9805      	ldr	r0, [sp, #20]
 8007d62:	f7ff f903 	bl	8006f6c <__multiply>
 8007d66:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f43f ae87 	beq.w	8007a7c <_strtod_l+0x434>
 8007d6e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007d70:	9805      	ldr	r0, [sp, #20]
 8007d72:	f7fe ffe7 	bl	8006d44 <_Bfree>
 8007d76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d78:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d7a:	2f00      	cmp	r7, #0
 8007d7c:	dc1b      	bgt.n	8007db6 <_strtod_l+0x76e>
 8007d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dd21      	ble.n	8007dc8 <_strtod_l+0x780>
 8007d84:	4631      	mov	r1, r6
 8007d86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d88:	9805      	ldr	r0, [sp, #20]
 8007d8a:	f7ff f991 	bl	80070b0 <__pow5mult>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	b9d0      	cbnz	r0, 8007dc8 <_strtod_l+0x780>
 8007d92:	2600      	movs	r6, #0
 8007d94:	e672      	b.n	8007a7c <_strtod_l+0x434>
 8007d96:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8007d9a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8007d9e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8007da2:	37e2      	adds	r7, #226	@ 0xe2
 8007da4:	fa02 f107 	lsl.w	r1, r2, r7
 8007da8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007daa:	920c      	str	r2, [sp, #48]	@ 0x30
 8007dac:	e7b8      	b.n	8007d20 <_strtod_l+0x6d8>
 8007dae:	2200      	movs	r2, #0
 8007db0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007db2:	2201      	movs	r2, #1
 8007db4:	e7f9      	b.n	8007daa <_strtod_l+0x762>
 8007db6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007db8:	9805      	ldr	r0, [sp, #20]
 8007dba:	463a      	mov	r2, r7
 8007dbc:	f7ff f9d2 	bl	8007164 <__lshift>
 8007dc0:	9012      	str	r0, [sp, #72]	@ 0x48
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d1db      	bne.n	8007d7e <_strtod_l+0x736>
 8007dc6:	e659      	b.n	8007a7c <_strtod_l+0x434>
 8007dc8:	f1b8 0f00 	cmp.w	r8, #0
 8007dcc:	dd07      	ble.n	8007dde <_strtod_l+0x796>
 8007dce:	4631      	mov	r1, r6
 8007dd0:	9805      	ldr	r0, [sp, #20]
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	f7ff f9c6 	bl	8007164 <__lshift>
 8007dd8:	4606      	mov	r6, r0
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d0d9      	beq.n	8007d92 <_strtod_l+0x74a>
 8007dde:	f1b9 0f00 	cmp.w	r9, #0
 8007de2:	dd08      	ble.n	8007df6 <_strtod_l+0x7ae>
 8007de4:	4629      	mov	r1, r5
 8007de6:	9805      	ldr	r0, [sp, #20]
 8007de8:	464a      	mov	r2, r9
 8007dea:	f7ff f9bb 	bl	8007164 <__lshift>
 8007dee:	4605      	mov	r5, r0
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f43f ae43 	beq.w	8007a7c <_strtod_l+0x434>
 8007df6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007df8:	9805      	ldr	r0, [sp, #20]
 8007dfa:	4632      	mov	r2, r6
 8007dfc:	f7ff fa3a 	bl	8007274 <__mdiff>
 8007e00:	4604      	mov	r4, r0
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f43f ae3a 	beq.w	8007a7c <_strtod_l+0x434>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8007e0e:	60c3      	str	r3, [r0, #12]
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7ff fa13 	bl	800723c <__mcmp>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	da4c      	bge.n	8007eb4 <_strtod_l+0x86c>
 8007e1a:	ea58 080a 	orrs.w	r8, r8, sl
 8007e1e:	d172      	bne.n	8007f06 <_strtod_l+0x8be>
 8007e20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d16e      	bne.n	8007f06 <_strtod_l+0x8be>
 8007e28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e2c:	0d1b      	lsrs	r3, r3, #20
 8007e2e:	051b      	lsls	r3, r3, #20
 8007e30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e34:	d967      	bls.n	8007f06 <_strtod_l+0x8be>
 8007e36:	6963      	ldr	r3, [r4, #20]
 8007e38:	b913      	cbnz	r3, 8007e40 <_strtod_l+0x7f8>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	dd62      	ble.n	8007f06 <_strtod_l+0x8be>
 8007e40:	4621      	mov	r1, r4
 8007e42:	2201      	movs	r2, #1
 8007e44:	9805      	ldr	r0, [sp, #20]
 8007e46:	f7ff f98d 	bl	8007164 <__lshift>
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	f7ff f9f5 	bl	800723c <__mcmp>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	dd57      	ble.n	8007f06 <_strtod_l+0x8be>
 8007e56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e5a:	9a06      	ldr	r2, [sp, #24]
 8007e5c:	0d1b      	lsrs	r3, r3, #20
 8007e5e:	051b      	lsls	r3, r3, #20
 8007e60:	2a00      	cmp	r2, #0
 8007e62:	d06e      	beq.n	8007f42 <_strtod_l+0x8fa>
 8007e64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e68:	d86b      	bhi.n	8007f42 <_strtod_l+0x8fa>
 8007e6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e6e:	f67f ae99 	bls.w	8007ba4 <_strtod_l+0x55c>
 8007e72:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8007ea0 <_strtod_l+0x858>
 8007e76:	ec4b ab16 	vmov	d6, sl, fp
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb0 <_strtod_l+0x868>)
 8007e7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e80:	ee17 2a90 	vmov	r2, s15
 8007e84:	4013      	ands	r3, r2
 8007e86:	ec5b ab17 	vmov	sl, fp, d7
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f47f ae01 	bne.w	8007a92 <_strtod_l+0x44a>
 8007e90:	9a05      	ldr	r2, [sp, #20]
 8007e92:	2322      	movs	r3, #34	@ 0x22
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	e5fc      	b.n	8007a92 <_strtod_l+0x44a>
 8007e98:	ffc00000 	.word	0xffc00000
 8007e9c:	41dfffff 	.word	0x41dfffff
 8007ea0:	00000000 	.word	0x00000000
 8007ea4:	39500000 	.word	0x39500000
 8007ea8:	08009760 	.word	0x08009760
 8007eac:	fffffc02 	.word	0xfffffc02
 8007eb0:	7ff00000 	.word	0x7ff00000
 8007eb4:	46d9      	mov	r9, fp
 8007eb6:	d15d      	bne.n	8007f74 <_strtod_l+0x92c>
 8007eb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ebc:	f1b8 0f00 	cmp.w	r8, #0
 8007ec0:	d02a      	beq.n	8007f18 <_strtod_l+0x8d0>
 8007ec2:	4aa9      	ldr	r2, [pc, #676]	@ (8008168 <_strtod_l+0xb20>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d12a      	bne.n	8007f1e <_strtod_l+0x8d6>
 8007ec8:	9b06      	ldr	r3, [sp, #24]
 8007eca:	4652      	mov	r2, sl
 8007ecc:	b1fb      	cbz	r3, 8007f0e <_strtod_l+0x8c6>
 8007ece:	4ba7      	ldr	r3, [pc, #668]	@ (800816c <_strtod_l+0xb24>)
 8007ed0:	ea0b 0303 	and.w	r3, fp, r3
 8007ed4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ed8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007edc:	d81a      	bhi.n	8007f14 <_strtod_l+0x8cc>
 8007ede:	0d1b      	lsrs	r3, r3, #20
 8007ee0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d118      	bne.n	8007f1e <_strtod_l+0x8d6>
 8007eec:	4ba0      	ldr	r3, [pc, #640]	@ (8008170 <_strtod_l+0xb28>)
 8007eee:	4599      	cmp	r9, r3
 8007ef0:	d102      	bne.n	8007ef8 <_strtod_l+0x8b0>
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	f43f adc2 	beq.w	8007a7c <_strtod_l+0x434>
 8007ef8:	4b9c      	ldr	r3, [pc, #624]	@ (800816c <_strtod_l+0xb24>)
 8007efa:	ea09 0303 	and.w	r3, r9, r3
 8007efe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8007f02:	f04f 0a00 	mov.w	sl, #0
 8007f06:	9b06      	ldr	r3, [sp, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1b2      	bne.n	8007e72 <_strtod_l+0x82a>
 8007f0c:	e5c1      	b.n	8007a92 <_strtod_l+0x44a>
 8007f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f12:	e7e9      	b.n	8007ee8 <_strtod_l+0x8a0>
 8007f14:	460b      	mov	r3, r1
 8007f16:	e7e7      	b.n	8007ee8 <_strtod_l+0x8a0>
 8007f18:	ea53 030a 	orrs.w	r3, r3, sl
 8007f1c:	d09b      	beq.n	8007e56 <_strtod_l+0x80e>
 8007f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f20:	b1c3      	cbz	r3, 8007f54 <_strtod_l+0x90c>
 8007f22:	ea13 0f09 	tst.w	r3, r9
 8007f26:	d0ee      	beq.n	8007f06 <_strtod_l+0x8be>
 8007f28:	9a06      	ldr	r2, [sp, #24]
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	f1b8 0f00 	cmp.w	r8, #0
 8007f32:	d013      	beq.n	8007f5c <_strtod_l+0x914>
 8007f34:	f7ff fb6d 	bl	8007612 <sulp>
 8007f38:	ee39 7b00 	vadd.f64	d7, d9, d0
 8007f3c:	ec5b ab17 	vmov	sl, fp, d7
 8007f40:	e7e1      	b.n	8007f06 <_strtod_l+0x8be>
 8007f42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007f46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f4e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007f52:	e7d8      	b.n	8007f06 <_strtod_l+0x8be>
 8007f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f56:	ea13 0f0a 	tst.w	r3, sl
 8007f5a:	e7e4      	b.n	8007f26 <_strtod_l+0x8de>
 8007f5c:	f7ff fb59 	bl	8007612 <sulp>
 8007f60:	ee39 0b40 	vsub.f64	d0, d9, d0
 8007f64:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6c:	ec5b ab10 	vmov	sl, fp, d0
 8007f70:	d1c9      	bne.n	8007f06 <_strtod_l+0x8be>
 8007f72:	e617      	b.n	8007ba4 <_strtod_l+0x55c>
 8007f74:	4629      	mov	r1, r5
 8007f76:	4620      	mov	r0, r4
 8007f78:	f7ff fad8 	bl	800752c <__ratio>
 8007f7c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8007f80:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f88:	d85d      	bhi.n	8008046 <_strtod_l+0x9fe>
 8007f8a:	f1b8 0f00 	cmp.w	r8, #0
 8007f8e:	d164      	bne.n	800805a <_strtod_l+0xa12>
 8007f90:	f1ba 0f00 	cmp.w	sl, #0
 8007f94:	d14b      	bne.n	800802e <_strtod_l+0x9e6>
 8007f96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f9a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d160      	bne.n	8008064 <_strtod_l+0xa1c>
 8007fa2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8007fa6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8007faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fae:	d401      	bmi.n	8007fb4 <_strtod_l+0x96c>
 8007fb0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007fb4:	eeb1 ab48 	vneg.f64	d10, d8
 8007fb8:	486c      	ldr	r0, [pc, #432]	@ (800816c <_strtod_l+0xb24>)
 8007fba:	496e      	ldr	r1, [pc, #440]	@ (8008174 <_strtod_l+0xb2c>)
 8007fbc:	ea09 0700 	and.w	r7, r9, r0
 8007fc0:	428f      	cmp	r7, r1
 8007fc2:	ec53 2b1a 	vmov	r2, r3, d10
 8007fc6:	d17d      	bne.n	80080c4 <_strtod_l+0xa7c>
 8007fc8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8007fcc:	ec4b ab1c 	vmov	d12, sl, fp
 8007fd0:	eeb0 0b4c 	vmov.f64	d0, d12
 8007fd4:	f7ff f9e2 	bl	800739c <__ulp>
 8007fd8:	4864      	ldr	r0, [pc, #400]	@ (800816c <_strtod_l+0xb24>)
 8007fda:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8007fde:	ee1c 3a90 	vmov	r3, s25
 8007fe2:	4a65      	ldr	r2, [pc, #404]	@ (8008178 <_strtod_l+0xb30>)
 8007fe4:	ea03 0100 	and.w	r1, r3, r0
 8007fe8:	4291      	cmp	r1, r2
 8007fea:	ec5b ab1c 	vmov	sl, fp, d12
 8007fee:	d93c      	bls.n	800806a <_strtod_l+0xa22>
 8007ff0:	ee19 2a90 	vmov	r2, s19
 8007ff4:	4b5e      	ldr	r3, [pc, #376]	@ (8008170 <_strtod_l+0xb28>)
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d104      	bne.n	8008004 <_strtod_l+0x9bc>
 8007ffa:	ee19 3a10 	vmov	r3, s18
 8007ffe:	3301      	adds	r3, #1
 8008000:	f43f ad3c 	beq.w	8007a7c <_strtod_l+0x434>
 8008004:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8008170 <_strtod_l+0xb28>
 8008008:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800800c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800800e:	9805      	ldr	r0, [sp, #20]
 8008010:	f7fe fe98 	bl	8006d44 <_Bfree>
 8008014:	9805      	ldr	r0, [sp, #20]
 8008016:	4631      	mov	r1, r6
 8008018:	f7fe fe94 	bl	8006d44 <_Bfree>
 800801c:	9805      	ldr	r0, [sp, #20]
 800801e:	4629      	mov	r1, r5
 8008020:	f7fe fe90 	bl	8006d44 <_Bfree>
 8008024:	9805      	ldr	r0, [sp, #20]
 8008026:	4621      	mov	r1, r4
 8008028:	f7fe fe8c 	bl	8006d44 <_Bfree>
 800802c:	e627      	b.n	8007c7e <_strtod_l+0x636>
 800802e:	f1ba 0f01 	cmp.w	sl, #1
 8008032:	d103      	bne.n	800803c <_strtod_l+0x9f4>
 8008034:	f1bb 0f00 	cmp.w	fp, #0
 8008038:	f43f adb4 	beq.w	8007ba4 <_strtod_l+0x55c>
 800803c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8008040:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8008044:	e7b8      	b.n	8007fb8 <_strtod_l+0x970>
 8008046:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800804a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800804e:	f1b8 0f00 	cmp.w	r8, #0
 8008052:	d0af      	beq.n	8007fb4 <_strtod_l+0x96c>
 8008054:	eeb0 ab48 	vmov.f64	d10, d8
 8008058:	e7ae      	b.n	8007fb8 <_strtod_l+0x970>
 800805a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800805e:	eeb0 8b4a 	vmov.f64	d8, d10
 8008062:	e7a9      	b.n	8007fb8 <_strtod_l+0x970>
 8008064:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8008068:	e7a6      	b.n	8007fb8 <_strtod_l+0x970>
 800806a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	46d9      	mov	r9, fp
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1ca      	bne.n	800800c <_strtod_l+0x9c4>
 8008076:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800807a:	0d1b      	lsrs	r3, r3, #20
 800807c:	051b      	lsls	r3, r3, #20
 800807e:	429f      	cmp	r7, r3
 8008080:	d1c4      	bne.n	800800c <_strtod_l+0x9c4>
 8008082:	ec51 0b18 	vmov	r0, r1, d8
 8008086:	f7f8 fb07 	bl	8000698 <__aeabi_d2lz>
 800808a:	f7f8 fabf 	bl	800060c <__aeabi_l2d>
 800808e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8008092:	ec41 0b17 	vmov	d7, r0, r1
 8008096:	ea49 090a 	orr.w	r9, r9, sl
 800809a:	ea59 0908 	orrs.w	r9, r9, r8
 800809e:	ee38 8b47 	vsub.f64	d8, d8, d7
 80080a2:	d03c      	beq.n	800811e <_strtod_l+0xad6>
 80080a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8008150 <_strtod_l+0xb08>
 80080a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80080ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b0:	f53f acef 	bmi.w	8007a92 <_strtod_l+0x44a>
 80080b4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8008158 <_strtod_l+0xb10>
 80080b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80080bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c0:	dda4      	ble.n	800800c <_strtod_l+0x9c4>
 80080c2:	e4e6      	b.n	8007a92 <_strtod_l+0x44a>
 80080c4:	9906      	ldr	r1, [sp, #24]
 80080c6:	b1e1      	cbz	r1, 8008102 <_strtod_l+0xaba>
 80080c8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80080cc:	d819      	bhi.n	8008102 <_strtod_l+0xaba>
 80080ce:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80080d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d6:	d811      	bhi.n	80080fc <_strtod_l+0xab4>
 80080d8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80080dc:	ee18 3a10 	vmov	r3, s16
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	bf38      	it	cc
 80080e4:	2301      	movcc	r3, #1
 80080e6:	ee08 3a10 	vmov	s16, r3
 80080ea:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80080ee:	f1b8 0f00 	cmp.w	r8, #0
 80080f2:	d111      	bne.n	8008118 <_strtod_l+0xad0>
 80080f4:	eeb1 7b48 	vneg.f64	d7, d8
 80080f8:	ec53 2b17 	vmov	r2, r3, d7
 80080fc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8008100:	1bcb      	subs	r3, r1, r7
 8008102:	eeb0 0b49 	vmov.f64	d0, d9
 8008106:	ec43 2b1a 	vmov	d10, r2, r3
 800810a:	f7ff f947 	bl	800739c <__ulp>
 800810e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8008112:	ec5b ab19 	vmov	sl, fp, d9
 8008116:	e7aa      	b.n	800806e <_strtod_l+0xa26>
 8008118:	eeb0 7b48 	vmov.f64	d7, d8
 800811c:	e7ec      	b.n	80080f8 <_strtod_l+0xab0>
 800811e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8008160 <_strtod_l+0xb18>
 8008122:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800812a:	f57f af6f 	bpl.w	800800c <_strtod_l+0x9c4>
 800812e:	e4b0      	b.n	8007a92 <_strtod_l+0x44a>
 8008130:	2300      	movs	r3, #0
 8008132:	9308      	str	r3, [sp, #32]
 8008134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008136:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	f7ff bac4 	b.w	80076c6 <_strtod_l+0x7e>
 800813e:	2a65      	cmp	r2, #101	@ 0x65
 8008140:	f43f abbf 	beq.w	80078c2 <_strtod_l+0x27a>
 8008144:	2a45      	cmp	r2, #69	@ 0x45
 8008146:	f43f abbc 	beq.w	80078c2 <_strtod_l+0x27a>
 800814a:	2101      	movs	r1, #1
 800814c:	f7ff bbf4 	b.w	8007938 <_strtod_l+0x2f0>
 8008150:	94a03595 	.word	0x94a03595
 8008154:	3fdfffff 	.word	0x3fdfffff
 8008158:	35afe535 	.word	0x35afe535
 800815c:	3fe00000 	.word	0x3fe00000
 8008160:	94a03595 	.word	0x94a03595
 8008164:	3fcfffff 	.word	0x3fcfffff
 8008168:	000fffff 	.word	0x000fffff
 800816c:	7ff00000 	.word	0x7ff00000
 8008170:	7fefffff 	.word	0x7fefffff
 8008174:	7fe00000 	.word	0x7fe00000
 8008178:	7c9fffff 	.word	0x7c9fffff

0800817c <_strtod_r>:
 800817c:	4b01      	ldr	r3, [pc, #4]	@ (8008184 <_strtod_r+0x8>)
 800817e:	f7ff ba63 	b.w	8007648 <_strtod_l>
 8008182:	bf00      	nop
 8008184:	20000068 	.word	0x20000068

08008188 <_strtol_l.isra.0>:
 8008188:	2b24      	cmp	r3, #36	@ 0x24
 800818a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800818e:	4686      	mov	lr, r0
 8008190:	4690      	mov	r8, r2
 8008192:	d801      	bhi.n	8008198 <_strtol_l.isra.0+0x10>
 8008194:	2b01      	cmp	r3, #1
 8008196:	d106      	bne.n	80081a6 <_strtol_l.isra.0+0x1e>
 8008198:	f7fd fe78 	bl	8005e8c <__errno>
 800819c:	2316      	movs	r3, #22
 800819e:	6003      	str	r3, [r0, #0]
 80081a0:	2000      	movs	r0, #0
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a6:	4834      	ldr	r0, [pc, #208]	@ (8008278 <_strtol_l.isra.0+0xf0>)
 80081a8:	460d      	mov	r5, r1
 80081aa:	462a      	mov	r2, r5
 80081ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081b0:	5d06      	ldrb	r6, [r0, r4]
 80081b2:	f016 0608 	ands.w	r6, r6, #8
 80081b6:	d1f8      	bne.n	80081aa <_strtol_l.isra.0+0x22>
 80081b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80081ba:	d110      	bne.n	80081de <_strtol_l.isra.0+0x56>
 80081bc:	782c      	ldrb	r4, [r5, #0]
 80081be:	2601      	movs	r6, #1
 80081c0:	1c95      	adds	r5, r2, #2
 80081c2:	f033 0210 	bics.w	r2, r3, #16
 80081c6:	d115      	bne.n	80081f4 <_strtol_l.isra.0+0x6c>
 80081c8:	2c30      	cmp	r4, #48	@ 0x30
 80081ca:	d10d      	bne.n	80081e8 <_strtol_l.isra.0+0x60>
 80081cc:	782a      	ldrb	r2, [r5, #0]
 80081ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081d2:	2a58      	cmp	r2, #88	@ 0x58
 80081d4:	d108      	bne.n	80081e8 <_strtol_l.isra.0+0x60>
 80081d6:	786c      	ldrb	r4, [r5, #1]
 80081d8:	3502      	adds	r5, #2
 80081da:	2310      	movs	r3, #16
 80081dc:	e00a      	b.n	80081f4 <_strtol_l.isra.0+0x6c>
 80081de:	2c2b      	cmp	r4, #43	@ 0x2b
 80081e0:	bf04      	itt	eq
 80081e2:	782c      	ldrbeq	r4, [r5, #0]
 80081e4:	1c95      	addeq	r5, r2, #2
 80081e6:	e7ec      	b.n	80081c2 <_strtol_l.isra.0+0x3a>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f6      	bne.n	80081da <_strtol_l.isra.0+0x52>
 80081ec:	2c30      	cmp	r4, #48	@ 0x30
 80081ee:	bf14      	ite	ne
 80081f0:	230a      	movne	r3, #10
 80081f2:	2308      	moveq	r3, #8
 80081f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80081f8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80081fc:	2200      	movs	r2, #0
 80081fe:	fbbc f9f3 	udiv	r9, ip, r3
 8008202:	4610      	mov	r0, r2
 8008204:	fb03 ca19 	mls	sl, r3, r9, ip
 8008208:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800820c:	2f09      	cmp	r7, #9
 800820e:	d80f      	bhi.n	8008230 <_strtol_l.isra.0+0xa8>
 8008210:	463c      	mov	r4, r7
 8008212:	42a3      	cmp	r3, r4
 8008214:	dd1b      	ble.n	800824e <_strtol_l.isra.0+0xc6>
 8008216:	1c57      	adds	r7, r2, #1
 8008218:	d007      	beq.n	800822a <_strtol_l.isra.0+0xa2>
 800821a:	4581      	cmp	r9, r0
 800821c:	d314      	bcc.n	8008248 <_strtol_l.isra.0+0xc0>
 800821e:	d101      	bne.n	8008224 <_strtol_l.isra.0+0x9c>
 8008220:	45a2      	cmp	sl, r4
 8008222:	db11      	blt.n	8008248 <_strtol_l.isra.0+0xc0>
 8008224:	fb00 4003 	mla	r0, r0, r3, r4
 8008228:	2201      	movs	r2, #1
 800822a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800822e:	e7eb      	b.n	8008208 <_strtol_l.isra.0+0x80>
 8008230:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008234:	2f19      	cmp	r7, #25
 8008236:	d801      	bhi.n	800823c <_strtol_l.isra.0+0xb4>
 8008238:	3c37      	subs	r4, #55	@ 0x37
 800823a:	e7ea      	b.n	8008212 <_strtol_l.isra.0+0x8a>
 800823c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008240:	2f19      	cmp	r7, #25
 8008242:	d804      	bhi.n	800824e <_strtol_l.isra.0+0xc6>
 8008244:	3c57      	subs	r4, #87	@ 0x57
 8008246:	e7e4      	b.n	8008212 <_strtol_l.isra.0+0x8a>
 8008248:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800824c:	e7ed      	b.n	800822a <_strtol_l.isra.0+0xa2>
 800824e:	1c53      	adds	r3, r2, #1
 8008250:	d108      	bne.n	8008264 <_strtol_l.isra.0+0xdc>
 8008252:	2322      	movs	r3, #34	@ 0x22
 8008254:	f8ce 3000 	str.w	r3, [lr]
 8008258:	4660      	mov	r0, ip
 800825a:	f1b8 0f00 	cmp.w	r8, #0
 800825e:	d0a0      	beq.n	80081a2 <_strtol_l.isra.0+0x1a>
 8008260:	1e69      	subs	r1, r5, #1
 8008262:	e006      	b.n	8008272 <_strtol_l.isra.0+0xea>
 8008264:	b106      	cbz	r6, 8008268 <_strtol_l.isra.0+0xe0>
 8008266:	4240      	negs	r0, r0
 8008268:	f1b8 0f00 	cmp.w	r8, #0
 800826c:	d099      	beq.n	80081a2 <_strtol_l.isra.0+0x1a>
 800826e:	2a00      	cmp	r2, #0
 8008270:	d1f6      	bne.n	8008260 <_strtol_l.isra.0+0xd8>
 8008272:	f8c8 1000 	str.w	r1, [r8]
 8008276:	e794      	b.n	80081a2 <_strtol_l.isra.0+0x1a>
 8008278:	08009789 	.word	0x08009789

0800827c <_strtol_r>:
 800827c:	f7ff bf84 	b.w	8008188 <_strtol_l.isra.0>

08008280 <__ssputs_r>:
 8008280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	688e      	ldr	r6, [r1, #8]
 8008286:	461f      	mov	r7, r3
 8008288:	42be      	cmp	r6, r7
 800828a:	680b      	ldr	r3, [r1, #0]
 800828c:	4682      	mov	sl, r0
 800828e:	460c      	mov	r4, r1
 8008290:	4690      	mov	r8, r2
 8008292:	d82d      	bhi.n	80082f0 <__ssputs_r+0x70>
 8008294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008298:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800829c:	d026      	beq.n	80082ec <__ssputs_r+0x6c>
 800829e:	6965      	ldr	r5, [r4, #20]
 80082a0:	6909      	ldr	r1, [r1, #16]
 80082a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082a6:	eba3 0901 	sub.w	r9, r3, r1
 80082aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ae:	1c7b      	adds	r3, r7, #1
 80082b0:	444b      	add	r3, r9
 80082b2:	106d      	asrs	r5, r5, #1
 80082b4:	429d      	cmp	r5, r3
 80082b6:	bf38      	it	cc
 80082b8:	461d      	movcc	r5, r3
 80082ba:	0553      	lsls	r3, r2, #21
 80082bc:	d527      	bpl.n	800830e <__ssputs_r+0x8e>
 80082be:	4629      	mov	r1, r5
 80082c0:	f7fe fc74 	bl	8006bac <_malloc_r>
 80082c4:	4606      	mov	r6, r0
 80082c6:	b360      	cbz	r0, 8008322 <__ssputs_r+0xa2>
 80082c8:	6921      	ldr	r1, [r4, #16]
 80082ca:	464a      	mov	r2, r9
 80082cc:	f000 fa18 	bl	8008700 <memcpy>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	6126      	str	r6, [r4, #16]
 80082de:	6165      	str	r5, [r4, #20]
 80082e0:	444e      	add	r6, r9
 80082e2:	eba5 0509 	sub.w	r5, r5, r9
 80082e6:	6026      	str	r6, [r4, #0]
 80082e8:	60a5      	str	r5, [r4, #8]
 80082ea:	463e      	mov	r6, r7
 80082ec:	42be      	cmp	r6, r7
 80082ee:	d900      	bls.n	80082f2 <__ssputs_r+0x72>
 80082f0:	463e      	mov	r6, r7
 80082f2:	6820      	ldr	r0, [r4, #0]
 80082f4:	4632      	mov	r2, r6
 80082f6:	4641      	mov	r1, r8
 80082f8:	f000 f9c6 	bl	8008688 <memmove>
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	1b9b      	subs	r3, r3, r6
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	4433      	add	r3, r6
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	2000      	movs	r0, #0
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	462a      	mov	r2, r5
 8008310:	f000 fd8b 	bl	8008e2a <_realloc_r>
 8008314:	4606      	mov	r6, r0
 8008316:	2800      	cmp	r0, #0
 8008318:	d1e0      	bne.n	80082dc <__ssputs_r+0x5c>
 800831a:	6921      	ldr	r1, [r4, #16]
 800831c:	4650      	mov	r0, sl
 800831e:	f7fe fbd1 	bl	8006ac4 <_free_r>
 8008322:	230c      	movs	r3, #12
 8008324:	f8ca 3000 	str.w	r3, [sl]
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008334:	e7e9      	b.n	800830a <__ssputs_r+0x8a>
	...

08008338 <_svfiprintf_r>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	4698      	mov	r8, r3
 800833e:	898b      	ldrh	r3, [r1, #12]
 8008340:	061b      	lsls	r3, r3, #24
 8008342:	b09d      	sub	sp, #116	@ 0x74
 8008344:	4607      	mov	r7, r0
 8008346:	460d      	mov	r5, r1
 8008348:	4614      	mov	r4, r2
 800834a:	d510      	bpl.n	800836e <_svfiprintf_r+0x36>
 800834c:	690b      	ldr	r3, [r1, #16]
 800834e:	b973      	cbnz	r3, 800836e <_svfiprintf_r+0x36>
 8008350:	2140      	movs	r1, #64	@ 0x40
 8008352:	f7fe fc2b 	bl	8006bac <_malloc_r>
 8008356:	6028      	str	r0, [r5, #0]
 8008358:	6128      	str	r0, [r5, #16]
 800835a:	b930      	cbnz	r0, 800836a <_svfiprintf_r+0x32>
 800835c:	230c      	movs	r3, #12
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008364:	b01d      	add	sp, #116	@ 0x74
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	2340      	movs	r3, #64	@ 0x40
 800836c:	616b      	str	r3, [r5, #20]
 800836e:	2300      	movs	r3, #0
 8008370:	9309      	str	r3, [sp, #36]	@ 0x24
 8008372:	2320      	movs	r3, #32
 8008374:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008378:	f8cd 800c 	str.w	r8, [sp, #12]
 800837c:	2330      	movs	r3, #48	@ 0x30
 800837e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800851c <_svfiprintf_r+0x1e4>
 8008382:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008386:	f04f 0901 	mov.w	r9, #1
 800838a:	4623      	mov	r3, r4
 800838c:	469a      	mov	sl, r3
 800838e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008392:	b10a      	cbz	r2, 8008398 <_svfiprintf_r+0x60>
 8008394:	2a25      	cmp	r2, #37	@ 0x25
 8008396:	d1f9      	bne.n	800838c <_svfiprintf_r+0x54>
 8008398:	ebba 0b04 	subs.w	fp, sl, r4
 800839c:	d00b      	beq.n	80083b6 <_svfiprintf_r+0x7e>
 800839e:	465b      	mov	r3, fp
 80083a0:	4622      	mov	r2, r4
 80083a2:	4629      	mov	r1, r5
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff ff6b 	bl	8008280 <__ssputs_r>
 80083aa:	3001      	adds	r0, #1
 80083ac:	f000 80a7 	beq.w	80084fe <_svfiprintf_r+0x1c6>
 80083b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083b2:	445a      	add	r2, fp
 80083b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80083b6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 809f 	beq.w	80084fe <_svfiprintf_r+0x1c6>
 80083c0:	2300      	movs	r3, #0
 80083c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ca:	f10a 0a01 	add.w	sl, sl, #1
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	9307      	str	r3, [sp, #28]
 80083d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80083d8:	4654      	mov	r4, sl
 80083da:	2205      	movs	r2, #5
 80083dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e0:	484e      	ldr	r0, [pc, #312]	@ (800851c <_svfiprintf_r+0x1e4>)
 80083e2:	f7f7 ff2d 	bl	8000240 <memchr>
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	b9d8      	cbnz	r0, 8008422 <_svfiprintf_r+0xea>
 80083ea:	06d0      	lsls	r0, r2, #27
 80083ec:	bf44      	itt	mi
 80083ee:	2320      	movmi	r3, #32
 80083f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083f4:	0711      	lsls	r1, r2, #28
 80083f6:	bf44      	itt	mi
 80083f8:	232b      	movmi	r3, #43	@ 0x2b
 80083fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008402:	2b2a      	cmp	r3, #42	@ 0x2a
 8008404:	d015      	beq.n	8008432 <_svfiprintf_r+0xfa>
 8008406:	9a07      	ldr	r2, [sp, #28]
 8008408:	4654      	mov	r4, sl
 800840a:	2000      	movs	r0, #0
 800840c:	f04f 0c0a 	mov.w	ip, #10
 8008410:	4621      	mov	r1, r4
 8008412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008416:	3b30      	subs	r3, #48	@ 0x30
 8008418:	2b09      	cmp	r3, #9
 800841a:	d94b      	bls.n	80084b4 <_svfiprintf_r+0x17c>
 800841c:	b1b0      	cbz	r0, 800844c <_svfiprintf_r+0x114>
 800841e:	9207      	str	r2, [sp, #28]
 8008420:	e014      	b.n	800844c <_svfiprintf_r+0x114>
 8008422:	eba0 0308 	sub.w	r3, r0, r8
 8008426:	fa09 f303 	lsl.w	r3, r9, r3
 800842a:	4313      	orrs	r3, r2
 800842c:	9304      	str	r3, [sp, #16]
 800842e:	46a2      	mov	sl, r4
 8008430:	e7d2      	b.n	80083d8 <_svfiprintf_r+0xa0>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	1d19      	adds	r1, r3, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	9103      	str	r1, [sp, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	bfbb      	ittet	lt
 800843e:	425b      	neglt	r3, r3
 8008440:	f042 0202 	orrlt.w	r2, r2, #2
 8008444:	9307      	strge	r3, [sp, #28]
 8008446:	9307      	strlt	r3, [sp, #28]
 8008448:	bfb8      	it	lt
 800844a:	9204      	strlt	r2, [sp, #16]
 800844c:	7823      	ldrb	r3, [r4, #0]
 800844e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008450:	d10a      	bne.n	8008468 <_svfiprintf_r+0x130>
 8008452:	7863      	ldrb	r3, [r4, #1]
 8008454:	2b2a      	cmp	r3, #42	@ 0x2a
 8008456:	d132      	bne.n	80084be <_svfiprintf_r+0x186>
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	1d1a      	adds	r2, r3, #4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	9203      	str	r2, [sp, #12]
 8008460:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008464:	3402      	adds	r4, #2
 8008466:	9305      	str	r3, [sp, #20]
 8008468:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800852c <_svfiprintf_r+0x1f4>
 800846c:	7821      	ldrb	r1, [r4, #0]
 800846e:	2203      	movs	r2, #3
 8008470:	4650      	mov	r0, sl
 8008472:	f7f7 fee5 	bl	8000240 <memchr>
 8008476:	b138      	cbz	r0, 8008488 <_svfiprintf_r+0x150>
 8008478:	9b04      	ldr	r3, [sp, #16]
 800847a:	eba0 000a 	sub.w	r0, r0, sl
 800847e:	2240      	movs	r2, #64	@ 0x40
 8008480:	4082      	lsls	r2, r0
 8008482:	4313      	orrs	r3, r2
 8008484:	3401      	adds	r4, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	4824      	ldr	r0, [pc, #144]	@ (8008520 <_svfiprintf_r+0x1e8>)
 800848e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008492:	2206      	movs	r2, #6
 8008494:	f7f7 fed4 	bl	8000240 <memchr>
 8008498:	2800      	cmp	r0, #0
 800849a:	d036      	beq.n	800850a <_svfiprintf_r+0x1d2>
 800849c:	4b21      	ldr	r3, [pc, #132]	@ (8008524 <_svfiprintf_r+0x1ec>)
 800849e:	bb1b      	cbnz	r3, 80084e8 <_svfiprintf_r+0x1b0>
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	3307      	adds	r3, #7
 80084a4:	f023 0307 	bic.w	r3, r3, #7
 80084a8:	3308      	adds	r3, #8
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ae:	4433      	add	r3, r6
 80084b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084b2:	e76a      	b.n	800838a <_svfiprintf_r+0x52>
 80084b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b8:	460c      	mov	r4, r1
 80084ba:	2001      	movs	r0, #1
 80084bc:	e7a8      	b.n	8008410 <_svfiprintf_r+0xd8>
 80084be:	2300      	movs	r3, #0
 80084c0:	3401      	adds	r4, #1
 80084c2:	9305      	str	r3, [sp, #20]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	4620      	mov	r0, r4
 80084cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d0:	3a30      	subs	r2, #48	@ 0x30
 80084d2:	2a09      	cmp	r2, #9
 80084d4:	d903      	bls.n	80084de <_svfiprintf_r+0x1a6>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0c6      	beq.n	8008468 <_svfiprintf_r+0x130>
 80084da:	9105      	str	r1, [sp, #20]
 80084dc:	e7c4      	b.n	8008468 <_svfiprintf_r+0x130>
 80084de:	fb0c 2101 	mla	r1, ip, r1, r2
 80084e2:	4604      	mov	r4, r0
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7f0      	b.n	80084ca <_svfiprintf_r+0x192>
 80084e8:	ab03      	add	r3, sp, #12
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	462a      	mov	r2, r5
 80084ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008528 <_svfiprintf_r+0x1f0>)
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	4638      	mov	r0, r7
 80084f4:	f7fc fda4 	bl	8005040 <_printf_float>
 80084f8:	1c42      	adds	r2, r0, #1
 80084fa:	4606      	mov	r6, r0
 80084fc:	d1d6      	bne.n	80084ac <_svfiprintf_r+0x174>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	065b      	lsls	r3, r3, #25
 8008502:	f53f af2d 	bmi.w	8008360 <_svfiprintf_r+0x28>
 8008506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008508:	e72c      	b.n	8008364 <_svfiprintf_r+0x2c>
 800850a:	ab03      	add	r3, sp, #12
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	462a      	mov	r2, r5
 8008510:	4b05      	ldr	r3, [pc, #20]	@ (8008528 <_svfiprintf_r+0x1f0>)
 8008512:	a904      	add	r1, sp, #16
 8008514:	4638      	mov	r0, r7
 8008516:	f7fd f81b 	bl	8005550 <_printf_i>
 800851a:	e7ed      	b.n	80084f8 <_svfiprintf_r+0x1c0>
 800851c:	08009581 	.word	0x08009581
 8008520:	0800958b 	.word	0x0800958b
 8008524:	08005041 	.word	0x08005041
 8008528:	08008281 	.word	0x08008281
 800852c:	08009587 	.word	0x08009587

08008530 <__sflush_r>:
 8008530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	0716      	lsls	r6, r2, #28
 800853a:	4605      	mov	r5, r0
 800853c:	460c      	mov	r4, r1
 800853e:	d454      	bmi.n	80085ea <__sflush_r+0xba>
 8008540:	684b      	ldr	r3, [r1, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	dc02      	bgt.n	800854c <__sflush_r+0x1c>
 8008546:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	dd48      	ble.n	80085de <__sflush_r+0xae>
 800854c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800854e:	2e00      	cmp	r6, #0
 8008550:	d045      	beq.n	80085de <__sflush_r+0xae>
 8008552:	2300      	movs	r3, #0
 8008554:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008558:	682f      	ldr	r7, [r5, #0]
 800855a:	6a21      	ldr	r1, [r4, #32]
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	d030      	beq.n	80085c2 <__sflush_r+0x92>
 8008560:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	0759      	lsls	r1, r3, #29
 8008566:	d505      	bpl.n	8008574 <__sflush_r+0x44>
 8008568:	6863      	ldr	r3, [r4, #4]
 800856a:	1ad2      	subs	r2, r2, r3
 800856c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800856e:	b10b      	cbz	r3, 8008574 <__sflush_r+0x44>
 8008570:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	2300      	movs	r3, #0
 8008576:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008578:	6a21      	ldr	r1, [r4, #32]
 800857a:	4628      	mov	r0, r5
 800857c:	47b0      	blx	r6
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	d106      	bne.n	8008592 <__sflush_r+0x62>
 8008584:	6829      	ldr	r1, [r5, #0]
 8008586:	291d      	cmp	r1, #29
 8008588:	d82b      	bhi.n	80085e2 <__sflush_r+0xb2>
 800858a:	4a2a      	ldr	r2, [pc, #168]	@ (8008634 <__sflush_r+0x104>)
 800858c:	40ca      	lsrs	r2, r1
 800858e:	07d6      	lsls	r6, r2, #31
 8008590:	d527      	bpl.n	80085e2 <__sflush_r+0xb2>
 8008592:	2200      	movs	r2, #0
 8008594:	6062      	str	r2, [r4, #4]
 8008596:	04d9      	lsls	r1, r3, #19
 8008598:	6922      	ldr	r2, [r4, #16]
 800859a:	6022      	str	r2, [r4, #0]
 800859c:	d504      	bpl.n	80085a8 <__sflush_r+0x78>
 800859e:	1c42      	adds	r2, r0, #1
 80085a0:	d101      	bne.n	80085a6 <__sflush_r+0x76>
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	b903      	cbnz	r3, 80085a8 <__sflush_r+0x78>
 80085a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80085a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085aa:	602f      	str	r7, [r5, #0]
 80085ac:	b1b9      	cbz	r1, 80085de <__sflush_r+0xae>
 80085ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085b2:	4299      	cmp	r1, r3
 80085b4:	d002      	beq.n	80085bc <__sflush_r+0x8c>
 80085b6:	4628      	mov	r0, r5
 80085b8:	f7fe fa84 	bl	8006ac4 <_free_r>
 80085bc:	2300      	movs	r3, #0
 80085be:	6363      	str	r3, [r4, #52]	@ 0x34
 80085c0:	e00d      	b.n	80085de <__sflush_r+0xae>
 80085c2:	2301      	movs	r3, #1
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b0      	blx	r6
 80085c8:	4602      	mov	r2, r0
 80085ca:	1c50      	adds	r0, r2, #1
 80085cc:	d1c9      	bne.n	8008562 <__sflush_r+0x32>
 80085ce:	682b      	ldr	r3, [r5, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0c6      	beq.n	8008562 <__sflush_r+0x32>
 80085d4:	2b1d      	cmp	r3, #29
 80085d6:	d001      	beq.n	80085dc <__sflush_r+0xac>
 80085d8:	2b16      	cmp	r3, #22
 80085da:	d11e      	bne.n	800861a <__sflush_r+0xea>
 80085dc:	602f      	str	r7, [r5, #0]
 80085de:	2000      	movs	r0, #0
 80085e0:	e022      	b.n	8008628 <__sflush_r+0xf8>
 80085e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085e6:	b21b      	sxth	r3, r3
 80085e8:	e01b      	b.n	8008622 <__sflush_r+0xf2>
 80085ea:	690f      	ldr	r7, [r1, #16]
 80085ec:	2f00      	cmp	r7, #0
 80085ee:	d0f6      	beq.n	80085de <__sflush_r+0xae>
 80085f0:	0793      	lsls	r3, r2, #30
 80085f2:	680e      	ldr	r6, [r1, #0]
 80085f4:	bf08      	it	eq
 80085f6:	694b      	ldreq	r3, [r1, #20]
 80085f8:	600f      	str	r7, [r1, #0]
 80085fa:	bf18      	it	ne
 80085fc:	2300      	movne	r3, #0
 80085fe:	eba6 0807 	sub.w	r8, r6, r7
 8008602:	608b      	str	r3, [r1, #8]
 8008604:	f1b8 0f00 	cmp.w	r8, #0
 8008608:	dde9      	ble.n	80085de <__sflush_r+0xae>
 800860a:	6a21      	ldr	r1, [r4, #32]
 800860c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800860e:	4643      	mov	r3, r8
 8008610:	463a      	mov	r2, r7
 8008612:	4628      	mov	r0, r5
 8008614:	47b0      	blx	r6
 8008616:	2800      	cmp	r0, #0
 8008618:	dc08      	bgt.n	800862c <__sflush_r+0xfc>
 800861a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862c:	4407      	add	r7, r0
 800862e:	eba8 0800 	sub.w	r8, r8, r0
 8008632:	e7e7      	b.n	8008604 <__sflush_r+0xd4>
 8008634:	20400001 	.word	0x20400001

08008638 <_fflush_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	690b      	ldr	r3, [r1, #16]
 800863c:	4605      	mov	r5, r0
 800863e:	460c      	mov	r4, r1
 8008640:	b913      	cbnz	r3, 8008648 <_fflush_r+0x10>
 8008642:	2500      	movs	r5, #0
 8008644:	4628      	mov	r0, r5
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	b118      	cbz	r0, 8008652 <_fflush_r+0x1a>
 800864a:	6a03      	ldr	r3, [r0, #32]
 800864c:	b90b      	cbnz	r3, 8008652 <_fflush_r+0x1a>
 800864e:	f7fd fb2f 	bl	8005cb0 <__sinit>
 8008652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0f3      	beq.n	8008642 <_fflush_r+0xa>
 800865a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800865c:	07d0      	lsls	r0, r2, #31
 800865e:	d404      	bmi.n	800866a <_fflush_r+0x32>
 8008660:	0599      	lsls	r1, r3, #22
 8008662:	d402      	bmi.n	800866a <_fflush_r+0x32>
 8008664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008666:	f7fd fc3c 	bl	8005ee2 <__retarget_lock_acquire_recursive>
 800866a:	4628      	mov	r0, r5
 800866c:	4621      	mov	r1, r4
 800866e:	f7ff ff5f 	bl	8008530 <__sflush_r>
 8008672:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008674:	07da      	lsls	r2, r3, #31
 8008676:	4605      	mov	r5, r0
 8008678:	d4e4      	bmi.n	8008644 <_fflush_r+0xc>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	059b      	lsls	r3, r3, #22
 800867e:	d4e1      	bmi.n	8008644 <_fflush_r+0xc>
 8008680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008682:	f7fd fc2f 	bl	8005ee4 <__retarget_lock_release_recursive>
 8008686:	e7dd      	b.n	8008644 <_fflush_r+0xc>

08008688 <memmove>:
 8008688:	4288      	cmp	r0, r1
 800868a:	b510      	push	{r4, lr}
 800868c:	eb01 0402 	add.w	r4, r1, r2
 8008690:	d902      	bls.n	8008698 <memmove+0x10>
 8008692:	4284      	cmp	r4, r0
 8008694:	4623      	mov	r3, r4
 8008696:	d807      	bhi.n	80086a8 <memmove+0x20>
 8008698:	1e43      	subs	r3, r0, #1
 800869a:	42a1      	cmp	r1, r4
 800869c:	d008      	beq.n	80086b0 <memmove+0x28>
 800869e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086a6:	e7f8      	b.n	800869a <memmove+0x12>
 80086a8:	4402      	add	r2, r0
 80086aa:	4601      	mov	r1, r0
 80086ac:	428a      	cmp	r2, r1
 80086ae:	d100      	bne.n	80086b2 <memmove+0x2a>
 80086b0:	bd10      	pop	{r4, pc}
 80086b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ba:	e7f7      	b.n	80086ac <memmove+0x24>

080086bc <strncmp>:
 80086bc:	b510      	push	{r4, lr}
 80086be:	b16a      	cbz	r2, 80086dc <strncmp+0x20>
 80086c0:	3901      	subs	r1, #1
 80086c2:	1884      	adds	r4, r0, r2
 80086c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d103      	bne.n	80086d8 <strncmp+0x1c>
 80086d0:	42a0      	cmp	r0, r4
 80086d2:	d001      	beq.n	80086d8 <strncmp+0x1c>
 80086d4:	2a00      	cmp	r2, #0
 80086d6:	d1f5      	bne.n	80086c4 <strncmp+0x8>
 80086d8:	1ad0      	subs	r0, r2, r3
 80086da:	bd10      	pop	{r4, pc}
 80086dc:	4610      	mov	r0, r2
 80086de:	e7fc      	b.n	80086da <strncmp+0x1e>

080086e0 <_sbrk_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d06      	ldr	r5, [pc, #24]	@ (80086fc <_sbrk_r+0x1c>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f7f8 fd9e 	bl	800122c <_sbrk>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_sbrk_r+0x1a>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_sbrk_r+0x1a>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20000b3c 	.word	0x20000b3c

08008700 <memcpy>:
 8008700:	440a      	add	r2, r1
 8008702:	4291      	cmp	r1, r2
 8008704:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008708:	d100      	bne.n	800870c <memcpy+0xc>
 800870a:	4770      	bx	lr
 800870c:	b510      	push	{r4, lr}
 800870e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008716:	4291      	cmp	r1, r2
 8008718:	d1f9      	bne.n	800870e <memcpy+0xe>
 800871a:	bd10      	pop	{r4, pc}
 800871c:	0000      	movs	r0, r0
	...

08008720 <nan>:
 8008720:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008728 <nan+0x8>
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	00000000 	.word	0x00000000
 800872c:	7ff80000 	.word	0x7ff80000

08008730 <__assert_func>:
 8008730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008732:	4614      	mov	r4, r2
 8008734:	461a      	mov	r2, r3
 8008736:	4b09      	ldr	r3, [pc, #36]	@ (800875c <__assert_func+0x2c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4605      	mov	r5, r0
 800873c:	68d8      	ldr	r0, [r3, #12]
 800873e:	b14c      	cbz	r4, 8008754 <__assert_func+0x24>
 8008740:	4b07      	ldr	r3, [pc, #28]	@ (8008760 <__assert_func+0x30>)
 8008742:	9100      	str	r1, [sp, #0]
 8008744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008748:	4906      	ldr	r1, [pc, #24]	@ (8008764 <__assert_func+0x34>)
 800874a:	462b      	mov	r3, r5
 800874c:	f000 fba8 	bl	8008ea0 <fiprintf>
 8008750:	f000 fbb8 	bl	8008ec4 <abort>
 8008754:	4b04      	ldr	r3, [pc, #16]	@ (8008768 <__assert_func+0x38>)
 8008756:	461c      	mov	r4, r3
 8008758:	e7f3      	b.n	8008742 <__assert_func+0x12>
 800875a:	bf00      	nop
 800875c:	20000018 	.word	0x20000018
 8008760:	0800959a 	.word	0x0800959a
 8008764:	080095a7 	.word	0x080095a7
 8008768:	080095d5 	.word	0x080095d5

0800876c <_calloc_r>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	fba1 5402 	umull	r5, r4, r1, r2
 8008772:	b934      	cbnz	r4, 8008782 <_calloc_r+0x16>
 8008774:	4629      	mov	r1, r5
 8008776:	f7fe fa19 	bl	8006bac <_malloc_r>
 800877a:	4606      	mov	r6, r0
 800877c:	b928      	cbnz	r0, 800878a <_calloc_r+0x1e>
 800877e:	4630      	mov	r0, r6
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	220c      	movs	r2, #12
 8008784:	6002      	str	r2, [r0, #0]
 8008786:	2600      	movs	r6, #0
 8008788:	e7f9      	b.n	800877e <_calloc_r+0x12>
 800878a:	462a      	mov	r2, r5
 800878c:	4621      	mov	r1, r4
 800878e:	f7fd fb2a 	bl	8005de6 <memset>
 8008792:	e7f4      	b.n	800877e <_calloc_r+0x12>

08008794 <rshift>:
 8008794:	6903      	ldr	r3, [r0, #16]
 8008796:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800879a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800879e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087a2:	f100 0414 	add.w	r4, r0, #20
 80087a6:	dd45      	ble.n	8008834 <rshift+0xa0>
 80087a8:	f011 011f 	ands.w	r1, r1, #31
 80087ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087b4:	d10c      	bne.n	80087d0 <rshift+0x3c>
 80087b6:	f100 0710 	add.w	r7, r0, #16
 80087ba:	4629      	mov	r1, r5
 80087bc:	42b1      	cmp	r1, r6
 80087be:	d334      	bcc.n	800882a <rshift+0x96>
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	1eea      	subs	r2, r5, #3
 80087c6:	4296      	cmp	r6, r2
 80087c8:	bf38      	it	cc
 80087ca:	2300      	movcc	r3, #0
 80087cc:	4423      	add	r3, r4
 80087ce:	e015      	b.n	80087fc <rshift+0x68>
 80087d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087d4:	f1c1 0820 	rsb	r8, r1, #32
 80087d8:	40cf      	lsrs	r7, r1
 80087da:	f105 0e04 	add.w	lr, r5, #4
 80087de:	46a1      	mov	r9, r4
 80087e0:	4576      	cmp	r6, lr
 80087e2:	46f4      	mov	ip, lr
 80087e4:	d815      	bhi.n	8008812 <rshift+0x7e>
 80087e6:	1a9a      	subs	r2, r3, r2
 80087e8:	0092      	lsls	r2, r2, #2
 80087ea:	3a04      	subs	r2, #4
 80087ec:	3501      	adds	r5, #1
 80087ee:	42ae      	cmp	r6, r5
 80087f0:	bf38      	it	cc
 80087f2:	2200      	movcc	r2, #0
 80087f4:	18a3      	adds	r3, r4, r2
 80087f6:	50a7      	str	r7, [r4, r2]
 80087f8:	b107      	cbz	r7, 80087fc <rshift+0x68>
 80087fa:	3304      	adds	r3, #4
 80087fc:	1b1a      	subs	r2, r3, r4
 80087fe:	42a3      	cmp	r3, r4
 8008800:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008804:	bf08      	it	eq
 8008806:	2300      	moveq	r3, #0
 8008808:	6102      	str	r2, [r0, #16]
 800880a:	bf08      	it	eq
 800880c:	6143      	streq	r3, [r0, #20]
 800880e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008812:	f8dc c000 	ldr.w	ip, [ip]
 8008816:	fa0c fc08 	lsl.w	ip, ip, r8
 800881a:	ea4c 0707 	orr.w	r7, ip, r7
 800881e:	f849 7b04 	str.w	r7, [r9], #4
 8008822:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008826:	40cf      	lsrs	r7, r1
 8008828:	e7da      	b.n	80087e0 <rshift+0x4c>
 800882a:	f851 cb04 	ldr.w	ip, [r1], #4
 800882e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008832:	e7c3      	b.n	80087bc <rshift+0x28>
 8008834:	4623      	mov	r3, r4
 8008836:	e7e1      	b.n	80087fc <rshift+0x68>

08008838 <__hexdig_fun>:
 8008838:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800883c:	2b09      	cmp	r3, #9
 800883e:	d802      	bhi.n	8008846 <__hexdig_fun+0xe>
 8008840:	3820      	subs	r0, #32
 8008842:	b2c0      	uxtb	r0, r0
 8008844:	4770      	bx	lr
 8008846:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800884a:	2b05      	cmp	r3, #5
 800884c:	d801      	bhi.n	8008852 <__hexdig_fun+0x1a>
 800884e:	3847      	subs	r0, #71	@ 0x47
 8008850:	e7f7      	b.n	8008842 <__hexdig_fun+0xa>
 8008852:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008856:	2b05      	cmp	r3, #5
 8008858:	d801      	bhi.n	800885e <__hexdig_fun+0x26>
 800885a:	3827      	subs	r0, #39	@ 0x27
 800885c:	e7f1      	b.n	8008842 <__hexdig_fun+0xa>
 800885e:	2000      	movs	r0, #0
 8008860:	4770      	bx	lr
	...

08008864 <__gethex>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	b085      	sub	sp, #20
 800886a:	468a      	mov	sl, r1
 800886c:	9302      	str	r3, [sp, #8]
 800886e:	680b      	ldr	r3, [r1, #0]
 8008870:	9001      	str	r0, [sp, #4]
 8008872:	4690      	mov	r8, r2
 8008874:	1c9c      	adds	r4, r3, #2
 8008876:	46a1      	mov	r9, r4
 8008878:	f814 0b01 	ldrb.w	r0, [r4], #1
 800887c:	2830      	cmp	r0, #48	@ 0x30
 800887e:	d0fa      	beq.n	8008876 <__gethex+0x12>
 8008880:	eba9 0303 	sub.w	r3, r9, r3
 8008884:	f1a3 0b02 	sub.w	fp, r3, #2
 8008888:	f7ff ffd6 	bl	8008838 <__hexdig_fun>
 800888c:	4605      	mov	r5, r0
 800888e:	2800      	cmp	r0, #0
 8008890:	d168      	bne.n	8008964 <__gethex+0x100>
 8008892:	49a0      	ldr	r1, [pc, #640]	@ (8008b14 <__gethex+0x2b0>)
 8008894:	2201      	movs	r2, #1
 8008896:	4648      	mov	r0, r9
 8008898:	f7ff ff10 	bl	80086bc <strncmp>
 800889c:	4607      	mov	r7, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	d167      	bne.n	8008972 <__gethex+0x10e>
 80088a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80088a6:	4626      	mov	r6, r4
 80088a8:	f7ff ffc6 	bl	8008838 <__hexdig_fun>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d062      	beq.n	8008976 <__gethex+0x112>
 80088b0:	4623      	mov	r3, r4
 80088b2:	7818      	ldrb	r0, [r3, #0]
 80088b4:	2830      	cmp	r0, #48	@ 0x30
 80088b6:	4699      	mov	r9, r3
 80088b8:	f103 0301 	add.w	r3, r3, #1
 80088bc:	d0f9      	beq.n	80088b2 <__gethex+0x4e>
 80088be:	f7ff ffbb 	bl	8008838 <__hexdig_fun>
 80088c2:	fab0 f580 	clz	r5, r0
 80088c6:	096d      	lsrs	r5, r5, #5
 80088c8:	f04f 0b01 	mov.w	fp, #1
 80088cc:	464a      	mov	r2, r9
 80088ce:	4616      	mov	r6, r2
 80088d0:	3201      	adds	r2, #1
 80088d2:	7830      	ldrb	r0, [r6, #0]
 80088d4:	f7ff ffb0 	bl	8008838 <__hexdig_fun>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d1f8      	bne.n	80088ce <__gethex+0x6a>
 80088dc:	498d      	ldr	r1, [pc, #564]	@ (8008b14 <__gethex+0x2b0>)
 80088de:	2201      	movs	r2, #1
 80088e0:	4630      	mov	r0, r6
 80088e2:	f7ff feeb 	bl	80086bc <strncmp>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d13f      	bne.n	800896a <__gethex+0x106>
 80088ea:	b944      	cbnz	r4, 80088fe <__gethex+0x9a>
 80088ec:	1c74      	adds	r4, r6, #1
 80088ee:	4622      	mov	r2, r4
 80088f0:	4616      	mov	r6, r2
 80088f2:	3201      	adds	r2, #1
 80088f4:	7830      	ldrb	r0, [r6, #0]
 80088f6:	f7ff ff9f 	bl	8008838 <__hexdig_fun>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d1f8      	bne.n	80088f0 <__gethex+0x8c>
 80088fe:	1ba4      	subs	r4, r4, r6
 8008900:	00a7      	lsls	r7, r4, #2
 8008902:	7833      	ldrb	r3, [r6, #0]
 8008904:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008908:	2b50      	cmp	r3, #80	@ 0x50
 800890a:	d13e      	bne.n	800898a <__gethex+0x126>
 800890c:	7873      	ldrb	r3, [r6, #1]
 800890e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008910:	d033      	beq.n	800897a <__gethex+0x116>
 8008912:	2b2d      	cmp	r3, #45	@ 0x2d
 8008914:	d034      	beq.n	8008980 <__gethex+0x11c>
 8008916:	1c71      	adds	r1, r6, #1
 8008918:	2400      	movs	r4, #0
 800891a:	7808      	ldrb	r0, [r1, #0]
 800891c:	f7ff ff8c 	bl	8008838 <__hexdig_fun>
 8008920:	1e43      	subs	r3, r0, #1
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b18      	cmp	r3, #24
 8008926:	d830      	bhi.n	800898a <__gethex+0x126>
 8008928:	f1a0 0210 	sub.w	r2, r0, #16
 800892c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008930:	f7ff ff82 	bl	8008838 <__hexdig_fun>
 8008934:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008938:	fa5f fc8c 	uxtb.w	ip, ip
 800893c:	f1bc 0f18 	cmp.w	ip, #24
 8008940:	f04f 030a 	mov.w	r3, #10
 8008944:	d91e      	bls.n	8008984 <__gethex+0x120>
 8008946:	b104      	cbz	r4, 800894a <__gethex+0xe6>
 8008948:	4252      	negs	r2, r2
 800894a:	4417      	add	r7, r2
 800894c:	f8ca 1000 	str.w	r1, [sl]
 8008950:	b1ed      	cbz	r5, 800898e <__gethex+0x12a>
 8008952:	f1bb 0f00 	cmp.w	fp, #0
 8008956:	bf0c      	ite	eq
 8008958:	2506      	moveq	r5, #6
 800895a:	2500      	movne	r5, #0
 800895c:	4628      	mov	r0, r5
 800895e:	b005      	add	sp, #20
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	2500      	movs	r5, #0
 8008966:	462c      	mov	r4, r5
 8008968:	e7b0      	b.n	80088cc <__gethex+0x68>
 800896a:	2c00      	cmp	r4, #0
 800896c:	d1c7      	bne.n	80088fe <__gethex+0x9a>
 800896e:	4627      	mov	r7, r4
 8008970:	e7c7      	b.n	8008902 <__gethex+0x9e>
 8008972:	464e      	mov	r6, r9
 8008974:	462f      	mov	r7, r5
 8008976:	2501      	movs	r5, #1
 8008978:	e7c3      	b.n	8008902 <__gethex+0x9e>
 800897a:	2400      	movs	r4, #0
 800897c:	1cb1      	adds	r1, r6, #2
 800897e:	e7cc      	b.n	800891a <__gethex+0xb6>
 8008980:	2401      	movs	r4, #1
 8008982:	e7fb      	b.n	800897c <__gethex+0x118>
 8008984:	fb03 0002 	mla	r0, r3, r2, r0
 8008988:	e7ce      	b.n	8008928 <__gethex+0xc4>
 800898a:	4631      	mov	r1, r6
 800898c:	e7de      	b.n	800894c <__gethex+0xe8>
 800898e:	eba6 0309 	sub.w	r3, r6, r9
 8008992:	3b01      	subs	r3, #1
 8008994:	4629      	mov	r1, r5
 8008996:	2b07      	cmp	r3, #7
 8008998:	dc0a      	bgt.n	80089b0 <__gethex+0x14c>
 800899a:	9801      	ldr	r0, [sp, #4]
 800899c:	f7fe f992 	bl	8006cc4 <_Balloc>
 80089a0:	4604      	mov	r4, r0
 80089a2:	b940      	cbnz	r0, 80089b6 <__gethex+0x152>
 80089a4:	4b5c      	ldr	r3, [pc, #368]	@ (8008b18 <__gethex+0x2b4>)
 80089a6:	4602      	mov	r2, r0
 80089a8:	21e4      	movs	r1, #228	@ 0xe4
 80089aa:	485c      	ldr	r0, [pc, #368]	@ (8008b1c <__gethex+0x2b8>)
 80089ac:	f7ff fec0 	bl	8008730 <__assert_func>
 80089b0:	3101      	adds	r1, #1
 80089b2:	105b      	asrs	r3, r3, #1
 80089b4:	e7ef      	b.n	8008996 <__gethex+0x132>
 80089b6:	f100 0a14 	add.w	sl, r0, #20
 80089ba:	2300      	movs	r3, #0
 80089bc:	4655      	mov	r5, sl
 80089be:	469b      	mov	fp, r3
 80089c0:	45b1      	cmp	r9, r6
 80089c2:	d337      	bcc.n	8008a34 <__gethex+0x1d0>
 80089c4:	f845 bb04 	str.w	fp, [r5], #4
 80089c8:	eba5 050a 	sub.w	r5, r5, sl
 80089cc:	10ad      	asrs	r5, r5, #2
 80089ce:	6125      	str	r5, [r4, #16]
 80089d0:	4658      	mov	r0, fp
 80089d2:	f7fe fa69 	bl	8006ea8 <__hi0bits>
 80089d6:	016d      	lsls	r5, r5, #5
 80089d8:	f8d8 6000 	ldr.w	r6, [r8]
 80089dc:	1a2d      	subs	r5, r5, r0
 80089de:	42b5      	cmp	r5, r6
 80089e0:	dd54      	ble.n	8008a8c <__gethex+0x228>
 80089e2:	1bad      	subs	r5, r5, r6
 80089e4:	4629      	mov	r1, r5
 80089e6:	4620      	mov	r0, r4
 80089e8:	f7fe fdf2 	bl	80075d0 <__any_on>
 80089ec:	4681      	mov	r9, r0
 80089ee:	b178      	cbz	r0, 8008a10 <__gethex+0x1ac>
 80089f0:	1e6b      	subs	r3, r5, #1
 80089f2:	1159      	asrs	r1, r3, #5
 80089f4:	f003 021f 	and.w	r2, r3, #31
 80089f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80089fc:	f04f 0901 	mov.w	r9, #1
 8008a00:	fa09 f202 	lsl.w	r2, r9, r2
 8008a04:	420a      	tst	r2, r1
 8008a06:	d003      	beq.n	8008a10 <__gethex+0x1ac>
 8008a08:	454b      	cmp	r3, r9
 8008a0a:	dc36      	bgt.n	8008a7a <__gethex+0x216>
 8008a0c:	f04f 0902 	mov.w	r9, #2
 8008a10:	4629      	mov	r1, r5
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7ff febe 	bl	8008794 <rshift>
 8008a18:	442f      	add	r7, r5
 8008a1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	da42      	bge.n	8008aa8 <__gethex+0x244>
 8008a22:	9801      	ldr	r0, [sp, #4]
 8008a24:	4621      	mov	r1, r4
 8008a26:	f7fe f98d 	bl	8006d44 <_Bfree>
 8008a2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	25a3      	movs	r5, #163	@ 0xa3
 8008a32:	e793      	b.n	800895c <__gethex+0xf8>
 8008a34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008a38:	2a2e      	cmp	r2, #46	@ 0x2e
 8008a3a:	d012      	beq.n	8008a62 <__gethex+0x1fe>
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d104      	bne.n	8008a4a <__gethex+0x1e6>
 8008a40:	f845 bb04 	str.w	fp, [r5], #4
 8008a44:	f04f 0b00 	mov.w	fp, #0
 8008a48:	465b      	mov	r3, fp
 8008a4a:	7830      	ldrb	r0, [r6, #0]
 8008a4c:	9303      	str	r3, [sp, #12]
 8008a4e:	f7ff fef3 	bl	8008838 <__hexdig_fun>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	f000 000f 	and.w	r0, r0, #15
 8008a58:	4098      	lsls	r0, r3
 8008a5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a5e:	3304      	adds	r3, #4
 8008a60:	e7ae      	b.n	80089c0 <__gethex+0x15c>
 8008a62:	45b1      	cmp	r9, r6
 8008a64:	d8ea      	bhi.n	8008a3c <__gethex+0x1d8>
 8008a66:	492b      	ldr	r1, [pc, #172]	@ (8008b14 <__gethex+0x2b0>)
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff fe25 	bl	80086bc <strncmp>
 8008a72:	9b03      	ldr	r3, [sp, #12]
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d1e1      	bne.n	8008a3c <__gethex+0x1d8>
 8008a78:	e7a2      	b.n	80089c0 <__gethex+0x15c>
 8008a7a:	1ea9      	subs	r1, r5, #2
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7fe fda7 	bl	80075d0 <__any_on>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d0c2      	beq.n	8008a0c <__gethex+0x1a8>
 8008a86:	f04f 0903 	mov.w	r9, #3
 8008a8a:	e7c1      	b.n	8008a10 <__gethex+0x1ac>
 8008a8c:	da09      	bge.n	8008aa2 <__gethex+0x23e>
 8008a8e:	1b75      	subs	r5, r6, r5
 8008a90:	4621      	mov	r1, r4
 8008a92:	9801      	ldr	r0, [sp, #4]
 8008a94:	462a      	mov	r2, r5
 8008a96:	f7fe fb65 	bl	8007164 <__lshift>
 8008a9a:	1b7f      	subs	r7, r7, r5
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	f100 0a14 	add.w	sl, r0, #20
 8008aa2:	f04f 0900 	mov.w	r9, #0
 8008aa6:	e7b8      	b.n	8008a1a <__gethex+0x1b6>
 8008aa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008aac:	42bd      	cmp	r5, r7
 8008aae:	dd6f      	ble.n	8008b90 <__gethex+0x32c>
 8008ab0:	1bed      	subs	r5, r5, r7
 8008ab2:	42ae      	cmp	r6, r5
 8008ab4:	dc34      	bgt.n	8008b20 <__gethex+0x2bc>
 8008ab6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d022      	beq.n	8008b04 <__gethex+0x2a0>
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d024      	beq.n	8008b0c <__gethex+0x2a8>
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d115      	bne.n	8008af2 <__gethex+0x28e>
 8008ac6:	42ae      	cmp	r6, r5
 8008ac8:	d113      	bne.n	8008af2 <__gethex+0x28e>
 8008aca:	2e01      	cmp	r6, #1
 8008acc:	d10b      	bne.n	8008ae6 <__gethex+0x282>
 8008ace:	9a02      	ldr	r2, [sp, #8]
 8008ad0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	6123      	str	r3, [r4, #16]
 8008ada:	f8ca 3000 	str.w	r3, [sl]
 8008ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ae0:	2562      	movs	r5, #98	@ 0x62
 8008ae2:	601c      	str	r4, [r3, #0]
 8008ae4:	e73a      	b.n	800895c <__gethex+0xf8>
 8008ae6:	1e71      	subs	r1, r6, #1
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f7fe fd71 	bl	80075d0 <__any_on>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d1ed      	bne.n	8008ace <__gethex+0x26a>
 8008af2:	9801      	ldr	r0, [sp, #4]
 8008af4:	4621      	mov	r1, r4
 8008af6:	f7fe f925 	bl	8006d44 <_Bfree>
 8008afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008afc:	2300      	movs	r3, #0
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	2550      	movs	r5, #80	@ 0x50
 8008b02:	e72b      	b.n	800895c <__gethex+0xf8>
 8008b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1f3      	bne.n	8008af2 <__gethex+0x28e>
 8008b0a:	e7e0      	b.n	8008ace <__gethex+0x26a>
 8008b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1dd      	bne.n	8008ace <__gethex+0x26a>
 8008b12:	e7ee      	b.n	8008af2 <__gethex+0x28e>
 8008b14:	0800957f 	.word	0x0800957f
 8008b18:	08009515 	.word	0x08009515
 8008b1c:	080095d6 	.word	0x080095d6
 8008b20:	1e6f      	subs	r7, r5, #1
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	d130      	bne.n	8008b8a <__gethex+0x326>
 8008b28:	b127      	cbz	r7, 8008b34 <__gethex+0x2d0>
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7fe fd4f 	bl	80075d0 <__any_on>
 8008b32:	4681      	mov	r9, r0
 8008b34:	117a      	asrs	r2, r7, #5
 8008b36:	2301      	movs	r3, #1
 8008b38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008b3c:	f007 071f 	and.w	r7, r7, #31
 8008b40:	40bb      	lsls	r3, r7
 8008b42:	4213      	tst	r3, r2
 8008b44:	4629      	mov	r1, r5
 8008b46:	4620      	mov	r0, r4
 8008b48:	bf18      	it	ne
 8008b4a:	f049 0902 	orrne.w	r9, r9, #2
 8008b4e:	f7ff fe21 	bl	8008794 <rshift>
 8008b52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008b56:	1b76      	subs	r6, r6, r5
 8008b58:	2502      	movs	r5, #2
 8008b5a:	f1b9 0f00 	cmp.w	r9, #0
 8008b5e:	d047      	beq.n	8008bf0 <__gethex+0x38c>
 8008b60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d015      	beq.n	8008b94 <__gethex+0x330>
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d017      	beq.n	8008b9c <__gethex+0x338>
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d109      	bne.n	8008b84 <__gethex+0x320>
 8008b70:	f019 0f02 	tst.w	r9, #2
 8008b74:	d006      	beq.n	8008b84 <__gethex+0x320>
 8008b76:	f8da 3000 	ldr.w	r3, [sl]
 8008b7a:	ea49 0903 	orr.w	r9, r9, r3
 8008b7e:	f019 0f01 	tst.w	r9, #1
 8008b82:	d10e      	bne.n	8008ba2 <__gethex+0x33e>
 8008b84:	f045 0510 	orr.w	r5, r5, #16
 8008b88:	e032      	b.n	8008bf0 <__gethex+0x38c>
 8008b8a:	f04f 0901 	mov.w	r9, #1
 8008b8e:	e7d1      	b.n	8008b34 <__gethex+0x2d0>
 8008b90:	2501      	movs	r5, #1
 8008b92:	e7e2      	b.n	8008b5a <__gethex+0x2f6>
 8008b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b96:	f1c3 0301 	rsb	r3, r3, #1
 8008b9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0f0      	beq.n	8008b84 <__gethex+0x320>
 8008ba2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ba6:	f104 0314 	add.w	r3, r4, #20
 8008baa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008bae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008bb2:	f04f 0c00 	mov.w	ip, #0
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bbc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008bc0:	d01b      	beq.n	8008bfa <__gethex+0x396>
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	6002      	str	r2, [r0, #0]
 8008bc6:	2d02      	cmp	r5, #2
 8008bc8:	f104 0314 	add.w	r3, r4, #20
 8008bcc:	d13c      	bne.n	8008c48 <__gethex+0x3e4>
 8008bce:	f8d8 2000 	ldr.w	r2, [r8]
 8008bd2:	3a01      	subs	r2, #1
 8008bd4:	42b2      	cmp	r2, r6
 8008bd6:	d109      	bne.n	8008bec <__gethex+0x388>
 8008bd8:	1171      	asrs	r1, r6, #5
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008be0:	f006 061f 	and.w	r6, r6, #31
 8008be4:	fa02 f606 	lsl.w	r6, r2, r6
 8008be8:	421e      	tst	r6, r3
 8008bea:	d13a      	bne.n	8008c62 <__gethex+0x3fe>
 8008bec:	f045 0520 	orr.w	r5, r5, #32
 8008bf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bf2:	601c      	str	r4, [r3, #0]
 8008bf4:	9b02      	ldr	r3, [sp, #8]
 8008bf6:	601f      	str	r7, [r3, #0]
 8008bf8:	e6b0      	b.n	800895c <__gethex+0xf8>
 8008bfa:	4299      	cmp	r1, r3
 8008bfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c00:	d8d9      	bhi.n	8008bb6 <__gethex+0x352>
 8008c02:	68a3      	ldr	r3, [r4, #8]
 8008c04:	459b      	cmp	fp, r3
 8008c06:	db17      	blt.n	8008c38 <__gethex+0x3d4>
 8008c08:	6861      	ldr	r1, [r4, #4]
 8008c0a:	9801      	ldr	r0, [sp, #4]
 8008c0c:	3101      	adds	r1, #1
 8008c0e:	f7fe f859 	bl	8006cc4 <_Balloc>
 8008c12:	4681      	mov	r9, r0
 8008c14:	b918      	cbnz	r0, 8008c1e <__gethex+0x3ba>
 8008c16:	4b1a      	ldr	r3, [pc, #104]	@ (8008c80 <__gethex+0x41c>)
 8008c18:	4602      	mov	r2, r0
 8008c1a:	2184      	movs	r1, #132	@ 0x84
 8008c1c:	e6c5      	b.n	80089aa <__gethex+0x146>
 8008c1e:	6922      	ldr	r2, [r4, #16]
 8008c20:	3202      	adds	r2, #2
 8008c22:	f104 010c 	add.w	r1, r4, #12
 8008c26:	0092      	lsls	r2, r2, #2
 8008c28:	300c      	adds	r0, #12
 8008c2a:	f7ff fd69 	bl	8008700 <memcpy>
 8008c2e:	4621      	mov	r1, r4
 8008c30:	9801      	ldr	r0, [sp, #4]
 8008c32:	f7fe f887 	bl	8006d44 <_Bfree>
 8008c36:	464c      	mov	r4, r9
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c40:	6122      	str	r2, [r4, #16]
 8008c42:	2201      	movs	r2, #1
 8008c44:	615a      	str	r2, [r3, #20]
 8008c46:	e7be      	b.n	8008bc6 <__gethex+0x362>
 8008c48:	6922      	ldr	r2, [r4, #16]
 8008c4a:	455a      	cmp	r2, fp
 8008c4c:	dd0b      	ble.n	8008c66 <__gethex+0x402>
 8008c4e:	2101      	movs	r1, #1
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7ff fd9f 	bl	8008794 <rshift>
 8008c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c5a:	3701      	adds	r7, #1
 8008c5c:	42bb      	cmp	r3, r7
 8008c5e:	f6ff aee0 	blt.w	8008a22 <__gethex+0x1be>
 8008c62:	2501      	movs	r5, #1
 8008c64:	e7c2      	b.n	8008bec <__gethex+0x388>
 8008c66:	f016 061f 	ands.w	r6, r6, #31
 8008c6a:	d0fa      	beq.n	8008c62 <__gethex+0x3fe>
 8008c6c:	4453      	add	r3, sl
 8008c6e:	f1c6 0620 	rsb	r6, r6, #32
 8008c72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c76:	f7fe f917 	bl	8006ea8 <__hi0bits>
 8008c7a:	42b0      	cmp	r0, r6
 8008c7c:	dbe7      	blt.n	8008c4e <__gethex+0x3ea>
 8008c7e:	e7f0      	b.n	8008c62 <__gethex+0x3fe>
 8008c80:	08009515 	.word	0x08009515

08008c84 <L_shift>:
 8008c84:	f1c2 0208 	rsb	r2, r2, #8
 8008c88:	0092      	lsls	r2, r2, #2
 8008c8a:	b570      	push	{r4, r5, r6, lr}
 8008c8c:	f1c2 0620 	rsb	r6, r2, #32
 8008c90:	6843      	ldr	r3, [r0, #4]
 8008c92:	6804      	ldr	r4, [r0, #0]
 8008c94:	fa03 f506 	lsl.w	r5, r3, r6
 8008c98:	432c      	orrs	r4, r5
 8008c9a:	40d3      	lsrs	r3, r2
 8008c9c:	6004      	str	r4, [r0, #0]
 8008c9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ca2:	4288      	cmp	r0, r1
 8008ca4:	d3f4      	bcc.n	8008c90 <L_shift+0xc>
 8008ca6:	bd70      	pop	{r4, r5, r6, pc}

08008ca8 <__match>:
 8008ca8:	b530      	push	{r4, r5, lr}
 8008caa:	6803      	ldr	r3, [r0, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cb2:	b914      	cbnz	r4, 8008cba <__match+0x12>
 8008cb4:	6003      	str	r3, [r0, #0]
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	bd30      	pop	{r4, r5, pc}
 8008cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008cc2:	2d19      	cmp	r5, #25
 8008cc4:	bf98      	it	ls
 8008cc6:	3220      	addls	r2, #32
 8008cc8:	42a2      	cmp	r2, r4
 8008cca:	d0f0      	beq.n	8008cae <__match+0x6>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e7f3      	b.n	8008cb8 <__match+0x10>

08008cd0 <__hexnan>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	680b      	ldr	r3, [r1, #0]
 8008cd6:	6801      	ldr	r1, [r0, #0]
 8008cd8:	115e      	asrs	r6, r3, #5
 8008cda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cde:	f013 031f 	ands.w	r3, r3, #31
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	bf18      	it	ne
 8008ce6:	3604      	addne	r6, #4
 8008ce8:	2500      	movs	r5, #0
 8008cea:	1f37      	subs	r7, r6, #4
 8008cec:	4682      	mov	sl, r0
 8008cee:	4690      	mov	r8, r2
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cf6:	46b9      	mov	r9, r7
 8008cf8:	463c      	mov	r4, r7
 8008cfa:	9502      	str	r5, [sp, #8]
 8008cfc:	46ab      	mov	fp, r5
 8008cfe:	784a      	ldrb	r2, [r1, #1]
 8008d00:	1c4b      	adds	r3, r1, #1
 8008d02:	9303      	str	r3, [sp, #12]
 8008d04:	b342      	cbz	r2, 8008d58 <__hexnan+0x88>
 8008d06:	4610      	mov	r0, r2
 8008d08:	9105      	str	r1, [sp, #20]
 8008d0a:	9204      	str	r2, [sp, #16]
 8008d0c:	f7ff fd94 	bl	8008838 <__hexdig_fun>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d151      	bne.n	8008db8 <__hexnan+0xe8>
 8008d14:	9a04      	ldr	r2, [sp, #16]
 8008d16:	9905      	ldr	r1, [sp, #20]
 8008d18:	2a20      	cmp	r2, #32
 8008d1a:	d818      	bhi.n	8008d4e <__hexnan+0x7e>
 8008d1c:	9b02      	ldr	r3, [sp, #8]
 8008d1e:	459b      	cmp	fp, r3
 8008d20:	dd13      	ble.n	8008d4a <__hexnan+0x7a>
 8008d22:	454c      	cmp	r4, r9
 8008d24:	d206      	bcs.n	8008d34 <__hexnan+0x64>
 8008d26:	2d07      	cmp	r5, #7
 8008d28:	dc04      	bgt.n	8008d34 <__hexnan+0x64>
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff ffa8 	bl	8008c84 <L_shift>
 8008d34:	4544      	cmp	r4, r8
 8008d36:	d952      	bls.n	8008dde <__hexnan+0x10e>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f1a4 0904 	sub.w	r9, r4, #4
 8008d3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d42:	f8cd b008 	str.w	fp, [sp, #8]
 8008d46:	464c      	mov	r4, r9
 8008d48:	461d      	mov	r5, r3
 8008d4a:	9903      	ldr	r1, [sp, #12]
 8008d4c:	e7d7      	b.n	8008cfe <__hexnan+0x2e>
 8008d4e:	2a29      	cmp	r2, #41	@ 0x29
 8008d50:	d157      	bne.n	8008e02 <__hexnan+0x132>
 8008d52:	3102      	adds	r1, #2
 8008d54:	f8ca 1000 	str.w	r1, [sl]
 8008d58:	f1bb 0f00 	cmp.w	fp, #0
 8008d5c:	d051      	beq.n	8008e02 <__hexnan+0x132>
 8008d5e:	454c      	cmp	r4, r9
 8008d60:	d206      	bcs.n	8008d70 <__hexnan+0xa0>
 8008d62:	2d07      	cmp	r5, #7
 8008d64:	dc04      	bgt.n	8008d70 <__hexnan+0xa0>
 8008d66:	462a      	mov	r2, r5
 8008d68:	4649      	mov	r1, r9
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f7ff ff8a 	bl	8008c84 <L_shift>
 8008d70:	4544      	cmp	r4, r8
 8008d72:	d936      	bls.n	8008de2 <__hexnan+0x112>
 8008d74:	f1a8 0204 	sub.w	r2, r8, #4
 8008d78:	4623      	mov	r3, r4
 8008d7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d82:	429f      	cmp	r7, r3
 8008d84:	d2f9      	bcs.n	8008d7a <__hexnan+0xaa>
 8008d86:	1b3b      	subs	r3, r7, r4
 8008d88:	f023 0303 	bic.w	r3, r3, #3
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	3401      	adds	r4, #1
 8008d90:	3e03      	subs	r6, #3
 8008d92:	42b4      	cmp	r4, r6
 8008d94:	bf88      	it	hi
 8008d96:	2304      	movhi	r3, #4
 8008d98:	4443      	add	r3, r8
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f843 2b04 	str.w	r2, [r3], #4
 8008da0:	429f      	cmp	r7, r3
 8008da2:	d2fb      	bcs.n	8008d9c <__hexnan+0xcc>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	b91b      	cbnz	r3, 8008db0 <__hexnan+0xe0>
 8008da8:	4547      	cmp	r7, r8
 8008daa:	d128      	bne.n	8008dfe <__hexnan+0x12e>
 8008dac:	2301      	movs	r3, #1
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	2005      	movs	r0, #5
 8008db2:	b007      	add	sp, #28
 8008db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db8:	3501      	adds	r5, #1
 8008dba:	2d08      	cmp	r5, #8
 8008dbc:	f10b 0b01 	add.w	fp, fp, #1
 8008dc0:	dd06      	ble.n	8008dd0 <__hexnan+0x100>
 8008dc2:	4544      	cmp	r4, r8
 8008dc4:	d9c1      	bls.n	8008d4a <__hexnan+0x7a>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dcc:	2501      	movs	r5, #1
 8008dce:	3c04      	subs	r4, #4
 8008dd0:	6822      	ldr	r2, [r4, #0]
 8008dd2:	f000 000f 	and.w	r0, r0, #15
 8008dd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008dda:	6020      	str	r0, [r4, #0]
 8008ddc:	e7b5      	b.n	8008d4a <__hexnan+0x7a>
 8008dde:	2508      	movs	r5, #8
 8008de0:	e7b3      	b.n	8008d4a <__hexnan+0x7a>
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0dd      	beq.n	8008da4 <__hexnan+0xd4>
 8008de8:	f1c3 0320 	rsb	r3, r3, #32
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008df0:	40da      	lsrs	r2, r3
 8008df2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008df6:	4013      	ands	r3, r2
 8008df8:	f846 3c04 	str.w	r3, [r6, #-4]
 8008dfc:	e7d2      	b.n	8008da4 <__hexnan+0xd4>
 8008dfe:	3f04      	subs	r7, #4
 8008e00:	e7d0      	b.n	8008da4 <__hexnan+0xd4>
 8008e02:	2004      	movs	r0, #4
 8008e04:	e7d5      	b.n	8008db2 <__hexnan+0xe2>

08008e06 <__ascii_mbtowc>:
 8008e06:	b082      	sub	sp, #8
 8008e08:	b901      	cbnz	r1, 8008e0c <__ascii_mbtowc+0x6>
 8008e0a:	a901      	add	r1, sp, #4
 8008e0c:	b142      	cbz	r2, 8008e20 <__ascii_mbtowc+0x1a>
 8008e0e:	b14b      	cbz	r3, 8008e24 <__ascii_mbtowc+0x1e>
 8008e10:	7813      	ldrb	r3, [r2, #0]
 8008e12:	600b      	str	r3, [r1, #0]
 8008e14:	7812      	ldrb	r2, [r2, #0]
 8008e16:	1e10      	subs	r0, r2, #0
 8008e18:	bf18      	it	ne
 8008e1a:	2001      	movne	r0, #1
 8008e1c:	b002      	add	sp, #8
 8008e1e:	4770      	bx	lr
 8008e20:	4610      	mov	r0, r2
 8008e22:	e7fb      	b.n	8008e1c <__ascii_mbtowc+0x16>
 8008e24:	f06f 0001 	mvn.w	r0, #1
 8008e28:	e7f8      	b.n	8008e1c <__ascii_mbtowc+0x16>

08008e2a <_realloc_r>:
 8008e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2e:	4607      	mov	r7, r0
 8008e30:	4614      	mov	r4, r2
 8008e32:	460d      	mov	r5, r1
 8008e34:	b921      	cbnz	r1, 8008e40 <_realloc_r+0x16>
 8008e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	f7fd beb6 	b.w	8006bac <_malloc_r>
 8008e40:	b92a      	cbnz	r2, 8008e4e <_realloc_r+0x24>
 8008e42:	f7fd fe3f 	bl	8006ac4 <_free_r>
 8008e46:	4625      	mov	r5, r4
 8008e48:	4628      	mov	r0, r5
 8008e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e4e:	f000 f840 	bl	8008ed2 <_malloc_usable_size_r>
 8008e52:	4284      	cmp	r4, r0
 8008e54:	4606      	mov	r6, r0
 8008e56:	d802      	bhi.n	8008e5e <_realloc_r+0x34>
 8008e58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e5c:	d8f4      	bhi.n	8008e48 <_realloc_r+0x1e>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4638      	mov	r0, r7
 8008e62:	f7fd fea3 	bl	8006bac <_malloc_r>
 8008e66:	4680      	mov	r8, r0
 8008e68:	b908      	cbnz	r0, 8008e6e <_realloc_r+0x44>
 8008e6a:	4645      	mov	r5, r8
 8008e6c:	e7ec      	b.n	8008e48 <_realloc_r+0x1e>
 8008e6e:	42b4      	cmp	r4, r6
 8008e70:	4622      	mov	r2, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	bf28      	it	cs
 8008e76:	4632      	movcs	r2, r6
 8008e78:	f7ff fc42 	bl	8008700 <memcpy>
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4638      	mov	r0, r7
 8008e80:	f7fd fe20 	bl	8006ac4 <_free_r>
 8008e84:	e7f1      	b.n	8008e6a <_realloc_r+0x40>

08008e86 <__ascii_wctomb>:
 8008e86:	4603      	mov	r3, r0
 8008e88:	4608      	mov	r0, r1
 8008e8a:	b141      	cbz	r1, 8008e9e <__ascii_wctomb+0x18>
 8008e8c:	2aff      	cmp	r2, #255	@ 0xff
 8008e8e:	d904      	bls.n	8008e9a <__ascii_wctomb+0x14>
 8008e90:	228a      	movs	r2, #138	@ 0x8a
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e98:	4770      	bx	lr
 8008e9a:	700a      	strb	r2, [r1, #0]
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	4770      	bx	lr

08008ea0 <fiprintf>:
 8008ea0:	b40e      	push	{r1, r2, r3}
 8008ea2:	b503      	push	{r0, r1, lr}
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	4805      	ldr	r0, [pc, #20]	@ (8008ec0 <fiprintf+0x20>)
 8008eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eae:	6800      	ldr	r0, [r0, #0]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	f000 f83f 	bl	8008f34 <_vfiprintf_r>
 8008eb6:	b002      	add	sp, #8
 8008eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	4770      	bx	lr
 8008ec0:	20000018 	.word	0x20000018

08008ec4 <abort>:
 8008ec4:	b508      	push	{r3, lr}
 8008ec6:	2006      	movs	r0, #6
 8008ec8:	f000 fa08 	bl	80092dc <raise>
 8008ecc:	2001      	movs	r0, #1
 8008ece:	f7f8 f934 	bl	800113a <_exit>

08008ed2 <_malloc_usable_size_r>:
 8008ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed6:	1f18      	subs	r0, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bfbc      	itt	lt
 8008edc:	580b      	ldrlt	r3, [r1, r0]
 8008ede:	18c0      	addlt	r0, r0, r3
 8008ee0:	4770      	bx	lr

08008ee2 <__sfputc_r>:
 8008ee2:	6893      	ldr	r3, [r2, #8]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	b410      	push	{r4}
 8008eea:	6093      	str	r3, [r2, #8]
 8008eec:	da08      	bge.n	8008f00 <__sfputc_r+0x1e>
 8008eee:	6994      	ldr	r4, [r2, #24]
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	db01      	blt.n	8008ef8 <__sfputc_r+0x16>
 8008ef4:	290a      	cmp	r1, #10
 8008ef6:	d103      	bne.n	8008f00 <__sfputc_r+0x1e>
 8008ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008efc:	f000 b932 	b.w	8009164 <__swbuf_r>
 8008f00:	6813      	ldr	r3, [r2, #0]
 8008f02:	1c58      	adds	r0, r3, #1
 8008f04:	6010      	str	r0, [r2, #0]
 8008f06:	7019      	strb	r1, [r3, #0]
 8008f08:	4608      	mov	r0, r1
 8008f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <__sfputs_r>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	4606      	mov	r6, r0
 8008f14:	460f      	mov	r7, r1
 8008f16:	4614      	mov	r4, r2
 8008f18:	18d5      	adds	r5, r2, r3
 8008f1a:	42ac      	cmp	r4, r5
 8008f1c:	d101      	bne.n	8008f22 <__sfputs_r+0x12>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e007      	b.n	8008f32 <__sfputs_r+0x22>
 8008f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f26:	463a      	mov	r2, r7
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7ff ffda 	bl	8008ee2 <__sfputc_r>
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	d1f3      	bne.n	8008f1a <__sfputs_r+0xa>
 8008f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f34 <_vfiprintf_r>:
 8008f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f38:	460d      	mov	r5, r1
 8008f3a:	b09d      	sub	sp, #116	@ 0x74
 8008f3c:	4614      	mov	r4, r2
 8008f3e:	4698      	mov	r8, r3
 8008f40:	4606      	mov	r6, r0
 8008f42:	b118      	cbz	r0, 8008f4c <_vfiprintf_r+0x18>
 8008f44:	6a03      	ldr	r3, [r0, #32]
 8008f46:	b90b      	cbnz	r3, 8008f4c <_vfiprintf_r+0x18>
 8008f48:	f7fc feb2 	bl	8005cb0 <__sinit>
 8008f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f4e:	07d9      	lsls	r1, r3, #31
 8008f50:	d405      	bmi.n	8008f5e <_vfiprintf_r+0x2a>
 8008f52:	89ab      	ldrh	r3, [r5, #12]
 8008f54:	059a      	lsls	r2, r3, #22
 8008f56:	d402      	bmi.n	8008f5e <_vfiprintf_r+0x2a>
 8008f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f5a:	f7fc ffc2 	bl	8005ee2 <__retarget_lock_acquire_recursive>
 8008f5e:	89ab      	ldrh	r3, [r5, #12]
 8008f60:	071b      	lsls	r3, r3, #28
 8008f62:	d501      	bpl.n	8008f68 <_vfiprintf_r+0x34>
 8008f64:	692b      	ldr	r3, [r5, #16]
 8008f66:	b99b      	cbnz	r3, 8008f90 <_vfiprintf_r+0x5c>
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f000 f938 	bl	80091e0 <__swsetup_r>
 8008f70:	b170      	cbz	r0, 8008f90 <_vfiprintf_r+0x5c>
 8008f72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f74:	07dc      	lsls	r4, r3, #31
 8008f76:	d504      	bpl.n	8008f82 <_vfiprintf_r+0x4e>
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f7c:	b01d      	add	sp, #116	@ 0x74
 8008f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	0598      	lsls	r0, r3, #22
 8008f86:	d4f7      	bmi.n	8008f78 <_vfiprintf_r+0x44>
 8008f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f8a:	f7fc ffab 	bl	8005ee4 <__retarget_lock_release_recursive>
 8008f8e:	e7f3      	b.n	8008f78 <_vfiprintf_r+0x44>
 8008f90:	2300      	movs	r3, #0
 8008f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f94:	2320      	movs	r3, #32
 8008f96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f9e:	2330      	movs	r3, #48	@ 0x30
 8008fa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009150 <_vfiprintf_r+0x21c>
 8008fa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fa8:	f04f 0901 	mov.w	r9, #1
 8008fac:	4623      	mov	r3, r4
 8008fae:	469a      	mov	sl, r3
 8008fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb4:	b10a      	cbz	r2, 8008fba <_vfiprintf_r+0x86>
 8008fb6:	2a25      	cmp	r2, #37	@ 0x25
 8008fb8:	d1f9      	bne.n	8008fae <_vfiprintf_r+0x7a>
 8008fba:	ebba 0b04 	subs.w	fp, sl, r4
 8008fbe:	d00b      	beq.n	8008fd8 <_vfiprintf_r+0xa4>
 8008fc0:	465b      	mov	r3, fp
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f7ff ffa2 	bl	8008f10 <__sfputs_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f000 80a7 	beq.w	8009120 <_vfiprintf_r+0x1ec>
 8008fd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fd4:	445a      	add	r2, fp
 8008fd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 809f 	beq.w	8009120 <_vfiprintf_r+0x1ec>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fec:	f10a 0a01 	add.w	sl, sl, #1
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	9307      	str	r3, [sp, #28]
 8008ff4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ff8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ffa:	4654      	mov	r4, sl
 8008ffc:	2205      	movs	r2, #5
 8008ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009002:	4853      	ldr	r0, [pc, #332]	@ (8009150 <_vfiprintf_r+0x21c>)
 8009004:	f7f7 f91c 	bl	8000240 <memchr>
 8009008:	9a04      	ldr	r2, [sp, #16]
 800900a:	b9d8      	cbnz	r0, 8009044 <_vfiprintf_r+0x110>
 800900c:	06d1      	lsls	r1, r2, #27
 800900e:	bf44      	itt	mi
 8009010:	2320      	movmi	r3, #32
 8009012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009016:	0713      	lsls	r3, r2, #28
 8009018:	bf44      	itt	mi
 800901a:	232b      	movmi	r3, #43	@ 0x2b
 800901c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009020:	f89a 3000 	ldrb.w	r3, [sl]
 8009024:	2b2a      	cmp	r3, #42	@ 0x2a
 8009026:	d015      	beq.n	8009054 <_vfiprintf_r+0x120>
 8009028:	9a07      	ldr	r2, [sp, #28]
 800902a:	4654      	mov	r4, sl
 800902c:	2000      	movs	r0, #0
 800902e:	f04f 0c0a 	mov.w	ip, #10
 8009032:	4621      	mov	r1, r4
 8009034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009038:	3b30      	subs	r3, #48	@ 0x30
 800903a:	2b09      	cmp	r3, #9
 800903c:	d94b      	bls.n	80090d6 <_vfiprintf_r+0x1a2>
 800903e:	b1b0      	cbz	r0, 800906e <_vfiprintf_r+0x13a>
 8009040:	9207      	str	r2, [sp, #28]
 8009042:	e014      	b.n	800906e <_vfiprintf_r+0x13a>
 8009044:	eba0 0308 	sub.w	r3, r0, r8
 8009048:	fa09 f303 	lsl.w	r3, r9, r3
 800904c:	4313      	orrs	r3, r2
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	46a2      	mov	sl, r4
 8009052:	e7d2      	b.n	8008ffa <_vfiprintf_r+0xc6>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	1d19      	adds	r1, r3, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	9103      	str	r1, [sp, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	bfbb      	ittet	lt
 8009060:	425b      	neglt	r3, r3
 8009062:	f042 0202 	orrlt.w	r2, r2, #2
 8009066:	9307      	strge	r3, [sp, #28]
 8009068:	9307      	strlt	r3, [sp, #28]
 800906a:	bfb8      	it	lt
 800906c:	9204      	strlt	r2, [sp, #16]
 800906e:	7823      	ldrb	r3, [r4, #0]
 8009070:	2b2e      	cmp	r3, #46	@ 0x2e
 8009072:	d10a      	bne.n	800908a <_vfiprintf_r+0x156>
 8009074:	7863      	ldrb	r3, [r4, #1]
 8009076:	2b2a      	cmp	r3, #42	@ 0x2a
 8009078:	d132      	bne.n	80090e0 <_vfiprintf_r+0x1ac>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	1d1a      	adds	r2, r3, #4
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	9203      	str	r2, [sp, #12]
 8009082:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009086:	3402      	adds	r4, #2
 8009088:	9305      	str	r3, [sp, #20]
 800908a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009160 <_vfiprintf_r+0x22c>
 800908e:	7821      	ldrb	r1, [r4, #0]
 8009090:	2203      	movs	r2, #3
 8009092:	4650      	mov	r0, sl
 8009094:	f7f7 f8d4 	bl	8000240 <memchr>
 8009098:	b138      	cbz	r0, 80090aa <_vfiprintf_r+0x176>
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	eba0 000a 	sub.w	r0, r0, sl
 80090a0:	2240      	movs	r2, #64	@ 0x40
 80090a2:	4082      	lsls	r2, r0
 80090a4:	4313      	orrs	r3, r2
 80090a6:	3401      	adds	r4, #1
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ae:	4829      	ldr	r0, [pc, #164]	@ (8009154 <_vfiprintf_r+0x220>)
 80090b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090b4:	2206      	movs	r2, #6
 80090b6:	f7f7 f8c3 	bl	8000240 <memchr>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d03f      	beq.n	800913e <_vfiprintf_r+0x20a>
 80090be:	4b26      	ldr	r3, [pc, #152]	@ (8009158 <_vfiprintf_r+0x224>)
 80090c0:	bb1b      	cbnz	r3, 800910a <_vfiprintf_r+0x1d6>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	3307      	adds	r3, #7
 80090c6:	f023 0307 	bic.w	r3, r3, #7
 80090ca:	3308      	adds	r3, #8
 80090cc:	9303      	str	r3, [sp, #12]
 80090ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d0:	443b      	add	r3, r7
 80090d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090d4:	e76a      	b.n	8008fac <_vfiprintf_r+0x78>
 80090d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090da:	460c      	mov	r4, r1
 80090dc:	2001      	movs	r0, #1
 80090de:	e7a8      	b.n	8009032 <_vfiprintf_r+0xfe>
 80090e0:	2300      	movs	r3, #0
 80090e2:	3401      	adds	r4, #1
 80090e4:	9305      	str	r3, [sp, #20]
 80090e6:	4619      	mov	r1, r3
 80090e8:	f04f 0c0a 	mov.w	ip, #10
 80090ec:	4620      	mov	r0, r4
 80090ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f2:	3a30      	subs	r2, #48	@ 0x30
 80090f4:	2a09      	cmp	r2, #9
 80090f6:	d903      	bls.n	8009100 <_vfiprintf_r+0x1cc>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0c6      	beq.n	800908a <_vfiprintf_r+0x156>
 80090fc:	9105      	str	r1, [sp, #20]
 80090fe:	e7c4      	b.n	800908a <_vfiprintf_r+0x156>
 8009100:	fb0c 2101 	mla	r1, ip, r1, r2
 8009104:	4604      	mov	r4, r0
 8009106:	2301      	movs	r3, #1
 8009108:	e7f0      	b.n	80090ec <_vfiprintf_r+0x1b8>
 800910a:	ab03      	add	r3, sp, #12
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	462a      	mov	r2, r5
 8009110:	4b12      	ldr	r3, [pc, #72]	@ (800915c <_vfiprintf_r+0x228>)
 8009112:	a904      	add	r1, sp, #16
 8009114:	4630      	mov	r0, r6
 8009116:	f7fb ff93 	bl	8005040 <_printf_float>
 800911a:	4607      	mov	r7, r0
 800911c:	1c78      	adds	r0, r7, #1
 800911e:	d1d6      	bne.n	80090ce <_vfiprintf_r+0x19a>
 8009120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009122:	07d9      	lsls	r1, r3, #31
 8009124:	d405      	bmi.n	8009132 <_vfiprintf_r+0x1fe>
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	059a      	lsls	r2, r3, #22
 800912a:	d402      	bmi.n	8009132 <_vfiprintf_r+0x1fe>
 800912c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800912e:	f7fc fed9 	bl	8005ee4 <__retarget_lock_release_recursive>
 8009132:	89ab      	ldrh	r3, [r5, #12]
 8009134:	065b      	lsls	r3, r3, #25
 8009136:	f53f af1f 	bmi.w	8008f78 <_vfiprintf_r+0x44>
 800913a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800913c:	e71e      	b.n	8008f7c <_vfiprintf_r+0x48>
 800913e:	ab03      	add	r3, sp, #12
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	462a      	mov	r2, r5
 8009144:	4b05      	ldr	r3, [pc, #20]	@ (800915c <_vfiprintf_r+0x228>)
 8009146:	a904      	add	r1, sp, #16
 8009148:	4630      	mov	r0, r6
 800914a:	f7fc fa01 	bl	8005550 <_printf_i>
 800914e:	e7e4      	b.n	800911a <_vfiprintf_r+0x1e6>
 8009150:	08009581 	.word	0x08009581
 8009154:	0800958b 	.word	0x0800958b
 8009158:	08005041 	.word	0x08005041
 800915c:	08008f11 	.word	0x08008f11
 8009160:	08009587 	.word	0x08009587

08009164 <__swbuf_r>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	460e      	mov	r6, r1
 8009168:	4614      	mov	r4, r2
 800916a:	4605      	mov	r5, r0
 800916c:	b118      	cbz	r0, 8009176 <__swbuf_r+0x12>
 800916e:	6a03      	ldr	r3, [r0, #32]
 8009170:	b90b      	cbnz	r3, 8009176 <__swbuf_r+0x12>
 8009172:	f7fc fd9d 	bl	8005cb0 <__sinit>
 8009176:	69a3      	ldr	r3, [r4, #24]
 8009178:	60a3      	str	r3, [r4, #8]
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	071a      	lsls	r2, r3, #28
 800917e:	d501      	bpl.n	8009184 <__swbuf_r+0x20>
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	b943      	cbnz	r3, 8009196 <__swbuf_r+0x32>
 8009184:	4621      	mov	r1, r4
 8009186:	4628      	mov	r0, r5
 8009188:	f000 f82a 	bl	80091e0 <__swsetup_r>
 800918c:	b118      	cbz	r0, 8009196 <__swbuf_r+0x32>
 800918e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009192:	4638      	mov	r0, r7
 8009194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	6922      	ldr	r2, [r4, #16]
 800919a:	1a98      	subs	r0, r3, r2
 800919c:	6963      	ldr	r3, [r4, #20]
 800919e:	b2f6      	uxtb	r6, r6
 80091a0:	4283      	cmp	r3, r0
 80091a2:	4637      	mov	r7, r6
 80091a4:	dc05      	bgt.n	80091b2 <__swbuf_r+0x4e>
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	f7ff fa45 	bl	8008638 <_fflush_r>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d1ed      	bne.n	800918e <__swbuf_r+0x2a>
 80091b2:	68a3      	ldr	r3, [r4, #8]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	60a3      	str	r3, [r4, #8]
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	6022      	str	r2, [r4, #0]
 80091be:	701e      	strb	r6, [r3, #0]
 80091c0:	6962      	ldr	r2, [r4, #20]
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d004      	beq.n	80091d2 <__swbuf_r+0x6e>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	07db      	lsls	r3, r3, #31
 80091cc:	d5e1      	bpl.n	8009192 <__swbuf_r+0x2e>
 80091ce:	2e0a      	cmp	r6, #10
 80091d0:	d1df      	bne.n	8009192 <__swbuf_r+0x2e>
 80091d2:	4621      	mov	r1, r4
 80091d4:	4628      	mov	r0, r5
 80091d6:	f7ff fa2f 	bl	8008638 <_fflush_r>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0d9      	beq.n	8009192 <__swbuf_r+0x2e>
 80091de:	e7d6      	b.n	800918e <__swbuf_r+0x2a>

080091e0 <__swsetup_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4b29      	ldr	r3, [pc, #164]	@ (8009288 <__swsetup_r+0xa8>)
 80091e4:	4605      	mov	r5, r0
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	460c      	mov	r4, r1
 80091ea:	b118      	cbz	r0, 80091f4 <__swsetup_r+0x14>
 80091ec:	6a03      	ldr	r3, [r0, #32]
 80091ee:	b90b      	cbnz	r3, 80091f4 <__swsetup_r+0x14>
 80091f0:	f7fc fd5e 	bl	8005cb0 <__sinit>
 80091f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f8:	0719      	lsls	r1, r3, #28
 80091fa:	d422      	bmi.n	8009242 <__swsetup_r+0x62>
 80091fc:	06da      	lsls	r2, r3, #27
 80091fe:	d407      	bmi.n	8009210 <__swsetup_r+0x30>
 8009200:	2209      	movs	r2, #9
 8009202:	602a      	str	r2, [r5, #0]
 8009204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009208:	81a3      	strh	r3, [r4, #12]
 800920a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800920e:	e033      	b.n	8009278 <__swsetup_r+0x98>
 8009210:	0758      	lsls	r0, r3, #29
 8009212:	d512      	bpl.n	800923a <__swsetup_r+0x5a>
 8009214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009216:	b141      	cbz	r1, 800922a <__swsetup_r+0x4a>
 8009218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800921c:	4299      	cmp	r1, r3
 800921e:	d002      	beq.n	8009226 <__swsetup_r+0x46>
 8009220:	4628      	mov	r0, r5
 8009222:	f7fd fc4f 	bl	8006ac4 <_free_r>
 8009226:	2300      	movs	r3, #0
 8009228:	6363      	str	r3, [r4, #52]	@ 0x34
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	2300      	movs	r3, #0
 8009234:	6063      	str	r3, [r4, #4]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f043 0308 	orr.w	r3, r3, #8
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	6923      	ldr	r3, [r4, #16]
 8009244:	b94b      	cbnz	r3, 800925a <__swsetup_r+0x7a>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800924c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009250:	d003      	beq.n	800925a <__swsetup_r+0x7a>
 8009252:	4621      	mov	r1, r4
 8009254:	4628      	mov	r0, r5
 8009256:	f000 f883 	bl	8009360 <__smakebuf_r>
 800925a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800925e:	f013 0201 	ands.w	r2, r3, #1
 8009262:	d00a      	beq.n	800927a <__swsetup_r+0x9a>
 8009264:	2200      	movs	r2, #0
 8009266:	60a2      	str	r2, [r4, #8]
 8009268:	6962      	ldr	r2, [r4, #20]
 800926a:	4252      	negs	r2, r2
 800926c:	61a2      	str	r2, [r4, #24]
 800926e:	6922      	ldr	r2, [r4, #16]
 8009270:	b942      	cbnz	r2, 8009284 <__swsetup_r+0xa4>
 8009272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009276:	d1c5      	bne.n	8009204 <__swsetup_r+0x24>
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	0799      	lsls	r1, r3, #30
 800927c:	bf58      	it	pl
 800927e:	6962      	ldrpl	r2, [r4, #20]
 8009280:	60a2      	str	r2, [r4, #8]
 8009282:	e7f4      	b.n	800926e <__swsetup_r+0x8e>
 8009284:	2000      	movs	r0, #0
 8009286:	e7f7      	b.n	8009278 <__swsetup_r+0x98>
 8009288:	20000018 	.word	0x20000018

0800928c <_raise_r>:
 800928c:	291f      	cmp	r1, #31
 800928e:	b538      	push	{r3, r4, r5, lr}
 8009290:	4605      	mov	r5, r0
 8009292:	460c      	mov	r4, r1
 8009294:	d904      	bls.n	80092a0 <_raise_r+0x14>
 8009296:	2316      	movs	r3, #22
 8009298:	6003      	str	r3, [r0, #0]
 800929a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092a2:	b112      	cbz	r2, 80092aa <_raise_r+0x1e>
 80092a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092a8:	b94b      	cbnz	r3, 80092be <_raise_r+0x32>
 80092aa:	4628      	mov	r0, r5
 80092ac:	f000 f830 	bl	8009310 <_getpid_r>
 80092b0:	4622      	mov	r2, r4
 80092b2:	4601      	mov	r1, r0
 80092b4:	4628      	mov	r0, r5
 80092b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ba:	f000 b817 	b.w	80092ec <_kill_r>
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d00a      	beq.n	80092d8 <_raise_r+0x4c>
 80092c2:	1c59      	adds	r1, r3, #1
 80092c4:	d103      	bne.n	80092ce <_raise_r+0x42>
 80092c6:	2316      	movs	r3, #22
 80092c8:	6003      	str	r3, [r0, #0]
 80092ca:	2001      	movs	r0, #1
 80092cc:	e7e7      	b.n	800929e <_raise_r+0x12>
 80092ce:	2100      	movs	r1, #0
 80092d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092d4:	4620      	mov	r0, r4
 80092d6:	4798      	blx	r3
 80092d8:	2000      	movs	r0, #0
 80092da:	e7e0      	b.n	800929e <_raise_r+0x12>

080092dc <raise>:
 80092dc:	4b02      	ldr	r3, [pc, #8]	@ (80092e8 <raise+0xc>)
 80092de:	4601      	mov	r1, r0
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	f7ff bfd3 	b.w	800928c <_raise_r>
 80092e6:	bf00      	nop
 80092e8:	20000018 	.word	0x20000018

080092ec <_kill_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d07      	ldr	r5, [pc, #28]	@ (800930c <_kill_r+0x20>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	4611      	mov	r1, r2
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	f7f7 ff0e 	bl	800111a <_kill>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	d102      	bne.n	8009308 <_kill_r+0x1c>
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	b103      	cbz	r3, 8009308 <_kill_r+0x1c>
 8009306:	6023      	str	r3, [r4, #0]
 8009308:	bd38      	pop	{r3, r4, r5, pc}
 800930a:	bf00      	nop
 800930c:	20000b3c 	.word	0x20000b3c

08009310 <_getpid_r>:
 8009310:	f7f7 befb 	b.w	800110a <_getpid>

08009314 <__swhatbuf_r>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	460c      	mov	r4, r1
 8009318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931c:	2900      	cmp	r1, #0
 800931e:	b096      	sub	sp, #88	@ 0x58
 8009320:	4615      	mov	r5, r2
 8009322:	461e      	mov	r6, r3
 8009324:	da0d      	bge.n	8009342 <__swhatbuf_r+0x2e>
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800932c:	f04f 0100 	mov.w	r1, #0
 8009330:	bf14      	ite	ne
 8009332:	2340      	movne	r3, #64	@ 0x40
 8009334:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009338:	2000      	movs	r0, #0
 800933a:	6031      	str	r1, [r6, #0]
 800933c:	602b      	str	r3, [r5, #0]
 800933e:	b016      	add	sp, #88	@ 0x58
 8009340:	bd70      	pop	{r4, r5, r6, pc}
 8009342:	466a      	mov	r2, sp
 8009344:	f000 f848 	bl	80093d8 <_fstat_r>
 8009348:	2800      	cmp	r0, #0
 800934a:	dbec      	blt.n	8009326 <__swhatbuf_r+0x12>
 800934c:	9901      	ldr	r1, [sp, #4]
 800934e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009352:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009356:	4259      	negs	r1, r3
 8009358:	4159      	adcs	r1, r3
 800935a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800935e:	e7eb      	b.n	8009338 <__swhatbuf_r+0x24>

08009360 <__smakebuf_r>:
 8009360:	898b      	ldrh	r3, [r1, #12]
 8009362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009364:	079d      	lsls	r5, r3, #30
 8009366:	4606      	mov	r6, r0
 8009368:	460c      	mov	r4, r1
 800936a:	d507      	bpl.n	800937c <__smakebuf_r+0x1c>
 800936c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	6123      	str	r3, [r4, #16]
 8009374:	2301      	movs	r3, #1
 8009376:	6163      	str	r3, [r4, #20]
 8009378:	b003      	add	sp, #12
 800937a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800937c:	ab01      	add	r3, sp, #4
 800937e:	466a      	mov	r2, sp
 8009380:	f7ff ffc8 	bl	8009314 <__swhatbuf_r>
 8009384:	9f00      	ldr	r7, [sp, #0]
 8009386:	4605      	mov	r5, r0
 8009388:	4639      	mov	r1, r7
 800938a:	4630      	mov	r0, r6
 800938c:	f7fd fc0e 	bl	8006bac <_malloc_r>
 8009390:	b948      	cbnz	r0, 80093a6 <__smakebuf_r+0x46>
 8009392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009396:	059a      	lsls	r2, r3, #22
 8009398:	d4ee      	bmi.n	8009378 <__smakebuf_r+0x18>
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	f043 0302 	orr.w	r3, r3, #2
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	e7e2      	b.n	800936c <__smakebuf_r+0xc>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	6020      	str	r0, [r4, #0]
 80093aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	9b01      	ldr	r3, [sp, #4]
 80093b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093b6:	b15b      	cbz	r3, 80093d0 <__smakebuf_r+0x70>
 80093b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093bc:	4630      	mov	r0, r6
 80093be:	f000 f81d 	bl	80093fc <_isatty_r>
 80093c2:	b128      	cbz	r0, 80093d0 <__smakebuf_r+0x70>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f023 0303 	bic.w	r3, r3, #3
 80093ca:	f043 0301 	orr.w	r3, r3, #1
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	431d      	orrs	r5, r3
 80093d4:	81a5      	strh	r5, [r4, #12]
 80093d6:	e7cf      	b.n	8009378 <__smakebuf_r+0x18>

080093d8 <_fstat_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d07      	ldr	r5, [pc, #28]	@ (80093f8 <_fstat_r+0x20>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	4611      	mov	r1, r2
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	f7f7 fef8 	bl	80011da <_fstat>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	d102      	bne.n	80093f4 <_fstat_r+0x1c>
 80093ee:	682b      	ldr	r3, [r5, #0]
 80093f0:	b103      	cbz	r3, 80093f4 <_fstat_r+0x1c>
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	bf00      	nop
 80093f8:	20000b3c 	.word	0x20000b3c

080093fc <_isatty_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4d06      	ldr	r5, [pc, #24]	@ (8009418 <_isatty_r+0x1c>)
 8009400:	2300      	movs	r3, #0
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	f7f7 fef7 	bl	80011fa <_isatty>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d102      	bne.n	8009416 <_isatty_r+0x1a>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	b103      	cbz	r3, 8009416 <_isatty_r+0x1a>
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	20000b3c 	.word	0x20000b3c

0800941c <_init>:
 800941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941e:	bf00      	nop
 8009420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009422:	bc08      	pop	{r3}
 8009424:	469e      	mov	lr, r3
 8009426:	4770      	bx	lr

08009428 <_fini>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	bf00      	nop
 800942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942e:	bc08      	pop	{r3}
 8009430:	469e      	mov	lr, r3
 8009432:	4770      	bx	lr
